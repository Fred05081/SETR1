
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001ea0 	.word	0x20001ea0
}
   4:	00001fa1 	.word	0x00001fa1
   8:	00008c3f 	.word	0x00008c3f
   c:	00001f8d 	.word	0x00001f8d
  10:	00001f8d 	.word	0x00001f8d
  14:	00001f8d 	.word	0x00001f8d
  18:	00001f8d 	.word	0x00001f8d
	...
  2c:	00001da9 	.word	0x00001da9
  30:	00001f8d 	.word	0x00001f8d
  34:	00000000 	.word	0x00000000
  38:	00001d55 	.word	0x00001d55
  3c:	00001f8d 	.word	0x00001f8d

00000040 <_irq_vector_table>:
  40:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  50:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  60:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  70:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  80:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  90:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  a0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  b0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  c0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  d0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  e0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  f0:	00001d0d 00001d0d 00001d0d 00001d0d     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x5a>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x1c8>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x1c8>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x1cc>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x1cc>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x96>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0x28>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0x26>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x1f4>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x50>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x4e>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x1fc>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x70>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x1c2>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x110>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x82>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x1f0>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0xe0>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x1ec>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x1ec>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x108>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <__data_size+0x1e4>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x1e4>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x2>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x162>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <__data_size+0x1e8>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x1e8>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x18c>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <__data_size+0x1e0>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x1e0>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x1d4>
     38c:	d016      	beq.n	3bc <__data_size+0x1d0>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x1bc>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x1a2>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x1a2>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x18c>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x108>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x162>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0xe0>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x8c>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0x28>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x50>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b08d      	sub	sp, #52	; 0x34
   /* Local variables */
    int Array_dados[len_dados]={0};
     3f8:	2224      	movs	r2, #36	; 0x24
     3fa:	2100      	movs	r1, #0
     3fc:	a803      	add	r0, sp, #12
     3fe:	f008 fc4f 	bl	8ca0 <memset>
    int k=0; 
    struct data_item_t *data_ab;
    struct data_item_t data_bc;
    

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     402:	481d      	ldr	r0, [pc, #116]	; (478 <CONFIG_FLASH_SIZE+0x78>)
		/* coverity[OVERRUN] */
		return (void *) arch_syscall_invoke3(*(uintptr_t *)&queue, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
     404:	4f1d      	ldr	r7, [pc, #116]	; (47c <CONFIG_FLASH_SIZE+0x7c>)
            media_filtered=somador_2/contador;
        else 
            media_filtered = 0;

        data_bc.data=media;
        k_fifo_put(&fifo_bc, &data_bc);
     406:	4e1e      	ldr	r6, [pc, #120]	; (480 <CONFIG_FLASH_SIZE+0x80>)
        printk("Thread B set fifo bc value to: %d \n",data_bc.data);     
     408:	4d1e      	ldr	r5, [pc, #120]	; (484 <CONFIG_FLASH_SIZE+0x84>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     40a:	f008 fbf2 	bl	8bf2 <printk>
    int k=0; 
     40e:	2400      	movs	r4, #0
     410:	f04f 32ff 	mov.w	r2, #4294967295
     414:	f04f 33ff 	mov.w	r3, #4294967295
     418:	4638      	mov	r0, r7
     41a:	f005 fb07 	bl	5a2c <z_impl_k_queue_get>
        Array_dados[(k+1)%10]= Array_dados[(k)%10];
     41e:	210a      	movs	r1, #10
        Array_dados[0]=data_ab->data ;
     420:	8883      	ldrh	r3, [r0, #4]
     422:	9302      	str	r3, [sp, #8]
        Array_dados[(k+1)%10]= Array_dados[(k)%10];
     424:	fb94 f2f1 	sdiv	r2, r4, r1
     428:	ab0c      	add	r3, sp, #48	; 0x30
     42a:	fb01 4212 	mls	r2, r1, r2, r4
     42e:	3401      	adds	r4, #1
     430:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     434:	fb94 f3f1 	sdiv	r3, r4, r1
     438:	fb01 4313 	mls	r3, r1, r3, r4
     43c:	a90c      	add	r1, sp, #48	; 0x30
     43e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     442:	f852 2c28 	ldr.w	r2, [r2, #-40]
     446:	f843 2c28 	str.w	r2, [r3, #-40]
       for(int i = 0; i < len_dados; i++){
     44a:	2200      	movs	r2, #0
     44c:	a902      	add	r1, sp, #8
        int sumador=0,somador_2=0,media=0, media_filtered=0;
     44e:	4613      	mov	r3, r2
            if(Array_dados[i] != 0){
     450:	f851 0b04 	ldr.w	r0, [r1], #4
       for(int i = 0; i < len_dados; i++){
     454:	3201      	adds	r2, #1
     456:	2a0a      	cmp	r2, #10
                sumador = sumador + Array_dados[i];
     458:	4403      	add	r3, r0
       for(int i = 0; i < len_dados; i++){
     45a:	d1f9      	bne.n	450 <CONFIG_FLASH_SIZE+0x50>
        media=sumador/len_dados;
     45c:	fb93 f3f2 	sdiv	r3, r3, r2
        k_fifo_put(&fifo_bc, &data_bc);
     460:	4669      	mov	r1, sp
     462:	4630      	mov	r0, r6
        data_bc.data=media;
     464:	f8ad 3004 	strh.w	r3, [sp, #4]
        k_fifo_put(&fifo_bc, &data_bc);
     468:	f008 ff35 	bl	92d6 <k_queue_append>
        printk("Thread B set fifo bc value to: %d \n",data_bc.data);     
     46c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
     470:	4628      	mov	r0, r5
     472:	f008 fbbe 	bl	8bf2 <printk>
    while(1) {
     476:	e7cb      	b.n	410 <CONFIG_FLASH_SIZE+0x10>
     478:	00009924 	.word	0x00009924
     47c:	200005bc 	.word	0x200005bc
     480:	200005d8 	.word	0x200005d8
     484:	0000995e 	.word	0x0000995e

00000488 <thread_C_code>:
  }
}    
   

void thread_C_code(void *argA , void *argB, void *argC)
{
     488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Local variables */
    long int nact = 0;
    struct data_item_t *data_bc;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     48c:	4848      	ldr	r0, [pc, #288]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
{
     48e:	b089      	sub	sp, #36	; 0x24
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     490:	f008 fbaf 	bl	8bf2 <printk>
    const struct device *pwm0_dev;          /** Pointer to PWM device structure */
    int ret=0;                              /** Generic return value variable */
    
    unsigned int pwmPeriod_us = 1000;       /** PWM period in us */

    printk("Thread C init (sporadic, waits on a semaphore by task B)\n");
     494:	4847      	ldr	r0, [pc, #284]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     496:	f008 fbac 	bl	8bf2 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     49a:	4847      	ldr	r0, [pc, #284]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     49c:	f004 fd3a 	bl	4f14 <z_impl_device_get_binding>
    
    /** Bind to GPIO 0 and PWM0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    if (gpio0_dev == NULL) {
     4a0:	b928      	cbnz	r0, 4ae <thread_C_code+0x26>
        printk("Error: Failed to bind to GPIO0\n\r");        
     4a2:	4846      	ldr	r0, [pc, #280]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
	return;
    }
        
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
	printk("Error: Failed to bind to PWM0\n r");
     4a4:	f008 fba5 	bl	8bf2 <printk>
        }
                       
        printk("Task C - PWM: %u % \n", (unsigned int)(((pwmPeriod_us*data_bc->data)/1023)/10));   /** Prints dutty-cycle*/
            
  }
}
     4a8:	b009      	add	sp, #36	; 0x24
     4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4ae:	4844      	ldr	r0, [pc, #272]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     4b0:	f004 fd30 	bl	4f14 <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
     4b4:	4605      	mov	r5, r0
     4b6:	b908      	cbnz	r0, 4bc <thread_C_code+0x34>
	printk("Error: Failed to bind to PWM0\n r");
     4b8:	4842      	ldr	r0, [pc, #264]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     4ba:	e7f3      	b.n	4a4 <thread_C_code+0x1c>
    long int nact = 0;
     4bc:	f04f 0900 	mov.w	r9, #0
     4c0:	f04f 32ff 	mov.w	r2, #4294967295
     4c4:	f04f 33ff 	mov.w	r3, #4294967295
     4c8:	483f      	ldr	r0, [pc, #252]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     4ca:	f005 faaf 	bl	5a2c <z_impl_k_queue_get>
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     4ce:	f109 0901 	add.w	r9, r9, #1
     4d2:	4680      	mov	r8, r0
	return z_impl_k_uptime_ticks();
     4d4:	f008 ff49 	bl	936a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     4d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     4dc:	460b      	mov	r3, r1
     4de:	fba0 0104 	umull	r0, r1, r0, r4
     4e2:	fb04 1103 	mla	r1, r4, r3, r1
     4e6:	0bc2      	lsrs	r2, r0, #15
     4e8:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     4ec:	0bcb      	lsrs	r3, r1, #15
     4ee:	4837      	ldr	r0, [pc, #220]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     4f0:	4649      	mov	r1, r9
     4f2:	f008 fb7e 	bl	8bf2 <printk>
        printk("Task C read bc value: %d\n",data_bc->data);
     4f6:	f8b8 1004 	ldrh.w	r1, [r8, #4]
     4fa:	4835      	ldr	r0, [pc, #212]	; (5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>)
     4fc:	f008 fb79 	bl	8bf2 <printk>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*data_bc->data)/1023), PWM_POLARITY_NORMAL);
     500:	f8b8 3004 	ldrh.w	r3, [r8, #4]
        ret = pwm_pin_set_usec(pwm0_dev, BOARDLED1,
     504:	f240 32ff 	movw	r2, #1023	; 0x3ff
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*data_bc->data)/1023), PWM_POLARITY_NORMAL);
     508:	4363      	muls	r3, r4
        ret = pwm_pin_set_usec(pwm0_dev, BOARDLED1,
     50a:	fbb3 faf2 	udiv	sl, r3, r2
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     50e:	68ab      	ldr	r3, [r5, #8]
     510:	aa06      	add	r2, sp, #24
     512:	685b      	ldr	r3, [r3, #4]
     514:	210d      	movs	r1, #13
     516:	4628      	mov	r0, r5
     518:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     51a:	9003      	str	r0, [sp, #12]
     51c:	b128      	cbz	r0, 52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
		return -EIO;
     51e:	f06f 0104 	mvn.w	r1, #4
            printk("Error %d: failed to set pulse width\n", ret);
     522:	482c      	ldr	r0, [pc, #176]	; (5d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xec>)
     524:	f008 fb65 	bl	8bf2 <printk>
            return;
     528:	e7be      	b.n	4a8 <thread_C_code+0x20>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     52a:	9b06      	ldr	r3, [sp, #24]
     52c:	f8dd b01c 	ldr.w	fp, [sp, #28]
     530:	4a29      	ldr	r2, [pc, #164]	; (5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>)
     532:	9304      	str	r3, [sp, #16]
     534:	fba3 6704 	umull	r6, r7, r3, r4
     538:	fb04 770b 	mla	r7, r4, fp, r7
     53c:	2300      	movs	r3, #0
     53e:	4630      	mov	r0, r6
     540:	4639      	mov	r1, r7
     542:	f7ff fddd 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     546:	4b25      	ldr	r3, [pc, #148]	; (5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     548:	9005      	str	r0, [sp, #20]
	if (period_cycles >= ((uint64_t)1 << 32)) {
     54a:	f04f 32ff 	mov.w	r2, #4294967295
     54e:	42bb      	cmp	r3, r7
     550:	bf08      	it	eq
     552:	42b2      	cmpeq	r2, r6
     554:	d202      	bcs.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
		return -ENOTSUP;
     556:	f06f 0185 	mvn.w	r1, #133	; 0x85
     55a:	e7e2      	b.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     55c:	9b04      	ldr	r3, [sp, #16]
     55e:	4a1e      	ldr	r2, [pc, #120]	; (5d8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf0>)
     560:	fbaa 6703 	umull	r6, r7, sl, r3
     564:	fb0a 770b 	mla	r7, sl, fp, r7
     568:	2300      	movs	r3, #0
     56a:	4630      	mov	r0, r6
     56c:	4639      	mov	r1, r7
     56e:	f7ff fdc7 	bl	100 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     572:	4a1a      	ldr	r2, [pc, #104]	; (5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>)
     574:	f04f 31ff 	mov.w	r1, #4294967295
     578:	42ba      	cmp	r2, r7
     57a:	bf08      	it	eq
     57c:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     57e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     580:	d3e9      	bcc.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
	return api->pin_set(dev, pwm, period, pulse, flags);
     582:	68aa      	ldr	r2, [r5, #8]
     584:	9903      	ldr	r1, [sp, #12]
     586:	9100      	str	r1, [sp, #0]
     588:	6816      	ldr	r6, [r2, #0]
     58a:	9a05      	ldr	r2, [sp, #20]
     58c:	210d      	movs	r1, #13
     58e:	4628      	mov	r0, r5
     590:	47b0      	blx	r6
        if (ret) {
     592:	4601      	mov	r1, r0
     594:	2800      	cmp	r0, #0
     596:	d1c4      	bne.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
        printk("Task C - PWM: %u % \n", (unsigned int)(((pwmPeriod_us*data_bc->data)/1023)/10));   /** Prints dutty-cycle*/
     598:	f8b8 1004 	ldrh.w	r1, [r8, #4]
     59c:	4810      	ldr	r0, [pc, #64]	; (5e0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf8>)
     59e:	434c      	muls	r4, r1
     5a0:	f242 71f6 	movw	r1, #10230	; 0x27f6
     5a4:	fbb4 f1f1 	udiv	r1, r4, r1
     5a8:	f008 fb23 	bl	8bf2 <printk>
        data_bc = k_fifo_get(&fifo_bc, K_FOREVER);
     5ac:	e788      	b.n	4c0 <thread_C_code+0x38>
     5ae:	bf00      	nop
     5b0:	00009982 	.word	0x00009982
     5b4:	000099bc 	.word	0x000099bc
     5b8:	000099f6 	.word	0x000099f6
     5bc:	000099fd 	.word	0x000099fd
     5c0:	00009a1e 	.word	0x00009a1e
     5c4:	00009a24 	.word	0x00009a24
     5c8:	200005d8 	.word	0x200005d8
     5cc:	00009a45 	.word	0x00009a45
     5d0:	00009a7b 	.word	0x00009a7b
     5d4:	00009a95 	.word	0x00009a95
     5d8:	000f4240 	.word	0x000f4240
     5dc:	000f423f 	.word	0x000f423f
     5e0:	00009aba 	.word	0x00009aba

000005e4 <thread_A_code>:
{
     5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("Thread A init (periodic)\n");
     5e8:	484e      	ldr	r0, [pc, #312]	; (724 <thread_A_code+0x140>)
{
     5ea:	b089      	sub	sp, #36	; 0x24
    printk("Thread A init (periodic)\n");
     5ec:	f008 fb01 	bl	8bf2 <printk>
     5f0:	f008 febb 	bl	936a <z_impl_k_uptime_ticks>
     5f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5f8:	460a      	mov	r2, r1
     5fa:	fba0 0103 	umull	r0, r1, r0, r3
     5fe:	fb03 1102 	mla	r1, r3, r2, r1
     602:	0bc3      	lsrs	r3, r0, #15
     604:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     608:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + thread_A_period;
     60a:	f513 747a 	adds.w	r4, r3, #1000	; 0x3e8
     60e:	f142 0500 	adc.w	r5, r2, #0
     612:	4845      	ldr	r0, [pc, #276]	; (728 <thread_A_code+0x144>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     614:	4e45      	ldr	r6, [pc, #276]	; (72c <thread_A_code+0x148>)
     616:	f004 fc7d 	bl	4f14 <z_impl_device_get_binding>
     61a:	6030      	str	r0, [r6, #0]
    if (!adc_dev) {
     61c:	b910      	cbnz	r0, 624 <thread_A_code+0x40>
        printk("ADC device_get_binding() failed\n");
     61e:	4844      	ldr	r0, [pc, #272]	; (730 <thread_A_code+0x14c>)
     620:	f008 fae7 	bl	8bf2 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     624:	6830      	ldr	r0, [r6, #0]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     626:	6883      	ldr	r3, [r0, #8]
     628:	4942      	ldr	r1, [pc, #264]	; (734 <thread_A_code+0x150>)
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	4798      	blx	r3
    if (err) {
     62e:	4601      	mov	r1, r0
     630:	b110      	cbz	r0, 638 <thread_A_code+0x54>
        printk("adc_channel_setup() failed with error code %d\n", err);
     632:	4841      	ldr	r0, [pc, #260]	; (738 <thread_A_code+0x154>)
     634:	f008 fadd 	bl	8bf2 <printk>
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     638:	f8df a118 	ldr.w	sl, [pc, #280]	; 754 <thread_A_code+0x170>
	const struct adc_sequence sequence = {
     63c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 758 <thread_A_code+0x174>
{
     640:	f04f 0800 	mov.w	r8, #0
     644:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     648:	f108 0801 	add.w	r8, r8, #1
     64c:	f008 fe8d 	bl	936a <z_impl_k_uptime_ticks>
     650:	460b      	mov	r3, r1
     652:	fba0 0107 	umull	r0, r1, r0, r7
     656:	fb07 1103 	mla	r1, r7, r3, r1
     65a:	0bc2      	lsrs	r2, r0, #15
     65c:	0bcb      	lsrs	r3, r1, #15
     65e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     662:	4650      	mov	r0, sl
     664:	4641      	mov	r1, r8
     666:	f008 fac4 	bl	8bf2 <printk>
	const struct adc_sequence sequence = {
     66a:	2214      	movs	r2, #20
     66c:	2100      	movs	r1, #0
     66e:	a803      	add	r0, sp, #12
     670:	f008 fb16 	bl	8ca0 <memset>
     674:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     676:	6830      	ldr	r0, [r6, #0]
	const struct adc_sequence sequence = {
     678:	9306      	str	r3, [sp, #24]
     67a:	e9cd 3904 	strd	r3, r9, [sp, #16]
     67e:	230a      	movs	r3, #10
     680:	f88d 301c 	strb.w	r3, [sp, #28]
	if (adc_dev == NULL) {
     684:	bbb8      	cbnz	r0, 6f6 <thread_A_code+0x112>
            printk("adc_sample(): error, must bind to adc first \n\r");
     686:	482d      	ldr	r0, [pc, #180]	; (73c <thread_A_code+0x158>)
     688:	f008 fab3 	bl	8bf2 <printk>
            return -1;
     68c:	f04f 3bff 	mov.w	fp, #4294967295
            printk("adc_sample() failed with error code %d\n\r",err);
     690:	482b      	ldr	r0, [pc, #172]	; (740 <thread_A_code+0x15c>)
     692:	4659      	mov	r1, fp
     694:	f008 faad 	bl	8bf2 <printk>
        k_fifo_put(&fifo_ab, &data_ab);
     698:	a901      	add	r1, sp, #4
     69a:	482a      	ldr	r0, [pc, #168]	; (744 <thread_A_code+0x160>)
     69c:	f008 fe1b 	bl	92d6 <k_queue_append>
        printk("Thread A data in fifo_ab: %d\n",data_ab.data);  
     6a0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
     6a4:	4828      	ldr	r0, [pc, #160]	; (748 <thread_A_code+0x164>)
     6a6:	f008 faa4 	bl	8bf2 <printk>
     6aa:	f008 fe5e 	bl	936a <z_impl_k_uptime_ticks>
     6ae:	460b      	mov	r3, r1
     6b0:	fba0 0107 	umull	r0, r1, r0, r7
     6b4:	fb07 1103 	mla	r1, r7, r3, r1
     6b8:	0bc2      	lsrs	r2, r0, #15
     6ba:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     6be:	0bcb      	lsrs	r3, r1, #15
        if( fin_time < release_time) {
     6c0:	42a2      	cmp	r2, r4
     6c2:	eb73 0105 	sbcs.w	r1, r3, r5
     6c6:	dabf      	bge.n	648 <thread_A_code+0x64>
            k_msleep(release_time - fin_time);
     6c8:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     6cc:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
     6d0:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     6d4:	f240 30e7 	movw	r0, #999	; 0x3e7
     6d8:	2100      	movs	r1, #0
     6da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     6de:	2300      	movs	r3, #0
     6e0:	fbce 010c 	smlal	r0, r1, lr, ip
     6e4:	f7ff fd0c 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     6e8:	f006 face 	bl	6c88 <z_impl_k_sleep>
            release_time += thread_A_period;
     6ec:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     6f0:	f145 0500 	adc.w	r5, r5, #0
     6f4:	e7a8      	b.n	648 <thread_A_code+0x64>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     6f6:	6883      	ldr	r3, [r0, #8]
     6f8:	a903      	add	r1, sp, #12
     6fa:	685b      	ldr	r3, [r3, #4]
     6fc:	4798      	blx	r3
	if (ret) {
     6fe:	4683      	mov	fp, r0
     700:	b138      	cbz	r0, 712 <thread_A_code+0x12e>
            printk("adc_read() failed with code %d\n", ret);
     702:	4601      	mov	r1, r0
     704:	4811      	ldr	r0, [pc, #68]	; (74c <thread_A_code+0x168>)
     706:	f008 fa74 	bl	8bf2 <printk>
        if(err) {
     70a:	e7c1      	b.n	690 <thread_A_code+0xac>
                data_ab.data = adc_sample_buffer[0];
     70c:	f8ad 3008 	strh.w	r3, [sp, #8]
     710:	e7c2      	b.n	698 <thread_A_code+0xb4>
            if(adc_sample_buffer[0] > 1023) {
     712:	f8b9 3000 	ldrh.w	r3, [r9]
     716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     71a:	d3f7      	bcc.n	70c <thread_A_code+0x128>
                printk("adc reading out of range\n\r");
     71c:	480c      	ldr	r0, [pc, #48]	; (750 <thread_A_code+0x16c>)
     71e:	f008 fa68 	bl	8bf2 <printk>
     722:	e7b9      	b.n	698 <thread_A_code+0xb4>
     724:	00009acf 	.word	0x00009acf
     728:	00009ae9 	.word	0x00009ae9
     72c:	200005b8 	.word	0x200005b8
     730:	00009aef 	.word	0x00009aef
     734:	0000991c 	.word	0x0000991c
     738:	00009b10 	.word	0x00009b10
     73c:	00009b76 	.word	0x00009b76
     740:	00009bc5 	.word	0x00009bc5
     744:	200005bc 	.word	0x200005bc
     748:	00009c09 	.word	0x00009c09
     74c:	00009ba5 	.word	0x00009ba5
     750:	00009bee 	.word	0x00009bee
     754:	00009b3f 	.word	0x00009b3f
     758:	20000c78 	.word	0x20000c78

0000075c <main>:
void main(void) {
     75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     printk("\n\r IPC via FIFO example \n\r");
     760:	4821      	ldr	r0, [pc, #132]	; (7e8 <main+0x8c>)
void main(void) {
     762:	b088      	sub	sp, #32
     printk("\n\r IPC via FIFO example \n\r");
     764:	f008 fa45 	bl	8bf2 <printk>
	z_impl_k_queue_init(queue);
     768:	4820      	ldr	r0, [pc, #128]	; (7ec <main+0x90>)
     76a:	f008 fda7 	bl	92bc <z_impl_k_queue_init>
     76e:	4820      	ldr	r0, [pc, #128]	; (7f0 <main+0x94>)
     770:	f008 fda4 	bl	92bc <z_impl_k_queue_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     774:	2600      	movs	r6, #0
     776:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     778:	2400      	movs	r4, #0
     77a:	2501      	movs	r5, #1
     77c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     780:	e9cd 5403 	strd	r5, r4, [sp, #12]
     784:	e9cd 4401 	strd	r4, r4, [sp, #4]
     788:	4b1a      	ldr	r3, [pc, #104]	; (7f4 <main+0x98>)
     78a:	491b      	ldr	r1, [pc, #108]	; (7f8 <main+0x9c>)
     78c:	9400      	str	r4, [sp, #0]
     78e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     792:	481a      	ldr	r0, [pc, #104]	; (7fc <main+0xa0>)
     794:	f006 fd30 	bl	71f8 <z_impl_k_thread_create>
     798:	4b19      	ldr	r3, [pc, #100]	; (800 <CONFIG_ISR_STACK_SIZE>)
     79a:	6018      	str	r0, [r3, #0]
     79c:	4b19      	ldr	r3, [pc, #100]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     79e:	491a      	ldr	r1, [pc, #104]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7a0:	9400      	str	r4, [sp, #0]
     7a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
     7a6:	e9cd 5403 	strd	r5, r4, [sp, #12]
     7aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
     7ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
     7b2:	4816      	ldr	r0, [pc, #88]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     7b4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 81c <CONFIG_ISR_STACK_SIZE+0x1c>
     7b8:	f006 fd1e 	bl	71f8 <z_impl_k_thread_create>
     7bc:	f8c8 0000 	str.w	r0, [r8]
     7c0:	4b13      	ldr	r3, [pc, #76]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7c2:	4914      	ldr	r1, [pc, #80]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     7c4:	9400      	str	r4, [sp, #0]
     7c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
     7ca:	e9cd 5403 	strd	r5, r4, [sp, #12]
     7ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
     7d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     7d6:	4810      	ldr	r0, [pc, #64]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7d8:	f006 fd0e 	bl	71f8 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     7dc:	f8c8 0000 	str.w	r0, [r8]
} 
     7e0:	b008      	add	sp, #32
     7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7e6:	bf00      	nop
     7e8:	00009c27 	.word	0x00009c27
     7ec:	200005bc 	.word	0x200005bc
     7f0:	200005d8 	.word	0x200005d8
     7f4:	000005e5 	.word	0x000005e5
     7f8:	20000e40 	.word	0x20000e40
     7fc:	20000270 	.word	0x20000270
     800:	200005f4 	.word	0x200005f4
     804:	000003f5 	.word	0x000003f5
     808:	20001260 	.word	0x20001260
     80c:	200002f0 	.word	0x200002f0
     810:	00000489 	.word	0x00000489
     814:	20001680 	.word	0x20001680
     818:	20000370 	.word	0x20000370
     81c:	200005f8 	.word	0x200005f8

00000820 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     824:	b091      	sub	sp, #68	; 0x44
     826:	468b      	mov	fp, r1
     828:	9002      	str	r0, [sp, #8]
     82a:	4692      	mov	sl, r2
     82c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     82e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     830:	f89a 0000 	ldrb.w	r0, [sl]
     834:	b908      	cbnz	r0, 83a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     836:	4628      	mov	r0, r5
     838:	e35e      	b.n	ef8 <cbvprintf+0x6d8>
		if (*fp != '%') {
     83a:	2825      	cmp	r0, #37	; 0x25
     83c:	f10a 0701 	add.w	r7, sl, #1
     840:	d007      	beq.n	852 <cbvprintf+0x32>
			OUTC('%');
     842:	9b02      	ldr	r3, [sp, #8]
     844:	4659      	mov	r1, fp
     846:	4798      	blx	r3
     848:	2800      	cmp	r0, #0
     84a:	f2c0 8355 	blt.w	ef8 <cbvprintf+0x6d8>
     84e:	3501      	adds	r5, #1
			break;
     850:	e210      	b.n	c74 <cbvprintf+0x454>
		} state = {
     852:	2218      	movs	r2, #24
     854:	2100      	movs	r1, #0
     856:	a80a      	add	r0, sp, #40	; 0x28
     858:	f008 fa22 	bl	8ca0 <memset>
	if (*sp == '%') {
     85c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     860:	2b25      	cmp	r3, #37	; 0x25
     862:	d078      	beq.n	956 <cbvprintf+0x136>
     864:	2200      	movs	r2, #0
     866:	4694      	mov	ip, r2
     868:	4616      	mov	r6, r2
     86a:	4696      	mov	lr, r2
     86c:	4610      	mov	r0, r2
     86e:	4639      	mov	r1, r7
		switch (*sp) {
     870:	f817 3b01 	ldrb.w	r3, [r7], #1
     874:	2b2b      	cmp	r3, #43	; 0x2b
     876:	f000 809d 	beq.w	9b4 <cbvprintf+0x194>
     87a:	f200 8094 	bhi.w	9a6 <cbvprintf+0x186>
     87e:	2b20      	cmp	r3, #32
     880:	f000 809b 	beq.w	9ba <cbvprintf+0x19a>
     884:	2b23      	cmp	r3, #35	; 0x23
     886:	f000 809a 	beq.w	9be <cbvprintf+0x19e>
     88a:	b128      	cbz	r0, 898 <cbvprintf+0x78>
     88c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     890:	f040 0004 	orr.w	r0, r0, #4
     894:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     898:	f1be 0f00 	cmp.w	lr, #0
     89c:	d005      	beq.n	8aa <cbvprintf+0x8a>
     89e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     8a2:	f040 0008 	orr.w	r0, r0, #8
     8a6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     8aa:	b12e      	cbz	r6, 8b8 <cbvprintf+0x98>
     8ac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     8b0:	f040 0010 	orr.w	r0, r0, #16
     8b4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     8b8:	f1bc 0f00 	cmp.w	ip, #0
     8bc:	d005      	beq.n	8ca <cbvprintf+0xaa>
     8be:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     8c2:	f040 0020 	orr.w	r0, r0, #32
     8c6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     8ca:	b12a      	cbz	r2, 8d8 <cbvprintf+0xb8>
     8cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     8d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     8d8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8dc:	f002 0044 	and.w	r0, r2, #68	; 0x44
     8e0:	2844      	cmp	r0, #68	; 0x44
     8e2:	d103      	bne.n	8ec <cbvprintf+0xcc>
		conv->flag_zero = false;
     8e4:	f36f 1286 	bfc	r2, #6, #1
     8e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     8ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8f0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     8f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     8f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8fa:	d17b      	bne.n	9f4 <cbvprintf+0x1d4>
		conv->width_star = true;
     8fc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     900:	f042 0201 	orr.w	r2, r2, #1
     904:	1c4b      	adds	r3, r1, #1
     906:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     90a:	781a      	ldrb	r2, [r3, #0]
     90c:	2a2e      	cmp	r2, #46	; 0x2e
     90e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     912:	bf0c      	ite	eq
     914:	2101      	moveq	r1, #1
     916:	2100      	movne	r1, #0
     918:	f361 0241 	bfi	r2, r1, #1, #1
     91c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     920:	d174      	bne.n	a0c <cbvprintf+0x1ec>
	if (*sp == '*') {
     922:	785a      	ldrb	r2, [r3, #1]
     924:	2a2a      	cmp	r2, #42	; 0x2a
     926:	d06a      	beq.n	9fe <cbvprintf+0x1de>
     928:	3301      	adds	r3, #1
	size_t val = 0;
     92a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     92c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     92e:	4618      	mov	r0, r3
     930:	f810 2b01 	ldrb.w	r2, [r0], #1
     934:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     938:	2f09      	cmp	r7, #9
     93a:	f240 808e 	bls.w	a5a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     93e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     942:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     944:	f3c2 0040 	ubfx	r0, r2, #1, #1
     948:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     94c:	f361 0241 	bfi	r2, r1, #1, #1
     950:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     954:	e05a      	b.n	a0c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     956:	f10a 0702 	add.w	r7, sl, #2
     95a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     95e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     962:	07d9      	lsls	r1, r3, #31
     964:	f140 8149 	bpl.w	bfa <cbvprintf+0x3da>
			width = va_arg(ap, int);
     968:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     96c:	f1b9 0f00 	cmp.w	r9, #0
     970:	da07      	bge.n	982 <cbvprintf+0x162>
				conv->flag_dash = true;
     972:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     976:	f042 0204 	orr.w	r2, r2, #4
     97a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     97e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     982:	075a      	lsls	r2, r3, #29
     984:	f140 8142 	bpl.w	c0c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     988:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     98c:	f1b8 0f00 	cmp.w	r8, #0
     990:	f280 8141 	bge.w	c16 <cbvprintf+0x3f6>
				conv->prec_present = false;
     994:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     998:	f36f 0341 	bfc	r3, #1, #1
     99c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     9a0:	f04f 38ff 	mov.w	r8, #4294967295
     9a4:	e137      	b.n	c16 <cbvprintf+0x3f6>
		switch (*sp) {
     9a6:	2b2d      	cmp	r3, #45	; 0x2d
     9a8:	d00c      	beq.n	9c4 <cbvprintf+0x1a4>
     9aa:	2b30      	cmp	r3, #48	; 0x30
     9ac:	f47f af6d 	bne.w	88a <cbvprintf+0x6a>
			conv->flag_zero = true;
     9b0:	2201      	movs	r2, #1
	} while (loop);
     9b2:	e75c      	b.n	86e <cbvprintf+0x4e>
			conv->flag_plus = true;
     9b4:	f04f 0e01 	mov.w	lr, #1
     9b8:	e759      	b.n	86e <cbvprintf+0x4e>
			conv->flag_space = true;
     9ba:	2601      	movs	r6, #1
     9bc:	e757      	b.n	86e <cbvprintf+0x4e>
			conv->flag_hash = true;
     9be:	f04f 0c01 	mov.w	ip, #1
     9c2:	e754      	b.n	86e <cbvprintf+0x4e>
		switch (*sp) {
     9c4:	2001      	movs	r0, #1
     9c6:	e752      	b.n	86e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     9c8:	fb0c 0202 	mla	r2, ip, r2, r0
     9cc:	3a30      	subs	r2, #48	; 0x30
     9ce:	4633      	mov	r3, r6
     9d0:	461e      	mov	r6, r3
     9d2:	f816 0b01 	ldrb.w	r0, [r6], #1
     9d6:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     9da:	2f09      	cmp	r7, #9
     9dc:	d9f4      	bls.n	9c8 <cbvprintf+0x1a8>
	if (sp != wp) {
     9de:	4299      	cmp	r1, r3
     9e0:	d093      	beq.n	90a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     9e2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     9e6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     9e8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9ea:	f362 0141 	bfi	r1, r2, #1, #1
     9ee:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     9f2:	e78a      	b.n	90a <cbvprintf+0xea>
     9f4:	460b      	mov	r3, r1
	size_t val = 0;
     9f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9f8:	f04f 0c0a 	mov.w	ip, #10
     9fc:	e7e8      	b.n	9d0 <cbvprintf+0x1b0>
		conv->prec_star = true;
     9fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a02:	f042 0204 	orr.w	r2, r2, #4
     a06:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     a0a:	3302      	adds	r3, #2
	switch (*sp) {
     a0c:	461f      	mov	r7, r3
     a0e:	f817 2b01 	ldrb.w	r2, [r7], #1
     a12:	2a6c      	cmp	r2, #108	; 0x6c
     a14:	d041      	beq.n	a9a <cbvprintf+0x27a>
     a16:	d825      	bhi.n	a64 <cbvprintf+0x244>
     a18:	2a68      	cmp	r2, #104	; 0x68
     a1a:	d02b      	beq.n	a74 <cbvprintf+0x254>
     a1c:	2a6a      	cmp	r2, #106	; 0x6a
     a1e:	d046      	beq.n	aae <cbvprintf+0x28e>
     a20:	2a4c      	cmp	r2, #76	; 0x4c
     a22:	d04c      	beq.n	abe <cbvprintf+0x29e>
     a24:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     a26:	f817 2b01 	ldrb.w	r2, [r7], #1
     a2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a2e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     a32:	2a78      	cmp	r2, #120	; 0x78
     a34:	f200 80d9 	bhi.w	bea <cbvprintf+0x3ca>
     a38:	2a57      	cmp	r2, #87	; 0x57
     a3a:	d84d      	bhi.n	ad8 <cbvprintf+0x2b8>
     a3c:	2a41      	cmp	r2, #65	; 0x41
     a3e:	d003      	beq.n	a48 <cbvprintf+0x228>
     a40:	3a45      	subs	r2, #69	; 0x45
     a42:	2a02      	cmp	r2, #2
     a44:	f200 80d1 	bhi.w	bea <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     a48:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     a4c:	2204      	movs	r2, #4
     a4e:	f362 0302 	bfi	r3, r2, #0, #3
     a52:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     a56:	2301      	movs	r3, #1
			break;
     a58:	e09e      	b.n	b98 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     a5a:	fb06 2101 	mla	r1, r6, r1, r2
     a5e:	3930      	subs	r1, #48	; 0x30
     a60:	4603      	mov	r3, r0
     a62:	e764      	b.n	92e <cbvprintf+0x10e>
	switch (*sp) {
     a64:	2a74      	cmp	r2, #116	; 0x74
     a66:	d026      	beq.n	ab6 <cbvprintf+0x296>
     a68:	2a7a      	cmp	r2, #122	; 0x7a
     a6a:	d1db      	bne.n	a24 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     a6c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a70:	2206      	movs	r2, #6
     a72:	e00d      	b.n	a90 <cbvprintf+0x270>
		if (*++sp == 'h') {
     a74:	785a      	ldrb	r2, [r3, #1]
     a76:	2a68      	cmp	r2, #104	; 0x68
     a78:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a7c:	d106      	bne.n	a8c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     a7e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a80:	f361 02c6 	bfi	r2, r1, #3, #4
     a84:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     a88:	1c9f      	adds	r7, r3, #2
     a8a:	e7cc      	b.n	a26 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     a8c:	4613      	mov	r3, r2
     a8e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a90:	f362 03c6 	bfi	r3, r2, #3, #4
     a94:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     a98:	e7c5      	b.n	a26 <cbvprintf+0x206>
		if (*++sp == 'l') {
     a9a:	785a      	ldrb	r2, [r3, #1]
     a9c:	2a6c      	cmp	r2, #108	; 0x6c
     a9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     aa2:	d101      	bne.n	aa8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     aa4:	2104      	movs	r1, #4
     aa6:	e7eb      	b.n	a80 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     aa8:	4613      	mov	r3, r2
     aaa:	2203      	movs	r2, #3
     aac:	e7f0      	b.n	a90 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     aae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ab2:	2205      	movs	r2, #5
     ab4:	e7ec      	b.n	a90 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     ab6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     aba:	2207      	movs	r2, #7
     abc:	e7e8      	b.n	a90 <cbvprintf+0x270>
		conv->unsupported = true;
     abe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     ac2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     ac6:	f023 0302 	bic.w	r3, r3, #2
     aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     ace:	f043 0302 	orr.w	r3, r3, #2
     ad2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     ad6:	e7a6      	b.n	a26 <cbvprintf+0x206>
     ad8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     adc:	2920      	cmp	r1, #32
     ade:	f200 8084 	bhi.w	bea <cbvprintf+0x3ca>
     ae2:	a001      	add	r0, pc, #4	; (adr r0, ae8 <cbvprintf+0x2c8>)
     ae4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     ae8:	00000bad 	.word	0x00000bad
     aec:	00000beb 	.word	0x00000beb
     af0:	00000beb 	.word	0x00000beb
     af4:	00000beb 	.word	0x00000beb
     af8:	00000beb 	.word	0x00000beb
     afc:	00000beb 	.word	0x00000beb
     b00:	00000beb 	.word	0x00000beb
     b04:	00000beb 	.word	0x00000beb
     b08:	00000beb 	.word	0x00000beb
     b0c:	00000a49 	.word	0x00000a49
     b10:	00000beb 	.word	0x00000beb
     b14:	00000bad 	.word	0x00000bad
     b18:	00000b6d 	.word	0x00000b6d
     b1c:	00000a49 	.word	0x00000a49
     b20:	00000a49 	.word	0x00000a49
     b24:	00000a49 	.word	0x00000a49
     b28:	00000beb 	.word	0x00000beb
     b2c:	00000b6d 	.word	0x00000b6d
     b30:	00000beb 	.word	0x00000beb
     b34:	00000beb 	.word	0x00000beb
     b38:	00000beb 	.word	0x00000beb
     b3c:	00000beb 	.word	0x00000beb
     b40:	00000bb5 	.word	0x00000bb5
     b44:	00000bad 	.word	0x00000bad
     b48:	00000bd1 	.word	0x00000bd1
     b4c:	00000beb 	.word	0x00000beb
     b50:	00000beb 	.word	0x00000beb
     b54:	00000bd1 	.word	0x00000bd1
     b58:	00000beb 	.word	0x00000beb
     b5c:	00000bad 	.word	0x00000bad
     b60:	00000beb 	.word	0x00000beb
     b64:	00000beb 	.word	0x00000beb
     b68:	00000bad 	.word	0x00000bad
		conv->specifier_cat = SPECIFIER_SINT;
     b6c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b70:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     b72:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b76:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b7a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b7c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     b80:	bf02      	ittt	eq
     b82:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     b86:	f041 0101 	orreq.w	r1, r1, #1
     b8a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     b8e:	2a63      	cmp	r2, #99	; 0x63
     b90:	d131      	bne.n	bf6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b92:	3b00      	subs	r3, #0
     b94:	bf18      	it	ne
     b96:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b98:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b9c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     ba0:	430b      	orrs	r3, r1
     ba2:	f363 0241 	bfi	r2, r3, #1, #1
     ba6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     baa:	e6d8      	b.n	95e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     bac:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     bb0:	2002      	movs	r0, #2
     bb2:	e7de      	b.n	b72 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     bb4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     bb8:	f003 0378 	and.w	r3, r3, #120	; 0x78
     bbc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     bc0:	2103      	movs	r1, #3
     bc2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     bc6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     bc8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     bcc:	4143      	adcs	r3, r0
     bce:	e7e3      	b.n	b98 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     bd0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     bd4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     bd6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     bda:	f361 0202 	bfi	r2, r1, #0, #3
     bde:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     be2:	bf14      	ite	ne
     be4:	2301      	movne	r3, #1
     be6:	2300      	moveq	r3, #0
     be8:	e7d6      	b.n	b98 <cbvprintf+0x378>
		conv->invalid = true;
     bea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     bee:	f043 0301 	orr.w	r3, r3, #1
     bf2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     bf6:	2300      	movs	r3, #0
     bf8:	e7ce      	b.n	b98 <cbvprintf+0x378>
		} else if (conv->width_present) {
     bfa:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     bfe:	2a00      	cmp	r2, #0
			width = conv->width_value;
     c00:	bfb4      	ite	lt
     c02:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     c06:	f04f 39ff 	movge.w	r9, #4294967295
     c0a:	e6ba      	b.n	982 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     c0c:	079b      	lsls	r3, r3, #30
     c0e:	f57f aec7 	bpl.w	9a0 <cbvprintf+0x180>
			precision = conv->prec_value;
     c12:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     c16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     c1a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     c1c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     c20:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     c24:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     c28:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     c2a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     c2e:	d136      	bne.n	c9e <cbvprintf+0x47e>
			switch (length_mod) {
     c30:	1ed3      	subs	r3, r2, #3
     c32:	2b04      	cmp	r3, #4
     c34:	d820      	bhi.n	c78 <cbvprintf+0x458>
     c36:	e8df f003 	tbb	[pc, r3]
     c3a:	0703      	.short	0x0703
     c3c:	1f07      	.short	0x1f07
     c3e:	1f          	.byte	0x1f
     c3f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     c40:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     c44:	17c1      	asrs	r1, r0, #31
     c46:	e004      	b.n	c52 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     c48:	3407      	adds	r4, #7
     c4a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     c52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     c56:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     c5a:	f013 0603 	ands.w	r6, r3, #3
     c5e:	d054      	beq.n	d0a <cbvprintf+0x4ea>
			OUTS(sp, fp);
     c60:	9802      	ldr	r0, [sp, #8]
     c62:	463b      	mov	r3, r7
     c64:	4652      	mov	r2, sl
     c66:	4659      	mov	r1, fp
     c68:	f007 fe26 	bl	88b8 <outs>
     c6c:	2800      	cmp	r0, #0
     c6e:	f2c0 8143 	blt.w	ef8 <cbvprintf+0x6d8>
     c72:	4405      	add	r5, r0
			continue;
     c74:	46ba      	mov	sl, r7
     c76:	e5db      	b.n	830 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c78:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     c7c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
     c82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c86:	d105      	bne.n	c94 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     c88:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     c8c:	930a      	str	r3, [sp, #40]	; 0x28
     c8e:	2300      	movs	r3, #0
     c90:	930b      	str	r3, [sp, #44]	; 0x2c
     c92:	e7e0      	b.n	c56 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     c94:	2a02      	cmp	r2, #2
     c96:	d1de      	bne.n	c56 <cbvprintf+0x436>
				value->sint = (short)value->sint;
     c98:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     c9c:	e7d2      	b.n	c44 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c9e:	2b02      	cmp	r3, #2
     ca0:	d123      	bne.n	cea <cbvprintf+0x4ca>
			switch (length_mod) {
     ca2:	1ed3      	subs	r3, r2, #3
     ca4:	2b04      	cmp	r3, #4
     ca6:	d813      	bhi.n	cd0 <cbvprintf+0x4b0>
     ca8:	e8df f003 	tbb	[pc, r3]
     cac:	120a0a03 	.word	0x120a0a03
     cb0:	12          	.byte	0x12
     cb1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     cb2:	6820      	ldr	r0, [r4, #0]
     cb4:	900a      	str	r0, [sp, #40]	; 0x28
     cb6:	2100      	movs	r1, #0
     cb8:	1d23      	adds	r3, r4, #4
     cba:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     cbc:	461c      	mov	r4, r3
     cbe:	e7ca      	b.n	c56 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     cc0:	3407      	adds	r4, #7
     cc2:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     cc6:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     cca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     cce:	e7f5      	b.n	cbc <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     cd0:	f854 3b04 	ldr.w	r3, [r4], #4
     cd4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     cd6:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     cd8:	f04f 0300 	mov.w	r3, #0
     cdc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     cde:	d0d3      	beq.n	c88 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     ce0:	2a02      	cmp	r2, #2
     ce2:	d1b8      	bne.n	c56 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     ce4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ce8:	e7d0      	b.n	c8c <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     cea:	2b04      	cmp	r3, #4
     cec:	d107      	bne.n	cfe <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     cee:	3407      	adds	r4, #7
     cf0:	f024 0407 	bic.w	r4, r4, #7
     cf4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     cf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     cfc:	e7ab      	b.n	c56 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     cfe:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     d00:	bf04      	itt	eq
     d02:	f854 3b04 	ldreq.w	r3, [r4], #4
     d06:	930a      	streq	r3, [sp, #40]	; 0x28
     d08:	e7a5      	b.n	c56 <cbvprintf+0x436>
		switch (conv->specifier) {
     d0a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d0e:	2878      	cmp	r0, #120	; 0x78
     d10:	d8b0      	bhi.n	c74 <cbvprintf+0x454>
     d12:	2862      	cmp	r0, #98	; 0x62
     d14:	d822      	bhi.n	d5c <cbvprintf+0x53c>
     d16:	2825      	cmp	r0, #37	; 0x25
     d18:	f43f ad93 	beq.w	842 <cbvprintf+0x22>
     d1c:	2858      	cmp	r0, #88	; 0x58
     d1e:	d1a9      	bne.n	c74 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     d20:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     d24:	9300      	str	r3, [sp, #0]
     d26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     d2a:	ab04      	add	r3, sp, #16
     d2c:	aa0c      	add	r2, sp, #48	; 0x30
     d2e:	f007 fd78 	bl	8822 <encode_uint>
     d32:	4682      	mov	sl, r0
			if (precision >= 0) {
     d34:	f1b8 0f00 	cmp.w	r8, #0
     d38:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     d3c:	db0c      	blt.n	d58 <cbvprintf+0x538>
				conv->flag_zero = false;
     d3e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     d42:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     d46:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d4a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     d4c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     d50:	d902      	bls.n	d58 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     d52:	eba8 0303 	sub.w	r3, r8, r3
     d56:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     d58:	4680      	mov	r8, r0
     d5a:	e03d      	b.n	dd8 <cbvprintf+0x5b8>
     d5c:	3863      	subs	r0, #99	; 0x63
     d5e:	2815      	cmp	r0, #21
     d60:	d888      	bhi.n	c74 <cbvprintf+0x454>
     d62:	a101      	add	r1, pc, #4	; (adr r1, d68 <cbvprintf+0x548>)
     d64:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     d68:	00000de9 	.word	0x00000de9
     d6c:	00000e4d 	.word	0x00000e4d
     d70:	00000c75 	.word	0x00000c75
     d74:	00000c75 	.word	0x00000c75
     d78:	00000c75 	.word	0x00000c75
     d7c:	00000c75 	.word	0x00000c75
     d80:	00000e4d 	.word	0x00000e4d
     d84:	00000c75 	.word	0x00000c75
     d88:	00000c75 	.word	0x00000c75
     d8c:	00000c75 	.word	0x00000c75
     d90:	00000c75 	.word	0x00000c75
     d94:	00000eab 	.word	0x00000eab
     d98:	00000e79 	.word	0x00000e79
     d9c:	00000e7d 	.word	0x00000e7d
     da0:	00000c75 	.word	0x00000c75
     da4:	00000c75 	.word	0x00000c75
     da8:	00000dc1 	.word	0x00000dc1
     dac:	00000c75 	.word	0x00000c75
     db0:	00000e79 	.word	0x00000e79
     db4:	00000c75 	.word	0x00000c75
     db8:	00000c75 	.word	0x00000c75
     dbc:	00000e79 	.word	0x00000e79
			if (precision >= 0) {
     dc0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     dc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     dc8:	db0a      	blt.n	de0 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
     dca:	4641      	mov	r1, r8
     dcc:	4650      	mov	r0, sl
     dce:	f007 ff47 	bl	8c60 <strnlen>
			bpe = bps + len;
     dd2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     dd6:	2600      	movs	r6, #0
		if (bps == NULL) {
     dd8:	f1ba 0f00 	cmp.w	sl, #0
     ddc:	d10c      	bne.n	df8 <cbvprintf+0x5d8>
     dde:	e749      	b.n	c74 <cbvprintf+0x454>
				len = strlen(bps);
     de0:	4650      	mov	r0, sl
     de2:	f007 ff36 	bl	8c52 <strlen>
     de6:	e7f4      	b.n	dd2 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dea:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     dee:	2600      	movs	r6, #0
			bpe = buf + 1;
     df0:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     df4:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     df8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     dfc:	b106      	cbz	r6, e00 <cbvprintf+0x5e0>
			nj_len += 1U;
     dfe:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     e00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e04:	06d0      	lsls	r0, r2, #27
     e06:	d56b      	bpl.n	ee0 <cbvprintf+0x6c0>
			nj_len += 2U;
     e08:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     e0a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     e0c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     e0e:	bf48      	it	mi
     e10:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     e12:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     e14:	bf48      	it	mi
     e16:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     e18:	f1b9 0f00 	cmp.w	r9, #0
     e1c:	dd79      	ble.n	f12 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
     e1e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     e22:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     e26:	f3c2 0380 	ubfx	r3, r2, #2, #1
     e2a:	9303      	str	r3, [sp, #12]
     e2c:	0753      	lsls	r3, r2, #29
     e2e:	d470      	bmi.n	f12 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
     e30:	0650      	lsls	r0, r2, #25
     e32:	d564      	bpl.n	efe <cbvprintf+0x6de>
					if (sign != 0) {
     e34:	b146      	cbz	r6, e48 <cbvprintf+0x628>
						OUTC(sign);
     e36:	9b02      	ldr	r3, [sp, #8]
     e38:	4659      	mov	r1, fp
     e3a:	4630      	mov	r0, r6
     e3c:	4798      	blx	r3
     e3e:	2800      	cmp	r0, #0
     e40:	db5a      	blt.n	ef8 <cbvprintf+0x6d8>
						sign = 0;
     e42:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     e44:	3501      	adds	r5, #1
						sign = 0;
     e46:	461e      	mov	r6, r3
					pad = '0';
     e48:	2330      	movs	r3, #48	; 0x30
     e4a:	e059      	b.n	f00 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
     e4c:	071e      	lsls	r6, r3, #28
     e4e:	d411      	bmi.n	e74 <cbvprintf+0x654>
				sign = ' ';
     e50:	f013 0610 	ands.w	r6, r3, #16
     e54:	bf18      	it	ne
     e56:	2620      	movne	r6, #32
			sint = value->sint;
     e58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     e5c:	2a00      	cmp	r2, #0
     e5e:	f173 0100 	sbcs.w	r1, r3, #0
     e62:	f6bf af5d 	bge.w	d20 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
     e66:	4252      	negs	r2, r2
     e68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     e70:	262d      	movs	r6, #45	; 0x2d
     e72:	e755      	b.n	d20 <cbvprintf+0x500>
				sign = '+';
     e74:	262b      	movs	r6, #43	; 0x2b
     e76:	e7ef      	b.n	e58 <cbvprintf+0x638>
		switch (conv->specifier) {
     e78:	2600      	movs	r6, #0
     e7a:	e751      	b.n	d20 <cbvprintf+0x500>
			if (value->ptr != NULL) {
     e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
     e7e:	b348      	cbz	r0, ed4 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e80:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e84:	9300      	str	r3, [sp, #0]
     e86:	aa0c      	add	r2, sp, #48	; 0x30
     e88:	ab04      	add	r3, sp, #16
     e8a:	2100      	movs	r1, #0
     e8c:	f007 fcc9 	bl	8822 <encode_uint>
				conv->altform_0c = true;
     e90:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     e94:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e98:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e9c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     ea0:	4682      	mov	sl, r0
				conv->altform_0c = true;
     ea2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     ea6:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ea8:	e744      	b.n	d34 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
     eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     eac:	2a07      	cmp	r2, #7
     eae:	f63f aee1 	bhi.w	c74 <cbvprintf+0x454>
     eb2:	e8df f002 	tbb	[pc, r2]
     eb6:	040d      	.short	0x040d
     eb8:	08080d06 	.word	0x08080d06
     ebc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     ebe:	701d      	strb	r5, [r3, #0]
		break;
     ec0:	e6d8      	b.n	c74 <cbvprintf+0x454>
		*(short *)dp = (short)count;
     ec2:	801d      	strh	r5, [r3, #0]
		break;
     ec4:	e6d6      	b.n	c74 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
     ec6:	4628      	mov	r0, r5
     ec8:	17e9      	asrs	r1, r5, #31
     eca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     ece:	e6d1      	b.n	c74 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     ed0:	601d      	str	r5, [r3, #0]
		break;
     ed2:	e6cf      	b.n	c74 <cbvprintf+0x454>
			bpe = bps + 5;
     ed4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; f9c <cbvprintf+0x77c>
     ed8:	4606      	mov	r6, r0
			bps = "(nil)";
     eda:	f1a8 0a05 	sub.w	sl, r8, #5
     ede:	e78b      	b.n	df8 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
     ee0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     ee2:	bf48      	it	mi
     ee4:	3301      	addmi	r3, #1
     ee6:	e790      	b.n	e0a <cbvprintf+0x5ea>
					OUTC(pad);
     ee8:	4618      	mov	r0, r3
     eea:	9303      	str	r3, [sp, #12]
     eec:	4659      	mov	r1, fp
     eee:	9b02      	ldr	r3, [sp, #8]
     ef0:	4798      	blx	r3
     ef2:	2800      	cmp	r0, #0
     ef4:	9b03      	ldr	r3, [sp, #12]
     ef6:	da04      	bge.n	f02 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
     ef8:	b011      	add	sp, #68	; 0x44
     efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     efe:	2320      	movs	r3, #32
     f00:	444d      	add	r5, r9
     f02:	464a      	mov	r2, r9
				while (width-- > 0) {
     f04:	2a00      	cmp	r2, #0
     f06:	eba5 0109 	sub.w	r1, r5, r9
     f0a:	f109 39ff 	add.w	r9, r9, #4294967295
     f0e:	dceb      	bgt.n	ee8 <cbvprintf+0x6c8>
     f10:	460d      	mov	r5, r1
		if (sign != 0) {
     f12:	b136      	cbz	r6, f22 <cbvprintf+0x702>
			OUTC(sign);
     f14:	9b02      	ldr	r3, [sp, #8]
     f16:	4659      	mov	r1, fp
     f18:	4630      	mov	r0, r6
     f1a:	4798      	blx	r3
     f1c:	2800      	cmp	r0, #0
     f1e:	dbeb      	blt.n	ef8 <cbvprintf+0x6d8>
     f20:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     f22:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f26:	06d9      	lsls	r1, r3, #27
     f28:	d401      	bmi.n	f2e <cbvprintf+0x70e>
     f2a:	071a      	lsls	r2, r3, #28
     f2c:	d506      	bpl.n	f3c <cbvprintf+0x71c>
				OUTC('0');
     f2e:	9b02      	ldr	r3, [sp, #8]
     f30:	4659      	mov	r1, fp
     f32:	2030      	movs	r0, #48	; 0x30
     f34:	4798      	blx	r3
     f36:	2800      	cmp	r0, #0
     f38:	dbde      	blt.n	ef8 <cbvprintf+0x6d8>
     f3a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     f3c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f40:	06db      	lsls	r3, r3, #27
     f42:	d507      	bpl.n	f54 <cbvprintf+0x734>
				OUTC(conv->specifier);
     f44:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f48:	9b02      	ldr	r3, [sp, #8]
     f4a:	4659      	mov	r1, fp
     f4c:	4798      	blx	r3
     f4e:	2800      	cmp	r0, #0
     f50:	dbd2      	blt.n	ef8 <cbvprintf+0x6d8>
     f52:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f54:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     f56:	442e      	add	r6, r5
     f58:	1b73      	subs	r3, r6, r5
     f5a:	2b00      	cmp	r3, #0
     f5c:	dc16      	bgt.n	f8c <cbvprintf+0x76c>
			OUTS(bps, bpe);
     f5e:	9802      	ldr	r0, [sp, #8]
     f60:	4643      	mov	r3, r8
     f62:	4652      	mov	r2, sl
     f64:	4659      	mov	r1, fp
     f66:	f007 fca7 	bl	88b8 <outs>
     f6a:	2800      	cmp	r0, #0
     f6c:	dbc4      	blt.n	ef8 <cbvprintf+0x6d8>
     f6e:	4405      	add	r5, r0
		while (width > 0) {
     f70:	44a9      	add	r9, r5
     f72:	eba9 0305 	sub.w	r3, r9, r5
     f76:	2b00      	cmp	r3, #0
     f78:	f77f ae7c 	ble.w	c74 <cbvprintf+0x454>
			OUTC(' ');
     f7c:	9b02      	ldr	r3, [sp, #8]
     f7e:	4659      	mov	r1, fp
     f80:	2020      	movs	r0, #32
     f82:	4798      	blx	r3
     f84:	2800      	cmp	r0, #0
     f86:	dbb7      	blt.n	ef8 <cbvprintf+0x6d8>
     f88:	3501      	adds	r5, #1
			--width;
     f8a:	e7f2      	b.n	f72 <cbvprintf+0x752>
				OUTC('0');
     f8c:	9b02      	ldr	r3, [sp, #8]
     f8e:	4659      	mov	r1, fp
     f90:	2030      	movs	r0, #48	; 0x30
     f92:	4798      	blx	r3
     f94:	2800      	cmp	r0, #0
     f96:	dbaf      	blt.n	ef8 <cbvprintf+0x6d8>
     f98:	3501      	adds	r5, #1
     f9a:	e7dd      	b.n	f58 <cbvprintf+0x738>
     f9c:	00009c47 	.word	0x00009c47

00000fa0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
     fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
     fa2:	460d      	mov	r5, r1
     fa4:	2900      	cmp	r1, #0
     fa6:	d039      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
     fa8:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
     faa:	1f0c      	subs	r4, r1, #4
     fac:	1ba4      	subs	r4, r4, r6
     fae:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
     fb0:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
     fb4:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
     fb6:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
     fb8:	07db      	lsls	r3, r3, #31
     fba:	d40d      	bmi.n	fd8 <sys_heap_free+0x38>
     fbc:	4a18      	ldr	r2, [pc, #96]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fbe:	4919      	ldr	r1, [pc, #100]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fc0:	4819      	ldr	r0, [pc, #100]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fc2:	23a3      	movs	r3, #163	; 0xa3
     fc4:	f007 fe15 	bl	8bf2 <printk>
     fc8:	4818      	ldr	r0, [pc, #96]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fca:	4629      	mov	r1, r5
     fcc:	f007 fe11 	bl	8bf2 <printk>
     fd0:	4813      	ldr	r0, [pc, #76]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fd2:	21a3      	movs	r1, #163	; 0xa3
     fd4:	f007 fc1e 	bl	8814 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
     fd8:	4639      	mov	r1, r7
     fda:	4630      	mov	r0, r6
     fdc:	f007 fc83 	bl	88e6 <chunk_size>
     fe0:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
     fe2:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
     fe6:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
     fe8:	4287      	cmp	r7, r0
     fea:	d00d      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     fec:	4a0c      	ldr	r2, [pc, #48]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fee:	4910      	ldr	r1, [pc, #64]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     ff0:	480d      	ldr	r0, [pc, #52]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     ff2:	23ab      	movs	r3, #171	; 0xab
     ff4:	f007 fdfd 	bl	8bf2 <printk>
     ff8:	480e      	ldr	r0, [pc, #56]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     ffa:	4629      	mov	r1, r5
     ffc:	f007 fdf9 	bl	8bf2 <printk>
    1000:	4807      	ldr	r0, [pc, #28]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1002:	21ab      	movs	r1, #171	; 0xab
    1004:	f007 fc06 	bl	8814 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    1008:	8863      	ldrh	r3, [r4, #2]
    100a:	f023 0301 	bic.w	r3, r3, #1
    100e:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
    1010:	4639      	mov	r1, r7
    1012:	4630      	mov	r0, r6
}
    1014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
    1018:	f007 bd22 	b.w	8a60 <free_chunk>
}
    101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    101e:	bf00      	nop
    1020:	00009c48 	.word	0x00009c48
    1024:	00009c69 	.word	0x00009c69
    1028:	00009c7a 	.word	0x00009c7a
    102c:	00009c97 	.word	0x00009c97
    1030:	00009ccf 	.word	0x00009ccf
    1034:	00009cf5 	.word	0x00009cf5

00001038 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    1038:	424b      	negs	r3, r1
{
    103a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
    103e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
    1042:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
    1046:	6806      	ldr	r6, [r0, #0]
{
    1048:	4614      	mov	r4, r2
	if (align != rew) {
    104a:	d01f      	beq.n	108c <sys_heap_aligned_alloc+0x54>
		return false;
    104c:	2f04      	cmp	r7, #4
    104e:	463d      	mov	r5, r7
    1050:	46b9      	mov	r9, r7
    1052:	bf28      	it	cs
    1054:	2504      	movcs	r5, #4
		align -= rew;
    1056:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1058:	f107 3aff 	add.w	sl, r7, #4294967295
    105c:	ea1a 0f07 	tst.w	sl, r7
    1060:	d00e      	beq.n	1080 <sys_heap_aligned_alloc+0x48>
    1062:	4933      	ldr	r1, [pc, #204]	; (1130 <sys_heap_aligned_alloc+0xf8>)
    1064:	4a33      	ldr	r2, [pc, #204]	; (1134 <sys_heap_aligned_alloc+0xfc>)
    1066:	4834      	ldr	r0, [pc, #208]	; (1138 <sys_heap_aligned_alloc+0x100>)
    1068:	f240 1327 	movw	r3, #295	; 0x127
    106c:	f007 fdc1 	bl	8bf2 <printk>
    1070:	4832      	ldr	r0, [pc, #200]	; (113c <sys_heap_aligned_alloc+0x104>)
    1072:	f007 fdbe 	bl	8bf2 <printk>
    1076:	482f      	ldr	r0, [pc, #188]	; (1134 <sys_heap_aligned_alloc+0xfc>)
    1078:	f240 1127 	movw	r1, #295	; 0x127
    107c:	f007 fbca 	bl	8814 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
    1080:	b97c      	cbnz	r4, 10a2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
    1082:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    1086:	4648      	mov	r0, r9
    1088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
    108c:	2904      	cmp	r1, #4
    108e:	d804      	bhi.n	109a <sys_heap_aligned_alloc+0x62>
}
    1090:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
    1094:	4611      	mov	r1, r2
    1096:	f007 bd14 	b.w	8ac2 <sys_heap_alloc>
		rew = 0;
    109a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    109e:	2504      	movs	r5, #4
    10a0:	e7da      	b.n	1058 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
    10a2:	68b3      	ldr	r3, [r6, #8]
    10a4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    10a8:	d9eb      	bls.n	1082 <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    10aa:	f104 010b 	add.w	r1, r4, #11
    10ae:	4439      	add	r1, r7
    10b0:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    10b2:	08c9      	lsrs	r1, r1, #3
    10b4:	4630      	mov	r0, r6
    10b6:	f007 fc6c 	bl	8992 <alloc_chunk>
	if (c0 == 0) {
    10ba:	4680      	mov	r8, r0
    10bc:	2800      	cmp	r0, #0
    10be:	d0e0      	beq.n	1082 <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    10c0:	f109 0504 	add.w	r5, r9, #4
    10c4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    10c8:	4435      	add	r5, r6
    10ca:	4455      	add	r5, sl
    10cc:	427f      	negs	r7, r7
    10ce:	402f      	ands	r7, r5
    10d0:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10d4:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10d6:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10da:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10dc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    10de:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    10e2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    10e4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    10e8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    10ec:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    10f0:	d208      	bcs.n	1104 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    10f2:	4601      	mov	r1, r0
    10f4:	463a      	mov	r2, r7
    10f6:	4630      	mov	r0, r6
    10f8:	f007 fc98 	bl	8a2c <split_chunks>
		free_list_add(h, c0);
    10fc:	4641      	mov	r1, r8
    10fe:	4630      	mov	r0, r6
    1100:	f007 fbf6 	bl	88f0 <free_list_add>
	return c + chunk_size(h, c);
    1104:	4639      	mov	r1, r7
    1106:	4630      	mov	r0, r6
    1108:	f007 fbed 	bl	88e6 <chunk_size>
    110c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    110e:	4284      	cmp	r4, r0
    1110:	d207      	bcs.n	1122 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    1112:	4630      	mov	r0, r6
    1114:	4622      	mov	r2, r4
    1116:	f007 fc89 	bl	8a2c <split_chunks>
		free_list_add(h, c_end);
    111a:	4621      	mov	r1, r4
    111c:	4630      	mov	r0, r6
    111e:	f007 fbe7 	bl	88f0 <free_list_add>
	void *cmem = &buf[c];
    1122:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1126:	8873      	ldrh	r3, [r6, #2]
    1128:	f043 0301 	orr.w	r3, r3, #1
    112c:	8073      	strh	r3, [r6, #2]
    112e:	e7aa      	b.n	1086 <sys_heap_aligned_alloc+0x4e>
    1130:	00009d31 	.word	0x00009d31
    1134:	00009c48 	.word	0x00009c48
    1138:	00009c7a 	.word	0x00009c7a
    113c:	00009d4c 	.word	0x00009d4c

00001140 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1140:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    1144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1148:	4606      	mov	r6, r0
    114a:	460d      	mov	r5, r1
    114c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    114e:	d369      	bcc.n	1224 <sys_heap_init+0xe4>
    1150:	493d      	ldr	r1, [pc, #244]	; (1248 <sys_heap_init+0x108>)
    1152:	4a3e      	ldr	r2, [pc, #248]	; (124c <sys_heap_init+0x10c>)
    1154:	483e      	ldr	r0, [pc, #248]	; (1250 <sys_heap_init+0x110>)
    1156:	f240 13a5 	movw	r3, #421	; 0x1a5
    115a:	f007 fd4a 	bl	8bf2 <printk>
    115e:	483d      	ldr	r0, [pc, #244]	; (1254 <sys_heap_init+0x114>)
    1160:	f007 fd47 	bl	8bf2 <printk>
    1164:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1168:	4838      	ldr	r0, [pc, #224]	; (124c <sys_heap_init+0x10c>)
    116a:	f007 fb53 	bl	8814 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    116e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1170:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1172:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1174:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1178:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    117c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    117e:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1180:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1184:	d80e      	bhi.n	11a4 <sys_heap_init+0x64>
    1186:	4934      	ldr	r1, [pc, #208]	; (1258 <sys_heap_init+0x118>)
    1188:	4a30      	ldr	r2, [pc, #192]	; (124c <sys_heap_init+0x10c>)
    118a:	4831      	ldr	r0, [pc, #196]	; (1250 <sys_heap_init+0x110>)
    118c:	f240 13b5 	movw	r3, #437	; 0x1b5
    1190:	f007 fd2f 	bl	8bf2 <printk>
    1194:	4831      	ldr	r0, [pc, #196]	; (125c <sys_heap_init+0x11c>)
    1196:	f007 fd2c 	bl	8bf2 <printk>
    119a:	482c      	ldr	r0, [pc, #176]	; (124c <sys_heap_init+0x10c>)
    119c:	f240 11b5 	movw	r1, #437	; 0x1b5
    11a0:	f007 fb38 	bl	8814 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    11a4:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    11a8:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
    11ac:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
    11b0:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    11b2:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
    11b6:	2300      	movs	r3, #0
    11b8:	08f6      	lsrs	r6, r6, #3
    11ba:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    11bc:	1c73      	adds	r3, r6, #1
    11be:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    11c0:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    11c2:	d90e      	bls.n	11e2 <sys_heap_init+0xa2>
    11c4:	4926      	ldr	r1, [pc, #152]	; (1260 <sys_heap_init+0x120>)
    11c6:	4a21      	ldr	r2, [pc, #132]	; (124c <sys_heap_init+0x10c>)
    11c8:	4821      	ldr	r0, [pc, #132]	; (1250 <sys_heap_init+0x110>)
    11ca:	f240 13c5 	movw	r3, #453	; 0x1c5
    11ce:	f007 fd10 	bl	8bf2 <printk>
    11d2:	4822      	ldr	r0, [pc, #136]	; (125c <sys_heap_init+0x11c>)
    11d4:	f007 fd0d 	bl	8bf2 <printk>
    11d8:	481c      	ldr	r0, [pc, #112]	; (124c <sys_heap_init+0x10c>)
    11da:	f240 11c5 	movw	r1, #453	; 0x1c5
    11de:	f007 fb19 	bl	8814 <assert_post_action>
    11e2:	f104 0210 	add.w	r2, r4, #16
    11e6:	44a0      	add	r8, r4
    11e8:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
    11ea:	4590      	cmp	r8, r2
    11ec:	d129      	bne.n	1242 <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    11ee:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    11f0:	f042 0201 	orr.w	r2, r2, #1
    11f4:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
    11f6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    11fa:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    11fc:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
    11fe:	8023      	strh	r3, [r4, #0]
    1200:	8048      	strh	r0, [r1, #2]
    1202:	1961      	adds	r1, r4, r5
    1204:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
    1208:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
    120c:	804b      	strh	r3, [r1, #2]
    120e:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1210:	887b      	ldrh	r3, [r7, #2]
    1212:	f043 0301 	orr.w	r3, r3, #1
    1216:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1218:	4631      	mov	r1, r6
    121a:	4620      	mov	r0, r4
}
    121c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    1220:	f007 bb66 	b.w	88f0 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1224:	2a04      	cmp	r2, #4
    1226:	d8a2      	bhi.n	116e <sys_heap_init+0x2e>
    1228:	490e      	ldr	r1, [pc, #56]	; (1264 <sys_heap_init+0x124>)
    122a:	4a08      	ldr	r2, [pc, #32]	; (124c <sys_heap_init+0x10c>)
    122c:	4808      	ldr	r0, [pc, #32]	; (1250 <sys_heap_init+0x110>)
    122e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    1232:	f007 fcde 	bl	8bf2 <printk>
    1236:	4809      	ldr	r0, [pc, #36]	; (125c <sys_heap_init+0x11c>)
    1238:	f007 fcdb 	bl	8bf2 <printk>
    123c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    1240:	e792      	b.n	1168 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    1242:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    1246:	e7d0      	b.n	11ea <sys_heap_init+0xaa>
    1248:	00009d69 	.word	0x00009d69
    124c:	00009c48 	.word	0x00009c48
    1250:	00009c7a 	.word	0x00009c7a
    1254:	00009d7f 	.word	0x00009d7f
    1258:	00009dd0 	.word	0x00009dd0
    125c:	00009db7 	.word	0x00009db7
    1260:	00009df9 	.word	0x00009df9
    1264:	00009d96 	.word	0x00009d96

00001268 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1268:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    126a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    126e:	2b02      	cmp	r3, #2
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	4604      	mov	r4, r0
    1274:	460e      	mov	r6, r1
	notify->result = res;
    1276:	6081      	str	r1, [r0, #8]
	switch (method) {
    1278:	d010      	beq.n	129c <sys_notify_finalize+0x34>
    127a:	2b03      	cmp	r3, #3
    127c:	d004      	beq.n	1288 <sys_notify_finalize+0x20>
    127e:	2b01      	cmp	r3, #1
    1280:	d10f      	bne.n	12a2 <sys_notify_finalize+0x3a>
    1282:	2500      	movs	r5, #0
    1284:	4628      	mov	r0, r5
    1286:	e001      	b.n	128c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1288:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    128a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    128c:	2300      	movs	r3, #0
    128e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    1290:	b110      	cbz	r0, 1298 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    1292:	4631      	mov	r1, r6
    1294:	f004 fad4 	bl	5840 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1298:	4628      	mov	r0, r5
    129a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    129c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    129e:	2500      	movs	r5, #0
		break;
    12a0:	e7f4      	b.n	128c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    12a2:	4a06      	ldr	r2, [pc, #24]	; (12bc <sys_notify_finalize+0x54>)
    12a4:	4906      	ldr	r1, [pc, #24]	; (12c0 <sys_notify_finalize+0x58>)
    12a6:	4807      	ldr	r0, [pc, #28]	; (12c4 <sys_notify_finalize+0x5c>)
    12a8:	2345      	movs	r3, #69	; 0x45
    12aa:	f007 fca2 	bl	8bf2 <printk>
    12ae:	4803      	ldr	r0, [pc, #12]	; (12bc <sys_notify_finalize+0x54>)
    12b0:	2145      	movs	r1, #69	; 0x45
    12b2:	f007 faaf 	bl	8814 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    12b6:	2500      	movs	r5, #0
    12b8:	e7e7      	b.n	128a <sys_notify_finalize+0x22>
    12ba:	bf00      	nop
    12bc:	00009e24 	.word	0x00009e24
    12c0:	0000a609 	.word	0x0000a609
    12c4:	00009c7a 	.word	0x00009c7a

000012c8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    12c8:	4801      	ldr	r0, [pc, #4]	; (12d0 <nrf_cc3xx_platform_abort_init+0x8>)
    12ca:	f007 b911 	b.w	84f0 <nrf_cc3xx_platform_set_abort>
    12ce:	bf00      	nop
    12d0:	00009718 	.word	0x00009718

000012d4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12d6:	b1d0      	cbz	r0, 130e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    12d8:	6843      	ldr	r3, [r0, #4]
    12da:	2b04      	cmp	r3, #4
    12dc:	d111      	bne.n	1302 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12de:	2200      	movs	r2, #0
    12e0:	6803      	ldr	r3, [r0, #0]
    12e2:	f3bf 8f5b 	dmb	ish
    12e6:	e853 1f00 	ldrex	r1, [r3]
    12ea:	2901      	cmp	r1, #1
    12ec:	d103      	bne.n	12f6 <mutex_unlock_platform+0x22>
    12ee:	e843 2000 	strex	r0, r2, [r3]
    12f2:	2800      	cmp	r0, #0
    12f4:	d1f7      	bne.n	12e6 <mutex_unlock_platform+0x12>
    12f6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12fa:	4807      	ldr	r0, [pc, #28]	; (1318 <mutex_unlock_platform+0x44>)
    12fc:	bf08      	it	eq
    12fe:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1300:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1302:	b13b      	cbz	r3, 1314 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1304:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1306:	f004 f95d 	bl	55c4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    130a:	2000      	movs	r0, #0
    130c:	e7f8      	b.n	1300 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    130e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1312:	e7f5      	b.n	1300 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <mutex_unlock_platform+0x48>)
    1316:	e7f3      	b.n	1300 <mutex_unlock_platform+0x2c>
    1318:	ffff8fe9 	.word	0xffff8fe9
    131c:	ffff8fea 	.word	0xffff8fea

00001320 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1320:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1322:	4604      	mov	r4, r0
    1324:	b918      	cbnz	r0, 132e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1326:	4b0d      	ldr	r3, [pc, #52]	; (135c <mutex_free_platform+0x3c>)
    1328:	480d      	ldr	r0, [pc, #52]	; (1360 <mutex_free_platform+0x40>)
    132a:	685b      	ldr	r3, [r3, #4]
    132c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    132e:	6861      	ldr	r1, [r4, #4]
    1330:	2908      	cmp	r1, #8
    1332:	d00d      	beq.n	1350 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1334:	f031 0304 	bics.w	r3, r1, #4
    1338:	d00a      	beq.n	1350 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    133a:	f011 0102 	ands.w	r1, r1, #2
    133e:	d008      	beq.n	1352 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1340:	4808      	ldr	r0, [pc, #32]	; (1364 <mutex_free_platform+0x44>)
    1342:	4621      	mov	r1, r4
    1344:	f003 ffda 	bl	52fc <k_mem_slab_free>
        mutex->mutex = NULL;
    1348:	2300      	movs	r3, #0
    134a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    134c:	2300      	movs	r3, #0
    134e:	6063      	str	r3, [r4, #4]
}
    1350:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1352:	6820      	ldr	r0, [r4, #0]
    1354:	2214      	movs	r2, #20
    1356:	f007 fca3 	bl	8ca0 <memset>
    135a:	e7f7      	b.n	134c <mutex_free_platform+0x2c>
    135c:	2000018c 	.word	0x2000018c
    1360:	00009e47 	.word	0x00009e47
    1364:	200005fc 	.word	0x200005fc

00001368 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1368:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    136a:	4604      	mov	r4, r0
    136c:	b918      	cbnz	r0, 1376 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    136e:	4b16      	ldr	r3, [pc, #88]	; (13c8 <mutex_init_platform+0x60>)
    1370:	4816      	ldr	r0, [pc, #88]	; (13cc <mutex_init_platform+0x64>)
    1372:	685b      	ldr	r3, [r3, #4]
    1374:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1376:	6863      	ldr	r3, [r4, #4]
    1378:	2b04      	cmp	r3, #4
    137a:	d023      	beq.n	13c4 <mutex_init_platform+0x5c>
    137c:	2b08      	cmp	r3, #8
    137e:	d021      	beq.n	13c4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1380:	b9cb      	cbnz	r3, 13b6 <mutex_init_platform+0x4e>
    1382:	6823      	ldr	r3, [r4, #0]
    1384:	b9bb      	cbnz	r3, 13b6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1386:	4812      	ldr	r0, [pc, #72]	; (13d0 <mutex_init_platform+0x68>)
    1388:	f04f 32ff 	mov.w	r2, #4294967295
    138c:	f04f 33ff 	mov.w	r3, #4294967295
    1390:	4621      	mov	r1, r4
    1392:	f003 ff47 	bl	5224 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1396:	b908      	cbnz	r0, 139c <mutex_init_platform+0x34>
    1398:	6823      	ldr	r3, [r4, #0]
    139a:	b91b      	cbnz	r3, 13a4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    139c:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <mutex_init_platform+0x60>)
    139e:	480d      	ldr	r0, [pc, #52]	; (13d4 <mutex_init_platform+0x6c>)
    13a0:	685b      	ldr	r3, [r3, #4]
    13a2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13a4:	6820      	ldr	r0, [r4, #0]
    13a6:	2214      	movs	r2, #20
    13a8:	2100      	movs	r1, #0
    13aa:	f007 fc79 	bl	8ca0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    13ae:	6863      	ldr	r3, [r4, #4]
    13b0:	f043 0302 	orr.w	r3, r3, #2
    13b4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    13b6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    13b8:	f007 ff5f 	bl	927a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    13bc:	6863      	ldr	r3, [r4, #4]
    13be:	f043 0301 	orr.w	r3, r3, #1
    13c2:	6063      	str	r3, [r4, #4]
}
    13c4:	bd10      	pop	{r4, pc}
    13c6:	bf00      	nop
    13c8:	2000018c 	.word	0x2000018c
    13cc:	00009e47 	.word	0x00009e47
    13d0:	200005fc 	.word	0x200005fc
    13d4:	00009e6d 	.word	0x00009e6d

000013d8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13d8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    13da:	b308      	cbz	r0, 1420 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    13dc:	6843      	ldr	r3, [r0, #4]
    13de:	2b04      	cmp	r3, #4
    13e0:	d110      	bne.n	1404 <mutex_lock_platform+0x2c>
    13e2:	2201      	movs	r2, #1
    13e4:	6803      	ldr	r3, [r0, #0]
    13e6:	f3bf 8f5b 	dmb	ish
    13ea:	e853 1f00 	ldrex	r1, [r3]
    13ee:	2900      	cmp	r1, #0
    13f0:	d103      	bne.n	13fa <mutex_lock_platform+0x22>
    13f2:	e843 2000 	strex	r0, r2, [r3]
    13f6:	2800      	cmp	r0, #0
    13f8:	d1f7      	bne.n	13ea <mutex_lock_platform+0x12>
    13fa:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13fe:	d10b      	bne.n	1418 <mutex_lock_platform+0x40>
    1400:	2000      	movs	r0, #0
}
    1402:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1404:	b153      	cbz	r3, 141c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1406:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1408:	f04f 32ff 	mov.w	r2, #4294967295
    140c:	f04f 33ff 	mov.w	r3, #4294967295
    1410:	f003 ffd8 	bl	53c4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1414:	2800      	cmp	r0, #0
    1416:	d0f3      	beq.n	1400 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1418:	4803      	ldr	r0, [pc, #12]	; (1428 <mutex_lock_platform+0x50>)
    141a:	e7f2      	b.n	1402 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    141c:	4803      	ldr	r0, [pc, #12]	; (142c <mutex_lock_platform+0x54>)
    141e:	e7f0      	b.n	1402 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1420:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1424:	e7ed      	b.n	1402 <mutex_lock_platform+0x2a>
    1426:	bf00      	nop
    1428:	ffff8fe9 	.word	0xffff8fe9
    142c:	ffff8fea 	.word	0xffff8fea

00001430 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1430:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1432:	4906      	ldr	r1, [pc, #24]	; (144c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1434:	4806      	ldr	r0, [pc, #24]	; (1450 <nrf_cc3xx_platform_mutex_init+0x20>)
    1436:	2340      	movs	r3, #64	; 0x40
    1438:	2214      	movs	r2, #20
    143a:	f007 ff02 	bl	9242 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    143e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1442:	4904      	ldr	r1, [pc, #16]	; (1454 <nrf_cc3xx_platform_mutex_init+0x24>)
    1444:	4804      	ldr	r0, [pc, #16]	; (1458 <nrf_cc3xx_platform_mutex_init+0x28>)
    1446:	f007 b8b5 	b.w	85b4 <nrf_cc3xx_platform_set_mutexes>
    144a:	bf00      	nop
    144c:	2000061c 	.word	0x2000061c
    1450:	200005fc 	.word	0x200005fc
    1454:	00009730 	.word	0x00009730
    1458:	00009720 	.word	0x00009720

0000145c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1460:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1464:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1466:	f019 0f08 	tst.w	r9, #8
{
    146a:	4604      	mov	r4, r0
    146c:	9203      	str	r2, [sp, #12]
	if (processing) {
    146e:	d022      	beq.n	14b6 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1470:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1472:	bf0c      	ite	eq
    1474:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1478:	f049 0920 	orrne.w	r9, r9, #32
    147c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1480:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1482:	4620      	mov	r0, r4
    1484:	f005 ffa4 	bl	73d0 <z_spin_unlock_valid>
    1488:	b968      	cbnz	r0, 14a6 <process_event+0x4a>
    148a:	4a9f      	ldr	r2, [pc, #636]	; (1708 <process_event+0x2ac>)
    148c:	499f      	ldr	r1, [pc, #636]	; (170c <process_event+0x2b0>)
    148e:	48a0      	ldr	r0, [pc, #640]	; (1710 <process_event+0x2b4>)
    1490:	23ac      	movs	r3, #172	; 0xac
    1492:	f007 fbae 	bl	8bf2 <printk>
    1496:	489f      	ldr	r0, [pc, #636]	; (1714 <process_event+0x2b8>)
    1498:	4621      	mov	r1, r4
    149a:	f007 fbaa 	bl	8bf2 <printk>
    149e:	489a      	ldr	r0, [pc, #616]	; (1708 <process_event+0x2ac>)
    14a0:	21ac      	movs	r1, #172	; 0xac
    14a2:	f007 f9b7 	bl	8814 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    14a6:	9b03      	ldr	r3, [sp, #12]
    14a8:	f383 8811 	msr	BASEPRI, r3
    14ac:	f3bf 8f6f 	isb	sy
}
    14b0:	b005      	add	sp, #20
    14b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    14b6:	4f98      	ldr	r7, [pc, #608]	; (1718 <process_event+0x2bc>)
    14b8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1710 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14bc:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    14c0:	2902      	cmp	r1, #2
    14c2:	d106      	bne.n	14d2 <process_event+0x76>
			evt = process_recheck(mgr);
    14c4:	4620      	mov	r0, r4
    14c6:	f007 fb3e 	bl	8b46 <process_recheck>
		if (evt == EVT_NOP) {
    14ca:	2800      	cmp	r0, #0
    14cc:	d0d8      	beq.n	1480 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    14ce:	2801      	cmp	r0, #1
    14d0:	d168      	bne.n	15a4 <process_event+0x148>
			res = mgr->last_res;
    14d2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14d6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    14d8:	f1bb 0f00 	cmp.w	fp, #0
    14dc:	da0a      	bge.n	14f4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    14de:	2600      	movs	r6, #0
		*clients = mgr->clients;
    14e0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14e2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    14e6:	e9c4 6600 	strd	r6, r6, [r4]
    14ea:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    14ee:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    14f0:	9601      	str	r6, [sp, #4]
    14f2:	e027      	b.n	1544 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14f4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    14f8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    14fa:	2901      	cmp	r1, #1
    14fc:	d834      	bhi.n	1568 <process_event+0x10c>
	list->head = NULL;
    14fe:	2100      	movs	r1, #0
    1500:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1504:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1506:	6825      	ldr	r5, [r4, #0]
    1508:	b29b      	uxth	r3, r3
	list->tail = NULL;
    150a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    150e:	d10c      	bne.n	152a <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1510:	428d      	cmp	r5, r1
    1512:	462a      	mov	r2, r5
    1514:	bf38      	it	cc
    1516:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1518:	b12a      	cbz	r2, 1526 <process_event+0xca>
				mgr->refs += 1U;
    151a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    151c:	6812      	ldr	r2, [r2, #0]
    151e:	3101      	adds	r1, #1
    1520:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1522:	2a00      	cmp	r2, #0
    1524:	d1f8      	bne.n	1518 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1526:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    152a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    152c:	4620      	mov	r0, r4
    152e:	f007 fb0a 	bl	8b46 <process_recheck>
    1532:	4606      	mov	r6, r0
    1534:	2800      	cmp	r0, #0
    1536:	d0db      	beq.n	14f0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1538:	8ba3      	ldrh	r3, [r4, #28]
    153a:	f043 0320 	orr.w	r3, r3, #32
    153e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1540:	2300      	movs	r3, #0
    1542:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1544:	8ba3      	ldrh	r3, [r4, #28]
    1546:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    154a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    154c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    154e:	d003      	beq.n	1558 <process_event+0xfc>
		if (do_monitors
    1550:	68a2      	ldr	r2, [r4, #8]
    1552:	2a00      	cmp	r2, #0
    1554:	f040 80f0 	bne.w	1738 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1558:	b91d      	cbnz	r5, 1562 <process_event+0x106>
		    || (transit != NULL)) {
    155a:	9a01      	ldr	r2, [sp, #4]
    155c:	2a00      	cmp	r2, #0
    155e:	f000 8136 	beq.w	17ce <process_event+0x372>
    1562:	f04f 0900 	mov.w	r9, #0
    1566:	e0e9      	b.n	173c <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1568:	2a04      	cmp	r2, #4
    156a:	d10e      	bne.n	158a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    156c:	f023 0307 	bic.w	r3, r3, #7
    1570:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1572:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1574:	4620      	mov	r0, r4
    1576:	f007 fae6 	bl	8b46 <process_recheck>
    157a:	4605      	mov	r5, r0
    157c:	b118      	cbz	r0, 1586 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    157e:	f042 0220 	orr.w	r2, r2, #32
    1582:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1584:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1586:	9501      	str	r5, [sp, #4]
    1588:	e7dc      	b.n	1544 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    158a:	4640      	mov	r0, r8
    158c:	4963      	ldr	r1, [pc, #396]	; (171c <process_event+0x2c0>)
    158e:	f240 131b 	movw	r3, #283	; 0x11b
    1592:	463a      	mov	r2, r7
    1594:	f007 fb2d 	bl	8bf2 <printk>
    1598:	f240 111b 	movw	r1, #283	; 0x11b
    159c:	4638      	mov	r0, r7
    159e:	f007 f939 	bl	8814 <assert_post_action>
    15a2:	e7ef      	b.n	1584 <process_event+0x128>
		} else if (evt == EVT_START) {
    15a4:	2803      	cmp	r0, #3
    15a6:	d135      	bne.n	1614 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    15a8:	f1b9 0f00 	cmp.w	r9, #0
    15ac:	d00b      	beq.n	15c6 <process_event+0x16a>
    15ae:	495c      	ldr	r1, [pc, #368]	; (1720 <process_event+0x2c4>)
    15b0:	4640      	mov	r0, r8
    15b2:	f44f 73ab 	mov.w	r3, #342	; 0x156
    15b6:	463a      	mov	r2, r7
    15b8:	f007 fb1b 	bl	8bf2 <printk>
    15bc:	f44f 71ab 	mov.w	r1, #342	; 0x156
    15c0:	4638      	mov	r0, r7
    15c2:	f007 f927 	bl	8814 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    15c6:	6823      	ldr	r3, [r4, #0]
    15c8:	b95b      	cbnz	r3, 15e2 <process_event+0x186>
    15ca:	4956      	ldr	r1, [pc, #344]	; (1724 <process_event+0x2c8>)
    15cc:	4640      	mov	r0, r8
    15ce:	f240 1357 	movw	r3, #343	; 0x157
    15d2:	463a      	mov	r2, r7
    15d4:	f007 fb0d 	bl	8bf2 <printk>
    15d8:	f240 1157 	movw	r1, #343	; 0x157
    15dc:	4638      	mov	r0, r7
    15de:	f007 f919 	bl	8814 <assert_post_action>
			transit = mgr->transitions->start;
    15e2:	6923      	ldr	r3, [r4, #16]
    15e4:	681b      	ldr	r3, [r3, #0]
    15e6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    15e8:	b95b      	cbnz	r3, 1602 <process_event+0x1a6>
    15ea:	494f      	ldr	r1, [pc, #316]	; (1728 <process_event+0x2cc>)
    15ec:	4640      	mov	r0, r8
    15ee:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    15f2:	463a      	mov	r2, r7
    15f4:	f007 fafd 	bl	8bf2 <printk>
    15f8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    15fc:	4638      	mov	r0, r7
    15fe:	f007 f909 	bl	8814 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1602:	8ba3      	ldrh	r3, [r4, #28]
    1604:	f023 0307 	bic.w	r3, r3, #7
    1608:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    160c:	83a3      	strh	r3, [r4, #28]
}
    160e:	2500      	movs	r5, #0
		res = 0;
    1610:	46ab      	mov	fp, r5
}
    1612:	e797      	b.n	1544 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1614:	2804      	cmp	r0, #4
    1616:	d132      	bne.n	167e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1618:	f1b9 0f02 	cmp.w	r9, #2
    161c:	d00b      	beq.n	1636 <process_event+0x1da>
    161e:	4943      	ldr	r1, [pc, #268]	; (172c <process_event+0x2d0>)
    1620:	4640      	mov	r0, r8
    1622:	f240 135d 	movw	r3, #349	; 0x15d
    1626:	463a      	mov	r2, r7
    1628:	f007 fae3 	bl	8bf2 <printk>
    162c:	f240 115d 	movw	r1, #349	; 0x15d
    1630:	4638      	mov	r0, r7
    1632:	f007 f8ef 	bl	8814 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1636:	8be3      	ldrh	r3, [r4, #30]
    1638:	b15b      	cbz	r3, 1652 <process_event+0x1f6>
    163a:	493d      	ldr	r1, [pc, #244]	; (1730 <process_event+0x2d4>)
    163c:	4640      	mov	r0, r8
    163e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1642:	463a      	mov	r2, r7
    1644:	f007 fad5 	bl	8bf2 <printk>
    1648:	f44f 71af 	mov.w	r1, #350	; 0x15e
    164c:	4638      	mov	r0, r7
    164e:	f007 f8e1 	bl	8814 <assert_post_action>
			transit = mgr->transitions->stop;
    1652:	6923      	ldr	r3, [r4, #16]
    1654:	685b      	ldr	r3, [r3, #4]
    1656:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1658:	b95b      	cbnz	r3, 1672 <process_event+0x216>
    165a:	4933      	ldr	r1, [pc, #204]	; (1728 <process_event+0x2cc>)
    165c:	4640      	mov	r0, r8
    165e:	f240 1361 	movw	r3, #353	; 0x161
    1662:	463a      	mov	r2, r7
    1664:	f007 fac5 	bl	8bf2 <printk>
    1668:	f240 1161 	movw	r1, #353	; 0x161
    166c:	4638      	mov	r0, r7
    166e:	f007 f8d1 	bl	8814 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1672:	8ba3      	ldrh	r3, [r4, #28]
    1674:	f023 0307 	bic.w	r3, r3, #7
    1678:	f043 0304 	orr.w	r3, r3, #4
    167c:	e7c6      	b.n	160c <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    167e:	2805      	cmp	r0, #5
    1680:	d132      	bne.n	16e8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1682:	f1b9 0f01 	cmp.w	r9, #1
    1686:	d00b      	beq.n	16a0 <process_event+0x244>
    1688:	492a      	ldr	r1, [pc, #168]	; (1734 <process_event+0x2d8>)
    168a:	4640      	mov	r0, r8
    168c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1690:	463a      	mov	r2, r7
    1692:	f007 faae 	bl	8bf2 <printk>
    1696:	f44f 71b2 	mov.w	r1, #356	; 0x164
    169a:	4638      	mov	r0, r7
    169c:	f007 f8ba 	bl	8814 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	b95b      	cbnz	r3, 16bc <process_event+0x260>
    16a4:	491f      	ldr	r1, [pc, #124]	; (1724 <process_event+0x2c8>)
    16a6:	4640      	mov	r0, r8
    16a8:	f240 1365 	movw	r3, #357	; 0x165
    16ac:	463a      	mov	r2, r7
    16ae:	f007 faa0 	bl	8bf2 <printk>
    16b2:	f240 1165 	movw	r1, #357	; 0x165
    16b6:	4638      	mov	r0, r7
    16b8:	f007 f8ac 	bl	8814 <assert_post_action>
			transit = mgr->transitions->reset;
    16bc:	6923      	ldr	r3, [r4, #16]
    16be:	689b      	ldr	r3, [r3, #8]
    16c0:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    16c2:	b95b      	cbnz	r3, 16dc <process_event+0x280>
    16c4:	4918      	ldr	r1, [pc, #96]	; (1728 <process_event+0x2cc>)
    16c6:	4640      	mov	r0, r8
    16c8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    16cc:	463a      	mov	r2, r7
    16ce:	f007 fa90 	bl	8bf2 <printk>
    16d2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    16d6:	4638      	mov	r0, r7
    16d8:	f007 f89c 	bl	8814 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16dc:	8ba3      	ldrh	r3, [r4, #28]
    16de:	f023 0307 	bic.w	r3, r3, #7
    16e2:	f043 0305 	orr.w	r3, r3, #5
    16e6:	e791      	b.n	160c <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    16e8:	490c      	ldr	r1, [pc, #48]	; (171c <process_event+0x2c0>)
    16ea:	f240 136b 	movw	r3, #363	; 0x16b
    16ee:	463a      	mov	r2, r7
    16f0:	4640      	mov	r0, r8
    16f2:	f007 fa7e 	bl	8bf2 <printk>
    16f6:	2500      	movs	r5, #0
    16f8:	f240 116b 	movw	r1, #363	; 0x16b
    16fc:	4638      	mov	r0, r7
    16fe:	f007 f889 	bl	8814 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1702:	9501      	str	r5, [sp, #4]
    1704:	e784      	b.n	1610 <process_event+0x1b4>
    1706:	bf00      	nop
    1708:	00009f3d 	.word	0x00009f3d
    170c:	00009f63 	.word	0x00009f63
    1710:	00009c7a 	.word	0x00009c7a
    1714:	00009f7a 	.word	0x00009f7a
    1718:	00009e9a 	.word	0x00009e9a
    171c:	0000a609 	.word	0x0000a609
    1720:	00009ebc 	.word	0x00009ebc
    1724:	00009ec8 	.word	0x00009ec8
    1728:	00009eeb 	.word	0x00009eeb
    172c:	00009f02 	.word	0x00009f02
    1730:	00009f18 	.word	0x00009f18
    1734:	00009f27 	.word	0x00009f27
				   && !sys_slist_is_empty(&mgr->monitors);
    1738:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    173c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1740:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1744:	83a3      	strh	r3, [r4, #28]
    1746:	4650      	mov	r0, sl
    1748:	f005 fe42 	bl	73d0 <z_spin_unlock_valid>
    174c:	b968      	cbnz	r0, 176a <process_event+0x30e>
    174e:	4a3a      	ldr	r2, [pc, #232]	; (1838 <process_event+0x3dc>)
    1750:	493a      	ldr	r1, [pc, #232]	; (183c <process_event+0x3e0>)
    1752:	23ac      	movs	r3, #172	; 0xac
    1754:	4640      	mov	r0, r8
    1756:	f007 fa4c 	bl	8bf2 <printk>
    175a:	4839      	ldr	r0, [pc, #228]	; (1840 <process_event+0x3e4>)
    175c:	4651      	mov	r1, sl
    175e:	f007 fa48 	bl	8bf2 <printk>
    1762:	4835      	ldr	r0, [pc, #212]	; (1838 <process_event+0x3dc>)
    1764:	21ac      	movs	r1, #172	; 0xac
    1766:	f007 f855 	bl	8814 <assert_post_action>
    176a:	9b03      	ldr	r3, [sp, #12]
    176c:	f383 8811 	msr	BASEPRI, r3
    1770:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1774:	f1b9 0f00 	cmp.w	r9, #0
    1778:	d138      	bne.n	17ec <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    177a:	2d00      	cmp	r5, #0
    177c:	d14b      	bne.n	1816 <process_event+0x3ba>
			if (transit != NULL) {
    177e:	9b01      	ldr	r3, [sp, #4]
    1780:	b113      	cbz	r3, 1788 <process_event+0x32c>
				transit(mgr, transition_complete);
    1782:	4930      	ldr	r1, [pc, #192]	; (1844 <process_event+0x3e8>)
    1784:	4620      	mov	r0, r4
    1786:	4798      	blx	r3
	__asm__ volatile(
    1788:	f04f 0320 	mov.w	r3, #32
    178c:	f3ef 8b11 	mrs	fp, BASEPRI
    1790:	f383 8812 	msr	BASEPRI_MAX, r3
    1794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1798:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    179a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    179e:	f005 fe09 	bl	73b4 <z_spin_lock_valid>
    17a2:	b968      	cbnz	r0, 17c0 <process_event+0x364>
    17a4:	4a24      	ldr	r2, [pc, #144]	; (1838 <process_event+0x3dc>)
    17a6:	4928      	ldr	r1, [pc, #160]	; (1848 <process_event+0x3ec>)
    17a8:	2381      	movs	r3, #129	; 0x81
    17aa:	4640      	mov	r0, r8
    17ac:	f007 fa21 	bl	8bf2 <printk>
    17b0:	4826      	ldr	r0, [pc, #152]	; (184c <process_event+0x3f0>)
    17b2:	4651      	mov	r1, sl
    17b4:	f007 fa1d 	bl	8bf2 <printk>
    17b8:	481f      	ldr	r0, [pc, #124]	; (1838 <process_event+0x3dc>)
    17ba:	2181      	movs	r1, #129	; 0x81
    17bc:	f007 f82a 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    17c0:	4650      	mov	r0, sl
    17c2:	f005 fe15 	bl	73f0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    17c6:	8ba3      	ldrh	r3, [r4, #28]
    17c8:	f023 0308 	bic.w	r3, r3, #8
    17cc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    17ce:	8ba3      	ldrh	r3, [r4, #28]
    17d0:	06da      	lsls	r2, r3, #27
    17d2:	d528      	bpl.n	1826 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17d4:	f023 0310 	bic.w	r3, r3, #16
    17d8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    17da:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    17dc:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    17e0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    17e4:	2900      	cmp	r1, #0
    17e6:	f47f ae6b 	bne.w	14c0 <process_event+0x64>
out:
    17ea:	e649      	b.n	1480 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17ec:	68a1      	ldr	r1, [r4, #8]
    17ee:	2900      	cmp	r1, #0
    17f0:	d0c3      	beq.n	177a <process_event+0x31e>
	return node->next;
    17f2:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    17f4:	9a02      	ldr	r2, [sp, #8]
    17f6:	2b00      	cmp	r3, #0
    17f8:	bf38      	it	cc
    17fa:	2300      	movcc	r3, #0
    17fc:	4699      	mov	r9, r3
    17fe:	684b      	ldr	r3, [r1, #4]
    1800:	4620      	mov	r0, r4
    1802:	461e      	mov	r6, r3
    1804:	465b      	mov	r3, fp
    1806:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1808:	f1b9 0f00 	cmp.w	r9, #0
    180c:	d0b5      	beq.n	177a <process_event+0x31e>
    180e:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1812:	4649      	mov	r1, r9
    1814:	e7ee      	b.n	17f4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1816:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1818:	9a02      	ldr	r2, [sp, #8]
    181a:	682d      	ldr	r5, [r5, #0]
    181c:	465b      	mov	r3, fp
    181e:	4620      	mov	r0, r4
    1820:	f007 f9ad 	bl	8b7e <notify_one>
    1824:	e7a9      	b.n	177a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1826:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    182a:	bf1e      	ittt	ne
    182c:	f023 0320 	bicne.w	r3, r3, #32
    1830:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1832:	2102      	movne	r1, #2
    1834:	e7d2      	b.n	17dc <process_event+0x380>
    1836:	bf00      	nop
    1838:	00009f3d 	.word	0x00009f3d
    183c:	00009f63 	.word	0x00009f63
    1840:	00009f7a 	.word	0x00009f7a
    1844:	00001851 	.word	0x00001851
    1848:	00009f8f 	.word	0x00009f8f
    184c:	00009fa4 	.word	0x00009fa4

00001850 <transition_complete>:
{
    1850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1852:	4604      	mov	r4, r0
    1854:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1856:	f100 0614 	add.w	r6, r0, #20
    185a:	f04f 0320 	mov.w	r3, #32
    185e:	f3ef 8711 	mrs	r7, BASEPRI
    1862:	f383 8812 	msr	BASEPRI_MAX, r3
    1866:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    186a:	4630      	mov	r0, r6
    186c:	f005 fda2 	bl	73b4 <z_spin_lock_valid>
    1870:	b968      	cbnz	r0, 188e <transition_complete+0x3e>
    1872:	4a0c      	ldr	r2, [pc, #48]	; (18a4 <transition_complete+0x54>)
    1874:	490c      	ldr	r1, [pc, #48]	; (18a8 <transition_complete+0x58>)
    1876:	480d      	ldr	r0, [pc, #52]	; (18ac <transition_complete+0x5c>)
    1878:	2381      	movs	r3, #129	; 0x81
    187a:	f007 f9ba 	bl	8bf2 <printk>
    187e:	480c      	ldr	r0, [pc, #48]	; (18b0 <transition_complete+0x60>)
    1880:	4631      	mov	r1, r6
    1882:	f007 f9b6 	bl	8bf2 <printk>
    1886:	4807      	ldr	r0, [pc, #28]	; (18a4 <transition_complete+0x54>)
    1888:	2181      	movs	r1, #129	; 0x81
    188a:	f006 ffc3 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    188e:	4630      	mov	r0, r6
    1890:	f005 fdae 	bl	73f0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1894:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1896:	463a      	mov	r2, r7
    1898:	4620      	mov	r0, r4
    189a:	2101      	movs	r1, #1
}
    189c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    18a0:	f7ff bddc 	b.w	145c <process_event>
    18a4:	00009f3d 	.word	0x00009f3d
    18a8:	00009f8f 	.word	0x00009f8f
    18ac:	00009c7a 	.word	0x00009c7a
    18b0:	00009fa4 	.word	0x00009fa4

000018b4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    18b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18b8:	4604      	mov	r4, r0
    18ba:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    18bc:	f007 f975 	bl	8baa <validate_args>

	if (rv < 0) {
    18c0:	1e05      	subs	r5, r0, #0
    18c2:	db5e      	blt.n	1982 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    18c4:	f104 0914 	add.w	r9, r4, #20
    18c8:	f04f 0320 	mov.w	r3, #32
    18cc:	f3ef 8a11 	mrs	sl, BASEPRI
    18d0:	f383 8812 	msr	BASEPRI_MAX, r3
    18d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    18d8:	4648      	mov	r0, r9
    18da:	f005 fd6b 	bl	73b4 <z_spin_lock_valid>
    18de:	b968      	cbnz	r0, 18fc <onoff_request+0x48>
    18e0:	4a38      	ldr	r2, [pc, #224]	; (19c4 <onoff_request+0x110>)
    18e2:	4939      	ldr	r1, [pc, #228]	; (19c8 <onoff_request+0x114>)
    18e4:	4839      	ldr	r0, [pc, #228]	; (19cc <onoff_request+0x118>)
    18e6:	2381      	movs	r3, #129	; 0x81
    18e8:	f007 f983 	bl	8bf2 <printk>
    18ec:	4838      	ldr	r0, [pc, #224]	; (19d0 <onoff_request+0x11c>)
    18ee:	4649      	mov	r1, r9
    18f0:	f007 f97f 	bl	8bf2 <printk>
    18f4:	4833      	ldr	r0, [pc, #204]	; (19c4 <onoff_request+0x110>)
    18f6:	2181      	movs	r1, #129	; 0x81
    18f8:	f006 ff8c 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    18fc:	4648      	mov	r0, r9
    18fe:	f005 fd77 	bl	73f0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1902:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1904:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    1906:	f64f 71ff 	movw	r1, #65535	; 0xffff
    190a:	428b      	cmp	r3, r1
    190c:	f002 0607 	and.w	r6, r2, #7
    1910:	d050      	beq.n	19b4 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1912:	2e02      	cmp	r6, #2
    1914:	d124      	bne.n	1960 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1916:	3301      	adds	r3, #1
    1918:	83e3      	strh	r3, [r4, #30]
	rv = state;
    191a:	4635      	mov	r5, r6
		notify = true;
    191c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1920:	4648      	mov	r0, r9
    1922:	f005 fd55 	bl	73d0 <z_spin_unlock_valid>
    1926:	b968      	cbnz	r0, 1944 <onoff_request+0x90>
    1928:	4a26      	ldr	r2, [pc, #152]	; (19c4 <onoff_request+0x110>)
    192a:	492a      	ldr	r1, [pc, #168]	; (19d4 <onoff_request+0x120>)
    192c:	4827      	ldr	r0, [pc, #156]	; (19cc <onoff_request+0x118>)
    192e:	23ac      	movs	r3, #172	; 0xac
    1930:	f007 f95f 	bl	8bf2 <printk>
    1934:	4828      	ldr	r0, [pc, #160]	; (19d8 <onoff_request+0x124>)
    1936:	4649      	mov	r1, r9
    1938:	f007 f95b 	bl	8bf2 <printk>
    193c:	4821      	ldr	r0, [pc, #132]	; (19c4 <onoff_request+0x110>)
    193e:	21ac      	movs	r1, #172	; 0xac
    1940:	f006 ff68 	bl	8814 <assert_post_action>
	__asm__ volatile(
    1944:	f38a 8811 	msr	BASEPRI, sl
    1948:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    194c:	f1b8 0f00 	cmp.w	r8, #0
    1950:	d017      	beq.n	1982 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1952:	2300      	movs	r3, #0
    1954:	4632      	mov	r2, r6
    1956:	4639      	mov	r1, r7
    1958:	4620      	mov	r0, r4
    195a:	f007 f910 	bl	8b7e <notify_one>
    195e:	e010      	b.n	1982 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1960:	0793      	lsls	r3, r2, #30
    1962:	d001      	beq.n	1968 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1964:	2e06      	cmp	r6, #6
    1966:	d10f      	bne.n	1988 <onoff_request+0xd4>
	parent->next = child;
    1968:	2300      	movs	r3, #0
    196a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    196c:	6863      	ldr	r3, [r4, #4]
    196e:	b9f3      	cbnz	r3, 19ae <onoff_request+0xfa>
	list->head = node;
    1970:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1974:	4635      	mov	r5, r6
    1976:	b9fe      	cbnz	r6, 19b8 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1978:	4652      	mov	r2, sl
    197a:	2102      	movs	r1, #2
    197c:	4620      	mov	r0, r4
    197e:	f7ff fd6d 	bl	145c <process_event>
		}
	}

	return rv;
}
    1982:	4628      	mov	r0, r5
    1984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1988:	2e05      	cmp	r6, #5
    198a:	d018      	beq.n	19be <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    198c:	2e01      	cmp	r6, #1
    198e:	d00b      	beq.n	19a8 <onoff_request+0xf4>
    1990:	4912      	ldr	r1, [pc, #72]	; (19dc <onoff_request+0x128>)
    1992:	480e      	ldr	r0, [pc, #56]	; (19cc <onoff_request+0x118>)
    1994:	4a12      	ldr	r2, [pc, #72]	; (19e0 <onoff_request+0x12c>)
    1996:	f240 13c9 	movw	r3, #457	; 0x1c9
    199a:	f007 f92a 	bl	8bf2 <printk>
    199e:	4810      	ldr	r0, [pc, #64]	; (19e0 <onoff_request+0x12c>)
    19a0:	f240 11c9 	movw	r1, #457	; 0x1c9
    19a4:	f006 ff36 	bl	8814 <assert_post_action>
		rv = -EIO;
    19a8:	f06f 0504 	mvn.w	r5, #4
    19ac:	e004      	b.n	19b8 <onoff_request+0x104>
	parent->next = child;
    19ae:	601f      	str	r7, [r3, #0]
	list->tail = node;
    19b0:	6067      	str	r7, [r4, #4]
}
    19b2:	e7df      	b.n	1974 <onoff_request+0xc0>
		rv = -EAGAIN;
    19b4:	f06f 050a 	mvn.w	r5, #10
    19b8:	f04f 0800 	mov.w	r8, #0
    19bc:	e7b0      	b.n	1920 <onoff_request+0x6c>
		rv = -ENOTSUP;
    19be:	f06f 0585 	mvn.w	r5, #133	; 0x85
    19c2:	e7f9      	b.n	19b8 <onoff_request+0x104>
    19c4:	00009f3d 	.word	0x00009f3d
    19c8:	00009f8f 	.word	0x00009f8f
    19cc:	00009c7a 	.word	0x00009c7a
    19d0:	00009fa4 	.word	0x00009fa4
    19d4:	00009f63 	.word	0x00009f63
    19d8:	00009f7a 	.word	0x00009f7a
    19dc:	00009f27 	.word	0x00009f27
    19e0:	00009e9a 	.word	0x00009e9a

000019e4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    19e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19e8:	4605      	mov	r5, r0
	__asm__ volatile(
    19ea:	f04f 0320 	mov.w	r3, #32
    19ee:	f3ef 8611 	mrs	r6, BASEPRI
    19f2:	f383 8812 	msr	BASEPRI_MAX, r3
    19f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    19fa:	4823      	ldr	r0, [pc, #140]	; (1a88 <pm_state_notify+0xa4>)
    19fc:	f005 fcda 	bl	73b4 <z_spin_lock_valid>
    1a00:	b968      	cbnz	r0, 1a1e <pm_state_notify+0x3a>
    1a02:	4a22      	ldr	r2, [pc, #136]	; (1a8c <pm_state_notify+0xa8>)
    1a04:	4922      	ldr	r1, [pc, #136]	; (1a90 <pm_state_notify+0xac>)
    1a06:	4823      	ldr	r0, [pc, #140]	; (1a94 <pm_state_notify+0xb0>)
    1a08:	2381      	movs	r3, #129	; 0x81
    1a0a:	f007 f8f2 	bl	8bf2 <printk>
    1a0e:	491e      	ldr	r1, [pc, #120]	; (1a88 <pm_state_notify+0xa4>)
    1a10:	4821      	ldr	r0, [pc, #132]	; (1a98 <pm_state_notify+0xb4>)
    1a12:	f007 f8ee 	bl	8bf2 <printk>
    1a16:	481d      	ldr	r0, [pc, #116]	; (1a8c <pm_state_notify+0xa8>)
    1a18:	2181      	movs	r1, #129	; 0x81
    1a1a:	f006 fefb 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    1a1e:	481a      	ldr	r0, [pc, #104]	; (1a88 <pm_state_notify+0xa4>)
    1a20:	f005 fce6 	bl	73f0 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1a24:	4b1d      	ldr	r3, [pc, #116]	; (1a9c <pm_state_notify+0xb8>)
    1a26:	681c      	ldr	r4, [r3, #0]
    1a28:	2c00      	cmp	r4, #0
    1a2a:	bf38      	it	cc
    1a2c:	2400      	movcc	r4, #0
    1a2e:	b19c      	cbz	r4, 1a58 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1a30:	4f1b      	ldr	r7, [pc, #108]	; (1aa0 <pm_state_notify+0xbc>)
    1a32:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1aac <pm_state_notify+0xc8>
    1a36:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1a3a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1a3e:	2d00      	cmp	r5, #0
    1a40:	bf08      	it	eq
    1a42:	4613      	moveq	r3, r2
		if (callback) {
    1a44:	b12b      	cbz	r3, 1a52 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    1a46:	f898 2014 	ldrb.w	r2, [r8, #20]
    1a4a:	fb09 f202 	mul.w	r2, r9, r2
    1a4e:	5cb8      	ldrb	r0, [r7, r2]
    1a50:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1a52:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1a54:	2c00      	cmp	r4, #0
    1a56:	d1f0      	bne.n	1a3a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1a58:	480b      	ldr	r0, [pc, #44]	; (1a88 <pm_state_notify+0xa4>)
    1a5a:	f005 fcb9 	bl	73d0 <z_spin_unlock_valid>
    1a5e:	b968      	cbnz	r0, 1a7c <pm_state_notify+0x98>
    1a60:	4a0a      	ldr	r2, [pc, #40]	; (1a8c <pm_state_notify+0xa8>)
    1a62:	4910      	ldr	r1, [pc, #64]	; (1aa4 <pm_state_notify+0xc0>)
    1a64:	480b      	ldr	r0, [pc, #44]	; (1a94 <pm_state_notify+0xb0>)
    1a66:	23ac      	movs	r3, #172	; 0xac
    1a68:	f007 f8c3 	bl	8bf2 <printk>
    1a6c:	4906      	ldr	r1, [pc, #24]	; (1a88 <pm_state_notify+0xa4>)
    1a6e:	480e      	ldr	r0, [pc, #56]	; (1aa8 <pm_state_notify+0xc4>)
    1a70:	f007 f8bf 	bl	8bf2 <printk>
    1a74:	4805      	ldr	r0, [pc, #20]	; (1a8c <pm_state_notify+0xa8>)
    1a76:	21ac      	movs	r1, #172	; 0xac
    1a78:	f006 fecc 	bl	8814 <assert_post_action>
	__asm__ volatile(
    1a7c:	f386 8811 	msr	BASEPRI, r6
    1a80:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a88:	20000b1c 	.word	0x20000b1c
    1a8c:	00009f3d 	.word	0x00009f3d
    1a90:	00009f8f 	.word	0x00009f8f
    1a94:	00009c7a 	.word	0x00009c7a
    1a98:	00009fa4 	.word	0x00009fa4
    1a9c:	20000b20 	.word	0x20000b20
    1aa0:	20000b2c 	.word	0x20000b2c
    1aa4:	00009f63 	.word	0x00009f63
    1aa8:	00009f7a 	.word	0x00009f7a
    1aac:	20000c04 	.word	0x20000c04

00001ab0 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1ab0:	f000 031f 	and.w	r3, r0, #31
    1ab4:	2201      	movs	r2, #1
    1ab6:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ab8:	4b0a      	ldr	r3, [pc, #40]	; (1ae4 <atomic_test_and_set_bit.constprop.0+0x34>)
    1aba:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1abe:	0940      	lsrs	r0, r0, #5
    1ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ac4:	e850 3f00 	ldrex	r3, [r0]
    1ac8:	ea43 0102 	orr.w	r1, r3, r2
    1acc:	e840 1c00 	strex	ip, r1, [r0]
    1ad0:	f1bc 0f00 	cmp.w	ip, #0
    1ad4:	d1f6      	bne.n	1ac4 <atomic_test_and_set_bit.constprop.0+0x14>
    1ad6:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1ada:	421a      	tst	r2, r3
}
    1adc:	bf14      	ite	ne
    1ade:	2001      	movne	r0, #1
    1ae0:	2000      	moveq	r0, #0
    1ae2:	4770      	bx	lr
    1ae4:	20000b38 	.word	0x20000b38

00001ae8 <pm_system_resume>:

void pm_system_resume(void)
{
    1ae8:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1aea:	4b1d      	ldr	r3, [pc, #116]	; (1b60 <pm_system_resume+0x78>)
    1aec:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1aee:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1af2:	f005 031f 	and.w	r3, r5, #31
    1af6:	2201      	movs	r2, #1
    1af8:	409a      	lsls	r2, r3
    1afa:	4b1a      	ldr	r3, [pc, #104]	; (1b64 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1afc:	0969      	lsrs	r1, r5, #5
{
    1afe:	b085      	sub	sp, #20
    1b00:	43d0      	mvns	r0, r2
    1b02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1b06:	e853 1f00 	ldrex	r1, [r3]
    1b0a:	ea01 0400 	and.w	r4, r1, r0
    1b0e:	e843 4c00 	strex	ip, r4, [r3]
    1b12:	f1bc 0f00 	cmp.w	ip, #0
    1b16:	d1f6      	bne.n	1b06 <pm_system_resume+0x1e>
    1b18:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1b1c:	4211      	tst	r1, r2
    1b1e:	d017      	beq.n	1b50 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1b20:	4c11      	ldr	r4, [pc, #68]	; (1b68 <pm_system_resume+0x80>)
    1b22:	220c      	movs	r2, #12
    1b24:	fb02 4205 	mla	r2, r2, r5, r4
    1b28:	ca07      	ldmia	r2, {r0, r1, r2}
    1b2a:	ab01      	add	r3, sp, #4
    1b2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1b30:	4a0e      	ldr	r2, [pc, #56]	; (1b6c <pm_system_resume+0x84>)
    1b32:	b17a      	cbz	r2, 1b54 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1b38:	f007 f8ce 	bl	8cd8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1b3c:	2000      	movs	r0, #0
    1b3e:	f7ff ff51 	bl	19e4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1b42:	230c      	movs	r3, #12
    1b44:	436b      	muls	r3, r5
    1b46:	2200      	movs	r2, #0
    1b48:	18e1      	adds	r1, r4, r3
    1b4a:	50e2      	str	r2, [r4, r3]
    1b4c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1b50:	b005      	add	sp, #20
    1b52:	bd30      	pop	{r4, r5, pc}
    1b54:	f382 8811 	msr	BASEPRI, r2
    1b58:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1b5c:	e7ee      	b.n	1b3c <pm_system_resume+0x54>
    1b5e:	bf00      	nop
    1b60:	20000c04 	.word	0x20000c04
    1b64:	20000b28 	.word	0x20000b28
    1b68:	20000b2c 	.word	0x20000b2c
    1b6c:	00008cd9 	.word	0x00008cd9

00001b70 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1b74:	4b37      	ldr	r3, [pc, #220]	; (1c54 <pm_system_suspend+0xe4>)
    1b76:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1c6c <pm_system_suspend+0xfc>
    1b7a:	7d1c      	ldrb	r4, [r3, #20]
{
    1b7c:	b088      	sub	sp, #32
    1b7e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1b80:	4620      	mov	r0, r4
    1b82:	f7ff ff95 	bl	1ab0 <atomic_test_and_set_bit.constprop.0>
    1b86:	b960      	cbnz	r0, 1ba2 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1b88:	466e      	mov	r6, sp
    1b8a:	463a      	mov	r2, r7
    1b8c:	4621      	mov	r1, r4
    1b8e:	4630      	mov	r0, r6
    1b90:	f007 f83c 	bl	8c0c <pm_policy_next_state>
    1b94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1b98:	250c      	movs	r5, #12
    1b9a:	fb05 8504 	mla	r5, r5, r4, r8
    1b9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1ba2:	230c      	movs	r3, #12
    1ba4:	4363      	muls	r3, r4
    1ba6:	eb08 0203 	add.w	r2, r8, r3
    1baa:	f818 0003 	ldrb.w	r0, [r8, r3]
    1bae:	0965      	lsrs	r5, r4, #5
    1bb0:	f004 061f 	and.w	r6, r4, #31
    1bb4:	b3c8      	cbz	r0, 1c2a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1bb6:	1c7b      	adds	r3, r7, #1
    1bb8:	d00f      	beq.n	1bda <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1bba:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1bbe:	4826      	ldr	r0, [pc, #152]	; (1c58 <pm_system_suspend+0xe8>)
    1bc0:	4a26      	ldr	r2, [pc, #152]	; (1c5c <pm_system_suspend+0xec>)
    1bc2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1bc6:	2100      	movs	r1, #0
    1bc8:	2300      	movs	r3, #0
    1bca:	fbec 010e 	umlal	r0, r1, ip, lr
    1bce:	f7fe fa97 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1bd2:	2101      	movs	r1, #1
    1bd4:	1a38      	subs	r0, r7, r0
    1bd6:	f005 fdcd 	bl	7774 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1bda:	f004 f89b 	bl	5d14 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1bde:	2001      	movs	r0, #1
    1be0:	f7ff ff00 	bl	19e4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1be4:	f3bf 8f5b 	dmb	ish
    1be8:	4b1d      	ldr	r3, [pc, #116]	; (1c60 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1bea:	2201      	movs	r2, #1
    1bec:	40b2      	lsls	r2, r6
    1bee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1bf2:	e853 1f00 	ldrex	r1, [r3]
    1bf6:	4311      	orrs	r1, r2
    1bf8:	e843 1000 	strex	r0, r1, [r3]
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d1f8      	bne.n	1bf2 <pm_system_suspend+0x82>
    1c00:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    1c04:	230c      	movs	r3, #12
    1c06:	fb03 8404 	mla	r4, r3, r4, r8
    1c0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1c0e:	ab05      	add	r3, sp, #20
    1c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1c14:	4a13      	ldr	r2, [pc, #76]	; (1c64 <pm_system_suspend+0xf4>)
    1c16:	b11a      	cbz	r2, 1c20 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1c18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1c1c:	f007 f849 	bl	8cb2 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1c20:	f7ff ff62 	bl	1ae8 <pm_system_resume>
	k_sched_unlock();
    1c24:	f004 fdba 	bl	679c <k_sched_unlock>
	bool ret = true;
    1c28:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c2a:	4a0f      	ldr	r2, [pc, #60]	; (1c68 <pm_system_suspend+0xf8>)
    1c2c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1c30:	2301      	movs	r3, #1
    1c32:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c34:	43db      	mvns	r3, r3
    1c36:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1c3a:	e855 2f00 	ldrex	r2, [r5]
    1c3e:	401a      	ands	r2, r3
    1c40:	e845 2100 	strex	r1, r2, [r5]
    1c44:	2900      	cmp	r1, #0
    1c46:	d1f8      	bne.n	1c3a <pm_system_suspend+0xca>
    1c48:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1c4c:	b008      	add	sp, #32
    1c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c52:	bf00      	nop
    1c54:	20000c04 	.word	0x20000c04
    1c58:	000f423f 	.word	0x000f423f
    1c5c:	000f4240 	.word	0x000f4240
    1c60:	20000b28 	.word	0x20000b28
    1c64:	00008cb3 	.word	0x00008cb3
    1c68:	20000b38 	.word	0x20000b38
    1c6c:	20000b2c 	.word	0x20000b2c

00001c70 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1c70:	680b      	ldr	r3, [r1, #0]
    1c72:	3301      	adds	r3, #1
    1c74:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1c76:	4b01      	ldr	r3, [pc, #4]	; (1c7c <char_out+0xc>)
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	4718      	bx	r3
    1c7c:	200000d0 	.word	0x200000d0

00001c80 <__printk_hook_install>:
	_char_out = fn;
    1c80:	4b01      	ldr	r3, [pc, #4]	; (1c88 <__printk_hook_install+0x8>)
    1c82:	6018      	str	r0, [r3, #0]
}
    1c84:	4770      	bx	lr
    1c86:	bf00      	nop
    1c88:	200000d0 	.word	0x200000d0

00001c8c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1c8c:	b507      	push	{r0, r1, r2, lr}
    1c8e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1c90:	2100      	movs	r1, #0
{
    1c92:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1c94:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1c96:	4803      	ldr	r0, [pc, #12]	; (1ca4 <vprintk+0x18>)
    1c98:	a901      	add	r1, sp, #4
    1c9a:	f7fe fdc1 	bl	820 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1c9e:	b003      	add	sp, #12
    1ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    1ca4:	00001c71 	.word	0x00001c71

00001ca8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1ca8:	b508      	push	{r3, lr}
	__asm__ volatile(
    1caa:	f04f 0220 	mov.w	r2, #32
    1cae:	f3ef 8311 	mrs	r3, BASEPRI
    1cb2:	f382 8812 	msr	BASEPRI_MAX, r2
    1cb6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1cba:	f000 fca1 	bl	2600 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1cbe:	4803      	ldr	r0, [pc, #12]	; (1ccc <sys_reboot+0x24>)
    1cc0:	f006 ff97 	bl	8bf2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1cc4:	f000 f80a 	bl	1cdc <arch_cpu_idle>
    1cc8:	e7fc      	b.n	1cc4 <sys_reboot+0x1c>
    1cca:	bf00      	nop
    1ccc:	00009fbc 	.word	0x00009fbc

00001cd0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1cd0:	4901      	ldr	r1, [pc, #4]	; (1cd8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1cd2:	2210      	movs	r2, #16
	str	r2, [r1]
    1cd4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1cd6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1cd8:	e000ed10 	.word	0xe000ed10

00001cdc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1cdc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1cde:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1ce0:	f380 8811 	msr	BASEPRI, r0
	isb
    1ce4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1ce8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1cec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1cee:	b662      	cpsie	i
	isb
    1cf0:	f3bf 8f6f 	isb	sy

	bx	lr
    1cf4:	4770      	bx	lr
    1cf6:	bf00      	nop

00001cf8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1cf8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1cfa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1cfc:	f381 8811 	msr	BASEPRI, r1

	wfe
    1d00:	bf20      	wfe

	msr	BASEPRI, r0
    1d02:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1d06:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1d08:	4770      	bx	lr
    1d0a:	bf00      	nop

00001d0c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d0c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1d0e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1d10:	4a0b      	ldr	r2, [pc, #44]	; (1d40 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1d12:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1d14:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1d16:	bf1e      	ittt	ne
	movne	r1, #0
    1d18:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1d1a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1d1c:	f007 fa8a 	blne	9234 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1d20:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d22:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d26:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d2a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d2e:	4905      	ldr	r1, [pc, #20]	; (1d44 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d30:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d32:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d34:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d36:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d3a:	4903      	ldr	r1, [pc, #12]	; (1d48 <_isr_wrapper+0x3c>)
	bx r1
    1d3c:	4708      	bx	r1
    1d3e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1d40:	20000c04 	.word	0x20000c04
	ldr r1, =_sw_isr_table
    1d44:	0000955c 	.word	0x0000955c
	ldr r1, =z_arm_int_exit
    1d48:	00001f71 	.word	0x00001f71

00001d4c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1d4c:	bf30      	wfi
    b z_SysNmiOnReset
    1d4e:	f7ff bffd 	b.w	1d4c <z_SysNmiOnReset>
    1d52:	bf00      	nop

00001d54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1d54:	4912      	ldr	r1, [pc, #72]	; (1da0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1d56:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1d58:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1d5c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1d5e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1d62:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d66:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1d68:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1d6c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1d70:	4f0c      	ldr	r7, [pc, #48]	; (1da4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1d72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1d76:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1d78:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1d7a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1d7c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    1d7e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1d80:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1d82:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1d86:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1d88:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1d8a:	f000 fae7 	bl	235c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1d8e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1d92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1d96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1d9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1d9e:	4770      	bx	lr
    ldr r1, =_kernel
    1da0:	20000c04 	.word	0x20000c04
    ldr v4, =_SCS_ICSR
    1da4:	e000ed04 	.word	0xe000ed04

00001da8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1da8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1dac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1dae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1db2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1db6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1db8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1dbc:	2902      	cmp	r1, #2
    beq _oops
    1dbe:	d0ff      	beq.n	1dc0 <_oops>

00001dc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1dc0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1dc2:	f006 ff34 	bl	8c2e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1dc6:	bd01      	pop	{r0, pc}

00001dc8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1dc8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1dca:	2b00      	cmp	r3, #0
    1dcc:	db08      	blt.n	1de0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dce:	2201      	movs	r2, #1
    1dd0:	f000 001f 	and.w	r0, r0, #31
    1dd4:	fa02 f000 	lsl.w	r0, r2, r0
    1dd8:	095b      	lsrs	r3, r3, #5
    1dda:	4a02      	ldr	r2, [pc, #8]	; (1de4 <arch_irq_enable+0x1c>)
    1ddc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop
    1de4:	e000e100 	.word	0xe000e100

00001de8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1de8:	4b05      	ldr	r3, [pc, #20]	; (1e00 <arch_irq_is_enabled+0x18>)
    1dea:	0942      	lsrs	r2, r0, #5
    1dec:	f000 001f 	and.w	r0, r0, #31
    1df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1df4:	2301      	movs	r3, #1
    1df6:	fa03 f000 	lsl.w	r0, r3, r0
}
    1dfa:	4010      	ands	r0, r2
    1dfc:	4770      	bx	lr
    1dfe:	bf00      	nop
    1e00:	e000e100 	.word	0xe000e100

00001e04 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1e04:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1e06:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1e08:	2c07      	cmp	r4, #7
{
    1e0a:	4605      	mov	r5, r0
    1e0c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1e0e:	d90f      	bls.n	1e30 <z_arm_irq_priority_set+0x2c>
    1e10:	4a11      	ldr	r2, [pc, #68]	; (1e58 <z_arm_irq_priority_set+0x54>)
    1e12:	4912      	ldr	r1, [pc, #72]	; (1e5c <z_arm_irq_priority_set+0x58>)
    1e14:	4812      	ldr	r0, [pc, #72]	; (1e60 <z_arm_irq_priority_set+0x5c>)
    1e16:	2359      	movs	r3, #89	; 0x59
    1e18:	f006 feeb 	bl	8bf2 <printk>
    1e1c:	4811      	ldr	r0, [pc, #68]	; (1e64 <z_arm_irq_priority_set+0x60>)
    1e1e:	4631      	mov	r1, r6
    1e20:	2307      	movs	r3, #7
    1e22:	462a      	mov	r2, r5
    1e24:	f006 fee5 	bl	8bf2 <printk>
    1e28:	480b      	ldr	r0, [pc, #44]	; (1e58 <z_arm_irq_priority_set+0x54>)
    1e2a:	2159      	movs	r1, #89	; 0x59
    1e2c:	f006 fcf2 	bl	8814 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1e30:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1e32:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e34:	bfac      	ite	ge
    1e36:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e3a:	4b0b      	ldrlt	r3, [pc, #44]	; (1e68 <z_arm_irq_priority_set+0x64>)
    1e3c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1e40:	bfb8      	it	lt
    1e42:	f005 050f 	andlt.w	r5, r5, #15
    1e46:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e48:	bfaa      	itet	ge
    1e4a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e4e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e50:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1e54:	bd70      	pop	{r4, r5, r6, pc}
    1e56:	bf00      	nop
    1e58:	00009fe5 	.word	0x00009fe5
    1e5c:	0000a01b 	.word	0x0000a01b
    1e60:	00009c7a 	.word	0x00009c7a
    1e64:	0000a036 	.word	0x0000a036
    1e68:	e000ed14 	.word	0xe000ed14

00001e6c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e6c:	4a0b      	ldr	r2, [pc, #44]	; (1e9c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1e6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e70:	4b0b      	ldr	r3, [pc, #44]	; (1ea0 <z_arm_prep_c+0x34>)
    1e72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e76:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1e8c:	f003 f912 	bl	50b4 <z_bss_zero>
	z_data_copy();
    1e90:	f006 f93e 	bl	8110 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1e94:	f000 f9f6 	bl	2284 <z_arm_interrupt_init>
	z_cstart();
    1e98:	f003 f916 	bl	50c8 <z_cstart>
    1e9c:	00000000 	.word	0x00000000
    1ea0:	e000ed00 	.word	0xe000ed00

00001ea4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1ea4:	4a09      	ldr	r2, [pc, #36]	; (1ecc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1ea6:	490a      	ldr	r1, [pc, #40]	; (1ed0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1ea8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1eaa:	6809      	ldr	r1, [r1, #0]
    1eac:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1eae:	4909      	ldr	r1, [pc, #36]	; (1ed4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1eb0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1eb2:	684b      	ldr	r3, [r1, #4]
    1eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1eb8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1eba:	2300      	movs	r3, #0
    1ebc:	f383 8811 	msr	BASEPRI, r3
    1ec0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1ec4:	6893      	ldr	r3, [r2, #8]
}
    1ec6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1ec8:	4770      	bx	lr
    1eca:	bf00      	nop
    1ecc:	20000c04 	.word	0x20000c04
    1ed0:	00009890 	.word	0x00009890
    1ed4:	e000ed00 	.word	0xe000ed00

00001ed8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1ed8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1edc:	9b00      	ldr	r3, [sp, #0]
    1ede:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1ee2:	490a      	ldr	r1, [pc, #40]	; (1f0c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1ee4:	9b01      	ldr	r3, [sp, #4]
    1ee6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1eea:	9b02      	ldr	r3, [sp, #8]
    1eec:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1ef0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1ef8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1efc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1f00:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1f02:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1f04:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1f06:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1f08:	4770      	bx	lr
    1f0a:	bf00      	nop
    1f0c:	00008c17 	.word	0x00008c17

00001f10 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1f10:	4a0b      	ldr	r2, [pc, #44]	; (1f40 <z_check_thread_stack_fail+0x30>)
{
    1f12:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1f14:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1f16:	b190      	cbz	r0, 1f3e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1f18:	f113 0f16 	cmn.w	r3, #22
    1f1c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    1f1e:	d005      	beq.n	1f2c <z_check_thread_stack_fail+0x1c>
    1f20:	f1a0 0220 	sub.w	r2, r0, #32
    1f24:	429a      	cmp	r2, r3
    1f26:	d806      	bhi.n	1f36 <z_check_thread_stack_fail+0x26>
    1f28:	4283      	cmp	r3, r0
    1f2a:	d204      	bcs.n	1f36 <z_check_thread_stack_fail+0x26>
    1f2c:	4281      	cmp	r1, r0
    1f2e:	bf2c      	ite	cs
    1f30:	2100      	movcs	r1, #0
    1f32:	2101      	movcc	r1, #1
    1f34:	e000      	b.n	1f38 <z_check_thread_stack_fail+0x28>
    1f36:	2100      	movs	r1, #0
    1f38:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1f3a:	bf08      	it	eq
    1f3c:	2000      	moveq	r0, #0
}
    1f3e:	4770      	bx	lr
    1f40:	20000c04 	.word	0x20000c04

00001f44 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1f44:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <arch_switch_to_main_thread+0x28>)
    1f48:	6098      	str	r0, [r3, #8]
{
    1f4a:	460d      	mov	r5, r1
    1f4c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1f4e:	f000 fa05 	bl	235c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1f52:	4620      	mov	r0, r4
    1f54:	f385 8809 	msr	PSP, r5
    1f58:	2100      	movs	r1, #0
    1f5a:	b663      	cpsie	if
    1f5c:	f381 8811 	msr	BASEPRI, r1
    1f60:	f3bf 8f6f 	isb	sy
    1f64:	2200      	movs	r2, #0
    1f66:	2300      	movs	r3, #0
    1f68:	f006 fe55 	bl	8c16 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1f6c:	20000c04 	.word	0x20000c04

00001f70 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1f72:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1f74:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1f76:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1f78:	d003      	beq.n	1f82 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1f7a:	4903      	ldr	r1, [pc, #12]	; (1f88 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1f80:	600a      	str	r2, [r1, #0]

00001f82 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1f82:	4770      	bx	lr
	ldr r3, =_kernel
    1f84:	20000c04 	.word	0x20000c04
	ldr r1, =_SCS_ICSR
    1f88:	e000ed04 	.word	0xe000ed04

00001f8c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1f8c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1f90:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1f94:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1f96:	4672      	mov	r2, lr
	bl z_arm_fault
    1f98:	f000 f8ae 	bl	20f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1f9c:	bd01      	pop	{r0, pc}
    1f9e:	bf00      	nop

00001fa0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1fa0:	2000      	movs	r0, #0
    msr CONTROL, r0
    1fa2:	f380 8814 	msr	CONTROL, r0
    isb
    1fa6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1faa:	f007 fa41 	bl	9430 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1fae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1fb0:	490d      	ldr	r1, [pc, #52]	; (1fe8 <__start+0x48>)
    str r0, [r1]
    1fb2:	6008      	str	r0, [r1, #0]
    dsb
    1fb4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1fb8:	480c      	ldr	r0, [pc, #48]	; (1fec <__start+0x4c>)
    msr msp, r0
    1fba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1fbe:	f000 f97d 	bl	22bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1fc2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1fc4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1fc8:	4809      	ldr	r0, [pc, #36]	; (1ff0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1fca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1fce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1fd0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1fd4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1fd8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1fda:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1fdc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1fe0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1fe4:	f7ff ff42 	bl	1e6c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1fe8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1fec:	20001ea0 	.word	0x20001ea0
    ldr r0, =z_interrupt_stacks
    1ff0:	20002020 	.word	0x20002020

00001ff4 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ff4:	4b23      	ldr	r3, [pc, #140]	; (2084 <mem_manage_fault+0x90>)
{
    1ff6:	b570      	push	{r4, r5, r6, lr}
    1ff8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2000:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2002:	0790      	lsls	r0, r2, #30
    2004:	d51a      	bpl.n	203c <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2006:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    200a:	0612      	lsls	r2, r2, #24
    200c:	d516      	bpl.n	203c <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    200e:	b119      	cbz	r1, 2018 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2016:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    201a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    201e:	06d6      	lsls	r6, r2, #27
    2020:	d40f      	bmi.n	2042 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2024:	0799      	lsls	r1, r3, #30
    2026:	d40c      	bmi.n	2042 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2028:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    202a:	4a16      	ldr	r2, [pc, #88]	; (2084 <mem_manage_fault+0x90>)
    202c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    202e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2032:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2034:	2300      	movs	r3, #0
    2036:	702b      	strb	r3, [r5, #0]

	return reason;
}
    2038:	4620      	mov	r0, r4
    203a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    203c:	f06f 0015 	mvn.w	r0, #21
    2040:	e7ea      	b.n	2018 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2042:	4e10      	ldr	r6, [pc, #64]	; (2084 <mem_manage_fault+0x90>)
    2044:	6873      	ldr	r3, [r6, #4]
    2046:	051a      	lsls	r2, r3, #20
    2048:	d5ee      	bpl.n	2028 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    204a:	4621      	mov	r1, r4
    204c:	f7ff ff60 	bl	1f10 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2050:	4604      	mov	r4, r0
    2052:	b118      	cbz	r0, 205c <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2054:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2058:	2402      	movs	r4, #2
    205a:	e7e6      	b.n	202a <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    205c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    205e:	06db      	lsls	r3, r3, #27
    2060:	d5e2      	bpl.n	2028 <mem_manage_fault+0x34>
    2062:	4a09      	ldr	r2, [pc, #36]	; (2088 <mem_manage_fault+0x94>)
    2064:	4909      	ldr	r1, [pc, #36]	; (208c <mem_manage_fault+0x98>)
    2066:	480a      	ldr	r0, [pc, #40]	; (2090 <mem_manage_fault+0x9c>)
    2068:	f240 1349 	movw	r3, #329	; 0x149
    206c:	f006 fdc1 	bl	8bf2 <printk>
    2070:	4808      	ldr	r0, [pc, #32]	; (2094 <mem_manage_fault+0xa0>)
    2072:	f006 fdbe 	bl	8bf2 <printk>
    2076:	4804      	ldr	r0, [pc, #16]	; (2088 <mem_manage_fault+0x94>)
    2078:	f240 1149 	movw	r1, #329	; 0x149
    207c:	f006 fbca 	bl	8814 <assert_post_action>
    2080:	e7d3      	b.n	202a <mem_manage_fault+0x36>
    2082:	bf00      	nop
    2084:	e000ed00 	.word	0xe000ed00
    2088:	0000a076 	.word	0x0000a076
    208c:	0000a0b0 	.word	0x0000a0b0
    2090:	00009c7a 	.word	0x00009c7a
    2094:	0000a0fa 	.word	0x0000a0fa

00002098 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2098:	4b0d      	ldr	r3, [pc, #52]	; (20d0 <bus_fault.isra.0+0x38>)
    209a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    209e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20a0:	0592      	lsls	r2, r2, #22
    20a2:	d508      	bpl.n	20b6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    20a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    20a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20a8:	0412      	lsls	r2, r2, #16
    20aa:	d504      	bpl.n	20b6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    20ac:	b118      	cbz	r0, 20b6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    20ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    20b4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    20b6:	4b06      	ldr	r3, [pc, #24]	; (20d0 <bus_fault.isra.0+0x38>)
    20b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    20ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20bc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    20be:	bf58      	it	pl
    20c0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    20c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    20c4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    20c6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    20ca:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    20cc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    20ce:	4770      	bx	lr
    20d0:	e000ed00 	.word	0xe000ed00

000020d4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    20d4:	4b07      	ldr	r3, [pc, #28]	; (20f4 <usage_fault.isra.0+0x20>)
    20d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    20d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    20da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    20dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    20de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    20e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    20e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20e4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    20e8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    20ec:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    20ee:	2000      	movs	r0, #0
    20f0:	4770      	bx	lr
    20f2:	bf00      	nop
    20f4:	e000ed00 	.word	0xe000ed00

000020f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    20f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    20fa:	4b54      	ldr	r3, [pc, #336]	; (224c <z_arm_fault+0x154>)
    20fc:	685c      	ldr	r4, [r3, #4]
{
    20fe:	b08a      	sub	sp, #40	; 0x28
    2100:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2102:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2106:	2600      	movs	r6, #0
    2108:	f386 8811 	msr	BASEPRI, r6
    210c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2110:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2114:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2118:	d108      	bne.n	212c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    211a:	f002 030c 	and.w	r3, r2, #12
    211e:	2b08      	cmp	r3, #8
    2120:	d004      	beq.n	212c <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2122:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    2124:	bf5c      	itt	pl
    2126:	4605      	movpl	r5, r0
			*nested_exc = true;
    2128:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    212a:	b97d      	cbnz	r5, 214c <z_arm_fault+0x54>
    212c:	4a48      	ldr	r2, [pc, #288]	; (2250 <z_arm_fault+0x158>)
    212e:	4949      	ldr	r1, [pc, #292]	; (2254 <z_arm_fault+0x15c>)
    2130:	4849      	ldr	r0, [pc, #292]	; (2258 <z_arm_fault+0x160>)
    2132:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2136:	f006 fd5c 	bl	8bf2 <printk>
    213a:	4848      	ldr	r0, [pc, #288]	; (225c <z_arm_fault+0x164>)
    213c:	f006 fd59 	bl	8bf2 <printk>
    2140:	4843      	ldr	r0, [pc, #268]	; (2250 <z_arm_fault+0x158>)
    2142:	f240 31f2 	movw	r1, #1010	; 0x3f2
    2146:	f006 fb65 	bl	8814 <assert_post_action>
    214a:	2500      	movs	r5, #0
	*recoverable = false;
    214c:	2300      	movs	r3, #0
    214e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2152:	1ee3      	subs	r3, r4, #3
    2154:	2b03      	cmp	r3, #3
    2156:	d872      	bhi.n	223e <z_arm_fault+0x146>
    2158:	e8df f003 	tbb	[pc, r3]
    215c:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2160:	4b3a      	ldr	r3, [pc, #232]	; (224c <z_arm_fault+0x154>)
    2162:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2164:	f014 0402 	ands.w	r4, r4, #2
    2168:	d169      	bne.n	223e <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    216c:	2a00      	cmp	r2, #0
    216e:	db18      	blt.n	21a2 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2172:	005b      	lsls	r3, r3, #1
    2174:	d54e      	bpl.n	2214 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2176:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2178:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    217c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2180:	429a      	cmp	r2, r3
    2182:	d00d      	beq.n	21a0 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2184:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2188:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    218c:	781b      	ldrb	r3, [r3, #0]
    218e:	b30b      	cbz	r3, 21d4 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2190:	f10d 0207 	add.w	r2, sp, #7
    2194:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2196:	4628      	mov	r0, r5
    2198:	f7ff ff2c 	bl	1ff4 <mem_manage_fault>
		reason = usage_fault(esf);
    219c:	4604      	mov	r4, r0
		break;
    219e:	e000      	b.n	21a2 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    21a0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    21a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    21a6:	b99b      	cbnz	r3, 21d0 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    21a8:	2220      	movs	r2, #32
    21aa:	4629      	mov	r1, r5
    21ac:	a802      	add	r0, sp, #8
    21ae:	f006 fd6c 	bl	8c8a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    21b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21b4:	2e00      	cmp	r6, #0
    21b6:	d044      	beq.n	2242 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    21b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    21bc:	b922      	cbnz	r2, 21c8 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    21be:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    21c2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    21c6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    21c8:	a902      	add	r1, sp, #8
    21ca:	4620      	mov	r0, r4
    21cc:	f006 fd2d 	bl	8c2a <z_arm_fatal_error>
}
    21d0:	b00a      	add	sp, #40	; 0x28
    21d2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    21d4:	4b22      	ldr	r3, [pc, #136]	; (2260 <z_arm_fault+0x168>)
    21d6:	781b      	ldrb	r3, [r3, #0]
    21d8:	b12b      	cbz	r3, 21e6 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    21da:	f10d 0107 	add.w	r1, sp, #7
    21de:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    21e0:	f7ff ff5a 	bl	2098 <bus_fault.isra.0>
    21e4:	e7da      	b.n	219c <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    21e6:	4b1f      	ldr	r3, [pc, #124]	; (2264 <z_arm_fault+0x16c>)
    21e8:	881b      	ldrh	r3, [r3, #0]
    21ea:	b29b      	uxth	r3, r3
    21ec:	b113      	cbz	r3, 21f4 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    21ee:	f7ff ff71 	bl	20d4 <usage_fault.isra.0>
    21f2:	e7d3      	b.n	219c <z_arm_fault+0xa4>
			__ASSERT(0,
    21f4:	491c      	ldr	r1, [pc, #112]	; (2268 <z_arm_fault+0x170>)
    21f6:	4a16      	ldr	r2, [pc, #88]	; (2250 <z_arm_fault+0x158>)
    21f8:	4817      	ldr	r0, [pc, #92]	; (2258 <z_arm_fault+0x160>)
    21fa:	f240 23c3 	movw	r3, #707	; 0x2c3
    21fe:	f006 fcf8 	bl	8bf2 <printk>
    2202:	481a      	ldr	r0, [pc, #104]	; (226c <z_arm_fault+0x174>)
    2204:	f006 fcf5 	bl	8bf2 <printk>
    2208:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    220c:	4810      	ldr	r0, [pc, #64]	; (2250 <z_arm_fault+0x158>)
    220e:	f006 fb01 	bl	8814 <assert_post_action>
    2212:	e7c6      	b.n	21a2 <z_arm_fault+0xaa>
    2214:	4914      	ldr	r1, [pc, #80]	; (2268 <z_arm_fault+0x170>)
    2216:	4a0e      	ldr	r2, [pc, #56]	; (2250 <z_arm_fault+0x158>)
    2218:	480f      	ldr	r0, [pc, #60]	; (2258 <z_arm_fault+0x160>)
    221a:	f240 23c7 	movw	r3, #711	; 0x2c7
    221e:	f006 fce8 	bl	8bf2 <printk>
    2222:	4813      	ldr	r0, [pc, #76]	; (2270 <z_arm_fault+0x178>)
    2224:	f006 fce5 	bl	8bf2 <printk>
    2228:	f240 21c7 	movw	r1, #711	; 0x2c7
    222c:	e7ee      	b.n	220c <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    222e:	f10d 0207 	add.w	r2, sp, #7
    2232:	2100      	movs	r1, #0
    2234:	e7af      	b.n	2196 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    2236:	f10d 0107 	add.w	r1, sp, #7
    223a:	2000      	movs	r0, #0
    223c:	e7d0      	b.n	21e0 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    223e:	2400      	movs	r4, #0
    2240:	e7af      	b.n	21a2 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2242:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2246:	f023 0301 	bic.w	r3, r3, #1
    224a:	e7bc      	b.n	21c6 <z_arm_fault+0xce>
    224c:	e000ed00 	.word	0xe000ed00
    2250:	0000a076 	.word	0x0000a076
    2254:	0000a11d 	.word	0x0000a11d
    2258:	00009c7a 	.word	0x00009c7a
    225c:	0000a130 	.word	0x0000a130
    2260:	e000ed29 	.word	0xe000ed29
    2264:	e000ed2a 	.word	0xe000ed2a
    2268:	0000a609 	.word	0x0000a609
    226c:	0000a16e 	.word	0x0000a16e
    2270:	0000a192 	.word	0x0000a192

00002274 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2274:	4a02      	ldr	r2, [pc, #8]	; (2280 <z_arm_fault_init+0xc>)
    2276:	6953      	ldr	r3, [r2, #20]
    2278:	f043 0310 	orr.w	r3, r3, #16
    227c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    227e:	4770      	bx	lr
    2280:	e000ed00 	.word	0xe000ed00

00002284 <z_arm_interrupt_init>:
    2284:	4804      	ldr	r0, [pc, #16]	; (2298 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2286:	2300      	movs	r3, #0
    2288:	2120      	movs	r1, #32
    228a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    228c:	3301      	adds	r3, #1
    228e:	2b30      	cmp	r3, #48	; 0x30
    2290:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2294:	d1f9      	bne.n	228a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2296:	4770      	bx	lr
    2298:	e000e100 	.word	0xe000e100

0000229c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    229c:	4a06      	ldr	r2, [pc, #24]	; (22b8 <z_arm_clear_arm_mpu_config+0x1c>)
    229e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    22a0:	2300      	movs	r3, #0
	int num_regions =
    22a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    22a6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    22a8:	428b      	cmp	r3, r1
    22aa:	d100      	bne.n	22ae <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    22ac:	4770      	bx	lr
  MPU->RNR = rnr;
    22ae:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    22b0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    22b2:	3301      	adds	r3, #1
    22b4:	e7f8      	b.n	22a8 <z_arm_clear_arm_mpu_config+0xc>
    22b6:	bf00      	nop
    22b8:	e000ed90 	.word	0xe000ed90

000022bc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    22bc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    22be:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    22c0:	2300      	movs	r3, #0
    22c2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    22c6:	f7ff ffe9 	bl	229c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    22ca:	4b14      	ldr	r3, [pc, #80]	; (231c <z_arm_init_arch_hw_at_boot+0x60>)
    22cc:	f04f 32ff 	mov.w	r2, #4294967295
    22d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    22d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    22d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    22dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    22e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    22e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    22e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    22ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    22f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    22f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    22f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    22fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2300:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2304:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2308:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    230c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2310:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2316:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    231a:	bd08      	pop	{r3, pc}
    231c:	e000e100 	.word	0xe000e100

00002320 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2320:	4b06      	ldr	r3, [pc, #24]	; (233c <z_impl_k_thread_abort+0x1c>)
    2322:	689b      	ldr	r3, [r3, #8]
    2324:	4283      	cmp	r3, r0
    2326:	d107      	bne.n	2338 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2328:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    232c:	b123      	cbz	r3, 2338 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    232e:	4a04      	ldr	r2, [pc, #16]	; (2340 <z_impl_k_thread_abort+0x20>)
    2330:	6853      	ldr	r3, [r2, #4]
    2332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2336:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2338:	f004 bcf4 	b.w	6d24 <z_thread_abort>
    233c:	20000c04 	.word	0x20000c04
    2340:	e000ed00 	.word	0xe000ed00

00002344 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2344:	4b02      	ldr	r3, [pc, #8]	; (2350 <z_arm_configure_static_mpu_regions+0xc>)
    2346:	4a03      	ldr	r2, [pc, #12]	; (2354 <z_arm_configure_static_mpu_regions+0x10>)
    2348:	4803      	ldr	r0, [pc, #12]	; (2358 <z_arm_configure_static_mpu_regions+0x14>)
    234a:	2101      	movs	r1, #1
    234c:	f000 b868 	b.w	2420 <arm_core_mpu_configure_static_mpu_regions>
    2350:	20040000 	.word	0x20040000
    2354:	20000000 	.word	0x20000000
    2358:	00009744 	.word	0x00009744

0000235c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    235c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    235e:	4b05      	ldr	r3, [pc, #20]	; (2374 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2360:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2362:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2364:	4a04      	ldr	r2, [pc, #16]	; (2378 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2366:	2120      	movs	r1, #32
    2368:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    236c:	4618      	mov	r0, r3
    236e:	2101      	movs	r1, #1
    2370:	f000 b87e 	b.w	2470 <arm_core_mpu_configure_dynamic_mpu_regions>
    2374:	20000b3c 	.word	0x20000b3c
    2378:	150b0000 	.word	0x150b0000

0000237c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    237c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    237e:	4f1e      	ldr	r7, [pc, #120]	; (23f8 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2380:	2600      	movs	r6, #0
    2382:	428e      	cmp	r6, r1
    2384:	db01      	blt.n	238a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2386:	4610      	mov	r0, r2
    2388:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    238a:	6844      	ldr	r4, [r0, #4]
    238c:	b384      	cbz	r4, 23f0 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    238e:	b153      	cbz	r3, 23a6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2390:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2394:	ea14 0f0c 	tst.w	r4, ip
    2398:	d118      	bne.n	23cc <mpu_configure_regions+0x50>
		&&
    239a:	2c1f      	cmp	r4, #31
    239c:	d916      	bls.n	23cc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    239e:	6805      	ldr	r5, [r0, #0]
		&&
    23a0:	ea1c 0f05 	tst.w	ip, r5
    23a4:	d112      	bne.n	23cc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    23a6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    23a8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    23aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    23ae:	b2d2      	uxtb	r2, r2
    23b0:	d90f      	bls.n	23d2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    23b2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    23b6:	d80e      	bhi.n	23d6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    23b8:	3c01      	subs	r4, #1
    23ba:	fab4 f484 	clz	r4, r4
    23be:	f1c4 041f 	rsb	r4, r4, #31
    23c2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    23c4:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    23c6:	ea4c 0404 	orr.w	r4, ip, r4
    23ca:	d906      	bls.n	23da <mpu_configure_regions+0x5e>
			return -EINVAL;
    23cc:	f06f 0215 	mvn.w	r2, #21
    23d0:	e7d9      	b.n	2386 <mpu_configure_regions+0xa>
		return REGION_32B;
    23d2:	2408      	movs	r4, #8
    23d4:	e7f6      	b.n	23c4 <mpu_configure_regions+0x48>
		return REGION_4G;
    23d6:	243e      	movs	r4, #62	; 0x3e
    23d8:	e7f4      	b.n	23c4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23da:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    23de:	4315      	orrs	r5, r2
    23e0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    23e4:	f044 0401 	orr.w	r4, r4, #1
    23e8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    23ea:	60fd      	str	r5, [r7, #12]
		reg_index++;
    23ec:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    23ee:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    23f0:	3601      	adds	r6, #1
    23f2:	300c      	adds	r0, #12
    23f4:	e7c5      	b.n	2382 <mpu_configure_regions+0x6>
    23f6:	bf00      	nop
    23f8:	e000ed90 	.word	0xe000ed90

000023fc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    23fc:	4b03      	ldr	r3, [pc, #12]	; (240c <arm_core_mpu_enable+0x10>)
    23fe:	2205      	movs	r2, #5
    2400:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2406:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    240a:	4770      	bx	lr
    240c:	e000ed90 	.word	0xe000ed90

00002410 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2410:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2414:	4b01      	ldr	r3, [pc, #4]	; (241c <arm_core_mpu_disable+0xc>)
    2416:	2200      	movs	r2, #0
    2418:	605a      	str	r2, [r3, #4]
}
    241a:	4770      	bx	lr
    241c:	e000ed90 	.word	0xe000ed90

00002420 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2420:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2422:	4d0e      	ldr	r5, [pc, #56]	; (245c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2424:	2301      	movs	r3, #1
    2426:	782a      	ldrb	r2, [r5, #0]
    2428:	460c      	mov	r4, r1
    242a:	f7ff ffa7 	bl	237c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    242e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2430:	3016      	adds	r0, #22
    2432:	d111      	bne.n	2458 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2434:	f240 1311 	movw	r3, #273	; 0x111
    2438:	4a09      	ldr	r2, [pc, #36]	; (2460 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    243a:	490a      	ldr	r1, [pc, #40]	; (2464 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    243c:	480a      	ldr	r0, [pc, #40]	; (2468 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    243e:	f006 fbd8 	bl	8bf2 <printk>
    2442:	4621      	mov	r1, r4
    2444:	4809      	ldr	r0, [pc, #36]	; (246c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2446:	f006 fbd4 	bl	8bf2 <printk>
			regions_num);
	}
}
    244a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    244e:	4804      	ldr	r0, [pc, #16]	; (2460 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2450:	f240 1111 	movw	r1, #273	; 0x111
    2454:	f006 b9de 	b.w	8814 <assert_post_action>
}
    2458:	bd38      	pop	{r3, r4, r5, pc}
    245a:	bf00      	nop
    245c:	20000c7a 	.word	0x20000c7a
    2460:	0000a1c2 	.word	0x0000a1c2
    2464:	0000a609 	.word	0x0000a609
    2468:	00009c7a 	.word	0x00009c7a
    246c:	0000a1f9 	.word	0x0000a1f9

00002470 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2470:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2472:	4a12      	ldr	r2, [pc, #72]	; (24bc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2474:	2300      	movs	r3, #0
    2476:	7812      	ldrb	r2, [r2, #0]
    2478:	460c      	mov	r4, r1
    247a:	f7ff ff7f 	bl	237c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    247e:	f110 0f16 	cmn.w	r0, #22
    2482:	d008      	beq.n	2496 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2484:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2486:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2488:	2807      	cmp	r0, #7
    248a:	dd00      	ble.n	248e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    248c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    248e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2490:	611a      	str	r2, [r3, #16]
    2492:	3001      	adds	r0, #1
    2494:	e7f8      	b.n	2488 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2496:	4a0b      	ldr	r2, [pc, #44]	; (24c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2498:	490b      	ldr	r1, [pc, #44]	; (24c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    249a:	480c      	ldr	r0, [pc, #48]	; (24cc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    249c:	f44f 7398 	mov.w	r3, #304	; 0x130
    24a0:	f006 fba7 	bl	8bf2 <printk>
    24a4:	4621      	mov	r1, r4
    24a6:	480a      	ldr	r0, [pc, #40]	; (24d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    24a8:	f006 fba3 	bl	8bf2 <printk>
}
    24ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    24b0:	4804      	ldr	r0, [pc, #16]	; (24c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    24b2:	f44f 7198 	mov.w	r1, #304	; 0x130
    24b6:	f006 b9ad 	b.w	8814 <assert_post_action>
    24ba:	bf00      	nop
    24bc:	20000c7a 	.word	0x20000c7a
    24c0:	e000ed90 	.word	0xe000ed90
    24c4:	0000a1c2 	.word	0x0000a1c2
    24c8:	0000a609 	.word	0x0000a609
    24cc:	00009c7a 	.word	0x00009c7a
    24d0:	0000a225 	.word	0x0000a225

000024d4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    24d4:	4925      	ldr	r1, [pc, #148]	; (256c <z_arm_mpu_init+0x98>)
{
    24d6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    24d8:	680c      	ldr	r4, [r1, #0]
    24da:	2c08      	cmp	r4, #8
    24dc:	d913      	bls.n	2506 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    24de:	f44f 73a4 	mov.w	r3, #328	; 0x148
    24e2:	4a23      	ldr	r2, [pc, #140]	; (2570 <z_arm_mpu_init+0x9c>)
    24e4:	4923      	ldr	r1, [pc, #140]	; (2574 <z_arm_mpu_init+0xa0>)
    24e6:	4824      	ldr	r0, [pc, #144]	; (2578 <z_arm_mpu_init+0xa4>)
    24e8:	f006 fb83 	bl	8bf2 <printk>
    24ec:	4823      	ldr	r0, [pc, #140]	; (257c <z_arm_mpu_init+0xa8>)
    24ee:	2208      	movs	r2, #8
    24f0:	4621      	mov	r1, r4
    24f2:	f006 fb7e 	bl	8bf2 <printk>
    24f6:	481e      	ldr	r0, [pc, #120]	; (2570 <z_arm_mpu_init+0x9c>)
    24f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    24fc:	f006 f98a 	bl	8814 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2500:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2504:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2506:	f7ff ff83 	bl	2410 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    250a:	6848      	ldr	r0, [r1, #4]
    250c:	491c      	ldr	r1, [pc, #112]	; (2580 <z_arm_mpu_init+0xac>)
    250e:	2200      	movs	r2, #0
    2510:	4294      	cmp	r4, r2
    2512:	f100 000c 	add.w	r0, r0, #12
    2516:	d119      	bne.n	254c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2518:	4b1a      	ldr	r3, [pc, #104]	; (2584 <z_arm_mpu_init+0xb0>)
    251a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    251c:	f7ff ff6e 	bl	23fc <arm_core_mpu_enable>
	__ASSERT(
    2520:	680b      	ldr	r3, [r1, #0]
    2522:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2526:	2b08      	cmp	r3, #8
    2528:	d00e      	beq.n	2548 <z_arm_mpu_init+0x74>
    252a:	4917      	ldr	r1, [pc, #92]	; (2588 <z_arm_mpu_init+0xb4>)
    252c:	4a10      	ldr	r2, [pc, #64]	; (2570 <z_arm_mpu_init+0x9c>)
    252e:	4812      	ldr	r0, [pc, #72]	; (2578 <z_arm_mpu_init+0xa4>)
    2530:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2534:	f006 fb5d 	bl	8bf2 <printk>
    2538:	4814      	ldr	r0, [pc, #80]	; (258c <z_arm_mpu_init+0xb8>)
    253a:	f006 fb5a 	bl	8bf2 <printk>
    253e:	480c      	ldr	r0, [pc, #48]	; (2570 <z_arm_mpu_init+0x9c>)
    2540:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2544:	f006 f966 	bl	8814 <assert_post_action>
	return 0;
    2548:	2000      	movs	r0, #0
    254a:	e7db      	b.n	2504 <z_arm_mpu_init+0x30>
    254c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    254e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2552:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2556:	4313      	orrs	r3, r2
    2558:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    255c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    255e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2562:	f043 0301 	orr.w	r3, r3, #1
    2566:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2568:	3201      	adds	r2, #1
    256a:	e7d1      	b.n	2510 <z_arm_mpu_init+0x3c>
    256c:	00009750 	.word	0x00009750
    2570:	0000a1c2 	.word	0x0000a1c2
    2574:	0000a609 	.word	0x0000a609
    2578:	00009c7a 	.word	0x00009c7a
    257c:	0000a252 	.word	0x0000a252
    2580:	e000ed90 	.word	0xe000ed90
    2584:	20000c7a 	.word	0x20000c7a
    2588:	0000a286 	.word	0x0000a286
    258c:	0000a2d6 	.word	0x0000a2d6

00002590 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2590:	4b01      	ldr	r3, [pc, #4]	; (2598 <__stdout_hook_install+0x8>)
    2592:	6018      	str	r0, [r3, #0]
}
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	200000d4 	.word	0x200000d4

0000259c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    259c:	f04f 0320 	mov.w	r3, #32
    25a0:	f3ef 8111 	mrs	r1, BASEPRI
    25a4:	f383 8812 	msr	BASEPRI_MAX, r3
    25a8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    25ac:	4a0f      	ldr	r2, [pc, #60]	; (25ec <nordicsemi_nrf52_init+0x50>)
    25ae:	2301      	movs	r3, #1
    25b0:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    25b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25b8:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    25bc:	4a0c      	ldr	r2, [pc, #48]	; (25f0 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    25be:	6812      	ldr	r2, [r2, #0]
    25c0:	2a08      	cmp	r2, #8
    25c2:	d108      	bne.n	25d6 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    25c4:	4a0b      	ldr	r2, [pc, #44]	; (25f4 <nordicsemi_nrf52_init+0x58>)
    25c6:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    25c8:	2a05      	cmp	r2, #5
    25ca:	d804      	bhi.n	25d6 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    25cc:	480a      	ldr	r0, [pc, #40]	; (25f8 <nordicsemi_nrf52_init+0x5c>)
    25ce:	5c82      	ldrb	r2, [r0, r2]
    25d0:	b10a      	cbz	r2, 25d6 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    25d2:	4a0a      	ldr	r2, [pc, #40]	; (25fc <nordicsemi_nrf52_init+0x60>)
    25d4:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    25d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25da:	2201      	movs	r2, #1
    25dc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    25e0:	f381 8811 	msr	BASEPRI, r1
    25e4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    25e8:	2000      	movs	r0, #0
    25ea:	4770      	bx	lr
    25ec:	4001e000 	.word	0x4001e000
    25f0:	10000130 	.word	0x10000130
    25f4:	10000134 	.word	0x10000134
    25f8:	0000a306 	.word	0x0000a306
    25fc:	40000638 	.word	0x40000638

00002600 <sys_arch_reboot>:
    *p_gpregret = val;
    2600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2604:	b2c0      	uxtb	r0, r0
    2606:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    260a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    260e:	4905      	ldr	r1, [pc, #20]	; (2624 <sys_arch_reboot+0x24>)
    2610:	4b05      	ldr	r3, [pc, #20]	; (2628 <sys_arch_reboot+0x28>)
    2612:	68ca      	ldr	r2, [r1, #12]
    2614:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2618:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    261a:	60cb      	str	r3, [r1, #12]
    261c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2620:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2622:	e7fd      	b.n	2620 <sys_arch_reboot+0x20>
    2624:	e000ed00 	.word	0xe000ed00
    2628:	05fa0004 	.word	0x05fa0004

0000262c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    262c:	b120      	cbz	r0, 2638 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    262e:	4b03      	ldr	r3, [pc, #12]	; (263c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2630:	0180      	lsls	r0, r0, #6
    2632:	f043 0301 	orr.w	r3, r3, #1
    2636:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2638:	4770      	bx	lr
    263a:	bf00      	nop
    263c:	00009710 	.word	0x00009710

00002640 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2640:	4a05      	ldr	r2, [pc, #20]	; (2658 <adc_context_start_sampling.isra.0+0x18>)
    2642:	2301      	movs	r3, #1
    2644:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2648:	b108      	cbz	r0, 264e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    264a:	60d3      	str	r3, [r2, #12]
}
    264c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    264e:	6013      	str	r3, [r2, #0]
    2650:	4a02      	ldr	r2, [pc, #8]	; (265c <adc_context_start_sampling.isra.0+0x1c>)
    2652:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2654:	4770      	bx	lr
    2656:	bf00      	nop
    2658:	40007000 	.word	0x40007000
    265c:	40007004 	.word	0x40007004

00002660 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2660:	7908      	ldrb	r0, [r1, #4]
{
    2662:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2664:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    2668:	2c07      	cmp	r4, #7
    266a:	d81f      	bhi.n	26ac <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    266c:	780b      	ldrb	r3, [r1, #0]
    266e:	2b09      	cmp	r3, #9
    2670:	d81c      	bhi.n	26ac <adc_nrfx_channel_setup+0x4c>
    2672:	e8df f003 	tbb	[pc, r3]
    2676:	0606      	.short	0x0606
    2678:	1b060606 	.word	0x1b060606
    267c:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2680:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2682:	784a      	ldrb	r2, [r1, #1]
    2684:	2a03      	cmp	r2, #3
    2686:	d018      	beq.n	26ba <adc_nrfx_channel_setup+0x5a>
    2688:	2a04      	cmp	r2, #4
    268a:	d10f      	bne.n	26ac <adc_nrfx_channel_setup+0x4c>
    268c:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    268e:	884a      	ldrh	r2, [r1, #2]
    2690:	f244 060a 	movw	r6, #16394	; 0x400a
    2694:	42b2      	cmp	r2, r6
    2696:	d044      	beq.n	2722 <adc_nrfx_channel_setup+0xc2>
    2698:	d811      	bhi.n	26be <adc_nrfx_channel_setup+0x5e>
    269a:	f244 0603 	movw	r6, #16387	; 0x4003
    269e:	42b2      	cmp	r2, r6
    26a0:	d03b      	beq.n	271a <adc_nrfx_channel_setup+0xba>
    26a2:	f244 0605 	movw	r6, #16389	; 0x4005
    26a6:	42b2      	cmp	r2, r6
    26a8:	d039      	beq.n	271e <adc_nrfx_channel_setup+0xbe>
    26aa:	b3d2      	cbz	r2, 2722 <adc_nrfx_channel_setup+0xc2>
    26ac:	f06f 0015 	mvn.w	r0, #21
    26b0:	e032      	b.n	2718 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    26b2:	2306      	movs	r3, #6
		break;
    26b4:	e7e5      	b.n	2682 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    26b6:	2307      	movs	r3, #7
		break;
    26b8:	e7e3      	b.n	2682 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    26ba:	2501      	movs	r5, #1
    26bc:	e7e7      	b.n	268e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    26be:	f244 0614 	movw	r6, #16404	; 0x4014
    26c2:	42b2      	cmp	r2, r6
    26c4:	d02f      	beq.n	2726 <adc_nrfx_channel_setup+0xc6>
    26c6:	f244 0628 	movw	r6, #16424	; 0x4028
    26ca:	42b2      	cmp	r2, r6
    26cc:	d02d      	beq.n	272a <adc_nrfx_channel_setup+0xca>
    26ce:	f244 060f 	movw	r6, #16399	; 0x400f
    26d2:	42b2      	cmp	r2, r6
    26d4:	d1ea      	bne.n	26ac <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    26d6:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    26d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    26dc:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    26de:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    26e2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    26e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    26ea:	0122      	lsls	r2, r4, #4
    26ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    26f0:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    26f4:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    26f6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    26fa:	0123      	lsls	r3, r4, #4
    26fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2700:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2704:	798a      	ldrb	r2, [r1, #6]
    2706:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    270a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    270e:	4b08      	ldr	r3, [pc, #32]	; (2730 <adc_nrfx_channel_setup+0xd0>)
    2710:	441c      	add	r4, r3
    2712:	794b      	ldrb	r3, [r1, #5]
    2714:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    2718:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    271a:	2200      	movs	r2, #0
    271c:	e7dc      	b.n	26d8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    271e:	2201      	movs	r2, #1
    2720:	e7da      	b.n	26d8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2722:	2202      	movs	r2, #2
    2724:	e7d8      	b.n	26d8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2726:	2204      	movs	r2, #4
    2728:	e7d6      	b.n	26d8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    272a:	2205      	movs	r2, #5
    272c:	e7d4      	b.n	26d8 <adc_nrfx_channel_setup+0x78>
    272e:	bf00      	nop
    2730:	20000000 	.word	0x20000000

00002734 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    2734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2736:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    2738:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    273a:	b910      	cbnz	r0, 2742 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    273c:	f06f 0015 	mvn.w	r0, #21
    2740:	e09c      	b.n	287c <start_read.isra.0+0x148>
	if (!selected_channels ||
    2742:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    2746:	d1f9      	bne.n	273c <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    2748:	4c57      	ldr	r4, [pc, #348]	; (28a8 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    274a:	4f58      	ldr	r7, [pc, #352]	; (28ac <start_read.isra.0+0x178>)
	active_channels = 0U;
    274c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    274e:	fa20 f302 	lsr.w	r3, r0, r2
    2752:	f013 0301 	ands.w	r3, r3, #1
    2756:	d033      	beq.n	27c0 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2758:	18bb      	adds	r3, r7, r2
    275a:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    275e:	f1bc 0f00 	cmp.w	ip, #0
    2762:	d0eb      	beq.n	273c <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2764:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2768:	7c6e      	ldrb	r6, [r5, #17]
    276a:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    276e:	3e00      	subs	r6, #0
    2770:	bf18      	it	ne
    2772:	2601      	movne	r6, #1
    2774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2778:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    277c:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2780:	f102 0351 	add.w	r3, r2, #81	; 0x51
    2784:	011b      	lsls	r3, r3, #4
			++active_channels;
    2786:	3101      	adds	r1, #1
    2788:	f844 c003 	str.w	ip, [r4, r3]
    278c:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    278e:	3201      	adds	r2, #1
    2790:	2a08      	cmp	r2, #8
    2792:	d1dc      	bne.n	274e <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    2794:	7c2b      	ldrb	r3, [r5, #16]
    2796:	3b08      	subs	r3, #8
    2798:	2b06      	cmp	r3, #6
    279a:	d8cf      	bhi.n	273c <start_read.isra.0+0x8>
    279c:	a201      	add	r2, pc, #4	; (adr r2, 27a4 <start_read.isra.0+0x70>)
    279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    27a2:	bf00      	nop
    27a4:	00002889 	.word	0x00002889
    27a8:	0000273d 	.word	0x0000273d
    27ac:	000027cb 	.word	0x000027cb
    27b0:	0000273d 	.word	0x0000273d
    27b4:	00002881 	.word	0x00002881
    27b8:	0000273d 	.word	0x0000273d
    27bc:	00002885 	.word	0x00002885
    27c0:	f102 0651 	add.w	r6, r2, #81	; 0x51
    27c4:	0136      	lsls	r6, r6, #4
    27c6:	51a3      	str	r3, [r4, r6]
}
    27c8:	e7e1      	b.n	278e <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    27ca:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    27cc:	4b36      	ldr	r3, [pc, #216]	; (28a8 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    27ce:	2901      	cmp	r1, #1
    27d0:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    27d4:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    27d6:	d959      	bls.n	288c <start_read.isra.0+0x158>
    27d8:	2a00      	cmp	r2, #0
    27da:	d1af      	bne.n	273c <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    27dc:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    27e0:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    27e2:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    27e4:	b112      	cbz	r2, 27ec <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    27e6:	8992      	ldrh	r2, [r2, #12]
    27e8:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    27ec:	68ea      	ldr	r2, [r5, #12]
    27ee:	429a      	cmp	r2, r3
    27f0:	d356      	bcc.n	28a0 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    27f2:	4b2d      	ldr	r3, [pc, #180]	; (28a8 <start_read.isra.0+0x174>)
    27f4:	68aa      	ldr	r2, [r5, #8]
    27f6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    27fa:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    27fc:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2800:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2802:	4c2a      	ldr	r4, [pc, #168]	; (28ac <start_read.isra.0+0x178>)
    2804:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    2808:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    280a:	683b      	ldr	r3, [r7, #0]
    280c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    280e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    2810:	2600      	movs	r6, #0
    2812:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    2814:	2b00      	cmp	r3, #0
    2816:	d03c      	beq.n	2892 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    2818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    281a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    281e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    2822:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    2824:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    2828:	b398      	cbz	r0, 2892 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    282a:	f3bf 8f5b 	dmb	ish
    282e:	e854 3f00 	ldrex	r3, [r4]
    2832:	e844 6200 	strex	r2, r6, [r4]
    2836:	2a00      	cmp	r2, #0
    2838:	d1f9      	bne.n	282e <start_read.isra.0+0xfa>
    283a:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    283e:	481c      	ldr	r0, [pc, #112]	; (28b0 <start_read.isra.0+0x17c>)
    2840:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    2844:	4a1b      	ldr	r2, [pc, #108]	; (28b4 <start_read.isra.0+0x180>)
    2846:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    284a:	2100      	movs	r1, #0
    284c:	2300      	movs	r3, #0
    284e:	fbe5 0106 	umlal	r0, r1, r5, r6
    2852:	f7fd fc55 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    2856:	2200      	movs	r2, #0
    2858:	e9cd 0100 	strd	r0, r1, [sp]
    285c:	2300      	movs	r3, #0
    285e:	f104 0008 	add.w	r0, r4, #8
    2862:	f005 f9a7 	bl	7bb4 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    2866:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    286a:	b9bb      	cbnz	r3, 289c <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    286c:	4812      	ldr	r0, [pc, #72]	; (28b8 <start_read.isra.0+0x184>)
    286e:	f04f 32ff 	mov.w	r2, #4294967295
    2872:	f04f 33ff 	mov.w	r3, #4294967295
    2876:	f004 fbb7 	bl	6fe8 <z_impl_k_sem_take>
	return ctx->status;
    287a:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    287c:	b003      	add	sp, #12
    287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    2880:	2202      	movs	r2, #2
		break;
    2882:	e7a3      	b.n	27cc <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2884:	2203      	movs	r2, #3
		break;
    2886:	e7a1      	b.n	27cc <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    2888:	2200      	movs	r2, #0
    288a:	e79f      	b.n	27cc <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    288c:	2a08      	cmp	r2, #8
    288e:	d9a5      	bls.n	27dc <start_read.isra.0+0xa8>
    2890:	e754      	b.n	273c <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    2892:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    2896:	f7ff fed3 	bl	2640 <adc_context_start_sampling.isra.0>
    289a:	e7e4      	b.n	2866 <start_read.isra.0+0x132>
		return 0;
    289c:	2000      	movs	r0, #0
	return error;
    289e:	e7ed      	b.n	287c <start_read.isra.0+0x148>
		return -ENOMEM;
    28a0:	f06f 000b 	mvn.w	r0, #11
    28a4:	e7ea      	b.n	287c <start_read.isra.0+0x148>
    28a6:	bf00      	nop
    28a8:	40007000 	.word	0x40007000
    28ac:	20000000 	.word	0x20000000
    28b0:	000f423f 	.word	0x000f423f
    28b4:	000f4240 	.word	0x000f4240
    28b8:	20000058 	.word	0x20000058

000028bc <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	460c      	mov	r4, r1
    28c0:	4616      	mov	r6, r2
    28c2:	4d0d      	ldr	r5, [pc, #52]	; (28f8 <adc_nrfx_read_async+0x3c>)
    28c4:	f04f 32ff 	mov.w	r2, #4294967295
    28c8:	f04f 33ff 	mov.w	r3, #4294967295
    28cc:	f105 0040 	add.w	r0, r5, #64	; 0x40
    28d0:	f004 fb8a 	bl	6fe8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    28d4:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    28d6:	4620      	mov	r0, r4
    28d8:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    28dc:	676e      	str	r6, [r5, #116]	; 0x74
    28de:	f7ff ff29 	bl	2734 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    28e2:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    28e6:	4604      	mov	r4, r0
    28e8:	b103      	cbz	r3, 28ec <adc_nrfx_read_async+0x30>
    28ea:	b110      	cbz	r0, 28f2 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    28ec:	4803      	ldr	r0, [pc, #12]	; (28fc <adc_nrfx_read_async+0x40>)
    28ee:	f004 fb37 	bl	6f60 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    28f2:	4620      	mov	r0, r4
    28f4:	bd70      	pop	{r4, r5, r6, pc}
    28f6:	bf00      	nop
    28f8:	20000000 	.word	0x20000000
    28fc:	20000040 	.word	0x20000040

00002900 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2900:	4b0d      	ldr	r3, [pc, #52]	; (2938 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    2902:	b510      	push	{r4, lr}
    2904:	2400      	movs	r4, #0
    2906:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2908:	681b      	ldr	r3, [r3, #0]
    290a:	4b0c      	ldr	r3, [pc, #48]	; (293c <init_saadc+0x3c>)
    290c:	601c      	str	r4, [r3, #0]
    290e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2910:	4b0b      	ldr	r3, [pc, #44]	; (2940 <init_saadc+0x40>)
    2912:	2212      	movs	r2, #18
    2914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2918:	2007      	movs	r0, #7
    291a:	f7ff fa55 	bl	1dc8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    291e:	4622      	mov	r2, r4
    2920:	2101      	movs	r1, #1
    2922:	2007      	movs	r0, #7
    2924:	f7ff fa6e 	bl	1e04 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    2928:	4806      	ldr	r0, [pc, #24]	; (2944 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    292a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    292c:	b913      	cbnz	r3, 2934 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    292e:	3040      	adds	r0, #64	; 0x40
    2930:	f004 fb16 	bl	6f60 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    2934:	2000      	movs	r0, #0
    2936:	bd10      	pop	{r4, pc}
    2938:	40007104 	.word	0x40007104
    293c:	40007110 	.word	0x40007110
    2940:	40007000 	.word	0x40007000
    2944:	20000000 	.word	0x20000000

00002948 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2948:	4b34      	ldr	r3, [pc, #208]	; (2a1c <saadc_irq_handler+0xd4>)
    294a:	681a      	ldr	r2, [r3, #0]
{
    294c:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    294e:	2a00      	cmp	r2, #0
    2950:	d055      	beq.n	29fe <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2952:	2200      	movs	r2, #0
    2954:	601a      	str	r2, [r3, #0]
    2956:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    2958:	4c31      	ldr	r4, [pc, #196]	; (2a20 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    295a:	4b32      	ldr	r3, [pc, #200]	; (2a24 <saadc_irq_handler+0xdc>)
    295c:	2101      	movs	r1, #1
    295e:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2960:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    2964:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2966:	b3db      	cbz	r3, 29e0 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    2968:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    296c:	b143      	cbz	r3, 2980 <saadc_irq_handler+0x38>
			action = callback(dev,
    296e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    2972:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    2976:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    2978:	2801      	cmp	r0, #1
    297a:	d014      	beq.n	29a6 <saadc_irq_handler+0x5e>
    297c:	2802      	cmp	r0, #2
    297e:	d029      	beq.n	29d4 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    2980:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    2984:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    2988:	429a      	cmp	r2, r3
    298a:	d923      	bls.n	29d4 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    298c:	3301      	adds	r3, #1
    298e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    2992:	4b25      	ldr	r3, [pc, #148]	; (2a28 <saadc_irq_handler+0xe0>)
    2994:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    2998:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    299c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    299e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    29a2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    29a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    29aa:	b92b      	cbnz	r3, 29b8 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    29ac:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    29b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29b4:	f7ff be44 	b.w	2640 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    29b8:	f3bf 8f5b 	dmb	ish
    29bc:	e854 3f00 	ldrex	r3, [r4]
    29c0:	1e5a      	subs	r2, r3, #1
    29c2:	e844 2100 	strex	r1, r2, [r4]
    29c6:	2900      	cmp	r1, #0
    29c8:	d1f8      	bne.n	29bc <saadc_irq_handler+0x74>
    29ca:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    29ce:	2b01      	cmp	r3, #1
    29d0:	dcec      	bgt.n	29ac <saadc_irq_handler+0x64>
    29d2:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    29d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    29d8:	b113      	cbz	r3, 29e0 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    29da:	4814      	ldr	r0, [pc, #80]	; (2a2c <saadc_irq_handler+0xe4>)
    29dc:	f006 fcf4 	bl	93c8 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    29e0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    29e4:	b14b      	cbz	r3, 29fa <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    29e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
    29e8:	b110      	cbz	r0, 29f0 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    29ea:	2100      	movs	r1, #0
    29ec:	f002 ff28 	bl	5840 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    29f0:	480f      	ldr	r0, [pc, #60]	; (2a30 <saadc_irq_handler+0xe8>)
    29f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29f6:	f004 bab3 	b.w	6f60 <z_impl_k_sem_give>
    29fa:	480e      	ldr	r0, [pc, #56]	; (2a34 <saadc_irq_handler+0xec>)
    29fc:	e7f9      	b.n	29f2 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29fe:	4b0e      	ldr	r3, [pc, #56]	; (2a38 <saadc_irq_handler+0xf0>)
    2a00:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2a02:	2900      	cmp	r1, #0
    2a04:	d0e5      	beq.n	29d2 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a06:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a08:	4a06      	ldr	r2, [pc, #24]	; (2a24 <saadc_irq_handler+0xdc>)
    2a0a:	681b      	ldr	r3, [r3, #0]
    2a0c:	2301      	movs	r3, #1
    2a0e:	6013      	str	r3, [r2, #0]
    2a10:	f842 3c08 	str.w	r3, [r2, #-8]
    2a14:	f842 3c04 	str.w	r3, [r2, #-4]
}
    2a18:	e7db      	b.n	29d2 <saadc_irq_handler+0x8a>
    2a1a:	bf00      	nop
    2a1c:	40007104 	.word	0x40007104
    2a20:	20000000 	.word	0x20000000
    2a24:	40007008 	.word	0x40007008
    2a28:	40007000 	.word	0x40007000
    2a2c:	20000008 	.word	0x20000008
    2a30:	20000040 	.word	0x20000040
    2a34:	20000058 	.word	0x20000058
    2a38:	40007110 	.word	0x40007110

00002a3c <adc_nrfx_read>:
{
    2a3c:	b538      	push	{r3, r4, r5, lr}
    2a3e:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    2a40:	4d0c      	ldr	r5, [pc, #48]	; (2a74 <adc_nrfx_read+0x38>)
    2a42:	f04f 32ff 	mov.w	r2, #4294967295
    2a46:	f04f 33ff 	mov.w	r3, #4294967295
    2a4a:	f105 0040 	add.w	r0, r5, #64	; 0x40
    2a4e:	f004 facb 	bl	6fe8 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    2a52:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    2a54:	4620      	mov	r0, r4
    2a56:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    2a5a:	676b      	str	r3, [r5, #116]	; 0x74
    2a5c:	f7ff fe6a 	bl	2734 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    2a60:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2a64:	4604      	mov	r4, r0
    2a66:	b103      	cbz	r3, 2a6a <adc_nrfx_read+0x2e>
    2a68:	b110      	cbz	r0, 2a70 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    2a6a:	4803      	ldr	r0, [pc, #12]	; (2a78 <adc_nrfx_read+0x3c>)
    2a6c:	f004 fa78 	bl	6f60 <z_impl_k_sem_give>
}
    2a70:	4620      	mov	r0, r4
    2a72:	bd38      	pop	{r3, r4, r5, pc}
    2a74:	20000000 	.word	0x20000000
    2a78:	20000040 	.word	0x20000040

00002a7c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2a80:	4c10      	ldr	r4, [pc, #64]	; (2ac4 <onoff_start+0x48>)
    2a82:	1b07      	subs	r7, r0, r4
    2a84:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2a88:	f04f 080c 	mov.w	r8, #12
    2a8c:	fb08 f807 	mul.w	r8, r8, r7
{
    2a90:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2a92:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2a96:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2a98:	4420      	add	r0, r4
    2a9a:	2140      	movs	r1, #64	; 0x40
    2a9c:	f006 f93e 	bl	8d1c <set_starting_state>
	if (err < 0) {
    2aa0:	1e01      	subs	r1, r0, #0
    2aa2:	db09      	blt.n	2ab8 <onoff_start+0x3c>
	subdata->cb = cb;
    2aa4:	4b08      	ldr	r3, [pc, #32]	; (2ac8 <onoff_start+0x4c>)
    2aa6:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2aa8:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2aac:	4b07      	ldr	r3, [pc, #28]	; (2acc <onoff_start+0x50>)
    2aae:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2ab6:	4718      	bx	r3
		notify(mgr, err);
    2ab8:	4630      	mov	r0, r6
    2aba:	462b      	mov	r3, r5
}
    2abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2ac0:	4718      	bx	r3
    2ac2:	bf00      	nop
    2ac4:	20000b58 	.word	0x20000b58
    2ac8:	00008d7f 	.word	0x00008d7f
    2acc:	00009798 	.word	0x00009798

00002ad0 <get_status>:
{
    2ad0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2ad2:	b2cc      	uxtb	r4, r1
    2ad4:	2c01      	cmp	r4, #1
{
    2ad6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2ad8:	d909      	bls.n	2aee <get_status+0x1e>
    2ada:	4909      	ldr	r1, [pc, #36]	; (2b00 <get_status+0x30>)
    2adc:	4809      	ldr	r0, [pc, #36]	; (2b04 <get_status+0x34>)
    2ade:	4a0a      	ldr	r2, [pc, #40]	; (2b08 <get_status+0x38>)
    2ae0:	2379      	movs	r3, #121	; 0x79
    2ae2:	f006 f886 	bl	8bf2 <printk>
    2ae6:	4808      	ldr	r0, [pc, #32]	; (2b08 <get_status+0x38>)
    2ae8:	2179      	movs	r1, #121	; 0x79
    2aea:	f005 fe93 	bl	8814 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2aee:	692b      	ldr	r3, [r5, #16]
    2af0:	210c      	movs	r1, #12
    2af2:	fb04 3401 	mla	r4, r4, r1, r3
    2af6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2af8:	f000 0007 	and.w	r0, r0, #7
    2afc:	bd38      	pop	{r3, r4, r5, pc}
    2afe:	bf00      	nop
    2b00:	0000a349 	.word	0x0000a349
    2b04:	00009c7a 	.word	0x00009c7a
    2b08:	0000a30c 	.word	0x0000a30c

00002b0c <stop>:
{
    2b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b0e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b10:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2b12:	6907      	ldr	r7, [r0, #16]
{
    2b14:	4605      	mov	r5, r0
    2b16:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b18:	d90b      	bls.n	2b32 <stop+0x26>
    2b1a:	4918      	ldr	r1, [pc, #96]	; (2b7c <stop+0x70>)
    2b1c:	4818      	ldr	r0, [pc, #96]	; (2b80 <stop+0x74>)
    2b1e:	4a19      	ldr	r2, [pc, #100]	; (2b84 <stop+0x78>)
    2b20:	f240 134d 	movw	r3, #333	; 0x14d
    2b24:	f006 f865 	bl	8bf2 <printk>
    2b28:	4816      	ldr	r0, [pc, #88]	; (2b84 <stop+0x78>)
    2b2a:	f240 114d 	movw	r1, #333	; 0x14d
    2b2e:	f005 fe71 	bl	8814 <assert_post_action>
	__asm__ volatile(
    2b32:	f04f 0320 	mov.w	r3, #32
    2b36:	f3ef 8211 	mrs	r2, BASEPRI
    2b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    2b3e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2b42:	230c      	movs	r3, #12
    2b44:	fb03 7104 	mla	r1, r3, r4, r7
    2b48:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2b4a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2b4e:	d001      	beq.n	2b54 <stop+0x48>
    2b50:	428e      	cmp	r6, r1
    2b52:	d110      	bne.n	2b76 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2b54:	fb03 7304 	mla	r3, r3, r4, r7
    2b58:	2101      	movs	r1, #1
    2b5a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2b5c:	2000      	movs	r0, #0
	__asm__ volatile(
    2b5e:	f382 8811 	msr	BASEPRI, r2
    2b62:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2b66:	b928      	cbnz	r0, 2b74 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2b68:	6869      	ldr	r1, [r5, #4]
    2b6a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2b6e:	6863      	ldr	r3, [r4, #4]
    2b70:	4798      	blx	r3
	return 0;
    2b72:	2000      	movs	r0, #0
}
    2b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2b76:	f04f 30ff 	mov.w	r0, #4294967295
    2b7a:	e7f0      	b.n	2b5e <stop+0x52>
    2b7c:	0000a349 	.word	0x0000a349
    2b80:	00009c7a 	.word	0x00009c7a
    2b84:	0000a30c 	.word	0x0000a30c

00002b88 <onoff_stop>:
{
    2b88:	b570      	push	{r4, r5, r6, lr}
    2b8a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2b8c:	4906      	ldr	r1, [pc, #24]	; (2ba8 <onoff_stop+0x20>)
    2b8e:	1a41      	subs	r1, r0, r1
{
    2b90:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2b92:	1149      	asrs	r1, r1, #5
    2b94:	4805      	ldr	r0, [pc, #20]	; (2bac <onoff_stop+0x24>)
    2b96:	2240      	movs	r2, #64	; 0x40
    2b98:	f7ff ffb8 	bl	2b0c <stop>
	notify(mgr, res);
    2b9c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2b9e:	4601      	mov	r1, r0
	notify(mgr, res);
    2ba0:	4620      	mov	r0, r4
}
    2ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2ba6:	4718      	bx	r3
    2ba8:	20000b58 	.word	0x20000b58
    2bac:	000094b4 	.word	0x000094b4

00002bb0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2bb0:	2200      	movs	r2, #0
{
    2bb2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2bb4:	2101      	movs	r1, #1
{
    2bb6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2bb8:	4610      	mov	r0, r2
    2bba:	f7ff f923 	bl	1e04 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2bbe:	2000      	movs	r0, #0
    2bc0:	f7ff f902 	bl	1dc8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2bc4:	480f      	ldr	r0, [pc, #60]	; (2c04 <clk_init+0x54>)
    2bc6:	f001 f8c3 	bl	3d50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2bca:	4b0f      	ldr	r3, [pc, #60]	; (2c08 <clk_init+0x58>)
    2bcc:	4298      	cmp	r0, r3
    2bce:	d115      	bne.n	2bfc <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2bd0:	f001 f8e2 	bl	3d98 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2bd4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2bd6:	490d      	ldr	r1, [pc, #52]	; (2c0c <clk_init+0x5c>)
    2bd8:	4630      	mov	r0, r6
    2bda:	f005 fff5 	bl	8bc8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2bde:	2800      	cmp	r0, #0
    2be0:	db0b      	blt.n	2bfa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2be2:	2501      	movs	r5, #1
    2be4:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2be6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2be8:	4908      	ldr	r1, [pc, #32]	; (2c0c <clk_init+0x5c>)
    2bea:	f104 0020 	add.w	r0, r4, #32
    2bee:	f005 ffeb 	bl	8bc8 <onoff_manager_init>
		if (err < 0) {
    2bf2:	2800      	cmp	r0, #0
    2bf4:	db01      	blt.n	2bfa <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2bf6:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2bf8:	2000      	movs	r0, #0
}
    2bfa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2bfc:	f06f 0004 	mvn.w	r0, #4
    2c00:	e7fb      	b.n	2bfa <clk_init+0x4a>
    2c02:	bf00      	nop
    2c04:	00002c45 	.word	0x00002c45
    2c08:	0bad0000 	.word	0x0bad0000
    2c0c:	000097a8 	.word	0x000097a8

00002c10 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2c10:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2c12:	230c      	movs	r3, #12
    2c14:	4809      	ldr	r0, [pc, #36]	; (2c3c <clkstarted_handle.constprop.0+0x2c>)
    2c16:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2c18:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2c1a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2c1c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2c20:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2c22:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2c24:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2c26:	4418      	add	r0, r3
    2c28:	f006 f896 	bl	8d58 <set_on_state>
	if (callback) {
    2c2c:	b12d      	cbz	r5, 2c3a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2c2e:	4632      	mov	r2, r6
    2c30:	462b      	mov	r3, r5
    2c32:	4803      	ldr	r0, [pc, #12]	; (2c40 <clkstarted_handle.constprop.0+0x30>)
}
    2c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2c38:	4718      	bx	r3
}
    2c3a:	bd70      	pop	{r4, r5, r6, pc}
    2c3c:	20000b58 	.word	0x20000b58
    2c40:	000094b4 	.word	0x000094b4

00002c44 <clock_event_handler>:
	switch (event) {
    2c44:	2801      	cmp	r0, #1
{
    2c46:	b508      	push	{r3, lr}
	switch (event) {
    2c48:	d006      	beq.n	2c58 <clock_event_handler+0x14>
    2c4a:	2803      	cmp	r0, #3
    2c4c:	d008      	beq.n	2c60 <clock_event_handler+0x1c>
    2c4e:	b9a8      	cbnz	r0, 2c7c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2c50:	4b10      	ldr	r3, [pc, #64]	; (2c94 <clock_event_handler+0x50>)
    2c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2c54:	075b      	lsls	r3, r3, #29
    2c56:	d11b      	bne.n	2c90 <clock_event_handler+0x4c>
}
    2c58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2c5c:	f7ff bfd8 	b.w	2c10 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2c60:	490d      	ldr	r1, [pc, #52]	; (2c98 <clock_event_handler+0x54>)
    2c62:	4a0e      	ldr	r2, [pc, #56]	; (2c9c <clock_event_handler+0x58>)
    2c64:	480e      	ldr	r0, [pc, #56]	; (2ca0 <clock_event_handler+0x5c>)
    2c66:	f240 235e 	movw	r3, #606	; 0x25e
    2c6a:	f005 ffc2 	bl	8bf2 <printk>
    2c6e:	f240 215e 	movw	r1, #606	; 0x25e
}
    2c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2c76:	4809      	ldr	r0, [pc, #36]	; (2c9c <clock_event_handler+0x58>)
    2c78:	f005 bdcc 	b.w	8814 <assert_post_action>
    2c7c:	4906      	ldr	r1, [pc, #24]	; (2c98 <clock_event_handler+0x54>)
    2c7e:	4a07      	ldr	r2, [pc, #28]	; (2c9c <clock_event_handler+0x58>)
    2c80:	4807      	ldr	r0, [pc, #28]	; (2ca0 <clock_event_handler+0x5c>)
    2c82:	f240 2362 	movw	r3, #610	; 0x262
    2c86:	f005 ffb4 	bl	8bf2 <printk>
    2c8a:	f240 2162 	movw	r1, #610	; 0x262
    2c8e:	e7f0      	b.n	2c72 <clock_event_handler+0x2e>
}
    2c90:	bd08      	pop	{r3, pc}
    2c92:	bf00      	nop
    2c94:	20000b58 	.word	0x20000b58
    2c98:	0000a609 	.word	0x0000a609
    2c9c:	0000a30c 	.word	0x0000a30c
    2ca0:	00009c7a 	.word	0x00009c7a

00002ca4 <generic_hfclk_start>:
{
    2ca4:	b508      	push	{r3, lr}
	__asm__ volatile(
    2ca6:	f04f 0320 	mov.w	r3, #32
    2caa:	f3ef 8111 	mrs	r1, BASEPRI
    2cae:	f383 8812 	msr	BASEPRI_MAX, r3
    2cb2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2cb6:	4a12      	ldr	r2, [pc, #72]	; (2d00 <generic_hfclk_start+0x5c>)
    2cb8:	6813      	ldr	r3, [r2, #0]
    2cba:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2cbe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2cc2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2cc4:	d00c      	beq.n	2ce0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2cca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2cce:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2cd2:	f013 0301 	ands.w	r3, r3, #1
    2cd6:	d003      	beq.n	2ce0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2cd8:	480a      	ldr	r0, [pc, #40]	; (2d04 <generic_hfclk_start+0x60>)
    2cda:	f006 f83d 	bl	8d58 <set_on_state>
			already_started = true;
    2cde:	2301      	movs	r3, #1
	__asm__ volatile(
    2ce0:	f381 8811 	msr	BASEPRI, r1
    2ce4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2ce8:	b123      	cbz	r3, 2cf4 <generic_hfclk_start+0x50>
}
    2cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2cee:	2000      	movs	r0, #0
    2cf0:	f7ff bf8e 	b.w	2c10 <clkstarted_handle.constprop.0>
}
    2cf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2cf8:	2001      	movs	r0, #1
    2cfa:	f001 b86d 	b.w	3dd8 <nrfx_clock_start>
    2cfe:	bf00      	nop
    2d00:	20000bb0 	.word	0x20000bb0
    2d04:	20000ba0 	.word	0x20000ba0

00002d08 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d08:	4b09      	ldr	r3, [pc, #36]	; (2d30 <generic_hfclk_stop+0x28>)
    2d0a:	f3bf 8f5b 	dmb	ish
    2d0e:	e853 2f00 	ldrex	r2, [r3]
    2d12:	f022 0102 	bic.w	r1, r2, #2
    2d16:	e843 1000 	strex	r0, r1, [r3]
    2d1a:	2800      	cmp	r0, #0
    2d1c:	d1f7      	bne.n	2d0e <generic_hfclk_stop+0x6>
    2d1e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2d22:	07d3      	lsls	r3, r2, #31
    2d24:	d402      	bmi.n	2d2c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2d26:	2001      	movs	r0, #1
    2d28:	f001 b8aa 	b.w	3e80 <nrfx_clock_stop>
}
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop
    2d30:	20000bb0 	.word	0x20000bb0

00002d34 <api_blocking_start>:
{
    2d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d36:	2200      	movs	r2, #0
    2d38:	2301      	movs	r3, #1
    2d3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2d3e:	ab04      	add	r3, sp, #16
    2d40:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d44:	4a09      	ldr	r2, [pc, #36]	; (2d6c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d46:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d4a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2d4c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2d50:	f006 f827 	bl	8da2 <api_start>
	if (err < 0) {
    2d54:	2800      	cmp	r0, #0
    2d56:	db05      	blt.n	2d64 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    2d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2d5c:	2300      	movs	r3, #0
    2d5e:	4668      	mov	r0, sp
    2d60:	f004 f942 	bl	6fe8 <z_impl_k_sem_take>
}
    2d64:	b007      	add	sp, #28
    2d66:	f85d fb04 	ldr.w	pc, [sp], #4
    2d6a:	bf00      	nop
    2d6c:	00008d9d 	.word	0x00008d9d

00002d70 <z_nrf_clock_control_lf_on>:
{
    2d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2d74:	4949      	ldr	r1, [pc, #292]	; (2e9c <z_nrf_clock_control_lf_on+0x12c>)
    2d76:	f3bf 8f5b 	dmb	ish
    2d7a:	4605      	mov	r5, r0
    2d7c:	2201      	movs	r2, #1
    2d7e:	e851 3f00 	ldrex	r3, [r1]
    2d82:	e841 2000 	strex	r0, r2, [r1]
    2d86:	2800      	cmp	r0, #0
    2d88:	d1f9      	bne.n	2d7e <z_nrf_clock_control_lf_on+0xe>
    2d8a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2d8e:	b9a3      	cbnz	r3, 2dba <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2d90:	4943      	ldr	r1, [pc, #268]	; (2ea0 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2d92:	4844      	ldr	r0, [pc, #272]	; (2ea4 <z_nrf_clock_control_lf_on+0x134>)
    2d94:	604b      	str	r3, [r1, #4]
    2d96:	60cb      	str	r3, [r1, #12]
    2d98:	608a      	str	r2, [r1, #8]
    2d9a:	f7fe fd8b 	bl	18b4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2d9e:	2800      	cmp	r0, #0
    2da0:	da0b      	bge.n	2dba <z_nrf_clock_control_lf_on+0x4a>
    2da2:	4941      	ldr	r1, [pc, #260]	; (2ea8 <z_nrf_clock_control_lf_on+0x138>)
    2da4:	4841      	ldr	r0, [pc, #260]	; (2eac <z_nrf_clock_control_lf_on+0x13c>)
    2da6:	4a42      	ldr	r2, [pc, #264]	; (2eb0 <z_nrf_clock_control_lf_on+0x140>)
    2da8:	f44f 7308 	mov.w	r3, #544	; 0x220
    2dac:	f005 ff21 	bl	8bf2 <printk>
    2db0:	483f      	ldr	r0, [pc, #252]	; (2eb0 <z_nrf_clock_control_lf_on+0x140>)
    2db2:	f44f 7108 	mov.w	r1, #544	; 0x220
    2db6:	f005 fd2d 	bl	8814 <assert_post_action>
	switch (start_mode) {
    2dba:	b3ad      	cbz	r5, 2e28 <z_nrf_clock_control_lf_on+0xb8>
    2dbc:	1e6b      	subs	r3, r5, #1
    2dbe:	2b01      	cmp	r3, #1
    2dc0:	d856      	bhi.n	2e70 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2dc2:	2d01      	cmp	r5, #1
    2dc4:	d107      	bne.n	2dd6 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2dca:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2dce:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2dd2:	2b01      	cmp	r3, #1
    2dd4:	d028      	beq.n	2e28 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2dd6:	f006 fab9 	bl	934c <k_is_in_isr>
    2dda:	4604      	mov	r4, r0
    2ddc:	b918      	cbnz	r0, 2de6 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2dde:	4b35      	ldr	r3, [pc, #212]	; (2eb4 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d152      	bne.n	2e8c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    2de6:	f04f 0320 	mov.w	r3, #32
    2dea:	f3ef 8611 	mrs	r6, BASEPRI
    2dee:	f383 8812 	msr	BASEPRI_MAX, r3
    2df2:	f3bf 8f6f 	isb	sy
    2df6:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2df8:	4f2f      	ldr	r7, [pc, #188]	; (2eb8 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2dfa:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2ec0 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dfe:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2ec4 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e06:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e0a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2e0e:	03d2      	lsls	r2, r2, #15
    2e10:	d50c      	bpl.n	2e2c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2e12:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2e16:	2b01      	cmp	r3, #1
    2e18:	d001      	beq.n	2e1e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2e1a:	2d01      	cmp	r5, #1
    2e1c:	d106      	bne.n	2e2c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2e1e:	b30c      	cbz	r4, 2e64 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2e20:	f386 8811 	msr	BASEPRI, r6
    2e24:	f3bf 8f6f 	isb	sy
}
    2e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2e2c:	b1ac      	cbz	r4, 2e5a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2e2e:	4630      	mov	r0, r6
    2e30:	f7fe ff62 	bl	1cf8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e38:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d1e0      	bne.n	2e02 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e40:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2e42:	2900      	cmp	r1, #0
    2e44:	d0dd      	beq.n	2e02 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e46:	603b      	str	r3, [r7, #0]
    2e48:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e4a:	2301      	movs	r3, #1
    2e4c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2e50:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e54:	f8c9 3000 	str.w	r3, [r9]
}
    2e58:	e7d3      	b.n	2e02 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    2e5a:	2100      	movs	r1, #0
    2e5c:	2021      	movs	r0, #33	; 0x21
    2e5e:	f003 ff13 	bl	6c88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2e62:	e7e7      	b.n	2e34 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e68:	2202      	movs	r2, #2
    2e6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2e6e:	e7db      	b.n	2e28 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2e70:	4912      	ldr	r1, [pc, #72]	; (2ebc <z_nrf_clock_control_lf_on+0x14c>)
    2e72:	480e      	ldr	r0, [pc, #56]	; (2eac <z_nrf_clock_control_lf_on+0x13c>)
    2e74:	4a0e      	ldr	r2, [pc, #56]	; (2eb0 <z_nrf_clock_control_lf_on+0x140>)
    2e76:	f240 2332 	movw	r3, #562	; 0x232
    2e7a:	f005 feba 	bl	8bf2 <printk>
}
    2e7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2e82:	480b      	ldr	r0, [pc, #44]	; (2eb0 <z_nrf_clock_control_lf_on+0x140>)
    2e84:	f240 2132 	movw	r1, #562	; 0x232
    2e88:	f005 bcc4 	b.w	8814 <assert_post_action>
    p_reg->INTENCLR = mask;
    2e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e90:	2202      	movs	r2, #2
    2e92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2e96:	4606      	mov	r6, r0
}
    2e98:	e7ae      	b.n	2df8 <z_nrf_clock_control_lf_on+0x88>
    2e9a:	bf00      	nop
    2e9c:	20000bb4 	.word	0x20000bb4
    2ea0:	20000b48 	.word	0x20000b48
    2ea4:	20000b78 	.word	0x20000b78
    2ea8:	0000a36d 	.word	0x0000a36d
    2eac:	00009c7a 	.word	0x00009c7a
    2eb0:	0000a30c 	.word	0x0000a30c
    2eb4:	20000c7b 	.word	0x20000c7b
    2eb8:	40000104 	.word	0x40000104
    2ebc:	0000a609 	.word	0x0000a609
    2ec0:	e000e100 	.word	0xe000e100
    2ec4:	40000008 	.word	0x40000008

00002ec8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2ec8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2eca:	4b08      	ldr	r3, [pc, #32]	; (2eec <uart_console_init+0x24>)
    2ecc:	4808      	ldr	r0, [pc, #32]	; (2ef0 <uart_console_init+0x28>)
    2ece:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2ed0:	f006 f9a6 	bl	9220 <z_device_ready>
    2ed4:	b138      	cbz	r0, 2ee6 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2ed6:	4807      	ldr	r0, [pc, #28]	; (2ef4 <uart_console_init+0x2c>)
    2ed8:	f7ff fb5a 	bl	2590 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2edc:	4805      	ldr	r0, [pc, #20]	; (2ef4 <uart_console_init+0x2c>)
    2ede:	f7fe fecf 	bl	1c80 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2ee2:	2000      	movs	r0, #0
}
    2ee4:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2ee6:	f06f 0012 	mvn.w	r0, #18
    2eea:	e7fb      	b.n	2ee4 <uart_console_init+0x1c>
    2eec:	20000bb8 	.word	0x20000bb8
    2ef0:	00009514 	.word	0x00009514
    2ef4:	00002ef9 	.word	0x00002ef9

00002ef8 <console_out>:
	if ('\n' == c) {
    2ef8:	280a      	cmp	r0, #10
{
    2efa:	b538      	push	{r3, r4, r5, lr}
    2efc:	4d07      	ldr	r5, [pc, #28]	; (2f1c <console_out+0x24>)
    2efe:	4604      	mov	r4, r0
	if ('\n' == c) {
    2f00:	d104      	bne.n	2f0c <console_out+0x14>
    2f02:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2f04:	6883      	ldr	r3, [r0, #8]
    2f06:	210d      	movs	r1, #13
    2f08:	685b      	ldr	r3, [r3, #4]
    2f0a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2f0c:	6828      	ldr	r0, [r5, #0]
    2f0e:	6883      	ldr	r3, [r0, #8]
    2f10:	b2e1      	uxtb	r1, r4
    2f12:	685b      	ldr	r3, [r3, #4]
    2f14:	4798      	blx	r3
}
    2f16:	4620      	mov	r0, r4
    2f18:	bd38      	pop	{r3, r4, r5, pc}
    2f1a:	bf00      	nop
    2f1c:	20000bb8 	.word	0x20000bb8

00002f20 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2f20:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2f22:	6905      	ldr	r5, [r0, #16]
{
    2f24:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2f26:	460c      	mov	r4, r1
    2f28:	b961      	cbnz	r1, 2f44 <gpio_nrfx_manage_callback+0x24>
    2f2a:	4922      	ldr	r1, [pc, #136]	; (2fb4 <gpio_nrfx_manage_callback+0x94>)
    2f2c:	4a22      	ldr	r2, [pc, #136]	; (2fb8 <gpio_nrfx_manage_callback+0x98>)
    2f2e:	4823      	ldr	r0, [pc, #140]	; (2fbc <gpio_nrfx_manage_callback+0x9c>)
    2f30:	2324      	movs	r3, #36	; 0x24
    2f32:	f005 fe5e 	bl	8bf2 <printk>
    2f36:	4822      	ldr	r0, [pc, #136]	; (2fc0 <gpio_nrfx_manage_callback+0xa0>)
    2f38:	f005 fe5b 	bl	8bf2 <printk>
    2f3c:	481e      	ldr	r0, [pc, #120]	; (2fb8 <gpio_nrfx_manage_callback+0x98>)
    2f3e:	2124      	movs	r1, #36	; 0x24
    2f40:	f005 fc68 	bl	8814 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2f44:	6863      	ldr	r3, [r4, #4]
    2f46:	b963      	cbnz	r3, 2f62 <gpio_nrfx_manage_callback+0x42>
    2f48:	491e      	ldr	r1, [pc, #120]	; (2fc4 <gpio_nrfx_manage_callback+0xa4>)
    2f4a:	4a1b      	ldr	r2, [pc, #108]	; (2fb8 <gpio_nrfx_manage_callback+0x98>)
    2f4c:	481b      	ldr	r0, [pc, #108]	; (2fbc <gpio_nrfx_manage_callback+0x9c>)
    2f4e:	2325      	movs	r3, #37	; 0x25
    2f50:	f005 fe4f 	bl	8bf2 <printk>
    2f54:	481c      	ldr	r0, [pc, #112]	; (2fc8 <gpio_nrfx_manage_callback+0xa8>)
    2f56:	f005 fe4c 	bl	8bf2 <printk>
    2f5a:	4817      	ldr	r0, [pc, #92]	; (2fb8 <gpio_nrfx_manage_callback+0x98>)
    2f5c:	2125      	movs	r1, #37	; 0x25
    2f5e:	f005 fc59 	bl	8814 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2f62:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2f64:	b15b      	cbz	r3, 2f7e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2f66:	2200      	movs	r2, #0
    2f68:	429c      	cmp	r4, r3
    2f6a:	d113      	bne.n	2f94 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2f6c:	6823      	ldr	r3, [r4, #0]
    2f6e:	b95a      	cbnz	r2, 2f88 <gpio_nrfx_manage_callback+0x68>
    2f70:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2f72:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2f74:	4294      	cmp	r4, r2
    2f76:	d100      	bne.n	2f7a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2f78:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2f7a:	2300      	movs	r3, #0
    2f7c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2f7e:	b976      	cbnz	r6, 2f9e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2f80:	2000      	movs	r0, #0
				     callback, set);
}
    2f82:	bd70      	pop	{r4, r5, r6, pc}
    2f84:	460b      	mov	r3, r1
    2f86:	e7ef      	b.n	2f68 <gpio_nrfx_manage_callback+0x48>
    2f88:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2f8a:	68ab      	ldr	r3, [r5, #8]
    2f8c:	429c      	cmp	r4, r3
	list->tail = node;
    2f8e:	bf08      	it	eq
    2f90:	60aa      	streq	r2, [r5, #8]
}
    2f92:	e7f2      	b.n	2f7a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2f94:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2f96:	461a      	mov	r2, r3
    2f98:	2900      	cmp	r1, #0
    2f9a:	d1f3      	bne.n	2f84 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2f9c:	b13e      	cbz	r6, 2fae <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2f9e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2fa0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2fa2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2fa4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d1ea      	bne.n	2f80 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2faa:	60ac      	str	r4, [r5, #8]
}
    2fac:	e7e9      	b.n	2f82 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2fae:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2fb2:	e7e6      	b.n	2f82 <gpio_nrfx_manage_callback+0x62>
    2fb4:	0000a3a9 	.word	0x0000a3a9
    2fb8:	0000a37c 	.word	0x0000a37c
    2fbc:	00009c7a 	.word	0x00009c7a
    2fc0:	0000a3b2 	.word	0x0000a3b2
    2fc4:	0000a3c1 	.word	0x0000a3c1
    2fc8:	0000a3d3 	.word	0x0000a3d3

00002fcc <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fcc:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fd2:	d003      	beq.n	2fdc <nrfx_gpio_handler+0x10>
    2fd4:	2b01      	cmp	r3, #1
    2fd6:	d036      	beq.n	3046 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2fdc:	4f1b      	ldr	r7, [pc, #108]	; (304c <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2fde:	693b      	ldr	r3, [r7, #16]
    2fe0:	685c      	ldr	r4, [r3, #4]
    2fe2:	2c00      	cmp	r4, #0
    2fe4:	d0f8      	beq.n	2fd8 <nrfx_gpio_handler+0xc>
    2fe6:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2fe8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3058 <nrfx_gpio_handler+0x8c>
    2fec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 305c <nrfx_gpio_handler+0x90>
    2ff0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 3060 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2ff4:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2ff8:	2601      	movs	r6, #1
    2ffa:	2d00      	cmp	r5, #0
    2ffc:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3000:	bf38      	it	cc
    3002:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3004:	68a3      	ldr	r3, [r4, #8]
    3006:	421e      	tst	r6, r3
    3008:	d014      	beq.n	3034 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    300a:	6863      	ldr	r3, [r4, #4]
    300c:	b963      	cbnz	r3, 3028 <nrfx_gpio_handler+0x5c>
    300e:	4649      	mov	r1, r9
    3010:	2345      	movs	r3, #69	; 0x45
    3012:	4642      	mov	r2, r8
    3014:	4650      	mov	r0, sl
    3016:	f005 fdec 	bl	8bf2 <printk>
    301a:	480d      	ldr	r0, [pc, #52]	; (3050 <nrfx_gpio_handler+0x84>)
    301c:	f005 fde9 	bl	8bf2 <printk>
    3020:	2145      	movs	r1, #69	; 0x45
    3022:	4640      	mov	r0, r8
    3024:	f005 fbf6 	bl	8814 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    3028:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    302c:	4621      	mov	r1, r4
    302e:	4032      	ands	r2, r6
    3030:	4638      	mov	r0, r7
    3032:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3034:	2d00      	cmp	r5, #0
    3036:	d0cf      	beq.n	2fd8 <nrfx_gpio_handler+0xc>
    3038:	682b      	ldr	r3, [r5, #0]
    303a:	2b00      	cmp	r3, #0
    303c:	bf38      	it	cc
    303e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3040:	462c      	mov	r4, r5
    3042:	461d      	mov	r5, r3
    3044:	e7de      	b.n	3004 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3046:	4f03      	ldr	r7, [pc, #12]	; (3054 <nrfx_gpio_handler+0x88>)
    3048:	e7c9      	b.n	2fde <nrfx_gpio_handler+0x12>
    304a:	bf00      	nop
    304c:	000094cc 	.word	0x000094cc
    3050:	0000a3d3 	.word	0x0000a3d3
    3054:	000094e4 	.word	0x000094e4
    3058:	0000a37c 	.word	0x0000a37c
    305c:	0000a3ea 	.word	0x0000a3ea
    3060:	00009c7a 	.word	0x00009c7a

00003064 <gpio_nrfx_pin_interrupt_configure>:
{
    3064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3066:	6840      	ldr	r0, [r0, #4]
    3068:	7b05      	ldrb	r5, [r0, #12]
    306a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    306e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3072:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3076:	f04f 0500 	mov.w	r5, #0
    307a:	d104      	bne.n	3086 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    307c:	4620      	mov	r0, r4
    307e:	f001 fa97 	bl	45b0 <nrfx_gpiote_trigger_disable>
	return 0;
    3082:	2000      	movs	r0, #0
    3084:	e054      	b.n	3130 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3086:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    308a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    308e:	d151      	bne.n	3134 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3094:	bf0c      	ite	eq
    3096:	2304      	moveq	r3, #4
    3098:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    309a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    309e:	6883      	ldr	r3, [r0, #8]
    30a0:	fa23 f101 	lsr.w	r1, r3, r1
    30a4:	f011 0101 	ands.w	r1, r1, #1
    30a8:	d155      	bne.n	3156 <gpio_nrfx_pin_interrupt_configure+0xf2>
    30aa:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    30ae:	d152      	bne.n	3156 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    30b0:	0966      	lsrs	r6, r4, #5
    30b2:	d04a      	beq.n	314a <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    30b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30b8:	2e01      	cmp	r6, #1
    30ba:	bf08      	it	eq
    30bc:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    30be:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    30c2:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    30c4:	07ca      	lsls	r2, r1, #31
    30c6:	d40b      	bmi.n	30e0 <gpio_nrfx_pin_interrupt_configure+0x7c>
    30c8:	492b      	ldr	r1, [pc, #172]	; (3178 <gpio_nrfx_pin_interrupt_configure+0x114>)
    30ca:	482c      	ldr	r0, [pc, #176]	; (317c <gpio_nrfx_pin_interrupt_configure+0x118>)
    30cc:	4a2c      	ldr	r2, [pc, #176]	; (3180 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    30ce:	f240 2329 	movw	r3, #553	; 0x229
    30d2:	f005 fd8e 	bl	8bf2 <printk>
    30d6:	482a      	ldr	r0, [pc, #168]	; (3180 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    30d8:	f240 2129 	movw	r1, #553	; 0x229
    30dc:	f005 fb9a 	bl	8814 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30e0:	b16e      	cbz	r6, 30fe <gpio_nrfx_pin_interrupt_configure+0x9a>
    30e2:	2e01      	cmp	r6, #1
    30e4:	d034      	beq.n	3150 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    30e6:	4927      	ldr	r1, [pc, #156]	; (3184 <gpio_nrfx_pin_interrupt_configure+0x120>)
    30e8:	4824      	ldr	r0, [pc, #144]	; (317c <gpio_nrfx_pin_interrupt_configure+0x118>)
    30ea:	4a25      	ldr	r2, [pc, #148]	; (3180 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    30ec:	f240 232e 	movw	r3, #558	; 0x22e
    30f0:	f005 fd7f 	bl	8bf2 <printk>
    30f4:	4822      	ldr	r0, [pc, #136]	; (3180 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    30f6:	f240 212e 	movw	r1, #558	; 0x22e
    30fa:	f005 fb8b 	bl	8814 <assert_post_action>
        case 0: return NRF_P0;
    30fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3102:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3106:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    310a:	07db      	lsls	r3, r3, #31
    310c:	d423      	bmi.n	3156 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    310e:	f10d 0507 	add.w	r5, sp, #7
    3112:	4629      	mov	r1, r5
    3114:	4620      	mov	r0, r4
    3116:	f001 f975 	bl	4404 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    311a:	4b1b      	ldr	r3, [pc, #108]	; (3188 <gpio_nrfx_pin_interrupt_configure+0x124>)
    311c:	4298      	cmp	r0, r3
    311e:	d119      	bne.n	3154 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    3120:	4628      	mov	r0, r5
    3122:	f001 f9cf 	bl	44c4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3126:	4b19      	ldr	r3, [pc, #100]	; (318c <gpio_nrfx_pin_interrupt_configure+0x128>)
    3128:	4298      	cmp	r0, r3
    312a:	d013      	beq.n	3154 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    312c:	f06f 000b 	mvn.w	r0, #11
}
    3130:	b004      	add	sp, #16
    3132:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3134:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3138:	d005      	beq.n	3146 <gpio_nrfx_pin_interrupt_configure+0xe2>
    313a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    313e:	bf0c      	ite	eq
    3140:	2302      	moveq	r3, #2
    3142:	2301      	movne	r3, #1
    3144:	e7a9      	b.n	309a <gpio_nrfx_pin_interrupt_configure+0x36>
    3146:	2303      	movs	r3, #3
    3148:	e7a7      	b.n	309a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    314a:	f04f 31ff 	mov.w	r1, #4294967295
    314e:	e7b6      	b.n	30be <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3150:	4b0f      	ldr	r3, [pc, #60]	; (3190 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    3152:	e7d6      	b.n	3102 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    3154:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3156:	2300      	movs	r3, #0
    3158:	4619      	mov	r1, r3
    315a:	aa02      	add	r2, sp, #8
    315c:	4620      	mov	r0, r4
    315e:	f001 f833 	bl	41c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3162:	4b0a      	ldr	r3, [pc, #40]	; (318c <gpio_nrfx_pin_interrupt_configure+0x128>)
    3164:	4298      	cmp	r0, r3
    3166:	d104      	bne.n	3172 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3168:	2101      	movs	r1, #1
    316a:	4620      	mov	r0, r4
    316c:	f001 f9b0 	bl	44d0 <nrfx_gpiote_trigger_enable>
    3170:	e787      	b.n	3082 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3172:	f06f 0004 	mvn.w	r0, #4
    3176:	e7db      	b.n	3130 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3178:	0000a429 	.word	0x0000a429
    317c:	00009c7a 	.word	0x00009c7a
    3180:	0000a3f6 	.word	0x0000a3f6
    3184:	0000a609 	.word	0x0000a609
    3188:	0bad0004 	.word	0x0bad0004
    318c:	0bad0000 	.word	0x0bad0000
    3190:	50000300 	.word	0x50000300

00003194 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3194:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3196:	f001 f985 	bl	44a4 <nrfx_gpiote_is_init>
    319a:	4604      	mov	r4, r0
    319c:	b968      	cbnz	r0, 31ba <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    319e:	f001 f959 	bl	4454 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    31a2:	4b08      	ldr	r3, [pc, #32]	; (31c4 <gpio_nrfx_init+0x30>)
    31a4:	4298      	cmp	r0, r3
    31a6:	d10a      	bne.n	31be <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    31a8:	4807      	ldr	r0, [pc, #28]	; (31c8 <gpio_nrfx_init+0x34>)
    31aa:	4621      	mov	r1, r4
    31ac:	f001 f924 	bl	43f8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    31b0:	4622      	mov	r2, r4
    31b2:	2105      	movs	r1, #5
    31b4:	2006      	movs	r0, #6
    31b6:	f7fe fe25 	bl	1e04 <z_arm_irq_priority_set>
		return 0;
    31ba:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    31bc:	bd10      	pop	{r4, pc}
		return -EIO;
    31be:	f06f 0004 	mvn.w	r0, #4
    31c2:	e7fb      	b.n	31bc <gpio_nrfx_init+0x28>
    31c4:	0bad0000 	.word	0x0bad0000
    31c8:	00002fcd 	.word	0x00002fcd

000031cc <gpio_nrfx_pin_configure>:
{
    31cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    31d0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    31d2:	7b3b      	ldrb	r3, [r7, #12]
    31d4:	f001 051f 	and.w	r5, r1, #31
{
    31d8:	b085      	sub	sp, #20
    31da:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    31dc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    31e0:	4614      	mov	r4, r2
    31e2:	b9ca      	cbnz	r2, 3218 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    31e4:	a902      	add	r1, sp, #8
    31e6:	4628      	mov	r0, r5
    31e8:	f001 f90c 	bl	4404 <nrfx_gpiote_channel_get>
    31ec:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    31ee:	4628      	mov	r0, r5
    31f0:	f001 fa00 	bl	45f4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    31f4:	4b48      	ldr	r3, [pc, #288]	; (3318 <gpio_nrfx_pin_configure+0x14c>)
    31f6:	4298      	cmp	r0, r3
    31f8:	d004      	beq.n	3204 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    31fa:	f06f 0004 	mvn.w	r0, #4
}
    31fe:	b005      	add	sp, #20
    3200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3204:	4284      	cmp	r4, r0
    3206:	d105      	bne.n	3214 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3208:	f89d 0008 	ldrb.w	r0, [sp, #8]
    320c:	f001 f954 	bl	44b8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3210:	42a0      	cmp	r0, r4
    3212:	d1f2      	bne.n	31fa <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3214:	2000      	movs	r0, #0
    3216:	e7f2      	b.n	31fe <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3218:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    321c:	f10d 0103 	add.w	r1, sp, #3
    3220:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3222:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3226:	f001 f8ed 	bl	4404 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    322a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    322c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    322e:	aa02      	add	r2, sp, #8
    3230:	4649      	mov	r1, r9
    3232:	4628      	mov	r0, r5
    3234:	f000 ffc8 	bl	41c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3238:	4b37      	ldr	r3, [pc, #220]	; (3318 <gpio_nrfx_pin_configure+0x14c>)
    323a:	4298      	cmp	r0, r3
    323c:	d002      	beq.n	3244 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    323e:	f06f 0015 	mvn.w	r0, #21
    3242:	e7dc      	b.n	31fe <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3244:	4580      	cmp	r8, r0
    3246:	d103      	bne.n	3250 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3248:	f89d 0003 	ldrb.w	r0, [sp, #3]
    324c:	f001 f934 	bl	44b8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3250:	05a3      	lsls	r3, r4, #22
    3252:	d54e      	bpl.n	32f2 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3254:	4b31      	ldr	r3, [pc, #196]	; (331c <gpio_nrfx_pin_configure+0x150>)
    3256:	4a32      	ldr	r2, [pc, #200]	; (3320 <gpio_nrfx_pin_configure+0x154>)
    3258:	4023      	ands	r3, r4
    325a:	4293      	cmp	r3, r2
    325c:	d03a      	beq.n	32d4 <gpio_nrfx_pin_configure+0x108>
    325e:	d80c      	bhi.n	327a <gpio_nrfx_pin_configure+0xae>
    3260:	2b06      	cmp	r3, #6
    3262:	d014      	beq.n	328e <gpio_nrfx_pin_configure+0xc2>
    3264:	d804      	bhi.n	3270 <gpio_nrfx_pin_configure+0xa4>
    3266:	b193      	cbz	r3, 328e <gpio_nrfx_pin_configure+0xc2>
    3268:	2b02      	cmp	r3, #2
    326a:	d1e8      	bne.n	323e <gpio_nrfx_pin_configure+0x72>
    326c:	2304      	movs	r3, #4
    326e:	e00e      	b.n	328e <gpio_nrfx_pin_configure+0xc2>
    3270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3274:	d1e3      	bne.n	323e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3276:	2301      	movs	r3, #1
    3278:	e009      	b.n	328e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    327a:	4a2a      	ldr	r2, [pc, #168]	; (3324 <gpio_nrfx_pin_configure+0x158>)
    327c:	4293      	cmp	r3, r2
    327e:	d02b      	beq.n	32d8 <gpio_nrfx_pin_configure+0x10c>
    3280:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3284:	d02a      	beq.n	32dc <gpio_nrfx_pin_configure+0x110>
    3286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    328a:	d1d8      	bne.n	323e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    328c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    328e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3292:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3296:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    329a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    329c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    32a0:	bf54      	ite	pl
    32a2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    32a6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    32a8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    32aa:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    32ae:	d517      	bpl.n	32e0 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    32b0:	687b      	ldr	r3, [r7, #4]
    32b2:	2101      	movs	r1, #1
    32b4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    32b8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    32bc:	2200      	movs	r2, #0
    32be:	a901      	add	r1, sp, #4
    32c0:	4628      	mov	r0, r5
    32c2:	f001 f829 	bl	4318 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    32c6:	4b14      	ldr	r3, [pc, #80]	; (3318 <gpio_nrfx_pin_configure+0x14c>)
    32c8:	4298      	cmp	r0, r3
    32ca:	bf14      	ite	ne
    32cc:	f06f 0015 	mvnne.w	r0, #21
    32d0:	2000      	moveq	r0, #0
    32d2:	e794      	b.n	31fe <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    32d4:	2307      	movs	r3, #7
    32d6:	e7da      	b.n	328e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    32d8:	2305      	movs	r3, #5
    32da:	e7d8      	b.n	328e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    32dc:	2303      	movs	r3, #3
    32de:	e7d6      	b.n	328e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    32e0:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    32e2:	bf41      	itttt	mi
    32e4:	687b      	ldrmi	r3, [r7, #4]
    32e6:	2101      	movmi	r1, #1
    32e8:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    32ec:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    32f0:	e7e4      	b.n	32bc <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    32f2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    32f4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    32f8:	bf54      	ite	pl
    32fa:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    32fe:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3300:	461a      	mov	r2, r3
    3302:	a901      	add	r1, sp, #4
    3304:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3306:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    330a:	f000 ff5d 	bl	41c8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    330e:	4b02      	ldr	r3, [pc, #8]	; (3318 <gpio_nrfx_pin_configure+0x14c>)
    3310:	4298      	cmp	r0, r3
    3312:	f43f af7f 	beq.w	3214 <gpio_nrfx_pin_configure+0x48>
    3316:	e792      	b.n	323e <gpio_nrfx_pin_configure+0x72>
    3318:	0bad0000 	.word	0x0bad0000
    331c:	00f00006 	.word	0x00f00006
    3320:	00100006 	.word	0x00100006
    3324:	00400002 	.word	0x00400002

00003328 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3328:	4802      	ldr	r0, [pc, #8]	; (3334 <pwm_nrfx_get_cycles_per_sec+0xc>)
    332a:	2100      	movs	r1, #0
    332c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3330:	2000      	movs	r0, #0
    3332:	4770      	bx	lr
    3334:	00f42400 	.word	0x00f42400

00003338 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3338:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    333a:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    333c:	6912      	ldr	r2, [r2, #16]
{
    333e:	b538      	push	{r3, r4, r5, lr}
    3340:	f100 0308 	add.w	r3, r0, #8
    3344:	3204      	adds	r2, #4
    3346:	f100 040c 	add.w	r4, r0, #12
    334a:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    334c:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3350:	2d00      	cmp	r5, #0
    3352:	bfb4      	ite	lt
    3354:	2500      	movlt	r5, #0
    3356:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    335a:	42a3      	cmp	r3, r4

		data->current[i] = value;
    335c:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3360:	d1f4      	bne.n	334c <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3362:	2300      	movs	r3, #0
    3364:	461a      	mov	r2, r3
    3366:	f001 fb07 	bl	4978 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    336a:	4b03      	ldr	r3, [pc, #12]	; (3378 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    336c:	4298      	cmp	r0, r3
	}

	return 0;
}
    336e:	bf14      	ite	ne
    3370:	f06f 000f 	mvnne.w	r0, #15
    3374:	2000      	moveq	r0, #0
    3376:	bd38      	pop	{r3, r4, r5, pc}
    3378:	0bad0000 	.word	0x0bad0000

0000337c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    337c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    337e:	0953      	lsrs	r3, r2, #5
{
    3380:	b510      	push	{r4, lr}
    3382:	4604      	mov	r4, r0
    switch (port)
    3384:	d02c      	beq.n	33e0 <nrf_gpio_pin_port_decode+0x64>
    3386:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3388:	f64f 73ff 	movw	r3, #65535	; 0xffff
    338c:	bf18      	it	ne
    338e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3390:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3394:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3396:	07db      	lsls	r3, r3, #31
    3398:	d40b      	bmi.n	33b2 <nrf_gpio_pin_port_decode+0x36>
    339a:	4914      	ldr	r1, [pc, #80]	; (33ec <nrf_gpio_pin_port_decode+0x70>)
    339c:	4814      	ldr	r0, [pc, #80]	; (33f0 <nrf_gpio_pin_port_decode+0x74>)
    339e:	4a15      	ldr	r2, [pc, #84]	; (33f4 <nrf_gpio_pin_port_decode+0x78>)
    33a0:	f240 2329 	movw	r3, #553	; 0x229
    33a4:	f005 fc25 	bl	8bf2 <printk>
    33a8:	4812      	ldr	r0, [pc, #72]	; (33f4 <nrf_gpio_pin_port_decode+0x78>)
    33aa:	f240 2129 	movw	r1, #553	; 0x229
    33ae:	f005 fa31 	bl	8814 <assert_post_action>
    uint32_t pin_number = *p_pin;
    33b2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    33b4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33b8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    33ba:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33bc:	d00d      	beq.n	33da <nrf_gpio_pin_port_decode+0x5e>
    33be:	2b01      	cmp	r3, #1
    33c0:	d011      	beq.n	33e6 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    33c2:	490d      	ldr	r1, [pc, #52]	; (33f8 <nrf_gpio_pin_port_decode+0x7c>)
    33c4:	480a      	ldr	r0, [pc, #40]	; (33f0 <nrf_gpio_pin_port_decode+0x74>)
    33c6:	4a0b      	ldr	r2, [pc, #44]	; (33f4 <nrf_gpio_pin_port_decode+0x78>)
    33c8:	f240 232e 	movw	r3, #558	; 0x22e
    33cc:	f005 fc11 	bl	8bf2 <printk>
    33d0:	4808      	ldr	r0, [pc, #32]	; (33f4 <nrf_gpio_pin_port_decode+0x78>)
    33d2:	f240 212e 	movw	r1, #558	; 0x22e
    33d6:	f005 fa1d 	bl	8814 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    33de:	bd10      	pop	{r4, pc}
    switch (port)
    33e0:	f04f 33ff 	mov.w	r3, #4294967295
    33e4:	e7d4      	b.n	3390 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    33e6:	4805      	ldr	r0, [pc, #20]	; (33fc <nrf_gpio_pin_port_decode+0x80>)
    33e8:	e7f9      	b.n	33de <nrf_gpio_pin_port_decode+0x62>
    33ea:	bf00      	nop
    33ec:	0000a429 	.word	0x0000a429
    33f0:	00009c7a 	.word	0x00009c7a
    33f4:	0000a3f6 	.word	0x0000a3f6
    33f8:	0000a609 	.word	0x0000a609
    33fc:	50000300 	.word	0x50000300

00003400 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3400:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3402:	794b      	ldrb	r3, [r1, #5]
    3404:	2b01      	cmp	r3, #1
    3406:	d026      	beq.n	3456 <uarte_nrfx_configure+0x56>
    3408:	2b03      	cmp	r3, #3
    340a:	d121      	bne.n	3450 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    340c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    340e:	798b      	ldrb	r3, [r1, #6]
    3410:	2b03      	cmp	r3, #3
    3412:	d11d      	bne.n	3450 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3414:	79cc      	ldrb	r4, [r1, #7]
    3416:	b10c      	cbz	r4, 341c <uarte_nrfx_configure+0x1c>
    3418:	2c01      	cmp	r4, #1
    341a:	d119      	bne.n	3450 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    341c:	790a      	ldrb	r2, [r1, #4]
    341e:	b112      	cbz	r2, 3426 <uarte_nrfx_configure+0x26>
    3420:	2a02      	cmp	r2, #2
    3422:	d115      	bne.n	3450 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3424:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3426:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3428:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    342a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    342e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3430:	d065      	beq.n	34fe <uarte_nrfx_configure+0xfe>
    3432:	d82d      	bhi.n	3490 <uarte_nrfx_configure+0x90>
    3434:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3438:	d064      	beq.n	3504 <uarte_nrfx_configure+0x104>
    343a:	d816      	bhi.n	346a <uarte_nrfx_configure+0x6a>
    343c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3440:	d062      	beq.n	3508 <uarte_nrfx_configure+0x108>
    3442:	d80a      	bhi.n	345a <uarte_nrfx_configure+0x5a>
    3444:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3448:	d061      	beq.n	350e <uarte_nrfx_configure+0x10e>
    344a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    344e:	d061      	beq.n	3514 <uarte_nrfx_configure+0x114>
    3450:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3454:	e052      	b.n	34fc <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3456:	2600      	movs	r6, #0
    3458:	e7d9      	b.n	340e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    345a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    345e:	d05c      	beq.n	351a <uarte_nrfx_configure+0x11a>
    3460:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3464:	d1f4      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3466:	4b37      	ldr	r3, [pc, #220]	; (3544 <uarte_nrfx_configure+0x144>)
    3468:	e03c      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    346a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    346e:	d057      	beq.n	3520 <uarte_nrfx_configure+0x120>
    3470:	d807      	bhi.n	3482 <uarte_nrfx_configure+0x82>
    3472:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3476:	d055      	beq.n	3524 <uarte_nrfx_configure+0x124>
    3478:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    347c:	d1e8      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    347e:	4b32      	ldr	r3, [pc, #200]	; (3548 <uarte_nrfx_configure+0x148>)
    3480:	e030      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3482:	f647 2712 	movw	r7, #31250	; 0x7a12
    3486:	42bb      	cmp	r3, r7
    3488:	d1e2      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    348a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    348e:	e029      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3490:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3494:	d048      	beq.n	3528 <uarte_nrfx_configure+0x128>
    3496:	d813      	bhi.n	34c0 <uarte_nrfx_configure+0xc0>
    3498:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    349c:	d047      	beq.n	352e <uarte_nrfx_configure+0x12e>
    349e:	d809      	bhi.n	34b4 <uarte_nrfx_configure+0xb4>
    34a0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    34a4:	42bb      	cmp	r3, r7
    34a6:	d044      	beq.n	3532 <uarte_nrfx_configure+0x132>
    34a8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    34ac:	d1d0      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    34ae:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    34b2:	e017      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    34b4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    34b8:	d1ca      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    34ba:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    34be:	e011      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    34c0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    34c4:	d038      	beq.n	3538 <uarte_nrfx_configure+0x138>
    34c6:	d808      	bhi.n	34da <uarte_nrfx_configure+0xda>
    34c8:	4f20      	ldr	r7, [pc, #128]	; (354c <uarte_nrfx_configure+0x14c>)
    34ca:	42bb      	cmp	r3, r7
    34cc:	d037      	beq.n	353e <uarte_nrfx_configure+0x13e>
    34ce:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    34d2:	d1bd      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    34d4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    34d8:	e004      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    34da:	4f1d      	ldr	r7, [pc, #116]	; (3550 <uarte_nrfx_configure+0x150>)
    34dc:	42bb      	cmp	r3, r7
    34de:	d1b7      	bne.n	3450 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    34e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    34e4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    34e8:	6903      	ldr	r3, [r0, #16]
    34ea:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    34ec:	4334      	orrs	r4, r6
    34ee:	4322      	orrs	r2, r4
    34f0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    34f2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    34f6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    34fa:	2000      	movs	r0, #0
}
    34fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    34fe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3502:	e7ef      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3504:	4b13      	ldr	r3, [pc, #76]	; (3554 <uarte_nrfx_configure+0x154>)
    3506:	e7ed      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3508:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    350c:	e7ea      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    350e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3512:	e7e7      	b.n	34e4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3514:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3518:	e7e4      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    351a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    351e:	e7e1      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3520:	4b0d      	ldr	r3, [pc, #52]	; (3558 <uarte_nrfx_configure+0x158>)
    3522:	e7df      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3524:	4b0d      	ldr	r3, [pc, #52]	; (355c <uarte_nrfx_configure+0x15c>)
    3526:	e7dd      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3528:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    352c:	e7da      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    352e:	4b0c      	ldr	r3, [pc, #48]	; (3560 <uarte_nrfx_configure+0x160>)
    3530:	e7d8      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3532:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3536:	e7d5      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3538:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    353c:	e7d2      	b.n	34e4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    353e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3542:	e7cf      	b.n	34e4 <uarte_nrfx_configure+0xe4>
    3544:	0013b000 	.word	0x0013b000
    3548:	004ea000 	.word	0x004ea000
    354c:	0003d090 	.word	0x0003d090
    3550:	000f4240 	.word	0x000f4240
    3554:	00275000 	.word	0x00275000
    3558:	0075c000 	.word	0x0075c000
    355c:	003af000 	.word	0x003af000
    3560:	013a9000 	.word	0x013a9000

00003564 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3564:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3566:	0953      	lsrs	r3, r2, #5
{
    3568:	b510      	push	{r4, lr}
    356a:	4604      	mov	r4, r0
    switch (port)
    356c:	d02c      	beq.n	35c8 <nrf_gpio_pin_port_decode+0x64>
    356e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3570:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3574:	bf18      	it	ne
    3576:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3578:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    357c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    357e:	07db      	lsls	r3, r3, #31
    3580:	d40b      	bmi.n	359a <nrf_gpio_pin_port_decode+0x36>
    3582:	4914      	ldr	r1, [pc, #80]	; (35d4 <nrf_gpio_pin_port_decode+0x70>)
    3584:	4814      	ldr	r0, [pc, #80]	; (35d8 <nrf_gpio_pin_port_decode+0x74>)
    3586:	4a15      	ldr	r2, [pc, #84]	; (35dc <nrf_gpio_pin_port_decode+0x78>)
    3588:	f240 2329 	movw	r3, #553	; 0x229
    358c:	f005 fb31 	bl	8bf2 <printk>
    3590:	4812      	ldr	r0, [pc, #72]	; (35dc <nrf_gpio_pin_port_decode+0x78>)
    3592:	f240 2129 	movw	r1, #553	; 0x229
    3596:	f005 f93d 	bl	8814 <assert_post_action>
    uint32_t pin_number = *p_pin;
    359a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    359c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35a0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    35a2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35a4:	d00d      	beq.n	35c2 <nrf_gpio_pin_port_decode+0x5e>
    35a6:	2b01      	cmp	r3, #1
    35a8:	d011      	beq.n	35ce <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    35aa:	490d      	ldr	r1, [pc, #52]	; (35e0 <nrf_gpio_pin_port_decode+0x7c>)
    35ac:	480a      	ldr	r0, [pc, #40]	; (35d8 <nrf_gpio_pin_port_decode+0x74>)
    35ae:	4a0b      	ldr	r2, [pc, #44]	; (35dc <nrf_gpio_pin_port_decode+0x78>)
    35b0:	f240 232e 	movw	r3, #558	; 0x22e
    35b4:	f005 fb1d 	bl	8bf2 <printk>
    35b8:	4808      	ldr	r0, [pc, #32]	; (35dc <nrf_gpio_pin_port_decode+0x78>)
    35ba:	f240 212e 	movw	r1, #558	; 0x22e
    35be:	f005 f929 	bl	8814 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    35c6:	bd10      	pop	{r4, pc}
    switch (port)
    35c8:	f04f 33ff 	mov.w	r3, #4294967295
    35cc:	e7d4      	b.n	3578 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    35ce:	4805      	ldr	r0, [pc, #20]	; (35e4 <nrf_gpio_pin_port_decode+0x80>)
    35d0:	e7f9      	b.n	35c6 <nrf_gpio_pin_port_decode+0x62>
    35d2:	bf00      	nop
    35d4:	0000a429 	.word	0x0000a429
    35d8:	00009c7a 	.word	0x00009c7a
    35dc:	0000a3f6 	.word	0x0000a3f6
    35e0:	0000a609 	.word	0x0000a609
    35e4:	50000300 	.word	0x50000300

000035e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    35e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    35ea:	6906      	ldr	r6, [r0, #16]
{
    35ec:	4605      	mov	r5, r0
    35ee:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    35f0:	f005 feac 	bl	934c <k_is_in_isr>
    35f4:	b910      	cbnz	r0, 35fc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    35f6:	4b2c      	ldr	r3, [pc, #176]	; (36a8 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    35f8:	781b      	ldrb	r3, [r3, #0]
    35fa:	b983      	cbnz	r3, 361e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    35fc:	f04f 0320 	mov.w	r3, #32
    3600:	f3ef 8411 	mrs	r4, BASEPRI
    3604:	f383 8812 	msr	BASEPRI_MAX, r3
    3608:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    360c:	4628      	mov	r0, r5
    360e:	f005 fd20 	bl	9052 <is_tx_ready>
    3612:	bb28      	cbnz	r0, 3660 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3614:	f384 8811 	msr	BASEPRI, r4
    3618:	f3bf 8f6f 	isb	sy
}
    361c:	e7ee      	b.n	35fc <uarte_nrfx_poll_out+0x14>
{
    361e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3620:	4628      	mov	r0, r5
    3622:	f005 fd16 	bl	9052 <is_tx_ready>
    3626:	b970      	cbnz	r0, 3646 <uarte_nrfx_poll_out+0x5e>
    3628:	2001      	movs	r0, #1
    362a:	f005 fd64 	bl	90f6 <nrfx_busy_wait>
    362e:	3c01      	subs	r4, #1
    3630:	d1f6      	bne.n	3620 <uarte_nrfx_poll_out+0x38>
    3632:	2100      	movs	r1, #0
    3634:	2021      	movs	r0, #33	; 0x21
    3636:	f003 fb27 	bl	6c88 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    363a:	e7f0      	b.n	361e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    363c:	f384 8811 	msr	BASEPRI, r4
    3640:	f3bf 8f6f 	isb	sy
}
    3644:	e7f5      	b.n	3632 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3646:	f04f 0320 	mov.w	r3, #32
    364a:	f3ef 8411 	mrs	r4, BASEPRI
    364e:	f383 8812 	msr	BASEPRI_MAX, r3
    3652:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3656:	4628      	mov	r0, r5
    3658:	f005 fcfb 	bl	9052 <is_tx_ready>
    365c:	2800      	cmp	r0, #0
    365e:	d0ed      	beq.n	363c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3660:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3664:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3666:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3668:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    366a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    366e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3672:	2200      	movs	r2, #0
    3674:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3678:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    367c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3680:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3684:	684a      	ldr	r2, [r1, #4]
    3686:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3688:	bf41      	itttt	mi
    368a:	2208      	movmi	r2, #8
    368c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3690:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3694:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3698:	2201      	movs	r2, #1
    369a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    369c:	f384 8811 	msr	BASEPRI, r4
    36a0:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    36a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36a6:	bf00      	nop
    36a8:	20000c7b 	.word	0x20000c7b

000036ac <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    36ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    36b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    36b4:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    36b6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    36ba:	2300      	movs	r3, #0
    36bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    36c0:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    36c2:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36c4:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    36c6:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36c8:	1c58      	adds	r0, r3, #1
    36ca:	d013      	beq.n	36f4 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36cc:	a801      	add	r0, sp, #4
    36ce:	9301      	str	r3, [sp, #4]
    36d0:	f7ff ff48 	bl	3564 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    36d4:	9a01      	ldr	r2, [sp, #4]
    36d6:	2301      	movs	r3, #1
    36d8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    36da:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    36de:	68eb      	ldr	r3, [r5, #12]
    36e0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36e2:	a801      	add	r0, sp, #4
    36e4:	f7ff ff3e 	bl	3564 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36e8:	9b01      	ldr	r3, [sp, #4]
    36ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36ee:	2203      	movs	r2, #3
    36f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36f4:	692b      	ldr	r3, [r5, #16]
    36f6:	1c59      	adds	r1, r3, #1
    36f8:	d011      	beq.n	371e <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    36fa:	7f2a      	ldrb	r2, [r5, #28]
    36fc:	9301      	str	r3, [sp, #4]
    36fe:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3700:	a801      	add	r0, sp, #4
    3702:	bf14      	ite	ne
    3704:	f04f 0903 	movne.w	r9, #3
    3708:	f04f 0900 	moveq.w	r9, #0
    370c:	f7ff ff2a 	bl	3564 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3710:	9b01      	ldr	r3, [sp, #4]
    3712:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3716:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    371a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    371e:	696b      	ldr	r3, [r5, #20]
    3720:	1c5a      	adds	r2, r3, #1
    3722:	d013      	beq.n	374c <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3724:	a801      	add	r0, sp, #4
    3726:	9301      	str	r3, [sp, #4]
    3728:	f7ff ff1c 	bl	3564 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    372c:	9a01      	ldr	r2, [sp, #4]
    372e:	2301      	movs	r3, #1
    3730:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3732:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3736:	696b      	ldr	r3, [r5, #20]
    3738:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    373a:	a801      	add	r0, sp, #4
    373c:	f7ff ff12 	bl	3564 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3740:	9b01      	ldr	r3, [sp, #4]
    3742:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3746:	2203      	movs	r2, #3
    3748:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    374c:	69ab      	ldr	r3, [r5, #24]
    374e:	1c58      	adds	r0, r3, #1
    3750:	d011      	beq.n	3776 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3752:	7f6a      	ldrb	r2, [r5, #29]
    3754:	9301      	str	r3, [sp, #4]
    3756:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3758:	a801      	add	r0, sp, #4
    375a:	bf14      	ite	ne
    375c:	f04f 0903 	movne.w	r9, #3
    3760:	f04f 0900 	moveq.w	r9, #0
    3764:	f7ff fefe 	bl	3564 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3768:	9b01      	ldr	r3, [sp, #4]
    376a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    376e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3772:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3776:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    377a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    377c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3780:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3784:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3788:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    378c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    378e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3792:	3104      	adds	r1, #4
    3794:	4630      	mov	r0, r6
    3796:	f7ff fe33 	bl	3400 <uarte_nrfx_configure>
	if (err) {
    379a:	4605      	mov	r5, r0
    379c:	2800      	cmp	r0, #0
    379e:	d146      	bne.n	382e <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    37a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    37a4:	0799      	lsls	r1, r3, #30
    37a6:	d519      	bpl.n	37dc <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    37a8:	f107 0012 	add.w	r0, r7, #18
    37ac:	f001 f820 	bl	47f0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    37b0:	4b22      	ldr	r3, [pc, #136]	; (383c <uarte_instance_init.isra.0+0x190>)
    37b2:	4298      	cmp	r0, r3
    37b4:	d13f      	bne.n	3836 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    37b6:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    37b8:	00c3      	lsls	r3, r0, #3
    37ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37be:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    37c2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    37c6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    37ca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    37ce:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    37d2:	4a1b      	ldr	r2, [pc, #108]	; (3840 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    37d4:	2301      	movs	r3, #1
    37d6:	4083      	lsls	r3, r0
    37d8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    37dc:	2308      	movs	r3, #8
    37de:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    37e2:	f898 3008 	ldrb.w	r3, [r8, #8]
    37e6:	b95b      	cbnz	r3, 3800 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37e8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    37ec:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    37f0:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    37f4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    37f8:	2301      	movs	r3, #1
    37fa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37fe:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3800:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3804:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3806:	bf5c      	itt	pl
    3808:	f44f 7280 	movpl.w	r2, #256	; 0x100
    380c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3810:	06db      	lsls	r3, r3, #27
    3812:	bf44      	itt	mi
    3814:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3818:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    381c:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    381e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3820:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3824:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3828:	2301      	movs	r3, #1
    382a:	60a3      	str	r3, [r4, #8]
    382c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    382e:	4628      	mov	r0, r5
    3830:	b003      	add	sp, #12
    3832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3836:	f06f 0504 	mvn.w	r5, #4
    383a:	e7f8      	b.n	382e <uarte_instance_init.isra.0+0x182>
    383c:	0bad0000 	.word	0x0bad0000
    3840:	4001f000 	.word	0x4001f000

00003844 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3844:	4919      	ldr	r1, [pc, #100]	; (38ac <sys_clock_timeout_handler+0x68>)
{
    3846:	b570      	push	{r4, r5, r6, lr}
    3848:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    384a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    384e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3850:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3854:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3858:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    385a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    385e:	f04f 0500 	mov.w	r5, #0
    3862:	d20a      	bcs.n	387a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3864:	4b12      	ldr	r3, [pc, #72]	; (38b0 <sys_clock_timeout_handler+0x6c>)
    3866:	6819      	ldr	r1, [r3, #0]
    3868:	060a      	lsls	r2, r1, #24
    386a:	0a0b      	lsrs	r3, r1, #8
    386c:	1992      	adds	r2, r2, r6
    386e:	4911      	ldr	r1, [pc, #68]	; (38b4 <sys_clock_timeout_handler+0x70>)
    3870:	f143 0300 	adc.w	r3, r3, #0
    3874:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3878:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    387a:	f003 ffcb 	bl	7814 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    387e:	00a3      	lsls	r3, r4, #2
    3880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3884:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3888:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    388c:	42b2      	cmp	r2, r6
    388e:	d10b      	bne.n	38a8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3890:	b91d      	cbnz	r5, 389a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3896:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    389a:	4b07      	ldr	r3, [pc, #28]	; (38b8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    389c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    38a0:	fa00 f404 	lsl.w	r4, r0, r4
    38a4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    38a8:	bd70      	pop	{r4, r5, r6, pc}
    38aa:	bf00      	nop
    38ac:	20000408 	.word	0x20000408
    38b0:	20000bec 	.word	0x20000bec
    38b4:	200003f0 	.word	0x200003f0
    38b8:	40011000 	.word	0x40011000

000038bc <compare_int_lock>:
{
    38bc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    38be:	2301      	movs	r3, #1
    38c0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    38c2:	4a11      	ldr	r2, [pc, #68]	; (3908 <compare_int_lock+0x4c>)
    38c4:	f3bf 8f5b 	dmb	ish
    38c8:	43dc      	mvns	r4, r3
    38ca:	e852 1f00 	ldrex	r1, [r2]
    38ce:	ea01 0c04 	and.w	ip, r1, r4
    38d2:	e842 ce00 	strex	lr, ip, [r2]
    38d6:	f1be 0f00 	cmp.w	lr, #0
    38da:	d1f6      	bne.n	38ca <compare_int_lock+0xe>
    38dc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    38e4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    38e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    38ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    38f0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    38f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38f8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    38fc:	420b      	tst	r3, r1
}
    38fe:	bf14      	ite	ne
    3900:	2001      	movne	r0, #1
    3902:	2000      	moveq	r0, #0
    3904:	bd10      	pop	{r4, pc}
    3906:	bf00      	nop
    3908:	20000be8 	.word	0x20000be8

0000390c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    390c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    390e:	4a12      	ldr	r2, [pc, #72]	; (3958 <compare_int_unlock.part.0+0x4c>)
    3910:	f3bf 8f5b 	dmb	ish
    3914:	4083      	lsls	r3, r0
    3916:	e852 1f00 	ldrex	r1, [r2]
    391a:	4319      	orrs	r1, r3
    391c:	e842 1c00 	strex	ip, r1, [r2]
    3920:	f1bc 0f00 	cmp.w	ip, #0
    3924:	d1f7      	bne.n	3916 <compare_int_unlock.part.0+0xa>
    3926:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    392a:	4a0c      	ldr	r2, [pc, #48]	; (395c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    392c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3930:	4083      	lsls	r3, r0
    3932:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3936:	4b0a      	ldr	r3, [pc, #40]	; (3960 <compare_int_unlock.part.0+0x54>)
    3938:	f3bf 8f5b 	dmb	ish
    393c:	681b      	ldr	r3, [r3, #0]
    393e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3942:	fa23 f000 	lsr.w	r0, r3, r0
    3946:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3948:	bf42      	ittt	mi
    394a:	4b06      	ldrmi	r3, [pc, #24]	; (3964 <compare_int_unlock.part.0+0x58>)
    394c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3950:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	20000be8 	.word	0x20000be8
    395c:	40011000 	.word	0x40011000
    3960:	20000be4 	.word	0x20000be4
    3964:	e000e100 	.word	0xe000e100

00003968 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3968:	4b0d      	ldr	r3, [pc, #52]	; (39a0 <z_nrf_rtc_timer_read+0x38>)
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	0a19      	lsrs	r1, r3, #8
    396e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3970:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3974:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <z_nrf_rtc_timer_read+0x3c>)
    3976:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    397a:	18c0      	adds	r0, r0, r3
    397c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3984:	d20a      	bcs.n	399c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3986:	4b08      	ldr	r3, [pc, #32]	; (39a8 <z_nrf_rtc_timer_read+0x40>)
    3988:	e9d3 2300 	ldrd	r2, r3, [r3]
    398c:	4299      	cmp	r1, r3
    398e:	bf08      	it	eq
    3990:	4290      	cmpeq	r0, r2
    3992:	d203      	bcs.n	399c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3994:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3998:	f141 0100 	adc.w	r1, r1, #0
}
    399c:	4770      	bx	lr
    399e:	bf00      	nop
    39a0:	20000bec 	.word	0x20000bec
    39a4:	40011000 	.word	0x40011000
    39a8:	200003f0 	.word	0x200003f0

000039ac <compare_set>:
{
    39ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39b0:	b085      	sub	sp, #20
    39b2:	4616      	mov	r6, r2
    39b4:	461f      	mov	r7, r3
    39b6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    39b8:	f7ff ff80 	bl	38bc <compare_int_lock>
    39bc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    39be:	f7ff ffd3 	bl	3968 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    39c2:	42b9      	cmp	r1, r7
    39c4:	bf08      	it	eq
    39c6:	42b0      	cmpeq	r0, r6
    39c8:	d27f      	bcs.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
		if (target_time - curr_time > COUNTER_SPAN) {
    39ca:	ebb6 0800 	subs.w	r8, r6, r0
    39ce:	eb67 0901 	sbc.w	r9, r7, r1
    39d2:	2300      	movs	r3, #0
    39d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    39d8:	454b      	cmp	r3, r9
    39da:	bf08      	it	eq
    39dc:	4542      	cmpeq	r2, r8
    39de:	f0c0 8085 	bcc.w	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		if (target_time != cc_data[chan].target_time) {
    39e2:	4b44      	ldr	r3, [pc, #272]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    39e4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    39e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    39ec:	429f      	cmp	r7, r3
    39ee:	bf08      	it	eq
    39f0:	4296      	cmpeq	r6, r2
    39f2:	d054      	beq.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    39f4:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39f8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    39fc:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3a00:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3a04:	fa0b f205 	lsl.w	r2, fp, r5
    3a08:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3a0c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a10:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3a14:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3a16:	4a38      	ldr	r2, [pc, #224]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    return p_reg->CC[ch];
    3a18:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3a1c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a20:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3a24:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3a28:	461c      	mov	r4, r3
    3a2a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3a2c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3a30:	eba0 000a 	sub.w	r0, r0, sl
    3a34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3a38:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3a3c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3a3e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3a42:	d105      	bne.n	3a50 <compare_set+0xa4>
    3a44:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3a46:	2013      	movs	r0, #19
    3a48:	f005 fc91 	bl	936e <z_impl_k_busy_wait>
    3a4c:	4a2a      	ldr	r2, [pc, #168]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a4e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3a50:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3a52:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3a56:	eba4 000c 	sub.w	r0, r4, ip
    3a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3a5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a62:	bf88      	it	hi
    3a64:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a66:	2000      	movs	r0, #0
    3a68:	f8c8 0000 	str.w	r0, [r8]
    3a6c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3a70:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3a74:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3a78:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3a7c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3a80:	4582      	cmp	sl, r0
    3a82:	d006      	beq.n	3a92 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3a84:	1a20      	subs	r0, r4, r0
    3a86:	3802      	subs	r0, #2
    3a88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3a8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a90:	d819      	bhi.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
	return (a - b) & COUNTER_MAX;
    3a92:	1ae4      	subs	r4, r4, r3
    3a94:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3a98:	1932      	adds	r2, r6, r4
    3a9a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3a9e:	4c15      	ldr	r4, [pc, #84]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3aa0:	0129      	lsls	r1, r5, #4
    3aa2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3aa6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3aae:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3ab0:	6043      	str	r3, [r0, #4]
	return ret;
    3ab2:	2400      	movs	r4, #0
	if (key) {
    3ab4:	9b01      	ldr	r3, [sp, #4]
    3ab6:	b113      	cbz	r3, 3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3ab8:	4628      	mov	r0, r5
    3aba:	f7ff ff27 	bl	390c <compare_int_unlock.part.0>
}
    3abe:	4620      	mov	r0, r4
    3ac0:	b005      	add	sp, #20
    3ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ac6:	4620      	mov	r0, r4
    3ac8:	e7b0      	b.n	3a2c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3aca:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3acc:	4a0b      	ldr	r2, [pc, #44]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3ace:	f3bf 8f5b 	dmb	ish
    3ad2:	40ab      	lsls	r3, r5
    3ad4:	e852 1f00 	ldrex	r1, [r2]
    3ad8:	4319      	orrs	r1, r3
    3ada:	e842 1000 	strex	r0, r1, [r2]
    3ade:	2800      	cmp	r0, #0
    3ae0:	d1f8      	bne.n	3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>
    3ae2:	f3bf 8f5b 	dmb	ish
    3ae6:	4632      	mov	r2, r6
    3ae8:	463b      	mov	r3, r7
    3aea:	e7d8      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
			return -EINVAL;
    3aec:	f06f 0415 	mvn.w	r4, #21
    3af0:	e7e0      	b.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3af2:	bf00      	nop
    3af4:	200003f8 	.word	0x200003f8
    3af8:	40011000 	.word	0x40011000
    3afc:	20000be4 	.word	0x20000be4

00003b00 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3b02:	4b19      	ldr	r3, [pc, #100]	; (3b68 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3b04:	4d19      	ldr	r5, [pc, #100]	; (3b6c <sys_clock_driver_init+0x6c>)
    3b06:	2400      	movs	r4, #0
    3b08:	f04f 30ff 	mov.w	r0, #4294967295
    3b0c:	f04f 31ff 	mov.w	r1, #4294967295
    3b10:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3b14:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b1c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b20:	4b13      	ldr	r3, [pc, #76]	; (3b70 <sys_clock_driver_init+0x70>)
    3b22:	2602      	movs	r6, #2
    3b24:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3b28:	2101      	movs	r1, #1
    3b2a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3b2e:	2011      	movs	r0, #17
    3b30:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3b34:	4622      	mov	r2, r4
    3b36:	f7fe f965 	bl	1e04 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3b3a:	2011      	movs	r0, #17
    3b3c:	f7fe f944 	bl	1dc8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3b40:	4a0c      	ldr	r2, [pc, #48]	; (3b74 <sys_clock_driver_init+0x74>)
    3b42:	2301      	movs	r3, #1
    3b44:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3b46:	4a0c      	ldr	r2, [pc, #48]	; (3b78 <sys_clock_driver_init+0x78>)
    3b48:	602b      	str	r3, [r5, #0]
    3b4a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3b4c:	4b0b      	ldr	r3, [pc, #44]	; (3b7c <sys_clock_driver_init+0x7c>)
    3b4e:	4a0c      	ldr	r2, [pc, #48]	; (3b80 <sys_clock_driver_init+0x80>)
    3b50:	9300      	str	r3, [sp, #0]
    3b52:	9401      	str	r4, [sp, #4]
    3b54:	2300      	movs	r3, #0
    3b56:	4620      	mov	r0, r4
    3b58:	f7ff ff28 	bl	39ac <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3b5c:	4630      	mov	r0, r6
    3b5e:	f7ff f907 	bl	2d70 <z_nrf_clock_control_lf_on>

	return 0;
}
    3b62:	4620      	mov	r0, r4
    3b64:	b002      	add	sp, #8
    3b66:	bd70      	pop	{r4, r5, r6, pc}
    3b68:	200003f8 	.word	0x200003f8
    3b6c:	40011000 	.word	0x40011000
    3b70:	e000e100 	.word	0xe000e100
    3b74:	40011008 	.word	0x40011008
    3b78:	20000be8 	.word	0x20000be8
    3b7c:	00003845 	.word	0x00003845
    3b80:	007fffff 	.word	0x007fffff

00003b84 <rtc_nrf_isr>:
{
    3b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3b88:	4c34      	ldr	r4, [pc, #208]	; (3c5c <rtc_nrf_isr+0xd8>)
    3b8a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3b8e:	079a      	lsls	r2, r3, #30
    3b90:	d509      	bpl.n	3ba6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b92:	4b33      	ldr	r3, [pc, #204]	; (3c60 <rtc_nrf_isr+0xdc>)
    3b94:	681a      	ldr	r2, [r3, #0]
    3b96:	b132      	cbz	r2, 3ba6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b98:	2200      	movs	r2, #0
    3b9a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3b9c:	4a31      	ldr	r2, [pc, #196]	; (3c64 <rtc_nrf_isr+0xe0>)
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	6813      	ldr	r3, [r2, #0]
    3ba2:	3301      	adds	r3, #1
    3ba4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3ba6:	f04f 0320 	mov.w	r3, #32
    3baa:	f3ef 8211 	mrs	r2, BASEPRI
    3bae:	f383 8812 	msr	BASEPRI_MAX, r3
    3bb2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3bb6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3bba:	03db      	lsls	r3, r3, #15
    3bbc:	d512      	bpl.n	3be4 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3bbe:	f3bf 8f5b 	dmb	ish
    3bc2:	4b29      	ldr	r3, [pc, #164]	; (3c68 <rtc_nrf_isr+0xe4>)
    3bc4:	e853 1f00 	ldrex	r1, [r3]
    3bc8:	f021 0001 	bic.w	r0, r1, #1
    3bcc:	e843 0600 	strex	r6, r0, [r3]
    3bd0:	2e00      	cmp	r6, #0
    3bd2:	d1f7      	bne.n	3bc4 <rtc_nrf_isr+0x40>
    3bd4:	f3bf 8f5b 	dmb	ish
    3bd8:	4b24      	ldr	r3, [pc, #144]	; (3c6c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3bda:	2900      	cmp	r1, #0
    3bdc:	d136      	bne.n	3c4c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bde:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3be0:	2900      	cmp	r1, #0
    3be2:	d133      	bne.n	3c4c <rtc_nrf_isr+0xc8>
{
    3be4:	2300      	movs	r3, #0
	__asm__ volatile(
    3be6:	f382 8811 	msr	BASEPRI, r2
    3bea:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3bee:	b353      	cbz	r3, 3c46 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3bf0:	f7ff feba 	bl	3968 <z_nrf_rtc_timer_read>
    3bf4:	4606      	mov	r6, r0
	__asm__ volatile(
    3bf6:	f04f 0320 	mov.w	r3, #32
    3bfa:	f3ef 8011 	mrs	r0, BASEPRI
    3bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    3c02:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3c06:	4b1a      	ldr	r3, [pc, #104]	; (3c70 <rtc_nrf_isr+0xec>)
    3c08:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3c0c:	4549      	cmp	r1, r9
    3c0e:	bf08      	it	eq
    3c10:	4546      	cmpeq	r6, r8
    3c12:	f04f 0200 	mov.w	r2, #0
    3c16:	d31e      	bcc.n	3c56 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3c18:	f04f 36ff 	mov.w	r6, #4294967295
    3c1c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3c20:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3c24:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3c28:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3c2e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3c32:	f380 8811 	msr	BASEPRI, r0
    3c36:	f3bf 8f6f 	isb	sy
		if (handler) {
    3c3a:	b121      	cbz	r1, 3c46 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3c3c:	9500      	str	r5, [sp, #0]
    3c3e:	4642      	mov	r2, r8
    3c40:	464b      	mov	r3, r9
    3c42:	2000      	movs	r0, #0
    3c44:	4788      	blx	r1
}
    3c46:	b003      	add	sp, #12
    3c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c4c:	2100      	movs	r1, #0
    3c4e:	6019      	str	r1, [r3, #0]
    3c50:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3c52:	2301      	movs	r3, #1
}
    3c54:	e7c7      	b.n	3be6 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3c56:	4611      	mov	r1, r2
    3c58:	e7eb      	b.n	3c32 <rtc_nrf_isr+0xae>
    3c5a:	bf00      	nop
    3c5c:	40011000 	.word	0x40011000
    3c60:	40011104 	.word	0x40011104
    3c64:	20000bec 	.word	0x20000bec
    3c68:	20000be4 	.word	0x20000be4
    3c6c:	40011140 	.word	0x40011140
    3c70:	200003f8 	.word	0x200003f8

00003c74 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c74:	4b14      	ldr	r3, [pc, #80]	; (3cc8 <sys_clock_set_timeout+0x54>)
{
    3c76:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c78:	f1b0 3fff 	cmp.w	r0, #4294967295
    3c7c:	bf08      	it	eq
    3c7e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c80:	1e44      	subs	r4, r0, #1
    3c82:	2c00      	cmp	r4, #0
    3c84:	dd1e      	ble.n	3cc4 <sys_clock_set_timeout+0x50>
    3c86:	429c      	cmp	r4, r3
    3c88:	bfa8      	it	ge
    3c8a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c8c:	f7ff fe6c 	bl	3968 <z_nrf_rtc_timer_read>
    3c90:	4b0e      	ldr	r3, [pc, #56]	; (3ccc <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c92:	490f      	ldr	r1, [pc, #60]	; (3cd0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c94:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c98:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3c9a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c9e:	bf28      	it	cs
    3ca0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3ca2:	3001      	adds	r0, #1
    3ca4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3ca6:	4808      	ldr	r0, [pc, #32]	; (3cc8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3ca8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3caa:	4284      	cmp	r4, r0
    3cac:	bf28      	it	cs
    3cae:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3cb0:	1912      	adds	r2, r2, r4
    3cb2:	f04f 0000 	mov.w	r0, #0
    3cb6:	9001      	str	r0, [sp, #4]
    3cb8:	f143 0300 	adc.w	r3, r3, #0
    3cbc:	f7ff fe76 	bl	39ac <compare_set>
}
    3cc0:	b002      	add	sp, #8
    3cc2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3cc4:	2400      	movs	r4, #0
    3cc6:	e7e1      	b.n	3c8c <sys_clock_set_timeout+0x18>
    3cc8:	007fffff 	.word	0x007fffff
    3ccc:	20000408 	.word	0x20000408
    3cd0:	00003845 	.word	0x00003845

00003cd4 <sys_clock_elapsed>:
{
    3cd4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3cd6:	f7ff fe47 	bl	3968 <z_nrf_rtc_timer_read>
    3cda:	4b02      	ldr	r3, [pc, #8]	; (3ce4 <sys_clock_elapsed+0x10>)
    3cdc:	681b      	ldr	r3, [r3, #0]
}
    3cde:	1ac0      	subs	r0, r0, r3
    3ce0:	bd08      	pop	{r3, pc}
    3ce2:	bf00      	nop
    3ce4:	20000408 	.word	0x20000408

00003ce8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3ce8:	b508      	push	{r3, lr}
    switch (domain)
    3cea:	b178      	cbz	r0, 3d0c <nrf_clock_is_running.constprop.0+0x24>
    3cec:	2801      	cmp	r0, #1
    3cee:	d01c      	beq.n	3d2a <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    3cf0:	4a14      	ldr	r2, [pc, #80]	; (3d44 <nrf_clock_is_running.constprop.0+0x5c>)
    3cf2:	4915      	ldr	r1, [pc, #84]	; (3d48 <nrf_clock_is_running.constprop.0+0x60>)
    3cf4:	4815      	ldr	r0, [pc, #84]	; (3d4c <nrf_clock_is_running.constprop.0+0x64>)
    3cf6:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3cfa:	f004 ff7a 	bl	8bf2 <printk>
    3cfe:	4811      	ldr	r0, [pc, #68]	; (3d44 <nrf_clock_is_running.constprop.0+0x5c>)
    3d00:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3d04:	f004 fd86 	bl	8814 <assert_post_action>
            return false;
    3d08:	2000      	movs	r0, #0
    3d0a:	e00d      	b.n	3d28 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3d0c:	b131      	cbz	r1, 3d1c <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d12:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3d16:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3d1a:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d20:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3d24:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3d28:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3d2a:	b131      	cbz	r1, 3d3a <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d30:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3d34:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3d38:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d3e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3d42:	e7ef      	b.n	3d24 <nrf_clock_is_running.constprop.0+0x3c>
    3d44:	0000a461 	.word	0x0000a461
    3d48:	0000a609 	.word	0x0000a609
    3d4c:	00009c7a 	.word	0x00009c7a

00003d50 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3d50:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3d52:	4604      	mov	r4, r0
    3d54:	b948      	cbnz	r0, 3d6a <nrfx_clock_init+0x1a>
    3d56:	490a      	ldr	r1, [pc, #40]	; (3d80 <nrfx_clock_init+0x30>)
    3d58:	480a      	ldr	r0, [pc, #40]	; (3d84 <nrfx_clock_init+0x34>)
    3d5a:	4a0b      	ldr	r2, [pc, #44]	; (3d88 <nrfx_clock_init+0x38>)
    3d5c:	23bd      	movs	r3, #189	; 0xbd
    3d5e:	f004 ff48 	bl	8bf2 <printk>
    3d62:	4809      	ldr	r0, [pc, #36]	; (3d88 <nrfx_clock_init+0x38>)
    3d64:	21bd      	movs	r1, #189	; 0xbd
    3d66:	f004 fd55 	bl	8814 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3d6a:	4b08      	ldr	r3, [pc, #32]	; (3d8c <nrfx_clock_init+0x3c>)
    3d6c:	791a      	ldrb	r2, [r3, #4]
    3d6e:	b922      	cbnz	r2, 3d7a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3d70:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3d72:	4807      	ldr	r0, [pc, #28]	; (3d90 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3d74:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3d76:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3d78:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3d7a:	4806      	ldr	r0, [pc, #24]	; (3d94 <nrfx_clock_init+0x44>)
    return err_code;
    3d7c:	e7fc      	b.n	3d78 <nrfx_clock_init+0x28>
    3d7e:	bf00      	nop
    3d80:	0000a4d2 	.word	0x0000a4d2
    3d84:	00009c7a 	.word	0x00009c7a
    3d88:	0000a495 	.word	0x0000a495
    3d8c:	20000bf0 	.word	0x20000bf0
    3d90:	0bad0000 	.word	0x0bad0000
    3d94:	0bad000c 	.word	0x0bad000c

00003d98 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3d98:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d9a:	4b0b      	ldr	r3, [pc, #44]	; (3dc8 <nrfx_clock_enable+0x30>)
    3d9c:	791b      	ldrb	r3, [r3, #4]
    3d9e:	b94b      	cbnz	r3, 3db4 <nrfx_clock_enable+0x1c>
    3da0:	490a      	ldr	r1, [pc, #40]	; (3dcc <nrfx_clock_enable+0x34>)
    3da2:	480b      	ldr	r0, [pc, #44]	; (3dd0 <nrfx_clock_enable+0x38>)
    3da4:	4a0b      	ldr	r2, [pc, #44]	; (3dd4 <nrfx_clock_enable+0x3c>)
    3da6:	23d6      	movs	r3, #214	; 0xd6
    3da8:	f004 ff23 	bl	8bf2 <printk>
    3dac:	4809      	ldr	r0, [pc, #36]	; (3dd4 <nrfx_clock_enable+0x3c>)
    3dae:	21d6      	movs	r1, #214	; 0xd6
    3db0:	f004 fd30 	bl	8814 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3db4:	2000      	movs	r0, #0
    3db6:	f7fe f817 	bl	1de8 <arch_irq_is_enabled>
    3dba:	b918      	cbnz	r0, 3dc4 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3dbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3dc0:	f7fe b802 	b.w	1dc8 <arch_irq_enable>
    3dc4:	bd08      	pop	{r3, pc}
    3dc6:	bf00      	nop
    3dc8:	20000bf0 	.word	0x20000bf0
    3dcc:	0000a4e0 	.word	0x0000a4e0
    3dd0:	00009c7a 	.word	0x00009c7a
    3dd4:	0000a495 	.word	0x0000a495

00003dd8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3dd8:	4b22      	ldr	r3, [pc, #136]	; (3e64 <nrfx_clock_start+0x8c>)
    3dda:	791b      	ldrb	r3, [r3, #4]
{
    3ddc:	b513      	push	{r0, r1, r4, lr}
    3dde:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3de0:	b95b      	cbnz	r3, 3dfa <nrfx_clock_start+0x22>
    3de2:	4921      	ldr	r1, [pc, #132]	; (3e68 <nrfx_clock_start+0x90>)
    3de4:	4821      	ldr	r0, [pc, #132]	; (3e6c <nrfx_clock_start+0x94>)
    3de6:	4a22      	ldr	r2, [pc, #136]	; (3e70 <nrfx_clock_start+0x98>)
    3de8:	f44f 7389 	mov.w	r3, #274	; 0x112
    3dec:	f004 ff01 	bl	8bf2 <printk>
    3df0:	481f      	ldr	r0, [pc, #124]	; (3e70 <nrfx_clock_start+0x98>)
    3df2:	f44f 7189 	mov.w	r1, #274	; 0x112
    3df6:	f004 fd0d 	bl	8814 <assert_post_action>
    switch (domain)
    3dfa:	b174      	cbz	r4, 3e1a <nrfx_clock_start+0x42>
    3dfc:	2c01      	cmp	r4, #1
    3dfe:	d027      	beq.n	3e50 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3e00:	4a1b      	ldr	r2, [pc, #108]	; (3e70 <nrfx_clock_start+0x98>)
    3e02:	491c      	ldr	r1, [pc, #112]	; (3e74 <nrfx_clock_start+0x9c>)
    3e04:	4819      	ldr	r0, [pc, #100]	; (3e6c <nrfx_clock_start+0x94>)
    3e06:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3e0a:	f004 fef2 	bl	8bf2 <printk>
    3e0e:	4818      	ldr	r0, [pc, #96]	; (3e70 <nrfx_clock_start+0x98>)
    3e10:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3e14:	f004 fcfe 	bl	8814 <assert_post_action>
            break;
    }
}
    3e18:	e016      	b.n	3e48 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3e1a:	a901      	add	r1, sp, #4
    3e1c:	4620      	mov	r0, r4
    3e1e:	f7ff ff63 	bl	3ce8 <nrf_clock_is_running.constprop.0>
    3e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e26:	b188      	cbz	r0, 3e4c <nrfx_clock_start+0x74>
    3e28:	9a01      	ldr	r2, [sp, #4]
    3e2a:	2a01      	cmp	r2, #1
    3e2c:	d10e      	bne.n	3e4c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3e2e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e32:	4b11      	ldr	r3, [pc, #68]	; (3e78 <nrfx_clock_start+0xa0>)
    3e34:	2200      	movs	r2, #0
    3e36:	601a      	str	r2, [r3, #0]
    3e38:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e3e:	2202      	movs	r2, #2
    3e40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e44:	2201      	movs	r2, #1
    3e46:	609a      	str	r2, [r3, #8]
}
    3e48:	b002      	add	sp, #8
    3e4a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3e4c:	2200      	movs	r2, #0
    3e4e:	e7ee      	b.n	3e2e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e50:	4b0a      	ldr	r3, [pc, #40]	; (3e7c <nrfx_clock_start+0xa4>)
    3e52:	2200      	movs	r2, #0
    3e54:	601a      	str	r2, [r3, #0]
    3e56:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e5c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e60:	601c      	str	r4, [r3, #0]
}
    3e62:	e7f1      	b.n	3e48 <nrfx_clock_start+0x70>
    3e64:	20000bf0 	.word	0x20000bf0
    3e68:	0000a4e0 	.word	0x0000a4e0
    3e6c:	00009c7a 	.word	0x00009c7a
    3e70:	0000a495 	.word	0x0000a495
    3e74:	0000a609 	.word	0x0000a609
    3e78:	40000104 	.word	0x40000104
    3e7c:	40000100 	.word	0x40000100

00003e80 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e82:	4d2f      	ldr	r5, [pc, #188]	; (3f40 <nrfx_clock_stop+0xc0>)
    3e84:	792a      	ldrb	r2, [r5, #4]
{
    3e86:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e88:	b95a      	cbnz	r2, 3ea2 <nrfx_clock_stop+0x22>
    3e8a:	492e      	ldr	r1, [pc, #184]	; (3f44 <nrfx_clock_stop+0xc4>)
    3e8c:	482e      	ldr	r0, [pc, #184]	; (3f48 <nrfx_clock_stop+0xc8>)
    3e8e:	4a2f      	ldr	r2, [pc, #188]	; (3f4c <nrfx_clock_stop+0xcc>)
    3e90:	f240 134b 	movw	r3, #331	; 0x14b
    3e94:	f004 fead 	bl	8bf2 <printk>
    3e98:	482c      	ldr	r0, [pc, #176]	; (3f4c <nrfx_clock_stop+0xcc>)
    3e9a:	f240 114b 	movw	r1, #331	; 0x14b
    3e9e:	f004 fcb9 	bl	8814 <assert_post_action>
    switch (domain)
    3ea2:	b17c      	cbz	r4, 3ec4 <nrfx_clock_stop+0x44>
    3ea4:	2c01      	cmp	r4, #1
    3ea6:	d028      	beq.n	3efa <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3ea8:	4929      	ldr	r1, [pc, #164]	; (3f50 <nrfx_clock_stop+0xd0>)
    3eaa:	4827      	ldr	r0, [pc, #156]	; (3f48 <nrfx_clock_stop+0xc8>)
    3eac:	4a27      	ldr	r2, [pc, #156]	; (3f4c <nrfx_clock_stop+0xcc>)
    3eae:	f240 1367 	movw	r3, #359	; 0x167
    3eb2:	f004 fe9e 	bl	8bf2 <printk>
    3eb6:	4825      	ldr	r0, [pc, #148]	; (3f4c <nrfx_clock_stop+0xcc>)
    3eb8:	f240 1167 	movw	r1, #359	; 0x167
    3ebc:	f004 fcaa 	bl	8814 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3ec0:	b003      	add	sp, #12
    3ec2:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ec8:	2202      	movs	r2, #2
    3eca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ece:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    3ed2:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ed6:	2201      	movs	r2, #1
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	4b1e      	ldr	r3, [pc, #120]	; (3f54 <nrfx_clock_stop+0xd4>)
    3edc:	f242 7410 	movw	r4, #10000	; 0x2710
    3ee0:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3ee2:	2100      	movs	r1, #0
    3ee4:	4608      	mov	r0, r1
    3ee6:	f7ff feff 	bl	3ce8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3eea:	2800      	cmp	r0, #0
    3eec:	d0e8      	beq.n	3ec0 <nrfx_clock_stop+0x40>
    3eee:	2001      	movs	r0, #1
    3ef0:	f005 f901 	bl	90f6 <nrfx_busy_wait>
    3ef4:	3c01      	subs	r4, #1
    3ef6:	d1f4      	bne.n	3ee2 <nrfx_clock_stop+0x62>
    3ef8:	e7e2      	b.n	3ec0 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3efe:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3f00:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3f0c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f0e:	4b12      	ldr	r3, [pc, #72]	; (3f58 <nrfx_clock_stop+0xd8>)
    3f10:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3f12:	f88d 4007 	strb.w	r4, [sp, #7]
    3f16:	f242 7410 	movw	r4, #10000	; 0x2710
    3f1a:	f10d 0107 	add.w	r1, sp, #7
    3f1e:	2001      	movs	r0, #1
    3f20:	f7ff fee2 	bl	3ce8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3f24:	b910      	cbnz	r0, 3f2c <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3f26:	2300      	movs	r3, #0
    3f28:	716b      	strb	r3, [r5, #5]
    3f2a:	e7c9      	b.n	3ec0 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3f2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3f30:	2801      	cmp	r0, #1
    3f32:	d1f8      	bne.n	3f26 <nrfx_clock_stop+0xa6>
    3f34:	f005 f8df 	bl	90f6 <nrfx_busy_wait>
    3f38:	3c01      	subs	r4, #1
    3f3a:	d1ee      	bne.n	3f1a <nrfx_clock_stop+0x9a>
    3f3c:	e7f3      	b.n	3f26 <nrfx_clock_stop+0xa6>
    3f3e:	bf00      	nop
    3f40:	20000bf0 	.word	0x20000bf0
    3f44:	0000a4e0 	.word	0x0000a4e0
    3f48:	00009c7a 	.word	0x00009c7a
    3f4c:	0000a495 	.word	0x0000a495
    3f50:	0000a609 	.word	0x0000a609
    3f54:	4000000c 	.word	0x4000000c
    3f58:	40000004 	.word	0x40000004

00003f5c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f5c:	4b16      	ldr	r3, [pc, #88]	; (3fb8 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3f5e:	b507      	push	{r0, r1, r2, lr}
    3f60:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3f62:	b16a      	cbz	r2, 3f80 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f64:	2200      	movs	r2, #0
    3f66:	601a      	str	r2, [r3, #0]
    3f68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f6e:	2201      	movs	r2, #1
    3f70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3f74:	4b11      	ldr	r3, [pc, #68]	; (3fbc <nrfx_power_clock_irq_handler+0x60>)
    3f76:	7958      	ldrb	r0, [r3, #5]
    3f78:	b910      	cbnz	r0, 3f80 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3f7a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f80:	4b0f      	ldr	r3, [pc, #60]	; (3fc0 <nrfx_power_clock_irq_handler+0x64>)
    3f82:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3f84:	b16a      	cbz	r2, 3fa2 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f86:	2000      	movs	r0, #0
    3f88:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3f8a:	a901      	add	r1, sp, #4
    3f8c:	681b      	ldr	r3, [r3, #0]
    3f8e:	f7ff feab 	bl	3ce8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3f92:	9a01      	ldr	r2, [sp, #4]
    3f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f98:	b932      	cbnz	r2, 3fa8 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f9a:	2201      	movs	r2, #1
    3f9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fa0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3fa2:	b003      	add	sp, #12
    3fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3fa8:	2202      	movs	r2, #2
    3faa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3fae:	4b03      	ldr	r3, [pc, #12]	; (3fbc <nrfx_power_clock_irq_handler+0x60>)
    3fb0:	2001      	movs	r0, #1
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	4798      	blx	r3
}
    3fb6:	e7f4      	b.n	3fa2 <nrfx_power_clock_irq_handler+0x46>
    3fb8:	40000100 	.word	0x40000100
    3fbc:	20000bf0 	.word	0x20000bf0
    3fc0:	40000104 	.word	0x40000104

00003fc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3fc4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3fc6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3fc8:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3fca:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3fce:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3fd0:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3fd4:	d014      	beq.n	4000 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3fd6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3fda:	fa05 f204 	lsl.w	r2, r5, r4
    3fde:	ea23 0202 	bic.w	r2, r3, r2
    3fe2:	e850 6f00 	ldrex	r6, [r0]
    3fe6:	429e      	cmp	r6, r3
    3fe8:	d104      	bne.n	3ff4 <nrfx_flag32_alloc+0x30>
    3fea:	e840 2c00 	strex	ip, r2, [r0]
    3fee:	f1bc 0f00 	cmp.w	ip, #0
    3ff2:	d1f6      	bne.n	3fe2 <nrfx_flag32_alloc+0x1e>
    3ff4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3ff8:	d1e6      	bne.n	3fc8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3ffa:	4802      	ldr	r0, [pc, #8]	; (4004 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3ffc:	700c      	strb	r4, [r1, #0]
}
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4000:	4801      	ldr	r0, [pc, #4]	; (4008 <nrfx_flag32_alloc+0x44>)
    4002:	e7fc      	b.n	3ffe <nrfx_flag32_alloc+0x3a>
    4004:	0bad0000 	.word	0x0bad0000
    4008:	0bad0002 	.word	0x0bad0002

0000400c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    400c:	6803      	ldr	r3, [r0, #0]
    400e:	40cb      	lsrs	r3, r1
    4010:	07db      	lsls	r3, r3, #31
{
    4012:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4014:	d415      	bmi.n	4042 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4016:	2301      	movs	r3, #1
    4018:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    401c:	6803      	ldr	r3, [r0, #0]
    401e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4022:	ea41 0203 	orr.w	r2, r1, r3
    4026:	e850 4f00 	ldrex	r4, [r0]
    402a:	429c      	cmp	r4, r3
    402c:	d104      	bne.n	4038 <nrfx_flag32_free+0x2c>
    402e:	e840 2c00 	strex	ip, r2, [r0]
    4032:	f1bc 0f00 	cmp.w	ip, #0
    4036:	d1f6      	bne.n	4026 <nrfx_flag32_free+0x1a>
    4038:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    403c:	d1ee      	bne.n	401c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    403e:	4802      	ldr	r0, [pc, #8]	; (4048 <nrfx_flag32_free+0x3c>)
}
    4040:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4042:	4802      	ldr	r0, [pc, #8]	; (404c <nrfx_flag32_free+0x40>)
    4044:	e7fc      	b.n	4040 <nrfx_flag32_free+0x34>
    4046:	bf00      	nop
    4048:	0bad0000 	.word	0x0bad0000
    404c:	0bad0004 	.word	0x0bad0004

00004050 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4050:	4b05      	ldr	r3, [pc, #20]	; (4068 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4052:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4054:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4058:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    405c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4060:	4258      	negs	r0, r3
    4062:	4158      	adcs	r0, r3
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	20000100 	.word	0x20000100

0000406c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    406c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    406e:	f100 0308 	add.w	r3, r0, #8
    4072:	4c0c      	ldr	r4, [pc, #48]	; (40a4 <call_handler+0x38>)
    4074:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4078:	05da      	lsls	r2, r3, #23
{
    407a:	4605      	mov	r5, r0
    407c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    407e:	d507      	bpl.n	4090 <call_handler+0x24>
    4080:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4084:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4088:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    408c:	6852      	ldr	r2, [r2, #4]
    408e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4090:	68a3      	ldr	r3, [r4, #8]
    4092:	b12b      	cbz	r3, 40a0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4094:	68e2      	ldr	r2, [r4, #12]
    4096:	4631      	mov	r1, r6
    4098:	4628      	mov	r0, r5
    }
}
    409a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    409e:	4718      	bx	r3
}
    40a0:	bd70      	pop	{r4, r5, r6, pc}
    40a2:	bf00      	nop
    40a4:	20000100 	.word	0x20000100

000040a8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    40a8:	4b19      	ldr	r3, [pc, #100]	; (4110 <release_handler+0x68>)
    40aa:	3008      	adds	r0, #8
{
    40ac:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    40ae:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    40b2:	05d1      	lsls	r1, r2, #23
    40b4:	d51d      	bpl.n	40f2 <release_handler+0x4a>
    40b6:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    40ba:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    40be:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    40c2:	f103 0410 	add.w	r4, r3, #16
    40c6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    40c8:	f834 2b02 	ldrh.w	r2, [r4], #2
    40cc:	f412 7f80 	tst.w	r2, #256	; 0x100
    40d0:	d003      	beq.n	40da <release_handler+0x32>
    40d2:	f3c2 2243 	ubfx	r2, r2, #9, #4
    40d6:	4291      	cmp	r1, r2
    40d8:	d00b      	beq.n	40f2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    40da:	3001      	adds	r0, #1
    40dc:	2830      	cmp	r0, #48	; 0x30
    40de:	d1f3      	bne.n	40c8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    40e0:	2200      	movs	r2, #0
    40e2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    40e6:	480b      	ldr	r0, [pc, #44]	; (4114 <release_handler+0x6c>)
    40e8:	f7ff ff90 	bl	400c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    40ec:	4b0a      	ldr	r3, [pc, #40]	; (4118 <release_handler+0x70>)
    40ee:	4298      	cmp	r0, r3
    40f0:	d100      	bne.n	40f4 <release_handler+0x4c>
}
    40f2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    40f4:	4909      	ldr	r1, [pc, #36]	; (411c <release_handler+0x74>)
    40f6:	480a      	ldr	r0, [pc, #40]	; (4120 <release_handler+0x78>)
    40f8:	4a0a      	ldr	r2, [pc, #40]	; (4124 <release_handler+0x7c>)
    40fa:	f44f 7399 	mov.w	r3, #306	; 0x132
    40fe:	f004 fd78 	bl	8bf2 <printk>
}
    4102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4106:	4807      	ldr	r0, [pc, #28]	; (4124 <release_handler+0x7c>)
    4108:	f44f 7199 	mov.w	r1, #306	; 0x132
    410c:	f004 bb82 	b.w	8814 <assert_post_action>
    4110:	20000100 	.word	0x20000100
    4114:	20000174 	.word	0x20000174
    4118:	0bad0000 	.word	0x0bad0000
    411c:	0000a562 	.word	0x0000a562
    4120:	00009c7a 	.word	0x00009c7a
    4124:	0000a4fe 	.word	0x0000a4fe

00004128 <pin_handler_trigger_uninit>:
{
    4128:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    412a:	4c0a      	ldr	r4, [pc, #40]	; (4154 <pin_handler_trigger_uninit+0x2c>)
    412c:	f100 0508 	add.w	r5, r0, #8
    4130:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    4134:	069a      	lsls	r2, r3, #26
    4136:	d506      	bpl.n	4146 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4138:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    413a:	4a07      	ldr	r2, [pc, #28]	; (4158 <pin_handler_trigger_uninit+0x30>)
    413c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4140:	2100      	movs	r1, #0
    4142:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    4146:	f7ff ffaf 	bl	40a8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    414a:	2300      	movs	r3, #0
    414c:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4150:	bd38      	pop	{r3, r4, r5, pc}
    4152:	bf00      	nop
    4154:	20000100 	.word	0x20000100
    4158:	40006000 	.word	0x40006000

0000415c <nrf_gpio_pin_port_decode>:
{
    415c:	b510      	push	{r4, lr}
    415e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4160:	6800      	ldr	r0, [r0, #0]
    4162:	f004 ffca 	bl	90fa <nrf_gpio_pin_present_check>
    4166:	b958      	cbnz	r0, 4180 <nrf_gpio_pin_port_decode+0x24>
    4168:	4912      	ldr	r1, [pc, #72]	; (41b4 <nrf_gpio_pin_port_decode+0x58>)
    416a:	4813      	ldr	r0, [pc, #76]	; (41b8 <nrf_gpio_pin_port_decode+0x5c>)
    416c:	4a13      	ldr	r2, [pc, #76]	; (41bc <nrf_gpio_pin_port_decode+0x60>)
    416e:	f240 2329 	movw	r3, #553	; 0x229
    4172:	f004 fd3e 	bl	8bf2 <printk>
    4176:	4811      	ldr	r0, [pc, #68]	; (41bc <nrf_gpio_pin_port_decode+0x60>)
    4178:	f240 2129 	movw	r1, #553	; 0x229
    417c:	f004 fb4a 	bl	8814 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4180:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4182:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4186:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4188:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    418a:	d00d      	beq.n	41a8 <nrf_gpio_pin_port_decode+0x4c>
    418c:	2b01      	cmp	r3, #1
    418e:	d00e      	beq.n	41ae <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4190:	490b      	ldr	r1, [pc, #44]	; (41c0 <nrf_gpio_pin_port_decode+0x64>)
    4192:	4809      	ldr	r0, [pc, #36]	; (41b8 <nrf_gpio_pin_port_decode+0x5c>)
    4194:	4a09      	ldr	r2, [pc, #36]	; (41bc <nrf_gpio_pin_port_decode+0x60>)
    4196:	f240 232e 	movw	r3, #558	; 0x22e
    419a:	f004 fd2a 	bl	8bf2 <printk>
    419e:	4807      	ldr	r0, [pc, #28]	; (41bc <nrf_gpio_pin_port_decode+0x60>)
    41a0:	f240 212e 	movw	r1, #558	; 0x22e
    41a4:	f004 fb36 	bl	8814 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    41ac:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    41ae:	4805      	ldr	r0, [pc, #20]	; (41c4 <nrf_gpio_pin_port_decode+0x68>)
    41b0:	e7fc      	b.n	41ac <nrf_gpio_pin_port_decode+0x50>
    41b2:	bf00      	nop
    41b4:	0000a429 	.word	0x0000a429
    41b8:	00009c7a 	.word	0x00009c7a
    41bc:	0000a3f6 	.word	0x0000a3f6
    41c0:	0000a609 	.word	0x0000a609
    41c4:	50000300 	.word	0x50000300

000041c8 <nrfx_gpiote_input_configure>:
{
    41c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ca:	4604      	mov	r4, r0
    41cc:	b085      	sub	sp, #20
    41ce:	4617      	mov	r7, r2
    41d0:	461d      	mov	r5, r3
    if (p_input_config)
    41d2:	b1f1      	cbz	r1, 4212 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    41d4:	f7ff ff3c 	bl	4050 <pin_is_task_output>
    41d8:	b110      	cbz	r0, 41e0 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    41da:	484a      	ldr	r0, [pc, #296]	; (4304 <nrfx_gpiote_input_configure+0x13c>)
}
    41dc:	b005      	add	sp, #20
    41de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    41e0:	460b      	mov	r3, r1
    41e2:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    41e6:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    41ea:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    41ee:	f10d 020f 	add.w	r2, sp, #15
    41f2:	f10d 010e 	add.w	r1, sp, #14
    41f6:	4620      	mov	r0, r4
    41f8:	f004 ff94 	bl	9124 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    41fc:	4a42      	ldr	r2, [pc, #264]	; (4308 <nrfx_gpiote_input_configure+0x140>)
    41fe:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4202:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4206:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    420a:	f043 0301 	orr.w	r3, r3, #1
    420e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4212:	b197      	cbz	r7, 423a <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4214:	4b3c      	ldr	r3, [pc, #240]	; (4308 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4216:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4218:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    421a:	f104 0008 	add.w	r0, r4, #8
    421e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4222:	078f      	lsls	r7, r1, #30
    4224:	d50c      	bpl.n	4240 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    4226:	2a00      	cmp	r2, #0
    4228:	d1d7      	bne.n	41da <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    422a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    422e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4232:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4236:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    423a:	bbcd      	cbnz	r5, 42b0 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    423c:	4833      	ldr	r0, [pc, #204]	; (430c <nrfx_gpiote_input_configure+0x144>)
    423e:	e7cd      	b.n	41dc <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4240:	f021 0120 	bic.w	r1, r1, #32
    4244:	04c9      	lsls	r1, r1, #19
    4246:	0cc9      	lsrs	r1, r1, #19
    4248:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    424c:	2a00      	cmp	r2, #0
    424e:	d0ec      	beq.n	422a <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4250:	2e03      	cmp	r6, #3
    4252:	d8c2      	bhi.n	41da <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4254:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4256:	b92e      	cbnz	r6, 4264 <nrfx_gpiote_input_configure+0x9c>
    4258:	4a2d      	ldr	r2, [pc, #180]	; (4310 <nrfx_gpiote_input_configure+0x148>)
    425a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    425e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4262:	e7e2      	b.n	422a <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4264:	00ba      	lsls	r2, r7, #2
    4266:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    426a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    426e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4272:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4276:	f02c 0c03 	bic.w	ip, ip, #3
    427a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    427e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4282:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4286:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    428a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    428e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4292:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4296:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    429a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    429e:	ea4c 0c0e 	orr.w	ip, ip, lr
    42a2:	f041 0120 	orr.w	r1, r1, #32
    42a6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    42aa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    42ae:	e7bc      	b.n	422a <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    42b0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    42b4:	4620      	mov	r0, r4
    42b6:	f7ff fef7 	bl	40a8 <release_handler>
    if (!handler)
    42ba:	2e00      	cmp	r6, #0
    42bc:	d0be      	beq.n	423c <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    42be:	4d12      	ldr	r5, [pc, #72]	; (4308 <nrfx_gpiote_input_configure+0x140>)
    42c0:	682b      	ldr	r3, [r5, #0]
    42c2:	429e      	cmp	r6, r3
    42c4:	d104      	bne.n	42d0 <nrfx_gpiote_input_configure+0x108>
    42c6:	686b      	ldr	r3, [r5, #4]
    42c8:	429f      	cmp	r7, r3
    42ca:	d101      	bne.n	42d0 <nrfx_gpiote_input_configure+0x108>
    42cc:	2200      	movs	r2, #0
    42ce:	e00a      	b.n	42e6 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    42d0:	4810      	ldr	r0, [pc, #64]	; (4314 <nrfx_gpiote_input_configure+0x14c>)
    42d2:	f10d 010f 	add.w	r1, sp, #15
    42d6:	f7ff fe75 	bl	3fc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    42da:	4b0c      	ldr	r3, [pc, #48]	; (430c <nrfx_gpiote_input_configure+0x144>)
    42dc:	4298      	cmp	r0, r3
    42de:	f47f af7d 	bne.w	41dc <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    42e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    42e6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    42ea:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42ee:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    42f0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42f2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    42f6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    42fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42fe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4302:	e79b      	b.n	423c <nrfx_gpiote_input_configure+0x74>
    4304:	0bad0004 	.word	0x0bad0004
    4308:	20000100 	.word	0x20000100
    430c:	0bad0000 	.word	0x0bad0000
    4310:	40006000 	.word	0x40006000
    4314:	20000174 	.word	0x20000174

00004318 <nrfx_gpiote_output_configure>:
{
    4318:	b5f0      	push	{r4, r5, r6, r7, lr}
    431a:	4604      	mov	r4, r0
    431c:	b085      	sub	sp, #20
    431e:	4615      	mov	r5, r2
    if (p_config)
    4320:	b309      	cbz	r1, 4366 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4322:	f100 0708 	add.w	r7, r0, #8
    4326:	4e31      	ldr	r6, [pc, #196]	; (43ec <nrfx_gpiote_output_configure+0xd4>)
    4328:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    432c:	0798      	lsls	r0, r3, #30
    432e:	d401      	bmi.n	4334 <nrfx_gpiote_output_configure+0x1c>
    4330:	069a      	lsls	r2, r3, #26
    4332:	d458      	bmi.n	43e6 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4334:	f013 0f1c 	tst.w	r3, #28
    4338:	d002      	beq.n	4340 <nrfx_gpiote_output_configure+0x28>
    433a:	784b      	ldrb	r3, [r1, #1]
    433c:	2b01      	cmp	r3, #1
    433e:	d052      	beq.n	43e6 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4340:	2301      	movs	r3, #1
    4342:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4346:	2300      	movs	r3, #0
    4348:	e9cd 1300 	strd	r1, r3, [sp]
    434c:	1c4a      	adds	r2, r1, #1
    434e:	1c8b      	adds	r3, r1, #2
    4350:	4620      	mov	r0, r4
    4352:	f10d 010f 	add.w	r1, sp, #15
    4356:	f004 fee5 	bl	9124 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    435a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    435e:	f043 0303 	orr.w	r3, r3, #3
    4362:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4366:	b915      	cbnz	r5, 436e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4368:	4821      	ldr	r0, [pc, #132]	; (43f0 <nrfx_gpiote_output_configure+0xd8>)
}
    436a:	b005      	add	sp, #20
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    436e:	4e1f      	ldr	r6, [pc, #124]	; (43ec <nrfx_gpiote_output_configure+0xd4>)
    4370:	f104 0708 	add.w	r7, r4, #8
    4374:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4378:	0783      	lsls	r3, r0, #30
    437a:	d534      	bpl.n	43e6 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    437c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4380:	4661      	mov	r1, ip
    4382:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4384:	f020 0020 	bic.w	r0, r0, #32
    4388:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    438c:	04c0      	lsls	r0, r0, #19
    438e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4392:	0cc0      	lsrs	r0, r0, #19
    4394:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4398:	2300      	movs	r3, #0
    439a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    439e:	786a      	ldrb	r2, [r5, #1]
    43a0:	2a00      	cmp	r2, #0
    43a2:	d0e1      	beq.n	4368 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    43a4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    43a8:	78ad      	ldrb	r5, [r5, #2]
    43aa:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    43ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    43b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43b6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    43ba:	0223      	lsls	r3, r4, #8
    43bc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    43c0:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43c2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    43c6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    43ca:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43cc:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    43ce:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    43d2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    43d6:	432b      	orrs	r3, r5
    43d8:	f040 0020 	orr.w	r0, r0, #32
    43dc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    43e0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    43e4:	e7c0      	b.n	4368 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    43e6:	4803      	ldr	r0, [pc, #12]	; (43f4 <nrfx_gpiote_output_configure+0xdc>)
    43e8:	e7bf      	b.n	436a <nrfx_gpiote_output_configure+0x52>
    43ea:	bf00      	nop
    43ec:	20000100 	.word	0x20000100
    43f0:	0bad0000 	.word	0x0bad0000
    43f4:	0bad0004 	.word	0x0bad0004

000043f8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    43f8:	4b01      	ldr	r3, [pc, #4]	; (4400 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    43fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    43fe:	4770      	bx	lr
    4400:	20000100 	.word	0x20000100

00004404 <nrfx_gpiote_channel_get>:
{
    4404:	b538      	push	{r3, r4, r5, lr}
    4406:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4408:	460d      	mov	r5, r1
    440a:	b959      	cbnz	r1, 4424 <nrfx_gpiote_channel_get+0x20>
    440c:	490b      	ldr	r1, [pc, #44]	; (443c <nrfx_gpiote_channel_get+0x38>)
    440e:	480c      	ldr	r0, [pc, #48]	; (4440 <nrfx_gpiote_channel_get+0x3c>)
    4410:	4a0c      	ldr	r2, [pc, #48]	; (4444 <nrfx_gpiote_channel_get+0x40>)
    4412:	f240 2335 	movw	r3, #565	; 0x235
    4416:	f004 fbec 	bl	8bf2 <printk>
    441a:	480a      	ldr	r0, [pc, #40]	; (4444 <nrfx_gpiote_channel_get+0x40>)
    441c:	f240 2135 	movw	r1, #565	; 0x235
    4420:	f004 f9f8 	bl	8814 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4424:	3408      	adds	r4, #8
    4426:	4b08      	ldr	r3, [pc, #32]	; (4448 <nrfx_gpiote_channel_get+0x44>)
    4428:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    442c:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    442e:	bf43      	ittte	mi
    4430:	0b5b      	lsrmi	r3, r3, #13
    4432:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4434:	4805      	ldrmi	r0, [pc, #20]	; (444c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4436:	4806      	ldrpl	r0, [pc, #24]	; (4450 <nrfx_gpiote_channel_get+0x4c>)
}
    4438:	bd38      	pop	{r3, r4, r5, pc}
    443a:	bf00      	nop
    443c:	0000a576 	.word	0x0000a576
    4440:	00009c7a 	.word	0x00009c7a
    4444:	0000a4fe 	.word	0x0000a4fe
    4448:	20000100 	.word	0x20000100
    444c:	0bad0000 	.word	0x0bad0000
    4450:	0bad0004 	.word	0x0bad0004

00004454 <nrfx_gpiote_init>:
{
    4454:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4456:	4c0e      	ldr	r4, [pc, #56]	; (4490 <nrfx_gpiote_init+0x3c>)
    4458:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    445c:	b9b5      	cbnz	r5, 448c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    445e:	2260      	movs	r2, #96	; 0x60
    4460:	4629      	mov	r1, r5
    4462:	f104 0010 	add.w	r0, r4, #16
    4466:	f004 fc1b 	bl	8ca0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    446a:	2006      	movs	r0, #6
    446c:	f7fd fcac 	bl	1dc8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4470:	4b08      	ldr	r3, [pc, #32]	; (4494 <nrfx_gpiote_init+0x40>)
    return err_code;
    4472:	4809      	ldr	r0, [pc, #36]	; (4498 <nrfx_gpiote_init+0x44>)
    4474:	601d      	str	r5, [r3, #0]
    4476:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4478:	4b08      	ldr	r3, [pc, #32]	; (449c <nrfx_gpiote_init+0x48>)
    447a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    447e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4482:	2301      	movs	r3, #1
    4484:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4488:	6763      	str	r3, [r4, #116]	; 0x74
}
    448a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    448c:	4804      	ldr	r0, [pc, #16]	; (44a0 <nrfx_gpiote_init+0x4c>)
    448e:	e7fc      	b.n	448a <nrfx_gpiote_init+0x36>
    4490:	20000100 	.word	0x20000100
    4494:	4000617c 	.word	0x4000617c
    4498:	0bad0000 	.word	0x0bad0000
    449c:	40006000 	.word	0x40006000
    44a0:	0bad0005 	.word	0x0bad0005

000044a4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    44a4:	4b03      	ldr	r3, [pc, #12]	; (44b4 <nrfx_gpiote_is_init+0x10>)
    44a6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    44aa:	3800      	subs	r0, #0
    44ac:	bf18      	it	ne
    44ae:	2001      	movne	r0, #1
    44b0:	4770      	bx	lr
    44b2:	bf00      	nop
    44b4:	20000100 	.word	0x20000100

000044b8 <nrfx_gpiote_channel_free>:
{
    44b8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    44ba:	4801      	ldr	r0, [pc, #4]	; (44c0 <nrfx_gpiote_channel_free+0x8>)
    44bc:	f7ff bda6 	b.w	400c <nrfx_flag32_free>
    44c0:	20000170 	.word	0x20000170

000044c4 <nrfx_gpiote_channel_alloc>:
{
    44c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    44c6:	4801      	ldr	r0, [pc, #4]	; (44cc <nrfx_gpiote_channel_alloc+0x8>)
    44c8:	f7ff bd7c 	b.w	3fc4 <nrfx_flag32_alloc>
    44cc:	20000170 	.word	0x20000170

000044d0 <nrfx_gpiote_trigger_enable>:
{
    44d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    44d2:	4d31      	ldr	r5, [pc, #196]	; (4598 <nrfx_gpiote_trigger_enable+0xc8>)
    44d4:	f100 0708 	add.w	r7, r0, #8
{
    44d8:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    44da:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    44de:	f013 0f1c 	tst.w	r3, #28
{
    44e2:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    44e4:	d10b      	bne.n	44fe <nrfx_gpiote_trigger_enable+0x2e>
    44e6:	492d      	ldr	r1, [pc, #180]	; (459c <nrfx_gpiote_trigger_enable+0xcc>)
    44e8:	482d      	ldr	r0, [pc, #180]	; (45a0 <nrfx_gpiote_trigger_enable+0xd0>)
    44ea:	4a2e      	ldr	r2, [pc, #184]	; (45a4 <nrfx_gpiote_trigger_enable+0xd4>)
    44ec:	f240 33df 	movw	r3, #991	; 0x3df
    44f0:	f004 fb7f 	bl	8bf2 <printk>
    44f4:	482b      	ldr	r0, [pc, #172]	; (45a4 <nrfx_gpiote_trigger_enable+0xd4>)
    44f6:	f240 31df 	movw	r1, #991	; 0x3df
    44fa:	f004 f98b 	bl	8814 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    44fe:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4502:	0683      	lsls	r3, r0, #26
    4504:	d51f      	bpl.n	4546 <nrfx_gpiote_trigger_enable+0x76>
    4506:	f010 0302 	ands.w	r3, r0, #2
    450a:	d11c      	bne.n	4546 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    450c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    450e:	4608      	mov	r0, r1
    4510:	f004 fe04 	bl	911c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4514:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4518:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    451c:	6003      	str	r3, [r0, #0]
    451e:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4520:	008b      	lsls	r3, r1, #2
    4522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4526:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    452a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    452e:	f042 0201 	orr.w	r2, r2, #1
    4532:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4536:	b126      	cbz	r6, 4542 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    4538:	4a1b      	ldr	r2, [pc, #108]	; (45a8 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    453a:	2301      	movs	r3, #1
    453c:	408b      	lsls	r3, r1
    453e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4542:	b003      	add	sp, #12
    4544:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4546:	b95e      	cbnz	r6, 4560 <nrfx_gpiote_trigger_enable+0x90>
    4548:	4918      	ldr	r1, [pc, #96]	; (45ac <nrfx_gpiote_trigger_enable+0xdc>)
    454a:	4815      	ldr	r0, [pc, #84]	; (45a0 <nrfx_gpiote_trigger_enable+0xd0>)
    454c:	4a15      	ldr	r2, [pc, #84]	; (45a4 <nrfx_gpiote_trigger_enable+0xd4>)
    454e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4552:	f004 fb4e 	bl	8bf2 <printk>
    4556:	4813      	ldr	r0, [pc, #76]	; (45a4 <nrfx_gpiote_trigger_enable+0xd4>)
    4558:	f240 31ee 	movw	r1, #1006	; 0x3ee
    455c:	f004 f95a 	bl	8814 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4560:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4564:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4568:	2b04      	cmp	r3, #4
    456a:	d010      	beq.n	458e <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    456c:	2b05      	cmp	r3, #5
    456e:	d010      	beq.n	4592 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4570:	a801      	add	r0, sp, #4
    4572:	9401      	str	r4, [sp, #4]
    4574:	f7ff fdf2 	bl	415c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4578:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    457a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    457e:	40d9      	lsrs	r1, r3
    4580:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4584:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4586:	4620      	mov	r0, r4
    4588:	f004 fe17 	bl	91ba <nrf_gpio_cfg_sense_set>
}
    458c:	e7d9      	b.n	4542 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    458e:	2103      	movs	r1, #3
    4590:	e7f9      	b.n	4586 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4592:	2102      	movs	r1, #2
    4594:	e7f7      	b.n	4586 <nrfx_gpiote_trigger_enable+0xb6>
    4596:	bf00      	nop
    4598:	20000100 	.word	0x20000100
    459c:	0000a580 	.word	0x0000a580
    45a0:	00009c7a 	.word	0x00009c7a
    45a4:	0000a4fe 	.word	0x0000a4fe
    45a8:	40006000 	.word	0x40006000
    45ac:	0000a595 	.word	0x0000a595

000045b0 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    45b0:	4b0e      	ldr	r3, [pc, #56]	; (45ec <nrfx_gpiote_trigger_disable+0x3c>)
    45b2:	f100 0208 	add.w	r2, r0, #8
    45b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    45ba:	0699      	lsls	r1, r3, #26
    45bc:	d513      	bpl.n	45e6 <nrfx_gpiote_trigger_disable+0x36>
    45be:	079a      	lsls	r2, r3, #30
    45c0:	d411      	bmi.n	45e6 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45c2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    45c4:	2201      	movs	r2, #1
    45c6:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    45c8:	009b      	lsls	r3, r3, #2
    45ca:	4909      	ldr	r1, [pc, #36]	; (45f0 <nrfx_gpiote_trigger_disable+0x40>)
    45cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    45d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    45d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    45d8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    45dc:	f022 0203 	bic.w	r2, r2, #3
    45e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    45e4:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    45e6:	2100      	movs	r1, #0
    45e8:	f004 bde7 	b.w	91ba <nrf_gpio_cfg_sense_set>
    45ec:	20000100 	.word	0x20000100
    45f0:	40006000 	.word	0x40006000

000045f4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    45f4:	4b0e      	ldr	r3, [pc, #56]	; (4630 <nrfx_gpiote_pin_uninit+0x3c>)
    45f6:	f100 0208 	add.w	r2, r0, #8
{
    45fa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    45fc:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4600:	07db      	lsls	r3, r3, #31
{
    4602:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4604:	d511      	bpl.n	462a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4606:	f7ff ffd3 	bl	45b0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    460a:	4620      	mov	r0, r4
    460c:	f7ff fd8c 	bl	4128 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4610:	a801      	add	r0, sp, #4
    4612:	9401      	str	r4, [sp, #4]
    4614:	f7ff fda2 	bl	415c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4618:	9b01      	ldr	r3, [sp, #4]
    461a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    461e:	2202      	movs	r2, #2
    4620:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4624:	4803      	ldr	r0, [pc, #12]	; (4634 <nrfx_gpiote_pin_uninit+0x40>)
}
    4626:	b002      	add	sp, #8
    4628:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    462a:	4803      	ldr	r0, [pc, #12]	; (4638 <nrfx_gpiote_pin_uninit+0x44>)
    462c:	e7fb      	b.n	4626 <nrfx_gpiote_pin_uninit+0x32>
    462e:	bf00      	nop
    4630:	20000100 	.word	0x20000100
    4634:	0bad0000 	.word	0x0bad0000
    4638:	0bad0004 	.word	0x0bad0004

0000463c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4640:	4b65      	ldr	r3, [pc, #404]	; (47d8 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4642:	4866      	ldr	r0, [pc, #408]	; (47dc <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4644:	4966      	ldr	r1, [pc, #408]	; (47e0 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4646:	2500      	movs	r5, #0
{
    4648:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    464a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    464c:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    464e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4650:	b136      	cbz	r6, 4660 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4652:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4656:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4658:	bf1e      	ittt	ne
    465a:	601c      	strne	r4, [r3, #0]
    465c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    465e:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4660:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4662:	428b      	cmp	r3, r1
        mask <<= 1;
    4664:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4668:	d1f1      	bne.n	464e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    466a:	4f5e      	ldr	r7, [pc, #376]	; (47e4 <nrfx_gpiote_irq_handler+0x1a8>)
    466c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    466e:	b37b      	cbz	r3, 46d0 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4674:	4e5c      	ldr	r6, [pc, #368]	; (47e8 <nrfx_gpiote_irq_handler+0x1ac>)
    4676:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    467a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    467c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4680:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4684:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4686:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    468a:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    468c:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4690:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4694:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4698:	f8d9 3000 	ldr.w	r3, [r9]
    469c:	b9f3      	cbnz	r3, 46dc <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    469e:	f108 0820 	add.w	r8, r8, #32
    46a2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    46a6:	f109 0904 	add.w	r9, r9, #4
    46aa:	d1f5      	bne.n	4698 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    46ac:	603b      	str	r3, [r7, #0]
    46ae:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    46b0:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    46b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    46b6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    46ba:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    46bc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    46c6:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    46c8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    46cc:	4313      	orrs	r3, r2
    46ce:	d1dd      	bne.n	468c <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    46d0:	2401      	movs	r4, #1
    while (mask)
    46d2:	2d00      	cmp	r5, #0
    46d4:	d168      	bne.n	47a8 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    46d6:	b009      	add	sp, #36	; 0x24
    46d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    46dc:	fa93 f3a3 	rbit	r3, r3
    46e0:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    46e4:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    46e8:	f106 0208 	add.w	r2, r6, #8
    46ec:	4b3f      	ldr	r3, [pc, #252]	; (47ec <nrfx_gpiote_irq_handler+0x1b0>)
    46ee:	9605      	str	r6, [sp, #20]
    46f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    46f4:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    46f8:	08f4      	lsrs	r4, r6, #3
    46fa:	9302      	str	r3, [sp, #8]
    46fc:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    46fe:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4700:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4704:	fa0b fc00 	lsl.w	ip, fp, r0
    4708:	5d18      	ldrb	r0, [r3, r4]
    470a:	ea20 000c 	bic.w	r0, r0, ip
    470e:	5518      	strb	r0, [r3, r4]
    4710:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4712:	a805      	add	r0, sp, #20
    4714:	9103      	str	r1, [sp, #12]
    4716:	f7ff fd21 	bl	415c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    471a:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    471c:	9903      	ldr	r1, [sp, #12]
    471e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4722:	074b      	lsls	r3, r1, #29
    4724:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4728:	f3c4 4401 	ubfx	r4, r4, #16, #2
    472c:	d523      	bpl.n	4776 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    472e:	4651      	mov	r1, sl
    4730:	4630      	mov	r0, r6
    4732:	f7ff fc9b 	bl	406c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4736:	a805      	add	r0, sp, #20
    4738:	9605      	str	r6, [sp, #20]
    473a:	f7ff fd0f 	bl	415c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    473e:	9a05      	ldr	r2, [sp, #20]
    4740:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4744:	b2e4      	uxtb	r4, r4
    4746:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    474a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    474e:	4294      	cmp	r4, r2
    4750:	d107      	bne.n	4762 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4752:	2100      	movs	r1, #0
    4754:	4630      	mov	r0, r6
    4756:	f004 fd30 	bl	91ba <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    475a:	4621      	mov	r1, r4
    475c:	4630      	mov	r0, r6
    475e:	f004 fd2c 	bl	91ba <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4762:	a805      	add	r0, sp, #20
    4764:	9605      	str	r6, [sp, #20]
    4766:	f7ff fcf9 	bl	415c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    476a:	9b05      	ldr	r3, [sp, #20]
    476c:	fa0b f303 	lsl.w	r3, fp, r3
    4770:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4774:	e790      	b.n	4698 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4776:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4778:	bf0c      	ite	eq
    477a:	2103      	moveq	r1, #3
    477c:	2102      	movne	r1, #2
    477e:	4630      	mov	r0, r6
    4780:	f004 fd1b 	bl	91ba <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4784:	9b02      	ldr	r3, [sp, #8]
    4786:	2b03      	cmp	r3, #3
    4788:	d004      	beq.n	4794 <nrfx_gpiote_irq_handler+0x158>
    478a:	2c02      	cmp	r4, #2
    478c:	d107      	bne.n	479e <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    478e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4792:	d1e6      	bne.n	4762 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4794:	4651      	mov	r1, sl
    4796:	4630      	mov	r0, r6
    4798:	f7ff fc68 	bl	406c <call_handler>
    479c:	e7e1      	b.n	4762 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    479e:	2c03      	cmp	r4, #3
    47a0:	d1df      	bne.n	4762 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    47a2:	f1ba 0f02 	cmp.w	sl, #2
    47a6:	e7f4      	b.n	4792 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    47a8:	fa95 f3a5 	rbit	r3, r5
    47ac:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    47b0:	fa04 f203 	lsl.w	r2, r4, r3
    47b4:	009b      	lsls	r3, r3, #2
    47b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    47ba:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    47be:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    47c2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    47c6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    47ca:	f3c0 2005 	ubfx	r0, r0, #8, #6
    47ce:	f3c1 4101 	ubfx	r1, r1, #16, #2
    47d2:	f7ff fc4b 	bl	406c <call_handler>
    47d6:	e77c      	b.n	46d2 <nrfx_gpiote_irq_handler+0x96>
    47d8:	40006100 	.word	0x40006100
    47dc:	40006000 	.word	0x40006000
    47e0:	40006120 	.word	0x40006120
    47e4:	4000617c 	.word	0x4000617c
    47e8:	50000300 	.word	0x50000300
    47ec:	20000100 	.word	0x20000100

000047f0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    47f0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    47f2:	4801      	ldr	r0, [pc, #4]	; (47f8 <nrfx_ppi_channel_alloc+0x8>)
    47f4:	f7ff bbe6 	b.w	3fc4 <nrfx_flag32_alloc>
    47f8:	2000017c 	.word	0x2000017c

000047fc <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    47fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4800:	4604      	mov	r4, r0
    4802:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    4804:	4615      	mov	r5, r2
    4806:	b95a      	cbnz	r2, 4820 <nrf_pwm_sequence_set+0x24>
    4808:	4932      	ldr	r1, [pc, #200]	; (48d4 <nrf_pwm_sequence_set+0xd8>)
    480a:	4833      	ldr	r0, [pc, #204]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    480c:	4a33      	ldr	r2, [pc, #204]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    480e:	f240 23a7 	movw	r3, #679	; 0x2a7
    4812:	f004 f9ee 	bl	8bf2 <printk>
    4816:	4831      	ldr	r0, [pc, #196]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    4818:	f240 21a7 	movw	r1, #679	; 0x2a7
    481c:	f003 fffa 	bl	8814 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    4820:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    4822:	b95f      	cbnz	r7, 483c <nrf_pwm_sequence_set+0x40>
    4824:	492e      	ldr	r1, [pc, #184]	; (48e0 <nrf_pwm_sequence_set+0xe4>)
    4826:	482c      	ldr	r0, [pc, #176]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    4828:	4a2c      	ldr	r2, [pc, #176]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    482a:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    482e:	f004 f9e0 	bl	8bf2 <printk>
    4832:	482a      	ldr	r0, [pc, #168]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    4834:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    4838:	f003 ffec 	bl	8814 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    483c:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    4840:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    4844:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    4846:	2f00      	cmp	r7, #0
    4848:	d138      	bne.n	48bc <nrf_pwm_sequence_set+0xc0>
    484a:	4926      	ldr	r1, [pc, #152]	; (48e4 <nrf_pwm_sequence_set+0xe8>)
    484c:	4a23      	ldr	r2, [pc, #140]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    484e:	4822      	ldr	r0, [pc, #136]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    4850:	f240 23bd 	movw	r3, #701	; 0x2bd
    4854:	f004 f9cd 	bl	8bf2 <printk>
    4858:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    485c:	481f      	ldr	r0, [pc, #124]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    485e:	f003 ffd9 	bl	8814 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    4862:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    4866:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    4868:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    486c:	d30b      	bcc.n	4886 <nrf_pwm_sequence_set+0x8a>
    486e:	491e      	ldr	r1, [pc, #120]	; (48e8 <nrf_pwm_sequence_set+0xec>)
    4870:	4819      	ldr	r0, [pc, #100]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    4872:	4a1a      	ldr	r2, [pc, #104]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    4874:	f240 23c7 	movw	r3, #711	; 0x2c7
    4878:	f004 f9bb 	bl	8bf2 <printk>
    487c:	4817      	ldr	r0, [pc, #92]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    487e:	f240 21c7 	movw	r1, #711	; 0x2c7
    4882:	f003 ffc7 	bl	8814 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    4886:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4888:	ea4f 1846 	mov.w	r8, r6, lsl #5
    488c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4890:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4894:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4898:	d30b      	bcc.n	48b2 <nrf_pwm_sequence_set+0xb6>
    489a:	4914      	ldr	r1, [pc, #80]	; (48ec <nrf_pwm_sequence_set+0xf0>)
    489c:	480e      	ldr	r0, [pc, #56]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    489e:	4a0f      	ldr	r2, [pc, #60]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    48a0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    48a4:	f004 f9a5 	bl	8bf2 <printk>
    48a8:	480c      	ldr	r0, [pc, #48]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    48aa:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    48ae:	f003 ffb1 	bl	8814 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    48b2:	4444      	add	r4, r8
    48b4:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    48b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    48bc:	043b      	lsls	r3, r7, #16
    48be:	d5d0      	bpl.n	4862 <nrf_pwm_sequence_set+0x66>
    48c0:	490b      	ldr	r1, [pc, #44]	; (48f0 <nrf_pwm_sequence_set+0xf4>)
    48c2:	4a06      	ldr	r2, [pc, #24]	; (48dc <nrf_pwm_sequence_set+0xe0>)
    48c4:	4804      	ldr	r0, [pc, #16]	; (48d8 <nrf_pwm_sequence_set+0xdc>)
    48c6:	f240 23be 	movw	r3, #702	; 0x2be
    48ca:	f004 f992 	bl	8bf2 <printk>
    48ce:	f240 21be 	movw	r1, #702	; 0x2be
    48d2:	e7c3      	b.n	485c <nrf_pwm_sequence_set+0x60>
    48d4:	0000a5d2 	.word	0x0000a5d2
    48d8:	00009c7a 	.word	0x00009c7a
    48dc:	0000a5a0 	.word	0x0000a5a0
    48e0:	0000a5e7 	.word	0x0000a5e7
    48e4:	0000a5ff 	.word	0x0000a5ff
    48e8:	0000a629 	.word	0x0000a629
    48ec:	0000a64a 	.word	0x0000a64a
    48f0:	0000a60b 	.word	0x0000a60b

000048f4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    48f4:	6802      	ldr	r2, [r0, #0]
    switch (port)
    48f6:	0953      	lsrs	r3, r2, #5
{
    48f8:	b510      	push	{r4, lr}
    48fa:	4604      	mov	r4, r0
    switch (port)
    48fc:	d02c      	beq.n	4958 <nrf_gpio_pin_port_decode+0x64>
    48fe:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4900:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4904:	bf18      	it	ne
    4906:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4908:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    490c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    490e:	07db      	lsls	r3, r3, #31
    4910:	d40b      	bmi.n	492a <nrf_gpio_pin_port_decode+0x36>
    4912:	4914      	ldr	r1, [pc, #80]	; (4964 <nrf_gpio_pin_port_decode+0x70>)
    4914:	4814      	ldr	r0, [pc, #80]	; (4968 <nrf_gpio_pin_port_decode+0x74>)
    4916:	4a15      	ldr	r2, [pc, #84]	; (496c <nrf_gpio_pin_port_decode+0x78>)
    4918:	f240 2329 	movw	r3, #553	; 0x229
    491c:	f004 f969 	bl	8bf2 <printk>
    4920:	4812      	ldr	r0, [pc, #72]	; (496c <nrf_gpio_pin_port_decode+0x78>)
    4922:	f240 2129 	movw	r1, #553	; 0x229
    4926:	f003 ff75 	bl	8814 <assert_post_action>
    uint32_t pin_number = *p_pin;
    492a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    492c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4930:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4932:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4934:	d00d      	beq.n	4952 <nrf_gpio_pin_port_decode+0x5e>
    4936:	2b01      	cmp	r3, #1
    4938:	d011      	beq.n	495e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    493a:	490d      	ldr	r1, [pc, #52]	; (4970 <nrf_gpio_pin_port_decode+0x7c>)
    493c:	480a      	ldr	r0, [pc, #40]	; (4968 <nrf_gpio_pin_port_decode+0x74>)
    493e:	4a0b      	ldr	r2, [pc, #44]	; (496c <nrf_gpio_pin_port_decode+0x78>)
    4940:	f240 232e 	movw	r3, #558	; 0x22e
    4944:	f004 f955 	bl	8bf2 <printk>
    4948:	4808      	ldr	r0, [pc, #32]	; (496c <nrf_gpio_pin_port_decode+0x78>)
    494a:	f240 212e 	movw	r1, #558	; 0x22e
    494e:	f003 ff61 	bl	8814 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4952:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4956:	bd10      	pop	{r4, pc}
    switch (port)
    4958:	f04f 33ff 	mov.w	r3, #4294967295
    495c:	e7d4      	b.n	4908 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    495e:	4805      	ldr	r0, [pc, #20]	; (4974 <nrf_gpio_pin_port_decode+0x80>)
    4960:	e7f9      	b.n	4956 <nrf_gpio_pin_port_decode+0x62>
    4962:	bf00      	nop
    4964:	0000a429 	.word	0x0000a429
    4968:	00009c7a 	.word	0x00009c7a
    496c:	0000a3f6 	.word	0x0000a3f6
    4970:	0000a609 	.word	0x0000a609
    4974:	50000300 	.word	0x50000300

00004978 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    4978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    497c:	4606      	mov	r6, r0
    497e:	b087      	sub	sp, #28
    4980:	4691      	mov	r9, r2
    4982:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    4984:	460c      	mov	r4, r1
    4986:	b949      	cbnz	r1, 499c <nrfx_pwm_init+0x24>
    4988:	4959      	ldr	r1, [pc, #356]	; (4af0 <nrfx_pwm_init+0x178>)
    498a:	485a      	ldr	r0, [pc, #360]	; (4af4 <nrfx_pwm_init+0x17c>)
    498c:	4a5a      	ldr	r2, [pc, #360]	; (4af8 <nrfx_pwm_init+0x180>)
    498e:	238c      	movs	r3, #140	; 0x8c
    4990:	f004 f92f 	bl	8bf2 <printk>
    4994:	4858      	ldr	r0, [pc, #352]	; (4af8 <nrfx_pwm_init+0x180>)
    4996:	218c      	movs	r1, #140	; 0x8c
    4998:	f003 ff3c 	bl	8814 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    499c:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    499e:	4d57      	ldr	r5, [pc, #348]	; (4afc <nrfx_pwm_init+0x184>)
    49a0:	210c      	movs	r1, #12
    49a2:	4379      	muls	r1, r7
    49a4:	186b      	adds	r3, r5, r1
    49a6:	7a1a      	ldrb	r2, [r3, #8]
    49a8:	2a00      	cmp	r2, #0
    49aa:	f040 809f 	bne.w	4aec <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    49ae:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    49b0:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    49b4:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    49b8:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    49ba:	2a00      	cmp	r2, #0
    49bc:	d04d      	beq.n	4a5a <nrfx_pwm_init+0xe2>
    49be:	7b63      	ldrb	r3, [r4, #13]
    49c0:	2b00      	cmp	r3, #0
    49c2:	d04a      	beq.n	4a5a <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    49c4:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    49c8:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    49cc:	2301      	movs	r3, #1
    49ce:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    49d2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    49d6:	f894 b005 	ldrb.w	fp, [r4, #5]
    49da:	f894 a006 	ldrb.w	sl, [r4, #6]
    49de:	2b00      	cmp	r3, #0
    49e0:	da0b      	bge.n	49fa <nrfx_pwm_init+0x82>
    49e2:	4947      	ldr	r1, [pc, #284]	; (4b00 <nrfx_pwm_init+0x188>)
    49e4:	4843      	ldr	r0, [pc, #268]	; (4af4 <nrfx_pwm_init+0x17c>)
    49e6:	4a47      	ldr	r2, [pc, #284]	; (4b04 <nrfx_pwm_init+0x18c>)
    49e8:	f44f 7327 	mov.w	r3, #668	; 0x29c
    49ec:	f004 f901 	bl	8bf2 <printk>
    49f0:	4844      	ldr	r0, [pc, #272]	; (4b04 <nrfx_pwm_init+0x18c>)
    49f2:	f44f 7127 	mov.w	r1, #668	; 0x29c
    49f6:	f003 ff0d 	bl	8814 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    49fa:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    49fe:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    4a00:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4a04:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4a08:	8963      	ldrh	r3, [r4, #10]
    4a0a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    4a0e:	2300      	movs	r3, #0
    4a10:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    4a14:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a18:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4a1c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4a20:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    4a24:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    4a28:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    4a2c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4a30:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4a34:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    4a38:	230c      	movs	r3, #12
    4a3a:	437b      	muls	r3, r7
    4a3c:	58eb      	ldr	r3, [r5, r3]
    4a3e:	b11b      	cbz	r3, 4a48 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4a40:	f340 3007 	sbfx	r0, r0, #12, #8
    4a44:	f7fd f9c0 	bl	1dc8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4a48:	230c      	movs	r3, #12
    4a4a:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4a4e:	482e      	ldr	r0, [pc, #184]	; (4b08 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4a50:	2301      	movs	r3, #1
    4a52:	722b      	strb	r3, [r5, #8]
}
    4a54:	b007      	add	sp, #28
    4a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a5a:	f104 39ff 	add.w	r9, r4, #4294967295
    4a5e:	f10d 0808 	add.w	r8, sp, #8
    4a62:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    4a66:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    4a6a:	2aff      	cmp	r2, #255	; 0xff
    4a6c:	d039      	beq.n	4ae2 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    4a6e:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    4a70:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    4a74:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    4a78:	b9b1      	cbnz	r1, 4aa8 <nrfx_pwm_init+0x130>
    if (value == 0)
    4a7a:	0613      	lsls	r3, r2, #24
    4a7c:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a80:	a801      	add	r0, sp, #4
    if (value == 0)
    4a82:	d426      	bmi.n	4ad2 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a84:	f7ff ff36 	bl	48f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4a88:	9901      	ldr	r1, [sp, #4]
    4a8a:	2201      	movs	r2, #1
    4a8c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4a8e:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a92:	a801      	add	r0, sp, #4
    4a94:	f8cd b004 	str.w	fp, [sp, #4]
    4a98:	f7ff ff2c 	bl	48f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a9c:	9b01      	ldr	r3, [sp, #4]
    4a9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4aa2:	2203      	movs	r2, #3
    4aa4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4aa8:	45d1      	cmp	r9, sl
    4aaa:	f108 0804 	add.w	r8, r8, #4
    4aae:	d1da      	bne.n	4a66 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    4ab0:	7b63      	ldrb	r3, [r4, #13]
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d186      	bne.n	49c4 <nrfx_pwm_init+0x4c>
    4ab6:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    4ab8:	9a02      	ldr	r2, [sp, #8]
    4aba:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    4abe:	9a03      	ldr	r2, [sp, #12]
    4ac0:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    4ac4:	9a04      	ldr	r2, [sp, #16]
    4ac6:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    4aca:	9a05      	ldr	r2, [sp, #20]
    4acc:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4ad0:	e778      	b.n	49c4 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ad2:	f7ff ff0f 	bl	48f4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ad6:	9901      	ldr	r1, [sp, #4]
    4ad8:	2201      	movs	r2, #1
    4ada:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4adc:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4ae0:	e7d7      	b.n	4a92 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4ae2:	f04f 33ff 	mov.w	r3, #4294967295
    4ae6:	f8c8 3000 	str.w	r3, [r8]
    4aea:	e7dd      	b.n	4aa8 <nrfx_pwm_init+0x130>
        return err_code;
    4aec:	4807      	ldr	r0, [pc, #28]	; (4b0c <nrfx_pwm_init+0x194>)
    4aee:	e7b1      	b.n	4a54 <nrfx_pwm_init+0xdc>
    4af0:	0000a6a8 	.word	0x0000a6a8
    4af4:	00009c7a 	.word	0x00009c7a
    4af8:	0000a66d 	.word	0x0000a66d
    4afc:	20000bf8 	.word	0x20000bf8
    4b00:	0000a6b1 	.word	0x0000a6b1
    4b04:	0000a5a0 	.word	0x0000a5a0
    4b08:	0bad0000 	.word	0x0bad0000
    4b0c:	0bad0005 	.word	0x0bad0005

00004b10 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b14:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b16:	7903      	ldrb	r3, [r0, #4]
{
    4b18:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b1a:	4a31      	ldr	r2, [pc, #196]	; (4be0 <nrfx_pwm_simple_playback+0xd0>)
{
    4b1c:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b1e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4b22:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4b26:	210c      	movs	r1, #12
    4b28:	fb01 2303 	mla	r3, r1, r3, r2
{
    4b2c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4b2e:	7a1b      	ldrb	r3, [r3, #8]
    4b30:	b95b      	cbnz	r3, 4b4a <nrfx_pwm_simple_playback+0x3a>
    4b32:	492c      	ldr	r1, [pc, #176]	; (4be4 <nrfx_pwm_simple_playback+0xd4>)
    4b34:	482c      	ldr	r0, [pc, #176]	; (4be8 <nrfx_pwm_simple_playback+0xd8>)
    4b36:	4a2d      	ldr	r2, [pc, #180]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b38:	f44f 7396 	mov.w	r3, #300	; 0x12c
    4b3c:	f004 f859 	bl	8bf2 <printk>
    4b40:	482a      	ldr	r0, [pc, #168]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b42:	f44f 7196 	mov.w	r1, #300	; 0x12c
    4b46:	f003 fe65 	bl	8814 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    4b4a:	b95c      	cbnz	r4, 4b64 <nrfx_pwm_simple_playback+0x54>
    4b4c:	4928      	ldr	r1, [pc, #160]	; (4bf0 <nrfx_pwm_simple_playback+0xe0>)
    4b4e:	4826      	ldr	r0, [pc, #152]	; (4be8 <nrfx_pwm_simple_playback+0xd8>)
    4b50:	4a26      	ldr	r2, [pc, #152]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b52:	f240 132d 	movw	r3, #301	; 0x12d
    4b56:	f004 f84c 	bl	8bf2 <printk>
    4b5a:	4824      	ldr	r0, [pc, #144]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b5c:	f240 112d 	movw	r1, #301	; 0x12d
    4b60:	f003 fe58 	bl	8814 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4b64:	6833      	ldr	r3, [r6, #0]
    4b66:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    4b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4b6e:	d00b      	beq.n	4b88 <nrfx_pwm_simple_playback+0x78>
    4b70:	4920      	ldr	r1, [pc, #128]	; (4bf4 <nrfx_pwm_simple_playback+0xe4>)
    4b72:	481d      	ldr	r0, [pc, #116]	; (4be8 <nrfx_pwm_simple_playback+0xd8>)
    4b74:	4a1d      	ldr	r2, [pc, #116]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b76:	f44f 7397 	mov.w	r3, #302	; 0x12e
    4b7a:	f004 f83a 	bl	8bf2 <printk>
    4b7e:	481b      	ldr	r0, [pc, #108]	; (4bec <nrfx_pwm_simple_playback+0xdc>)
    4b80:	f44f 7197 	mov.w	r1, #302	; 0x12e
    4b84:	f003 fe46 	bl	8814 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    4b88:	6828      	ldr	r0, [r5, #0]
    4b8a:	4632      	mov	r2, r6
    4b8c:	2100      	movs	r1, #0
    4b8e:	f7ff fe35 	bl	47fc <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    4b92:	6828      	ldr	r0, [r5, #0]
    4b94:	4632      	mov	r2, r6
    4b96:	2101      	movs	r1, #1
    4b98:	f7ff fe30 	bl	47fc <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    4b9c:	6828      	ldr	r0, [r5, #0]
    4b9e:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    4ba2:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    4ba6:	f018 0f01 	tst.w	r8, #1
    4baa:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    4bae:	d114      	bne.n	4bda <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    4bb0:	f018 0202 	ands.w	r2, r8, #2
    4bb4:	d003      	beq.n	4bbe <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	bf14      	ite	ne
    4bba:	2208      	movne	r2, #8
    4bbc:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4bbe:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    4bc0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    4bc4:	4639      	mov	r1, r7
    4bc6:	fa5f f288 	uxtb.w	r2, r8
    4bca:	bf18      	it	ne
    4bcc:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    4bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    4bd2:	bf08      	it	eq
    4bd4:	2308      	moveq	r3, #8
    4bd6:	f004 baff 	b.w	91d8 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    4bda:	2210      	movs	r2, #16
    4bdc:	e7ef      	b.n	4bbe <nrfx_pwm_simple_playback+0xae>
    4bde:	bf00      	nop
    4be0:	20000bf8 	.word	0x20000bf8
    4be4:	0000a6d2 	.word	0x0000a6d2
    4be8:	00009c7a 	.word	0x00009c7a
    4bec:	0000a66d 	.word	0x0000a66d
    4bf0:	0000a6fe 	.word	0x0000a6fe
    4bf4:	0000a711 	.word	0x0000a711

00004bf8 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    4bf8:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4bfa:	4e12      	ldr	r6, [pc, #72]	; (4c44 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4bfc:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4bfe:	220c      	movs	r2, #12
    4c00:	fb02 6204 	mla	r2, r2, r4, r6
{
    4c04:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4c06:	7a12      	ldrb	r2, [r2, #8]
    4c08:	b95a      	cbnz	r2, 4c22 <nrfx_pwm_is_stopped+0x2a>
    4c0a:	490f      	ldr	r1, [pc, #60]	; (4c48 <nrfx_pwm_is_stopped+0x50>)
    4c0c:	480f      	ldr	r0, [pc, #60]	; (4c4c <nrfx_pwm_is_stopped+0x54>)
    4c0e:	4a10      	ldr	r2, [pc, #64]	; (4c50 <nrfx_pwm_is_stopped+0x58>)
    4c10:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    4c14:	f003 ffed 	bl	8bf2 <printk>
    4c18:	480d      	ldr	r0, [pc, #52]	; (4c50 <nrfx_pwm_is_stopped+0x58>)
    4c1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4c1e:	f003 fdf9 	bl	8814 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4c22:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4c24:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4c26:	fb03 6404 	mla	r4, r3, r4, r6
    4c2a:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c2c:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    4c30:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4c32:	b91a      	cbnz	r2, 4c3c <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4c34:	1e98      	subs	r0, r3, #2
    4c36:	bf18      	it	ne
    4c38:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4c3a:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4c3c:	2001      	movs	r0, #1
    4c3e:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    4c40:	e7fb      	b.n	4c3a <nrfx_pwm_is_stopped+0x42>
    4c42:	bf00      	nop
    4c44:	20000bf8 	.word	0x20000bf8
    4c48:	0000a6d2 	.word	0x0000a6d2
    4c4c:	00009c7a 	.word	0x00009c7a
    4c50:	0000a66d 	.word	0x0000a66d

00004c54 <nrfx_pwm_stop>:
{
    4c54:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4c56:	4a14      	ldr	r2, [pc, #80]	; (4ca8 <nrfx_pwm_stop+0x54>)
    4c58:	7903      	ldrb	r3, [r0, #4]
{
    4c5a:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4c5c:	210c      	movs	r1, #12
    4c5e:	fb01 2303 	mla	r3, r1, r3, r2
{
    4c62:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4c64:	7a1b      	ldrb	r3, [r3, #8]
    4c66:	b95b      	cbnz	r3, 4c80 <nrfx_pwm_stop+0x2c>
    4c68:	4910      	ldr	r1, [pc, #64]	; (4cac <nrfx_pwm_stop+0x58>)
    4c6a:	4811      	ldr	r0, [pc, #68]	; (4cb0 <nrfx_pwm_stop+0x5c>)
    4c6c:	4a11      	ldr	r2, [pc, #68]	; (4cb4 <nrfx_pwm_stop+0x60>)
    4c6e:	f240 1385 	movw	r3, #389	; 0x185
    4c72:	f003 ffbe 	bl	8bf2 <printk>
    4c76:	480f      	ldr	r0, [pc, #60]	; (4cb4 <nrfx_pwm_stop+0x60>)
    4c78:	f240 1185 	movw	r1, #389	; 0x185
    4c7c:	f003 fdca 	bl	8814 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    4c80:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    4c82:	2200      	movs	r2, #0
    4c84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c88:	2201      	movs	r2, #1
    4c8a:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    4c8c:	4620      	mov	r0, r4
    4c8e:	f7ff ffb3 	bl	4bf8 <nrfx_pwm_is_stopped>
    4c92:	b938      	cbnz	r0, 4ca4 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    4c94:	4620      	mov	r0, r4
    4c96:	f7ff ffaf 	bl	4bf8 <nrfx_pwm_is_stopped>
    4c9a:	b918      	cbnz	r0, 4ca4 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    4c9c:	2d00      	cmp	r5, #0
    4c9e:	d1f9      	bne.n	4c94 <nrfx_pwm_stop+0x40>
}
    4ca0:	4628      	mov	r0, r5
    4ca2:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    4ca4:	2501      	movs	r5, #1
    4ca6:	e7fb      	b.n	4ca0 <nrfx_pwm_stop+0x4c>
    4ca8:	20000bf8 	.word	0x20000bf8
    4cac:	0000a73a 	.word	0x0000a73a
    4cb0:	00009c7a 	.word	0x00009c7a
    4cb4:	0000a66d 	.word	0x0000a66d

00004cb8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4cb8:	4b03      	ldr	r3, [pc, #12]	; (4cc8 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    4cba:	6818      	ldr	r0, [r3, #0]
}
    4cbc:	f1a0 0308 	sub.w	r3, r0, #8
    4cc0:	4258      	negs	r0, r3
    4cc2:	4158      	adcs	r0, r3
    4cc4:	4770      	bx	lr
    4cc6:	bf00      	nop
    4cc8:	10000130 	.word	0x10000130

00004ccc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4ccc:	4b06      	ldr	r3, [pc, #24]	; (4ce8 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4cce:	681b      	ldr	r3, [r3, #0]
    4cd0:	2b08      	cmp	r3, #8
    4cd2:	d106      	bne.n	4ce2 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4cd4:	4b05      	ldr	r3, [pc, #20]	; (4cec <nrf52_errata_103+0x20>)
    4cd6:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4cd8:	2b05      	cmp	r3, #5
    4cda:	d802      	bhi.n	4ce2 <nrf52_errata_103+0x16>
    4cdc:	4a04      	ldr	r2, [pc, #16]	; (4cf0 <nrf52_errata_103+0x24>)
    4cde:	5cd0      	ldrb	r0, [r2, r3]
    4ce0:	4770      	bx	lr
        return false;
    4ce2:	2000      	movs	r0, #0
}
    4ce4:	4770      	bx	lr
    4ce6:	bf00      	nop
    4ce8:	10000130 	.word	0x10000130
    4cec:	10000134 	.word	0x10000134
    4cf0:	0000a785 	.word	0x0000a785

00004cf4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4cf4:	4a02      	ldr	r2, [pc, #8]	; (4d00 <nvmc_wait+0xc>)
    4cf6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d0fb      	beq.n	4cf6 <nvmc_wait+0x2>
}
    4cfe:	4770      	bx	lr
    4d00:	4001e000 	.word	0x4001e000

00004d04 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4d04:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4d06:	f7ff ffd7 	bl	4cb8 <nrf52_errata_136>
    4d0a:	b140      	cbz	r0, 4d1e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d10:	2200      	movs	r2, #0
    4d12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4d16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4d1a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4d1e:	f7ff ffcb 	bl	4cb8 <nrf52_errata_136>
    4d22:	2800      	cmp	r0, #0
    4d24:	d046      	beq.n	4db4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d2a:	4b5b      	ldr	r3, [pc, #364]	; (4e98 <SystemInit+0x194>)
    4d2c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4d30:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4d34:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4d38:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4d3c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4d40:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4d44:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4d48:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4d4c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4d50:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4d54:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4d58:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4d5c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4d60:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4d64:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4d68:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4d6c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4d70:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4d74:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4d78:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4d7c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4d80:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4d84:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4d88:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4d8c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4d90:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4d94:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4d98:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4d9c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4da0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4da4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4da8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4dac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4db0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4db4:	f7ff ff8a 	bl	4ccc <nrf52_errata_103>
    4db8:	b110      	cbz	r0, 4dc0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4dba:	4b38      	ldr	r3, [pc, #224]	; (4e9c <SystemInit+0x198>)
    4dbc:	4a38      	ldr	r2, [pc, #224]	; (4ea0 <SystemInit+0x19c>)
    4dbe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4dc0:	f7ff ff84 	bl	4ccc <nrf52_errata_103>
    4dc4:	b118      	cbz	r0, 4dce <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4dc6:	4b37      	ldr	r3, [pc, #220]	; (4ea4 <SystemInit+0x1a0>)
    4dc8:	22fb      	movs	r2, #251	; 0xfb
    4dca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4dce:	f7ff ff7d 	bl	4ccc <nrf52_errata_103>
    4dd2:	b148      	cbz	r0, 4de8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4dd4:	4934      	ldr	r1, [pc, #208]	; (4ea8 <SystemInit+0x1a4>)
    4dd6:	4b35      	ldr	r3, [pc, #212]	; (4eac <SystemInit+0x1a8>)
    4dd8:	680a      	ldr	r2, [r1, #0]
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	f022 020f 	bic.w	r2, r2, #15
    4de0:	f003 030f 	and.w	r3, r3, #15
    4de4:	4313      	orrs	r3, r2
    4de6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4de8:	f7ff ff70 	bl	4ccc <nrf52_errata_103>
    4dec:	b118      	cbz	r0, 4df6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4dee:	4b30      	ldr	r3, [pc, #192]	; (4eb0 <SystemInit+0x1ac>)
    4df0:	f44f 7200 	mov.w	r2, #512	; 0x200
    4df4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4df6:	f7ff ff5f 	bl	4cb8 <nrf52_errata_136>
    4dfa:	b148      	cbz	r0, 4e10 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e00:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4e04:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4e06:	bf44      	itt	mi
    4e08:	f06f 0201 	mvnmi.w	r2, #1
    4e0c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4e10:	4b28      	ldr	r3, [pc, #160]	; (4eb4 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4e12:	681b      	ldr	r3, [r3, #0]
    4e14:	2b08      	cmp	r3, #8
    4e16:	d10e      	bne.n	4e36 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4e18:	4b27      	ldr	r3, [pc, #156]	; (4eb8 <SystemInit+0x1b4>)
    4e1a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4e1c:	2b05      	cmp	r3, #5
    4e1e:	d802      	bhi.n	4e26 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4e20:	4a26      	ldr	r2, [pc, #152]	; (4ebc <SystemInit+0x1b8>)
    4e22:	5cd3      	ldrb	r3, [r2, r3]
    4e24:	b13b      	cbz	r3, 4e36 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4e26:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4e2a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e32:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4e36:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4e3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4e3e:	2a00      	cmp	r2, #0
    4e40:	db03      	blt.n	4e4a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4e42:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4e46:	2b00      	cmp	r3, #0
    4e48:	da22      	bge.n	4e90 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4e4a:	491d      	ldr	r1, [pc, #116]	; (4ec0 <SystemInit+0x1bc>)
    4e4c:	2301      	movs	r3, #1
    4e4e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4e52:	f7ff ff4f 	bl	4cf4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4e56:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4e5a:	2412      	movs	r4, #18
    4e5c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4e60:	f7ff ff48 	bl	4cf4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4e64:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4e68:	f7ff ff44 	bl	4cf4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4e6c:	2300      	movs	r3, #0
    4e6e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4e72:	f7ff ff3f 	bl	4cf4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4e76:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4e7a:	4912      	ldr	r1, [pc, #72]	; (4ec4 <SystemInit+0x1c0>)
    4e7c:	4b12      	ldr	r3, [pc, #72]	; (4ec8 <SystemInit+0x1c4>)
    4e7e:	68ca      	ldr	r2, [r1, #12]
    4e80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e84:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4e86:	60cb      	str	r3, [r1, #12]
    4e88:	f3bf 8f4f 	dsb	sy
    __NOP();
    4e8c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4e8e:	e7fd      	b.n	4e8c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4e90:	4b0e      	ldr	r3, [pc, #56]	; (4ecc <SystemInit+0x1c8>)
    4e92:	4a0f      	ldr	r2, [pc, #60]	; (4ed0 <SystemInit+0x1cc>)
    4e94:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4e96:	bd10      	pop	{r4, pc}
    4e98:	4000c000 	.word	0x4000c000
    4e9c:	4000568c 	.word	0x4000568c
    4ea0:	00038148 	.word	0x00038148
    4ea4:	4000f000 	.word	0x4000f000
    4ea8:	40000ee4 	.word	0x40000ee4
    4eac:	10000258 	.word	0x10000258
    4eb0:	40029640 	.word	0x40029640
    4eb4:	10000130 	.word	0x10000130
    4eb8:	10000134 	.word	0x10000134
    4ebc:	0000a77f 	.word	0x0000a77f
    4ec0:	4001e000 	.word	0x4001e000
    4ec4:	e000ed00 	.word	0xe000ed00
    4ec8:	05fa0004 	.word	0x05fa0004
    4ecc:	20000180 	.word	0x20000180
    4ed0:	03d09000 	.word	0x03d09000

00004ed4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ed4:	4b0e      	ldr	r3, [pc, #56]	; (4f10 <z_sys_init_run_level+0x3c>)
{
    4ed6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ed8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4edc:	3001      	adds	r0, #1
    4ede:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4ee2:	42a6      	cmp	r6, r4
    4ee4:	d800      	bhi.n	4ee8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4ee6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4ee8:	e9d4 3500 	ldrd	r3, r5, [r4]
    4eec:	4628      	mov	r0, r5
    4eee:	4798      	blx	r3
		if (dev != NULL) {
    4ef0:	b165      	cbz	r5, 4f0c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4ef2:	68eb      	ldr	r3, [r5, #12]
    4ef4:	b130      	cbz	r0, 4f04 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4ef6:	2800      	cmp	r0, #0
    4ef8:	bfb8      	it	lt
    4efa:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4efc:	28ff      	cmp	r0, #255	; 0xff
    4efe:	bfa8      	it	ge
    4f00:	20ff      	movge	r0, #255	; 0xff
    4f02:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4f04:	785a      	ldrb	r2, [r3, #1]
    4f06:	f042 0201 	orr.w	r2, r2, #1
    4f0a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f0c:	3408      	adds	r4, #8
    4f0e:	e7e8      	b.n	4ee2 <z_sys_init_run_level+0xe>
    4f10:	0000987c 	.word	0x0000987c

00004f14 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4f14:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4f16:	4605      	mov	r5, r0
    4f18:	b910      	cbnz	r0, 4f20 <z_impl_device_get_binding+0xc>
		return NULL;
    4f1a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4f1c:	4620      	mov	r0, r4
    4f1e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4f20:	7803      	ldrb	r3, [r0, #0]
    4f22:	2b00      	cmp	r3, #0
    4f24:	d0f9      	beq.n	4f1a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4f26:	4a0f      	ldr	r2, [pc, #60]	; (4f64 <z_impl_device_get_binding+0x50>)
    4f28:	4c0f      	ldr	r4, [pc, #60]	; (4f68 <z_impl_device_get_binding+0x54>)
    4f2a:	4616      	mov	r6, r2
    4f2c:	4294      	cmp	r4, r2
    4f2e:	d108      	bne.n	4f42 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4f30:	4c0d      	ldr	r4, [pc, #52]	; (4f68 <z_impl_device_get_binding+0x54>)
    4f32:	42b4      	cmp	r4, r6
    4f34:	d0f1      	beq.n	4f1a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4f36:	4620      	mov	r0, r4
    4f38:	f004 f972 	bl	9220 <z_device_ready>
    4f3c:	b950      	cbnz	r0, 4f54 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4f3e:	3418      	adds	r4, #24
    4f40:	e7f7      	b.n	4f32 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4f42:	4620      	mov	r0, r4
    4f44:	f004 f96c 	bl	9220 <z_device_ready>
    4f48:	b110      	cbz	r0, 4f50 <z_impl_device_get_binding+0x3c>
    4f4a:	6823      	ldr	r3, [r4, #0]
    4f4c:	42ab      	cmp	r3, r5
    4f4e:	d0e5      	beq.n	4f1c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4f50:	3418      	adds	r4, #24
    4f52:	e7eb      	b.n	4f2c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4f54:	6821      	ldr	r1, [r4, #0]
    4f56:	4628      	mov	r0, r5
    4f58:	f003 fe8b 	bl	8c72 <strcmp>
    4f5c:	2800      	cmp	r0, #0
    4f5e:	d1ee      	bne.n	4f3e <z_impl_device_get_binding+0x2a>
    4f60:	e7dc      	b.n	4f1c <z_impl_device_get_binding+0x8>
    4f62:	bf00      	nop
    4f64:	0000955c 	.word	0x0000955c
    4f68:	000094b4 	.word	0x000094b4

00004f6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f6e:	4604      	mov	r4, r0
    4f70:	460e      	mov	r6, r1
	__asm__ volatile(
    4f72:	f04f 0320 	mov.w	r3, #32
    4f76:	f3ef 8711 	mrs	r7, BASEPRI
    4f7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4f7e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4f82:	f001 feb9 	bl	6cf8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4f86:	4631      	mov	r1, r6
    4f88:	4605      	mov	r5, r0
    4f8a:	4620      	mov	r0, r4
    4f8c:	f004 f8a3 	bl	90d6 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4f90:	2c04      	cmp	r4, #4
    4f92:	d10c      	bne.n	4fae <z_fatal_error+0x42>
    4f94:	490a      	ldr	r1, [pc, #40]	; (4fc0 <z_fatal_error+0x54>)
    4f96:	4a0b      	ldr	r2, [pc, #44]	; (4fc4 <z_fatal_error+0x58>)
    4f98:	480b      	ldr	r0, [pc, #44]	; (4fc8 <z_fatal_error+0x5c>)
    4f9a:	238f      	movs	r3, #143	; 0x8f
    4f9c:	f003 fe29 	bl	8bf2 <printk>
    4fa0:	480a      	ldr	r0, [pc, #40]	; (4fcc <z_fatal_error+0x60>)
    4fa2:	f003 fe26 	bl	8bf2 <printk>
    4fa6:	4807      	ldr	r0, [pc, #28]	; (4fc4 <z_fatal_error+0x58>)
    4fa8:	218f      	movs	r1, #143	; 0x8f
    4faa:	f003 fc33 	bl	8814 <assert_post_action>
	__asm__ volatile(
    4fae:	f387 8811 	msr	BASEPRI, r7
    4fb2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4fb6:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4fbc:	f7fd b9b0 	b.w	2320 <z_impl_k_thread_abort>
    4fc0:	0000a7ad 	.word	0x0000a7ad
    4fc4:	0000a78b 	.word	0x0000a78b
    4fc8:	00009c7a 	.word	0x00009c7a
    4fcc:	0000a7ca 	.word	0x0000a7ca

00004fd0 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4fd0:	4c11      	ldr	r4, [pc, #68]	; (5018 <idle+0x48>)
    4fd2:	68a2      	ldr	r2, [r4, #8]
    4fd4:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4fd8:	2a00      	cmp	r2, #0
{
    4fda:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4fdc:	da09      	bge.n	4ff2 <idle+0x22>
    4fde:	490f      	ldr	r1, [pc, #60]	; (501c <idle+0x4c>)
    4fe0:	480f      	ldr	r0, [pc, #60]	; (5020 <idle+0x50>)
    4fe2:	4a10      	ldr	r2, [pc, #64]	; (5024 <idle+0x54>)
    4fe4:	2327      	movs	r3, #39	; 0x27
    4fe6:	f003 fe04 	bl	8bf2 <printk>
    4fea:	480e      	ldr	r0, [pc, #56]	; (5024 <idle+0x54>)
    4fec:	2127      	movs	r1, #39	; 0x27
    4fee:	f003 fc11 	bl	8814 <assert_post_action>
	__asm__ volatile(
    4ff2:	f04f 0220 	mov.w	r2, #32
    4ff6:	f3ef 8311 	mrs	r3, BASEPRI
    4ffa:	f382 8812 	msr	BASEPRI_MAX, r2
    4ffe:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5002:	f002 fb6f 	bl	76e4 <z_get_next_timeout_expiry>
    5006:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5008:	f7fc fdb2 	bl	1b70 <pm_system_suspend>
    500c:	2800      	cmp	r0, #0
    500e:	d1f0      	bne.n	4ff2 <idle+0x22>
	arch_cpu_idle();
    5010:	f7fc fe64 	bl	1cdc <arch_cpu_idle>
}
    5014:	e7ed      	b.n	4ff2 <idle+0x22>
    5016:	bf00      	nop
    5018:	20000c04 	.word	0x20000c04
    501c:	0000a820 	.word	0x0000a820
    5020:	00009c7a 	.word	0x00009c7a
    5024:	0000a7ff 	.word	0x0000a7ff

00005028 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5028:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    502a:	2300      	movs	r3, #0
{
    502c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    502e:	2201      	movs	r2, #1
    5030:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5034:	220f      	movs	r2, #15
    5036:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    503a:	4c0d      	ldr	r4, [pc, #52]	; (5070 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    503c:	4a0d      	ldr	r2, [pc, #52]	; (5074 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    503e:	9301      	str	r3, [sp, #4]
    5040:	490d      	ldr	r1, [pc, #52]	; (5078 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5042:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    5044:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5048:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    504c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    5050:	9300      	str	r3, [sp, #0]
    5052:	fb05 1100 	mla	r1, r5, r0, r1
    5056:	4b09      	ldr	r3, [pc, #36]	; (507c <init_idle_thread+0x54>)
    5058:	f44f 72a0 	mov.w	r2, #320	; 0x140
    505c:	4620      	mov	r0, r4
    505e:	f002 f867 	bl	7130 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5062:	7b63      	ldrb	r3, [r4, #13]
    5064:	f023 0304 	bic.w	r3, r3, #4
    5068:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    506a:	b007      	add	sp, #28
    506c:	bd30      	pop	{r4, r5, pc}
    506e:	bf00      	nop
    5070:	20000410 	.word	0x20000410
    5074:	20000c04 	.word	0x20000c04
    5078:	20001ec0 	.word	0x20001ec0
    507c:	00004fd1 	.word	0x00004fd1

00005080 <bg_thread_main>:
{
    5080:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5082:	4b0a      	ldr	r3, [pc, #40]	; (50ac <bg_thread_main+0x2c>)
    5084:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5086:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5088:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    508a:	f7ff ff23 	bl	4ed4 <z_sys_init_run_level>
	boot_banner();
    508e:	f003 f859 	bl	8144 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5092:	2003      	movs	r0, #3
    5094:	f7ff ff1e 	bl	4ed4 <z_sys_init_run_level>
	z_init_static_threads();
    5098:	f002 f8fc 	bl	7294 <z_init_static_threads>
	main();
    509c:	f7fb fb5e 	bl	75c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    50a0:	4a03      	ldr	r2, [pc, #12]	; (50b0 <bg_thread_main+0x30>)
    50a2:	7b13      	ldrb	r3, [r2, #12]
    50a4:	f023 0301 	bic.w	r3, r3, #1
    50a8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    50aa:	bd08      	pop	{r3, pc}
    50ac:	20000c7b 	.word	0x20000c7b
    50b0:	20000490 	.word	0x20000490

000050b4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    50b4:	4802      	ldr	r0, [pc, #8]	; (50c0 <z_bss_zero+0xc>)
    50b6:	4a03      	ldr	r2, [pc, #12]	; (50c4 <z_bss_zero+0x10>)
    50b8:	2100      	movs	r1, #0
    50ba:	1a12      	subs	r2, r2, r0
    50bc:	f003 bdf0 	b.w	8ca0 <memset>
    50c0:	20000270 	.word	0x20000270
    50c4:	20000e38 	.word	0x20000e38

000050c8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    50c8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    50ca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 51a4 <z_cstart+0xdc>
    50ce:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    50d0:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    50d4:	4d2d      	ldr	r5, [pc, #180]	; (518c <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    50d6:	4e2e      	ldr	r6, [pc, #184]	; (5190 <z_cstart+0xc8>)
    50d8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    50da:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 51a8 <z_cstart+0xe0>
    50de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    50e2:	2400      	movs	r4, #0
    50e4:	616b      	str	r3, [r5, #20]
    50e6:	23e0      	movs	r3, #224	; 0xe0
    50e8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    50ec:	77ec      	strb	r4, [r5, #31]
    50ee:	762c      	strb	r4, [r5, #24]
    50f0:	766c      	strb	r4, [r5, #25]
    50f2:	76ac      	strb	r4, [r5, #26]
    50f4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    50f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    50fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    50fe:	626b      	str	r3, [r5, #36]	; 0x24
    5100:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5104:	f7fd f8b6 	bl	2274 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5108:	f7fc fde2 	bl	1cd0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    510c:	f04f 33ff 	mov.w	r3, #4294967295
    5110:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5112:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5114:	f7fd f9de 	bl	24d4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5118:	f7fd f914 	bl	2344 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    511c:	f240 1301 	movw	r3, #257	; 0x101
    5120:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5124:	ab06      	add	r3, sp, #24
    5126:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5128:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    512c:	f004 f877 	bl	921e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5130:	4620      	mov	r0, r4
    5132:	f7ff fecf 	bl	4ed4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5136:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5138:	4d16      	ldr	r5, [pc, #88]	; (5194 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    513a:	f7ff fecb 	bl	4ed4 <z_sys_init_run_level>
	z_sched_init();
    513e:	f001 fc45 	bl	69cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5142:	4b15      	ldr	r3, [pc, #84]	; (5198 <z_cstart+0xd0>)
    5144:	9305      	str	r3, [sp, #20]
    5146:	2301      	movs	r3, #1
    5148:	4914      	ldr	r1, [pc, #80]	; (519c <z_cstart+0xd4>)
    514a:	9400      	str	r4, [sp, #0]
    514c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5150:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5154:	464b      	mov	r3, r9
    5156:	e9cd 4401 	strd	r4, r4, [sp, #4]
    515a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    515c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    515e:	f001 ffe7 	bl	7130 <z_setup_new_thread>
    5162:	7b6a      	ldrb	r2, [r5, #13]
    5164:	f022 0204 	bic.w	r2, r2, #4
    5168:	736a      	strb	r2, [r5, #13]
    516a:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    516c:	4628      	mov	r0, r5
    516e:	f001 f82d 	bl	61cc <z_ready_thread>
		init_idle_thread(i);
    5172:	4620      	mov	r0, r4
    5174:	f7ff ff58 	bl	5028 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5178:	4b09      	ldr	r3, [pc, #36]	; (51a0 <z_cstart+0xd8>)
    517a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    517c:	464a      	mov	r2, r9
    517e:	4639      	mov	r1, r7
    5180:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5182:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5184:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5188:	f7fc fedc 	bl	1f44 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    518c:	e000ed00 	.word	0xe000ed00
    5190:	20000c04 	.word	0x20000c04
    5194:	20000490 	.word	0x20000490
    5198:	0000a848 	.word	0x0000a848
    519c:	20001aa0 	.word	0x20001aa0
    51a0:	20000410 	.word	0x20000410
    51a4:	20002840 	.word	0x20002840
    51a8:	00005081 	.word	0x00005081

000051ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    51ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    51b0:	4d16      	ldr	r5, [pc, #88]	; (520c <init_mem_slab_module+0x60>)
    51b2:	4c17      	ldr	r4, [pc, #92]	; (5210 <init_mem_slab_module+0x64>)
    51b4:	4e17      	ldr	r6, [pc, #92]	; (5214 <init_mem_slab_module+0x68>)
    51b6:	46a8      	mov	r8, r5
    51b8:	42ac      	cmp	r4, r5
    51ba:	d90c      	bls.n	51d6 <init_mem_slab_module+0x2a>
    51bc:	4916      	ldr	r1, [pc, #88]	; (5218 <init_mem_slab_module+0x6c>)
    51be:	4817      	ldr	r0, [pc, #92]	; (521c <init_mem_slab_module+0x70>)
    51c0:	233c      	movs	r3, #60	; 0x3c
    51c2:	4632      	mov	r2, r6
    51c4:	f003 fd15 	bl	8bf2 <printk>
    51c8:	4815      	ldr	r0, [pc, #84]	; (5220 <init_mem_slab_module+0x74>)
    51ca:	f003 fd12 	bl	8bf2 <printk>
    51ce:	213c      	movs	r1, #60	; 0x3c
    51d0:	4630      	mov	r0, r6
    51d2:	f003 fb1f 	bl	8814 <assert_post_action>
    51d6:	4544      	cmp	r4, r8
    51d8:	d302      	bcc.n	51e0 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    51da:	2000      	movs	r0, #0
	return rc;
}
    51dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    51e0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    51e4:	ea41 0302 	orr.w	r3, r1, r2
    51e8:	f013 0303 	ands.w	r3, r3, #3
    51ec:	d10b      	bne.n	5206 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    51ee:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    51f0:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    51f2:	4283      	cmp	r3, r0
    51f4:	d101      	bne.n	51fa <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    51f6:	3420      	adds	r4, #32
    51f8:	e7de      	b.n	51b8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    51fa:	69a7      	ldr	r7, [r4, #24]
    51fc:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    51fe:	3301      	adds	r3, #1
		slab->free_list = p;
    5200:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5202:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5204:	e7f5      	b.n	51f2 <init_mem_slab_module+0x46>
		return -EINVAL;
    5206:	f06f 0015 	mvn.w	r0, #21
	return rc;
    520a:	e7e7      	b.n	51dc <init_mem_slab_module+0x30>
    520c:	20000208 	.word	0x20000208
    5210:	20000208 	.word	0x20000208
    5214:	0000a84d 	.word	0x0000a84d
    5218:	0000a872 	.word	0x0000a872
    521c:	00009c7a 	.word	0x00009c7a
    5220:	0000a88f 	.word	0x0000a88f

00005224 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5228:	4604      	mov	r4, r0
    522a:	460e      	mov	r6, r1
    522c:	4690      	mov	r8, r2
    522e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5230:	f100 0508 	add.w	r5, r0, #8
    5234:	f04f 0320 	mov.w	r3, #32
    5238:	f3ef 8711 	mrs	r7, BASEPRI
    523c:	f383 8812 	msr	BASEPRI_MAX, r3
    5240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5244:	4628      	mov	r0, r5
    5246:	f002 f8b5 	bl	73b4 <z_spin_lock_valid>
    524a:	b968      	cbnz	r0, 5268 <k_mem_slab_alloc+0x44>
    524c:	4a24      	ldr	r2, [pc, #144]	; (52e0 <k_mem_slab_alloc+0xbc>)
    524e:	4925      	ldr	r1, [pc, #148]	; (52e4 <k_mem_slab_alloc+0xc0>)
    5250:	4825      	ldr	r0, [pc, #148]	; (52e8 <k_mem_slab_alloc+0xc4>)
    5252:	2381      	movs	r3, #129	; 0x81
    5254:	f003 fccd 	bl	8bf2 <printk>
    5258:	4824      	ldr	r0, [pc, #144]	; (52ec <k_mem_slab_alloc+0xc8>)
    525a:	4629      	mov	r1, r5
    525c:	f003 fcc9 	bl	8bf2 <printk>
    5260:	481f      	ldr	r0, [pc, #124]	; (52e0 <k_mem_slab_alloc+0xbc>)
    5262:	2181      	movs	r1, #129	; 0x81
    5264:	f003 fad6 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5268:	4628      	mov	r0, r5
    526a:	f002 f8c1 	bl	73f0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    526e:	69a3      	ldr	r3, [r4, #24]
    5270:	b1eb      	cbz	r3, 52ae <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5272:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5278:	69e3      	ldr	r3, [r4, #28]
    527a:	3301      	adds	r3, #1
    527c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    527e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5280:	4628      	mov	r0, r5
    5282:	f002 f8a5 	bl	73d0 <z_spin_unlock_valid>
    5286:	b968      	cbnz	r0, 52a4 <k_mem_slab_alloc+0x80>
    5288:	4a15      	ldr	r2, [pc, #84]	; (52e0 <k_mem_slab_alloc+0xbc>)
    528a:	4919      	ldr	r1, [pc, #100]	; (52f0 <k_mem_slab_alloc+0xcc>)
    528c:	4816      	ldr	r0, [pc, #88]	; (52e8 <k_mem_slab_alloc+0xc4>)
    528e:	23ac      	movs	r3, #172	; 0xac
    5290:	f003 fcaf 	bl	8bf2 <printk>
    5294:	4817      	ldr	r0, [pc, #92]	; (52f4 <k_mem_slab_alloc+0xd0>)
    5296:	4629      	mov	r1, r5
    5298:	f003 fcab 	bl	8bf2 <printk>
    529c:	4810      	ldr	r0, [pc, #64]	; (52e0 <k_mem_slab_alloc+0xbc>)
    529e:	21ac      	movs	r1, #172	; 0xac
    52a0:	f003 fab8 	bl	8814 <assert_post_action>
	__asm__ volatile(
    52a4:	f387 8811 	msr	BASEPRI, r7
    52a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    52ac:	e013      	b.n	52d6 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    52ae:	ea58 0209 	orrs.w	r2, r8, r9
    52b2:	d103      	bne.n	52bc <k_mem_slab_alloc+0x98>
		*mem = NULL;
    52b4:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    52b6:	f06f 040b 	mvn.w	r4, #11
    52ba:	e7e1      	b.n	5280 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    52bc:	4622      	mov	r2, r4
    52be:	e9cd 8900 	strd	r8, r9, [sp]
    52c2:	4639      	mov	r1, r7
    52c4:	4628      	mov	r0, r5
    52c6:	f001 f933 	bl	6530 <z_pend_curr>
		if (result == 0) {
    52ca:	4604      	mov	r4, r0
    52cc:	b918      	cbnz	r0, 52d6 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    52ce:	4b0a      	ldr	r3, [pc, #40]	; (52f8 <k_mem_slab_alloc+0xd4>)
    52d0:	689b      	ldr	r3, [r3, #8]
    52d2:	695b      	ldr	r3, [r3, #20]
    52d4:	6033      	str	r3, [r6, #0]
}
    52d6:	4620      	mov	r0, r4
    52d8:	b003      	add	sp, #12
    52da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    52de:	bf00      	nop
    52e0:	00009f3d 	.word	0x00009f3d
    52e4:	00009f8f 	.word	0x00009f8f
    52e8:	00009c7a 	.word	0x00009c7a
    52ec:	00009fa4 	.word	0x00009fa4
    52f0:	00009f63 	.word	0x00009f63
    52f4:	00009f7a 	.word	0x00009f7a
    52f8:	20000c04 	.word	0x20000c04

000052fc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    52fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5300:	4604      	mov	r4, r0
    5302:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5304:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5308:	f04f 0320 	mov.w	r3, #32
    530c:	f3ef 8711 	mrs	r7, BASEPRI
    5310:	f383 8812 	msr	BASEPRI_MAX, r3
    5314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5318:	4628      	mov	r0, r5
    531a:	f002 f84b 	bl	73b4 <z_spin_lock_valid>
    531e:	b968      	cbnz	r0, 533c <k_mem_slab_free+0x40>
    5320:	4a22      	ldr	r2, [pc, #136]	; (53ac <k_mem_slab_free+0xb0>)
    5322:	4923      	ldr	r1, [pc, #140]	; (53b0 <k_mem_slab_free+0xb4>)
    5324:	4823      	ldr	r0, [pc, #140]	; (53b4 <k_mem_slab_free+0xb8>)
    5326:	2381      	movs	r3, #129	; 0x81
    5328:	f003 fc63 	bl	8bf2 <printk>
    532c:	4822      	ldr	r0, [pc, #136]	; (53b8 <k_mem_slab_free+0xbc>)
    532e:	4629      	mov	r1, r5
    5330:	f003 fc5f 	bl	8bf2 <printk>
    5334:	481d      	ldr	r0, [pc, #116]	; (53ac <k_mem_slab_free+0xb0>)
    5336:	2181      	movs	r1, #129	; 0x81
    5338:	f003 fa6c 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    533c:	4628      	mov	r0, r5
    533e:	f002 f857 	bl	73f0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5342:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5346:	f1b8 0f00 	cmp.w	r8, #0
    534a:	d10f      	bne.n	536c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    534c:	4620      	mov	r0, r4
    534e:	f001 faed 	bl	692c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5352:	b158      	cbz	r0, 536c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5354:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5356:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5358:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    535c:	f000 ff36 	bl	61cc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5360:	4639      	mov	r1, r7
    5362:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5368:	f000 bc90 	b.w	5c8c <z_reschedule>
	**(char ***) mem = slab->free_list;
    536c:	6833      	ldr	r3, [r6, #0]
    536e:	69a2      	ldr	r2, [r4, #24]
    5370:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5372:	6833      	ldr	r3, [r6, #0]
    5374:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5376:	69e3      	ldr	r3, [r4, #28]
    5378:	3b01      	subs	r3, #1
    537a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    537c:	4628      	mov	r0, r5
    537e:	f002 f827 	bl	73d0 <z_spin_unlock_valid>
    5382:	b968      	cbnz	r0, 53a0 <k_mem_slab_free+0xa4>
    5384:	4a09      	ldr	r2, [pc, #36]	; (53ac <k_mem_slab_free+0xb0>)
    5386:	490d      	ldr	r1, [pc, #52]	; (53bc <k_mem_slab_free+0xc0>)
    5388:	480a      	ldr	r0, [pc, #40]	; (53b4 <k_mem_slab_free+0xb8>)
    538a:	23ac      	movs	r3, #172	; 0xac
    538c:	f003 fc31 	bl	8bf2 <printk>
    5390:	480b      	ldr	r0, [pc, #44]	; (53c0 <k_mem_slab_free+0xc4>)
    5392:	4629      	mov	r1, r5
    5394:	f003 fc2d 	bl	8bf2 <printk>
    5398:	4804      	ldr	r0, [pc, #16]	; (53ac <k_mem_slab_free+0xb0>)
    539a:	21ac      	movs	r1, #172	; 0xac
    539c:	f003 fa3a 	bl	8814 <assert_post_action>
	__asm__ volatile(
    53a0:	f387 8811 	msr	BASEPRI, r7
    53a4:	f3bf 8f6f 	isb	sy
}
    53a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53ac:	00009f3d 	.word	0x00009f3d
    53b0:	00009f8f 	.word	0x00009f8f
    53b4:	00009c7a 	.word	0x00009c7a
    53b8:	00009fa4 	.word	0x00009fa4
    53bc:	00009f63 	.word	0x00009f63
    53c0:	00009f7a 	.word	0x00009f7a

000053c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    53c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    53c8:	4604      	mov	r4, r0
    53ca:	4616      	mov	r6, r2
    53cc:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    53ce:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    53d2:	b163      	cbz	r3, 53ee <z_impl_k_mutex_lock+0x2a>
    53d4:	4970      	ldr	r1, [pc, #448]	; (5598 <z_impl_k_mutex_lock+0x1d4>)
    53d6:	4a71      	ldr	r2, [pc, #452]	; (559c <z_impl_k_mutex_lock+0x1d8>)
    53d8:	4871      	ldr	r0, [pc, #452]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    53da:	2365      	movs	r3, #101	; 0x65
    53dc:	f003 fc09 	bl	8bf2 <printk>
    53e0:	4870      	ldr	r0, [pc, #448]	; (55a4 <z_impl_k_mutex_lock+0x1e0>)
    53e2:	f003 fc06 	bl	8bf2 <printk>
    53e6:	486d      	ldr	r0, [pc, #436]	; (559c <z_impl_k_mutex_lock+0x1d8>)
    53e8:	2165      	movs	r1, #101	; 0x65
    53ea:	f003 fa13 	bl	8814 <assert_post_action>
	__asm__ volatile(
    53ee:	f04f 0320 	mov.w	r3, #32
    53f2:	f3ef 8811 	mrs	r8, BASEPRI
    53f6:	f383 8812 	msr	BASEPRI_MAX, r3
    53fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53fe:	486a      	ldr	r0, [pc, #424]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5400:	f001 ffd8 	bl	73b4 <z_spin_lock_valid>
    5404:	b968      	cbnz	r0, 5422 <z_impl_k_mutex_lock+0x5e>
    5406:	4a69      	ldr	r2, [pc, #420]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5408:	4969      	ldr	r1, [pc, #420]	; (55b0 <z_impl_k_mutex_lock+0x1ec>)
    540a:	4865      	ldr	r0, [pc, #404]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    540c:	2381      	movs	r3, #129	; 0x81
    540e:	f003 fbf0 	bl	8bf2 <printk>
    5412:	4965      	ldr	r1, [pc, #404]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5414:	4867      	ldr	r0, [pc, #412]	; (55b4 <z_impl_k_mutex_lock+0x1f0>)
    5416:	f003 fbec 	bl	8bf2 <printk>
    541a:	4864      	ldr	r0, [pc, #400]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    541c:	2181      	movs	r1, #129	; 0x81
    541e:	f003 f9f9 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5422:	4861      	ldr	r0, [pc, #388]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5424:	f001 ffe4 	bl	73f0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5428:	68e3      	ldr	r3, [r4, #12]
    542a:	4a63      	ldr	r2, [pc, #396]	; (55b8 <z_impl_k_mutex_lock+0x1f4>)
    542c:	b1fb      	cbz	r3, 546e <z_impl_k_mutex_lock+0xaa>
    542e:	68a0      	ldr	r0, [r4, #8]
    5430:	6891      	ldr	r1, [r2, #8]
    5432:	4288      	cmp	r0, r1
    5434:	d03d      	beq.n	54b2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5436:	ea56 0307 	orrs.w	r3, r6, r7
    543a:	d13c      	bne.n	54b6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    543c:	485a      	ldr	r0, [pc, #360]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    543e:	f001 ffc7 	bl	73d0 <z_spin_unlock_valid>
    5442:	b968      	cbnz	r0, 5460 <z_impl_k_mutex_lock+0x9c>
    5444:	4a59      	ldr	r2, [pc, #356]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5446:	495d      	ldr	r1, [pc, #372]	; (55bc <z_impl_k_mutex_lock+0x1f8>)
    5448:	4855      	ldr	r0, [pc, #340]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    544a:	23ac      	movs	r3, #172	; 0xac
    544c:	f003 fbd1 	bl	8bf2 <printk>
    5450:	4955      	ldr	r1, [pc, #340]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5452:	485b      	ldr	r0, [pc, #364]	; (55c0 <z_impl_k_mutex_lock+0x1fc>)
    5454:	f003 fbcd 	bl	8bf2 <printk>
    5458:	4854      	ldr	r0, [pc, #336]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    545a:	21ac      	movs	r1, #172	; 0xac
    545c:	f003 f9da 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5460:	f388 8811 	msr	BASEPRI, r8
    5464:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5468:	f06f 000f 	mvn.w	r0, #15
    546c:	e01e      	b.n	54ac <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    546e:	6891      	ldr	r1, [r2, #8]
    5470:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5474:	484c      	ldr	r0, [pc, #304]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5476:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5478:	3301      	adds	r3, #1
    547a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    547c:	6893      	ldr	r3, [r2, #8]
    547e:	60a3      	str	r3, [r4, #8]
    5480:	f001 ffa6 	bl	73d0 <z_spin_unlock_valid>
    5484:	b968      	cbnz	r0, 54a2 <z_impl_k_mutex_lock+0xde>
    5486:	4a49      	ldr	r2, [pc, #292]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5488:	494c      	ldr	r1, [pc, #304]	; (55bc <z_impl_k_mutex_lock+0x1f8>)
    548a:	4845      	ldr	r0, [pc, #276]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    548c:	23ac      	movs	r3, #172	; 0xac
    548e:	f003 fbb0 	bl	8bf2 <printk>
    5492:	4945      	ldr	r1, [pc, #276]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5494:	484a      	ldr	r0, [pc, #296]	; (55c0 <z_impl_k_mutex_lock+0x1fc>)
    5496:	f003 fbac 	bl	8bf2 <printk>
    549a:	4844      	ldr	r0, [pc, #272]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    549c:	21ac      	movs	r1, #172	; 0xac
    549e:	f003 f9b9 	bl	8814 <assert_post_action>
    54a2:	f388 8811 	msr	BASEPRI, r8
    54a6:	f3bf 8f6f 	isb	sy
		return 0;
    54aa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    54ac:	b002      	add	sp, #8
    54ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    54b2:	6921      	ldr	r1, [r4, #16]
    54b4:	e7de      	b.n	5474 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    54b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
    54ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    54be:	4299      	cmp	r1, r3
    54c0:	bfa8      	it	ge
    54c2:	4619      	movge	r1, r3
    54c4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    54c8:	4291      	cmp	r1, r2
    54ca:	bfb8      	it	lt
    54cc:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    54ce:	428b      	cmp	r3, r1
    54d0:	dd44      	ble.n	555c <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    54d2:	f001 f85d 	bl	6590 <z_set_prio>
    54d6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    54d8:	e9cd 6700 	strd	r6, r7, [sp]
    54dc:	4832      	ldr	r0, [pc, #200]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    54de:	4622      	mov	r2, r4
    54e0:	4641      	mov	r1, r8
    54e2:	f001 f825 	bl	6530 <z_pend_curr>
	if (got_mutex == 0) {
    54e6:	2800      	cmp	r0, #0
    54e8:	d0e0      	beq.n	54ac <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    54ea:	f04f 0320 	mov.w	r3, #32
    54ee:	f3ef 8611 	mrs	r6, BASEPRI
    54f2:	f383 8812 	msr	BASEPRI_MAX, r3
    54f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54fa:	482b      	ldr	r0, [pc, #172]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    54fc:	f001 ff5a 	bl	73b4 <z_spin_lock_valid>
    5500:	b968      	cbnz	r0, 551e <z_impl_k_mutex_lock+0x15a>
    5502:	4a2a      	ldr	r2, [pc, #168]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5504:	492a      	ldr	r1, [pc, #168]	; (55b0 <z_impl_k_mutex_lock+0x1ec>)
    5506:	4826      	ldr	r0, [pc, #152]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    5508:	2381      	movs	r3, #129	; 0x81
    550a:	f003 fb72 	bl	8bf2 <printk>
    550e:	4926      	ldr	r1, [pc, #152]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5510:	4828      	ldr	r0, [pc, #160]	; (55b4 <z_impl_k_mutex_lock+0x1f0>)
    5512:	f003 fb6e 	bl	8bf2 <printk>
    5516:	4825      	ldr	r0, [pc, #148]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5518:	2181      	movs	r1, #129	; 0x81
    551a:	f003 f97b 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    551e:	4822      	ldr	r0, [pc, #136]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5520:	f001 ff66 	bl	73f0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5524:	6823      	ldr	r3, [r4, #0]
    5526:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5528:	429c      	cmp	r4, r3
    552a:	d00a      	beq.n	5542 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    552c:	b14b      	cbz	r3, 5542 <z_impl_k_mutex_lock+0x17e>
    552e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5532:	4299      	cmp	r1, r3
    5534:	bfa8      	it	ge
    5536:	4619      	movge	r1, r3
    5538:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    553c:	4299      	cmp	r1, r3
    553e:	bfb8      	it	lt
    5540:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5542:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5544:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5548:	4299      	cmp	r1, r3
    554a:	d109      	bne.n	5560 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    554c:	b16d      	cbz	r5, 556a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    554e:	4816      	ldr	r0, [pc, #88]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5550:	4631      	mov	r1, r6
    5552:	f000 fb9b 	bl	5c8c <z_reschedule>
	return -EAGAIN;
    5556:	f06f 000a 	mvn.w	r0, #10
    555a:	e7a7      	b.n	54ac <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    555c:	2500      	movs	r5, #0
    555e:	e7bb      	b.n	54d8 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5560:	f001 f816 	bl	6590 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5564:	2800      	cmp	r0, #0
    5566:	d1f2      	bne.n	554e <z_impl_k_mutex_lock+0x18a>
    5568:	e7f0      	b.n	554c <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    556a:	480f      	ldr	r0, [pc, #60]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    556c:	f001 ff30 	bl	73d0 <z_spin_unlock_valid>
    5570:	b968      	cbnz	r0, 558e <z_impl_k_mutex_lock+0x1ca>
    5572:	4a0e      	ldr	r2, [pc, #56]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5574:	4911      	ldr	r1, [pc, #68]	; (55bc <z_impl_k_mutex_lock+0x1f8>)
    5576:	480a      	ldr	r0, [pc, #40]	; (55a0 <z_impl_k_mutex_lock+0x1dc>)
    5578:	23ac      	movs	r3, #172	; 0xac
    557a:	f003 fb3a 	bl	8bf2 <printk>
    557e:	490a      	ldr	r1, [pc, #40]	; (55a8 <z_impl_k_mutex_lock+0x1e4>)
    5580:	480f      	ldr	r0, [pc, #60]	; (55c0 <z_impl_k_mutex_lock+0x1fc>)
    5582:	f003 fb36 	bl	8bf2 <printk>
    5586:	4809      	ldr	r0, [pc, #36]	; (55ac <z_impl_k_mutex_lock+0x1e8>)
    5588:	21ac      	movs	r1, #172	; 0xac
    558a:	f003 f943 	bl	8814 <assert_post_action>
	__asm__ volatile(
    558e:	f386 8811 	msr	BASEPRI, r6
    5592:	f3bf 8f6f 	isb	sy
    5596:	e7de      	b.n	5556 <z_impl_k_mutex_lock+0x192>
    5598:	0000a8d0 	.word	0x0000a8d0
    559c:	0000a8ae 	.word	0x0000a8ae
    55a0:	00009c7a 	.word	0x00009c7a
    55a4:	0000a8e2 	.word	0x0000a8e2
    55a8:	20000c2c 	.word	0x20000c2c
    55ac:	00009f3d 	.word	0x00009f3d
    55b0:	00009f8f 	.word	0x00009f8f
    55b4:	00009fa4 	.word	0x00009fa4
    55b8:	20000c04 	.word	0x20000c04
    55bc:	00009f63 	.word	0x00009f63
    55c0:	00009f7a 	.word	0x00009f7a

000055c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    55c4:	b538      	push	{r3, r4, r5, lr}
    55c6:	4604      	mov	r4, r0
    55c8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    55cc:	b163      	cbz	r3, 55e8 <z_impl_k_mutex_unlock+0x24>
    55ce:	4952      	ldr	r1, [pc, #328]	; (5718 <z_impl_k_mutex_unlock+0x154>)
    55d0:	4a52      	ldr	r2, [pc, #328]	; (571c <z_impl_k_mutex_unlock+0x158>)
    55d2:	4853      	ldr	r0, [pc, #332]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    55d4:	23c7      	movs	r3, #199	; 0xc7
    55d6:	f003 fb0c 	bl	8bf2 <printk>
    55da:	4852      	ldr	r0, [pc, #328]	; (5724 <z_impl_k_mutex_unlock+0x160>)
    55dc:	f003 fb09 	bl	8bf2 <printk>
    55e0:	484e      	ldr	r0, [pc, #312]	; (571c <z_impl_k_mutex_unlock+0x158>)
    55e2:	21c7      	movs	r1, #199	; 0xc7
    55e4:	f003 f916 	bl	8814 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    55e8:	68a3      	ldr	r3, [r4, #8]
    55ea:	2b00      	cmp	r3, #0
    55ec:	f000 808d 	beq.w	570a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    55f0:	4d4d      	ldr	r5, [pc, #308]	; (5728 <z_impl_k_mutex_unlock+0x164>)
    55f2:	68aa      	ldr	r2, [r5, #8]
    55f4:	4293      	cmp	r3, r2
    55f6:	f040 808b 	bne.w	5710 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    55fa:	68e3      	ldr	r3, [r4, #12]
    55fc:	b94b      	cbnz	r3, 5612 <z_impl_k_mutex_unlock+0x4e>
    55fe:	494b      	ldr	r1, [pc, #300]	; (572c <z_impl_k_mutex_unlock+0x168>)
    5600:	4847      	ldr	r0, [pc, #284]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    5602:	4a46      	ldr	r2, [pc, #280]	; (571c <z_impl_k_mutex_unlock+0x158>)
    5604:	23df      	movs	r3, #223	; 0xdf
    5606:	f003 faf4 	bl	8bf2 <printk>
    560a:	4844      	ldr	r0, [pc, #272]	; (571c <z_impl_k_mutex_unlock+0x158>)
    560c:	21df      	movs	r1, #223	; 0xdf
    560e:	f003 f901 	bl	8814 <assert_post_action>
    5612:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5616:	b163      	cbz	r3, 5632 <z_impl_k_mutex_unlock+0x6e>
    5618:	493f      	ldr	r1, [pc, #252]	; (5718 <z_impl_k_mutex_unlock+0x154>)
    561a:	4a45      	ldr	r2, [pc, #276]	; (5730 <z_impl_k_mutex_unlock+0x16c>)
    561c:	4840      	ldr	r0, [pc, #256]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    561e:	23fd      	movs	r3, #253	; 0xfd
    5620:	f003 fae7 	bl	8bf2 <printk>
    5624:	4843      	ldr	r0, [pc, #268]	; (5734 <z_impl_k_mutex_unlock+0x170>)
    5626:	f003 fae4 	bl	8bf2 <printk>
    562a:	4841      	ldr	r0, [pc, #260]	; (5730 <z_impl_k_mutex_unlock+0x16c>)
    562c:	21fd      	movs	r1, #253	; 0xfd
    562e:	f003 f8f1 	bl	8814 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5632:	68ab      	ldr	r3, [r5, #8]
    5634:	7bdb      	ldrb	r3, [r3, #15]
    5636:	2b01      	cmp	r3, #1
    5638:	d10c      	bne.n	5654 <z_impl_k_mutex_unlock+0x90>
    563a:	493f      	ldr	r1, [pc, #252]	; (5738 <z_impl_k_mutex_unlock+0x174>)
    563c:	4a3c      	ldr	r2, [pc, #240]	; (5730 <z_impl_k_mutex_unlock+0x16c>)
    563e:	4838      	ldr	r0, [pc, #224]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    5640:	23fe      	movs	r3, #254	; 0xfe
    5642:	f003 fad6 	bl	8bf2 <printk>
    5646:	483b      	ldr	r0, [pc, #236]	; (5734 <z_impl_k_mutex_unlock+0x170>)
    5648:	f003 fad3 	bl	8bf2 <printk>
    564c:	4838      	ldr	r0, [pc, #224]	; (5730 <z_impl_k_mutex_unlock+0x16c>)
    564e:	21fe      	movs	r1, #254	; 0xfe
    5650:	f003 f8e0 	bl	8814 <assert_post_action>

	--_current->base.sched_locked;
    5654:	68aa      	ldr	r2, [r5, #8]
    5656:	7bd3      	ldrb	r3, [r2, #15]
    5658:	3b01      	subs	r3, #1
    565a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    565c:	68e3      	ldr	r3, [r4, #12]
    565e:	2b01      	cmp	r3, #1
    5660:	d905      	bls.n	566e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5662:	3b01      	subs	r3, #1
    5664:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5666:	f001 f899 	bl	679c <k_sched_unlock>

	return 0;
    566a:	2000      	movs	r0, #0
}
    566c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    566e:	f04f 0320 	mov.w	r3, #32
    5672:	f3ef 8511 	mrs	r5, BASEPRI
    5676:	f383 8812 	msr	BASEPRI_MAX, r3
    567a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    567e:	482f      	ldr	r0, [pc, #188]	; (573c <z_impl_k_mutex_unlock+0x178>)
    5680:	f001 fe98 	bl	73b4 <z_spin_lock_valid>
    5684:	b968      	cbnz	r0, 56a2 <z_impl_k_mutex_unlock+0xde>
    5686:	4a2e      	ldr	r2, [pc, #184]	; (5740 <z_impl_k_mutex_unlock+0x17c>)
    5688:	492e      	ldr	r1, [pc, #184]	; (5744 <z_impl_k_mutex_unlock+0x180>)
    568a:	4825      	ldr	r0, [pc, #148]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    568c:	2381      	movs	r3, #129	; 0x81
    568e:	f003 fab0 	bl	8bf2 <printk>
    5692:	492a      	ldr	r1, [pc, #168]	; (573c <z_impl_k_mutex_unlock+0x178>)
    5694:	482c      	ldr	r0, [pc, #176]	; (5748 <z_impl_k_mutex_unlock+0x184>)
    5696:	f003 faac 	bl	8bf2 <printk>
    569a:	4829      	ldr	r0, [pc, #164]	; (5740 <z_impl_k_mutex_unlock+0x17c>)
    569c:	2181      	movs	r1, #129	; 0x81
    569e:	f003 f8b9 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    56a2:	4826      	ldr	r0, [pc, #152]	; (573c <z_impl_k_mutex_unlock+0x178>)
    56a4:	f001 fea4 	bl	73f0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    56a8:	68a0      	ldr	r0, [r4, #8]
    56aa:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    56ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
    56b0:	4299      	cmp	r1, r3
    56b2:	d001      	beq.n	56b8 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    56b4:	f000 ff6c 	bl	6590 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    56b8:	4620      	mov	r0, r4
    56ba:	f001 f937 	bl	692c <z_unpend_first_thread>
	mutex->owner = new_owner;
    56be:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    56c0:	b158      	cbz	r0, 56da <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    56c2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    56c6:	6122      	str	r2, [r4, #16]
    56c8:	2200      	movs	r2, #0
    56ca:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    56cc:	f000 fd7e 	bl	61cc <z_ready_thread>
		z_reschedule(&lock, key);
    56d0:	481a      	ldr	r0, [pc, #104]	; (573c <z_impl_k_mutex_unlock+0x178>)
    56d2:	4629      	mov	r1, r5
    56d4:	f000 fada 	bl	5c8c <z_reschedule>
    56d8:	e7c5      	b.n	5666 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    56da:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56dc:	4817      	ldr	r0, [pc, #92]	; (573c <z_impl_k_mutex_unlock+0x178>)
    56de:	f001 fe77 	bl	73d0 <z_spin_unlock_valid>
    56e2:	b968      	cbnz	r0, 5700 <z_impl_k_mutex_unlock+0x13c>
    56e4:	4a16      	ldr	r2, [pc, #88]	; (5740 <z_impl_k_mutex_unlock+0x17c>)
    56e6:	4919      	ldr	r1, [pc, #100]	; (574c <z_impl_k_mutex_unlock+0x188>)
    56e8:	480d      	ldr	r0, [pc, #52]	; (5720 <z_impl_k_mutex_unlock+0x15c>)
    56ea:	23ac      	movs	r3, #172	; 0xac
    56ec:	f003 fa81 	bl	8bf2 <printk>
    56f0:	4912      	ldr	r1, [pc, #72]	; (573c <z_impl_k_mutex_unlock+0x178>)
    56f2:	4817      	ldr	r0, [pc, #92]	; (5750 <z_impl_k_mutex_unlock+0x18c>)
    56f4:	f003 fa7d 	bl	8bf2 <printk>
    56f8:	4811      	ldr	r0, [pc, #68]	; (5740 <z_impl_k_mutex_unlock+0x17c>)
    56fa:	21ac      	movs	r1, #172	; 0xac
    56fc:	f003 f88a 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5700:	f385 8811 	msr	BASEPRI, r5
    5704:	f3bf 8f6f 	isb	sy
    5708:	e7ad      	b.n	5666 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    570a:	f06f 0015 	mvn.w	r0, #21
    570e:	e7ad      	b.n	566c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5710:	f04f 30ff 	mov.w	r0, #4294967295
    5714:	e7aa      	b.n	566c <z_impl_k_mutex_unlock+0xa8>
    5716:	bf00      	nop
    5718:	0000a8d0 	.word	0x0000a8d0
    571c:	0000a8ae 	.word	0x0000a8ae
    5720:	00009c7a 	.word	0x00009c7a
    5724:	0000a8e2 	.word	0x0000a8e2
    5728:	20000c04 	.word	0x20000c04
    572c:	0000a907 	.word	0x0000a907
    5730:	0000a91e 	.word	0x0000a91e
    5734:	0000a949 	.word	0x0000a949
    5738:	0000a94c 	.word	0x0000a94c
    573c:	20000c2c 	.word	0x20000c2c
    5740:	00009f3d 	.word	0x00009f3d
    5744:	00009f8f 	.word	0x00009f8f
    5748:	00009fa4 	.word	0x00009fa4
    574c:	00009f63 	.word	0x00009f63
    5750:	00009f7a 	.word	0x00009f7a

00005754 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    5754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    5758:	6884      	ldr	r4, [r0, #8]
{
    575a:	4605      	mov	r5, r0
    575c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    575e:	b1d4      	cbz	r4, 5796 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    5760:	7863      	ldrb	r3, [r4, #1]
    5762:	2b01      	cmp	r3, #1
    5764:	d14b      	bne.n	57fe <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    5766:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    576a:	d10e      	bne.n	578a <signal_poll_event+0x36>
    576c:	4a30      	ldr	r2, [pc, #192]	; (5830 <signal_poll_event+0xdc>)
    576e:	4931      	ldr	r1, [pc, #196]	; (5834 <signal_poll_event+0xe0>)
    5770:	4831      	ldr	r0, [pc, #196]	; (5838 <signal_poll_event+0xe4>)
    5772:	23f9      	movs	r3, #249	; 0xf9
    5774:	f003 fa3d 	bl	8bf2 <printk>
    5778:	4830      	ldr	r0, [pc, #192]	; (583c <signal_poll_event+0xe8>)
    577a:	f003 fa3a 	bl	8bf2 <printk>
    577e:	482c      	ldr	r0, [pc, #176]	; (5830 <signal_poll_event+0xdc>)
    5780:	21f9      	movs	r1, #249	; 0xf9
    5782:	f003 f847 	bl	8814 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    5786:	7b7b      	ldrb	r3, [r7, #13]
    5788:	deff      	udf	#255	; 0xff
    578a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    578e:	f013 0302 	ands.w	r3, r3, #2
    5792:	d10a      	bne.n	57aa <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    5794:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    5796:	68eb      	ldr	r3, [r5, #12]
    5798:	f3c3 3145 	ubfx	r1, r3, #13, #6
    579c:	430e      	orrs	r6, r1
	event->poller = NULL;
    579e:	2000      	movs	r0, #0
	event->state |= state;
    57a0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    57a4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    57a6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    57a8:	e00d      	b.n	57c6 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    57aa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    57ae:	f04f 31ff 	mov.w	r1, #4294967295
    57b2:	f06f 0001 	mvn.w	r0, #1
    57b6:	428b      	cmp	r3, r1
    57b8:	bf08      	it	eq
    57ba:	4282      	cmpeq	r2, r0
    57bc:	d105      	bne.n	57ca <signal_poll_event+0x76>
		poller->is_polling = false;
    57be:	2300      	movs	r3, #0
    57c0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    57c2:	f06f 000a 	mvn.w	r0, #10
}
    57c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    57ca:	4638      	mov	r0, r7
    57cc:	f000 fb5a 	bl	5e84 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    57d0:	2e08      	cmp	r6, #8
    57d2:	bf0c      	ite	eq
    57d4:	f06f 0303 	mvneq.w	r3, #3
    57d8:	2300      	movne	r3, #0
    57da:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    57dc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    57e0:	06db      	lsls	r3, r3, #27
    57e2:	d104      	bne.n	57ee <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    57e4:	f854 8c48 	ldr.w	r8, [r4, #-72]
    57e8:	f1b8 0f00 	cmp.w	r8, #0
    57ec:	d001      	beq.n	57f2 <signal_poll_event+0x9e>
		poller->is_polling = false;
    57ee:	2300      	movs	r3, #0
    57f0:	e7d0      	b.n	5794 <signal_poll_event+0x40>
	z_ready_thread(thread);
    57f2:	4638      	mov	r0, r7
    57f4:	f000 fcea 	bl	61cc <z_ready_thread>
		poller->is_polling = false;
    57f8:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    57fc:	e7cb      	b.n	5796 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    57fe:	2b02      	cmp	r3, #2
    5800:	d1f5      	bne.n	57ee <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    5802:	7823      	ldrb	r3, [r4, #0]
    5804:	2b00      	cmp	r3, #0
    5806:	d0c6      	beq.n	5796 <signal_poll_event+0x42>
    5808:	f854 7c04 	ldr.w	r7, [r4, #-4]
    580c:	b177      	cbz	r7, 582c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    580e:	f1a4 0914 	sub.w	r9, r4, #20
    5812:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    5816:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    581a:	f001 ff15 	bl	7648 <z_abort_timeout>
		twork->poll_result = 0;
    581e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    5822:	4649      	mov	r1, r9
    5824:	4638      	mov	r0, r7
    5826:	f002 fb9d 	bl	7f64 <k_work_submit_to_queue>
    582a:	e7e5      	b.n	57f8 <signal_poll_event+0xa4>
		poller->is_polling = false;
    582c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    582e:	e7b2      	b.n	5796 <signal_poll_event+0x42>
    5830:	0000a97d 	.word	0x0000a97d
    5834:	0000aa78 	.word	0x0000aa78
    5838:	00009c7a 	.word	0x00009c7a
    583c:	0000aa8e 	.word	0x0000aa8e

00005840 <z_impl_k_poll_signal_raise>:
{
    5840:	b570      	push	{r4, r5, r6, lr}
    5842:	4604      	mov	r4, r0
    5844:	460d      	mov	r5, r1
	__asm__ volatile(
    5846:	f04f 0320 	mov.w	r3, #32
    584a:	f3ef 8611 	mrs	r6, BASEPRI
    584e:	f383 8812 	msr	BASEPRI_MAX, r3
    5852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5856:	4821      	ldr	r0, [pc, #132]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    5858:	f001 fdac 	bl	73b4 <z_spin_lock_valid>
    585c:	b968      	cbnz	r0, 587a <z_impl_k_poll_signal_raise+0x3a>
    585e:	4a20      	ldr	r2, [pc, #128]	; (58e0 <z_impl_k_poll_signal_raise+0xa0>)
    5860:	4920      	ldr	r1, [pc, #128]	; (58e4 <z_impl_k_poll_signal_raise+0xa4>)
    5862:	4821      	ldr	r0, [pc, #132]	; (58e8 <z_impl_k_poll_signal_raise+0xa8>)
    5864:	2381      	movs	r3, #129	; 0x81
    5866:	f003 f9c4 	bl	8bf2 <printk>
    586a:	491c      	ldr	r1, [pc, #112]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    586c:	481f      	ldr	r0, [pc, #124]	; (58ec <z_impl_k_poll_signal_raise+0xac>)
    586e:	f003 f9c0 	bl	8bf2 <printk>
    5872:	481b      	ldr	r0, [pc, #108]	; (58e0 <z_impl_k_poll_signal_raise+0xa0>)
    5874:	2181      	movs	r1, #129	; 0x81
    5876:	f002 ffcd 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    587a:	4818      	ldr	r0, [pc, #96]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    587c:	f001 fdb8 	bl	73f0 <z_spin_lock_set_owner>
	return list->head == list;
    5880:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    5882:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    5884:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    5886:	4284      	cmp	r4, r0
    5888:	60a1      	str	r1, [r4, #8]
    588a:	d117      	bne.n	58bc <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    588c:	4813      	ldr	r0, [pc, #76]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    588e:	f001 fd9f 	bl	73d0 <z_spin_unlock_valid>
    5892:	b968      	cbnz	r0, 58b0 <z_impl_k_poll_signal_raise+0x70>
    5894:	4a12      	ldr	r2, [pc, #72]	; (58e0 <z_impl_k_poll_signal_raise+0xa0>)
    5896:	4916      	ldr	r1, [pc, #88]	; (58f0 <z_impl_k_poll_signal_raise+0xb0>)
    5898:	4813      	ldr	r0, [pc, #76]	; (58e8 <z_impl_k_poll_signal_raise+0xa8>)
    589a:	23ac      	movs	r3, #172	; 0xac
    589c:	f003 f9a9 	bl	8bf2 <printk>
    58a0:	490e      	ldr	r1, [pc, #56]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    58a2:	4814      	ldr	r0, [pc, #80]	; (58f4 <z_impl_k_poll_signal_raise+0xb4>)
    58a4:	f003 f9a5 	bl	8bf2 <printk>
    58a8:	480d      	ldr	r0, [pc, #52]	; (58e0 <z_impl_k_poll_signal_raise+0xa0>)
    58aa:	21ac      	movs	r1, #172	; 0xac
    58ac:	f002 ffb2 	bl	8814 <assert_post_action>
	__asm__ volatile(
    58b0:	f386 8811 	msr	BASEPRI, r6
    58b4:	f3bf 8f6f 	isb	sy
		return 0;
    58b8:	2400      	movs	r4, #0
    58ba:	e00d      	b.n	58d8 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    58bc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    58c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    58c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    58c4:	2300      	movs	r3, #0
	node->prev = NULL;
    58c6:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    58ca:	f7ff ff43 	bl	5754 <signal_poll_event>
	z_reschedule(&lock, key);
    58ce:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    58d0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    58d2:	4802      	ldr	r0, [pc, #8]	; (58dc <z_impl_k_poll_signal_raise+0x9c>)
    58d4:	f000 f9da 	bl	5c8c <z_reschedule>
}
    58d8:	4620      	mov	r0, r4
    58da:	bd70      	pop	{r4, r5, r6, pc}
    58dc:	20000c30 	.word	0x20000c30
    58e0:	00009f3d 	.word	0x00009f3d
    58e4:	00009f8f 	.word	0x00009f8f
    58e8:	00009c7a 	.word	0x00009c7a
    58ec:	00009fa4 	.word	0x00009fa4
    58f0:	00009f63 	.word	0x00009f63
    58f4:	00009f7a 	.word	0x00009f7a

000058f8 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
    58f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58fc:	4604      	mov	r4, r0
    58fe:	f89d a020 	ldrb.w	sl, [sp, #32]
    5902:	460e      	mov	r6, r1
    5904:	4690      	mov	r8, r2
    5906:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    5908:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    590c:	f04f 0320 	mov.w	r3, #32
    5910:	f3ef 8711 	mrs	r7, BASEPRI
    5914:	f383 8812 	msr	BASEPRI_MAX, r3
    5918:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    591c:	4628      	mov	r0, r5
    591e:	f001 fd49 	bl	73b4 <z_spin_lock_valid>
    5922:	b968      	cbnz	r0, 5940 <queue_insert+0x48>
    5924:	4a3b      	ldr	r2, [pc, #236]	; (5a14 <queue_insert+0x11c>)
    5926:	493c      	ldr	r1, [pc, #240]	; (5a18 <queue_insert+0x120>)
    5928:	483c      	ldr	r0, [pc, #240]	; (5a1c <queue_insert+0x124>)
    592a:	2381      	movs	r3, #129	; 0x81
    592c:	f003 f961 	bl	8bf2 <printk>
    5930:	483b      	ldr	r0, [pc, #236]	; (5a20 <queue_insert+0x128>)
    5932:	4629      	mov	r1, r5
    5934:	f003 f95d 	bl	8bf2 <printk>
    5938:	4836      	ldr	r0, [pc, #216]	; (5a14 <queue_insert+0x11c>)
    593a:	2181      	movs	r1, #129	; 0x81
    593c:	f002 ff6a 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5940:	4628      	mov	r0, r5
    5942:	f001 fd55 	bl	73f0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
    5946:	f1ba 0f00 	cmp.w	sl, #0
    594a:	d000      	beq.n	594e <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
    594c:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    594e:	f104 000c 	add.w	r0, r4, #12
    5952:	f000 ffeb 	bl	692c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    5956:	b158      	cbz	r0, 5970 <queue_insert+0x78>
    5958:	2400      	movs	r4, #0
    595a:	67c4      	str	r4, [r0, #124]	; 0x7c
    595c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    5960:	f000 fc34 	bl	61cc <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    5964:	4628      	mov	r0, r5
    5966:	4639      	mov	r1, r7
    5968:	f000 f990 	bl	5c8c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
    596c:	2000      	movs	r0, #0
    596e:	e01e      	b.n	59ae <queue_insert+0xb6>
	if (alloc) {
    5970:	f1b9 0f00 	cmp.w	r9, #0
    5974:	d02d      	beq.n	59d2 <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
    5976:	2108      	movs	r1, #8
    5978:	f002 fc26 	bl	81c8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    597c:	b9c8      	cbnz	r0, 59b2 <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    597e:	4628      	mov	r0, r5
    5980:	f001 fd26 	bl	73d0 <z_spin_unlock_valid>
    5984:	b968      	cbnz	r0, 59a2 <queue_insert+0xaa>
    5986:	4a23      	ldr	r2, [pc, #140]	; (5a14 <queue_insert+0x11c>)
    5988:	4926      	ldr	r1, [pc, #152]	; (5a24 <queue_insert+0x12c>)
    598a:	4824      	ldr	r0, [pc, #144]	; (5a1c <queue_insert+0x124>)
    598c:	23ac      	movs	r3, #172	; 0xac
    598e:	f003 f930 	bl	8bf2 <printk>
    5992:	4825      	ldr	r0, [pc, #148]	; (5a28 <queue_insert+0x130>)
    5994:	4629      	mov	r1, r5
    5996:	f003 f92c 	bl	8bf2 <printk>
    599a:	481e      	ldr	r0, [pc, #120]	; (5a14 <queue_insert+0x11c>)
    599c:	21ac      	movs	r1, #172	; 0xac
    599e:	f002 ff39 	bl	8814 <assert_post_action>
	__asm__ volatile(
    59a2:	f387 8811 	msr	BASEPRI, r7
    59a6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    59aa:	f06f 000b 	mvn.w	r0, #11
}
    59ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    59b2:	2301      	movs	r3, #1
		anode->data = data;
    59b4:	f8c0 8004 	str.w	r8, [r0, #4]
    59b8:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    59ba:	6803      	ldr	r3, [r0, #0]
    59bc:	f003 0303 	and.w	r3, r3, #3
    59c0:	b95e      	cbnz	r6, 59da <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
    59c2:	6822      	ldr	r2, [r4, #0]
    59c4:	4313      	orrs	r3, r2
    59c6:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    59c8:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    59ca:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    59cc:	b973      	cbnz	r3, 59ec <queue_insert+0xf4>
	list->tail = node;
    59ce:	6060      	str	r0, [r4, #4]
}
    59d0:	e00c      	b.n	59ec <queue_insert+0xf4>
	node->next_and_flags = flags;
    59d2:	f8c8 9000 	str.w	r9, [r8]
}
    59d6:	4640      	mov	r0, r8
    59d8:	e7ef      	b.n	59ba <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    59da:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    59dc:	f032 0203 	bics.w	r2, r2, #3
    59e0:	d110      	bne.n	5a04 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
    59e2:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    59e4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    59e6:	b93a      	cbnz	r2, 59f8 <queue_insert+0x100>
	list->head = node;
    59e8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    59ec:	2104      	movs	r1, #4
    59ee:	f104 0014 	add.w	r0, r4, #20
    59f2:	f003 fc49 	bl	9288 <z_handle_obj_poll_events>
    59f6:	e7b5      	b.n	5964 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    59f8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    59fa:	f003 0303 	and.w	r3, r3, #3
    59fe:	4303      	orrs	r3, r0
    5a00:	6013      	str	r3, [r2, #0]
    5a02:	e7e4      	b.n	59ce <queue_insert+0xd6>
    5a04:	4313      	orrs	r3, r2
    5a06:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    5a08:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    5a0a:	f003 0303 	and.w	r3, r3, #3
    5a0e:	4303      	orrs	r3, r0
    5a10:	6033      	str	r3, [r6, #0]
}
    5a12:	e7eb      	b.n	59ec <queue_insert+0xf4>
    5a14:	00009f3d 	.word	0x00009f3d
    5a18:	00009f8f 	.word	0x00009f8f
    5a1c:	00009c7a 	.word	0x00009c7a
    5a20:	00009fa4 	.word	0x00009fa4
    5a24:	00009f63 	.word	0x00009f63
    5a28:	00009f7a 	.word	0x00009f7a

00005a2c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    5a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5a30:	4606      	mov	r6, r0
    5a32:	4690      	mov	r8, r2
    5a34:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    5a36:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5a3a:	f04f 0320 	mov.w	r3, #32
    5a3e:	f3ef 8711 	mrs	r7, BASEPRI
    5a42:	f383 8812 	msr	BASEPRI_MAX, r3
    5a46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a4a:	4628      	mov	r0, r5
    5a4c:	f001 fcb2 	bl	73b4 <z_spin_lock_valid>
    5a50:	b968      	cbnz	r0, 5a6e <z_impl_k_queue_get+0x42>
    5a52:	4a25      	ldr	r2, [pc, #148]	; (5ae8 <z_impl_k_queue_get+0xbc>)
    5a54:	4925      	ldr	r1, [pc, #148]	; (5aec <z_impl_k_queue_get+0xc0>)
    5a56:	4826      	ldr	r0, [pc, #152]	; (5af0 <z_impl_k_queue_get+0xc4>)
    5a58:	2381      	movs	r3, #129	; 0x81
    5a5a:	f003 f8ca 	bl	8bf2 <printk>
    5a5e:	4825      	ldr	r0, [pc, #148]	; (5af4 <z_impl_k_queue_get+0xc8>)
    5a60:	4629      	mov	r1, r5
    5a62:	f003 f8c6 	bl	8bf2 <printk>
    5a66:	4820      	ldr	r0, [pc, #128]	; (5ae8 <z_impl_k_queue_get+0xbc>)
    5a68:	2181      	movs	r1, #129	; 0x81
    5a6a:	f002 fed3 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5a6e:	4628      	mov	r0, r5
    5a70:	f001 fcbe 	bl	73f0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
    5a74:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    5a76:	b334      	cbz	r4, 5ac6 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    5a78:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    5a7a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    5a7c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    5a80:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    5a82:	4620      	mov	r0, r4
	list->head = node;
    5a84:	6033      	str	r3, [r6, #0]
	list->tail = node;
    5a86:	bf08      	it	eq
    5a88:	6073      	streq	r3, [r6, #4]
    5a8a:	2101      	movs	r1, #1
    5a8c:	f003 fc0a 	bl	92a4 <z_queue_node_peek>
    5a90:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a92:	4628      	mov	r0, r5
    5a94:	f001 fc9c 	bl	73d0 <z_spin_unlock_valid>
    5a98:	b968      	cbnz	r0, 5ab6 <z_impl_k_queue_get+0x8a>
    5a9a:	4a13      	ldr	r2, [pc, #76]	; (5ae8 <z_impl_k_queue_get+0xbc>)
    5a9c:	4916      	ldr	r1, [pc, #88]	; (5af8 <z_impl_k_queue_get+0xcc>)
    5a9e:	4814      	ldr	r0, [pc, #80]	; (5af0 <z_impl_k_queue_get+0xc4>)
    5aa0:	23ac      	movs	r3, #172	; 0xac
    5aa2:	f003 f8a6 	bl	8bf2 <printk>
    5aa6:	4815      	ldr	r0, [pc, #84]	; (5afc <z_impl_k_queue_get+0xd0>)
    5aa8:	4629      	mov	r1, r5
    5aaa:	f003 f8a2 	bl	8bf2 <printk>
    5aae:	480e      	ldr	r0, [pc, #56]	; (5ae8 <z_impl_k_queue_get+0xbc>)
    5ab0:	21ac      	movs	r1, #172	; 0xac
    5ab2:	f002 feaf 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5ab6:	f387 8811 	msr	BASEPRI, r7
    5aba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    5abe:	4620      	mov	r0, r4
    5ac0:	b003      	add	sp, #12
    5ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5ac6:	ea58 0309 	orrs.w	r3, r8, r9
    5aca:	d0e2      	beq.n	5a92 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    5acc:	e9cd 8900 	strd	r8, r9, [sp]
    5ad0:	f106 020c 	add.w	r2, r6, #12
    5ad4:	4639      	mov	r1, r7
    5ad6:	4628      	mov	r0, r5
    5ad8:	f000 fd2a 	bl	6530 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    5adc:	2800      	cmp	r0, #0
    5ade:	d1ee      	bne.n	5abe <z_impl_k_queue_get+0x92>
    5ae0:	4b07      	ldr	r3, [pc, #28]	; (5b00 <z_impl_k_queue_get+0xd4>)
    5ae2:	689b      	ldr	r3, [r3, #8]
    5ae4:	695c      	ldr	r4, [r3, #20]
    5ae6:	e7ea      	b.n	5abe <z_impl_k_queue_get+0x92>
    5ae8:	00009f3d 	.word	0x00009f3d
    5aec:	00009f8f 	.word	0x00009f8f
    5af0:	00009c7a 	.word	0x00009c7a
    5af4:	00009fa4 	.word	0x00009fa4
    5af8:	00009f63 	.word	0x00009f63
    5afc:	00009f7a 	.word	0x00009f7a
    5b00:	20000c04 	.word	0x20000c04

00005b04 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5b04:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    5b06:	4c08      	ldr	r4, [pc, #32]	; (5b28 <z_reset_time_slice+0x24>)
    5b08:	6823      	ldr	r3, [r4, #0]
    5b0a:	b15b      	cbz	r3, 5b24 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5b0c:	f7fe f8e2 	bl	3cd4 <sys_clock_elapsed>
    5b10:	4603      	mov	r3, r0
    5b12:	6820      	ldr	r0, [r4, #0]
    5b14:	4a05      	ldr	r2, [pc, #20]	; (5b2c <z_reset_time_slice+0x28>)
    5b16:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    5b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5b1c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5b1e:	2100      	movs	r1, #0
    5b20:	f001 be28 	b.w	7774 <z_set_timeout_expiry>
}
    5b24:	bd10      	pop	{r4, pc}
    5b26:	bf00      	nop
    5b28:	20000c40 	.word	0x20000c40
    5b2c:	20000c04 	.word	0x20000c04

00005b30 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b32:	4604      	mov	r4, r0
    5b34:	460d      	mov	r5, r1
	__asm__ volatile(
    5b36:	f04f 0320 	mov.w	r3, #32
    5b3a:	f3ef 8611 	mrs	r6, BASEPRI
    5b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b46:	4823      	ldr	r0, [pc, #140]	; (5bd4 <k_sched_time_slice_set+0xa4>)
    5b48:	f001 fc34 	bl	73b4 <z_spin_lock_valid>
    5b4c:	b968      	cbnz	r0, 5b6a <k_sched_time_slice_set+0x3a>
    5b4e:	4a22      	ldr	r2, [pc, #136]	; (5bd8 <k_sched_time_slice_set+0xa8>)
    5b50:	4922      	ldr	r1, [pc, #136]	; (5bdc <k_sched_time_slice_set+0xac>)
    5b52:	4823      	ldr	r0, [pc, #140]	; (5be0 <k_sched_time_slice_set+0xb0>)
    5b54:	2381      	movs	r3, #129	; 0x81
    5b56:	f003 f84c 	bl	8bf2 <printk>
    5b5a:	491e      	ldr	r1, [pc, #120]	; (5bd4 <k_sched_time_slice_set+0xa4>)
    5b5c:	4821      	ldr	r0, [pc, #132]	; (5be4 <k_sched_time_slice_set+0xb4>)
    5b5e:	f003 f848 	bl	8bf2 <printk>
    5b62:	481d      	ldr	r0, [pc, #116]	; (5bd8 <k_sched_time_slice_set+0xa8>)
    5b64:	2181      	movs	r1, #129	; 0x81
    5b66:	f002 fe55 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b6a:	481a      	ldr	r0, [pc, #104]	; (5bd4 <k_sched_time_slice_set+0xa4>)
    5b6c:	f001 fc40 	bl	73f0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5b70:	4b1d      	ldr	r3, [pc, #116]	; (5be8 <k_sched_time_slice_set+0xb8>)
    5b72:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5b74:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5b78:	f240 30e7 	movw	r0, #999	; 0x3e7
    5b7c:	2100      	movs	r1, #0
    5b7e:	611a      	str	r2, [r3, #16]
    5b80:	fbe7 0104 	umlal	r0, r1, r7, r4
    5b84:	2300      	movs	r3, #0
    5b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5b8a:	f7fa fab9 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5b8e:	2c00      	cmp	r4, #0
    5b90:	4b16      	ldr	r3, [pc, #88]	; (5bec <k_sched_time_slice_set+0xbc>)
    5b92:	dc1b      	bgt.n	5bcc <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5b94:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5b96:	4b16      	ldr	r3, [pc, #88]	; (5bf0 <k_sched_time_slice_set+0xc0>)
    5b98:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5b9a:	f7ff ffb3 	bl	5b04 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b9e:	480d      	ldr	r0, [pc, #52]	; (5bd4 <k_sched_time_slice_set+0xa4>)
    5ba0:	f001 fc16 	bl	73d0 <z_spin_unlock_valid>
    5ba4:	b968      	cbnz	r0, 5bc2 <k_sched_time_slice_set+0x92>
    5ba6:	4a0c      	ldr	r2, [pc, #48]	; (5bd8 <k_sched_time_slice_set+0xa8>)
    5ba8:	4912      	ldr	r1, [pc, #72]	; (5bf4 <k_sched_time_slice_set+0xc4>)
    5baa:	480d      	ldr	r0, [pc, #52]	; (5be0 <k_sched_time_slice_set+0xb0>)
    5bac:	23ac      	movs	r3, #172	; 0xac
    5bae:	f003 f820 	bl	8bf2 <printk>
    5bb2:	4908      	ldr	r1, [pc, #32]	; (5bd4 <k_sched_time_slice_set+0xa4>)
    5bb4:	4810      	ldr	r0, [pc, #64]	; (5bf8 <k_sched_time_slice_set+0xc8>)
    5bb6:	f003 f81c 	bl	8bf2 <printk>
    5bba:	4807      	ldr	r0, [pc, #28]	; (5bd8 <k_sched_time_slice_set+0xa8>)
    5bbc:	21ac      	movs	r1, #172	; 0xac
    5bbe:	f002 fe29 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5bc2:	f386 8811 	msr	BASEPRI, r6
    5bc6:	f3bf 8f6f 	isb	sy
	}
}
    5bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5bcc:	2802      	cmp	r0, #2
    5bce:	bfb8      	it	lt
    5bd0:	2002      	movlt	r0, #2
    5bd2:	e7df      	b.n	5b94 <k_sched_time_slice_set+0x64>
    5bd4:	20000c38 	.word	0x20000c38
    5bd8:	00009f3d 	.word	0x00009f3d
    5bdc:	00009f8f 	.word	0x00009f8f
    5be0:	00009c7a 	.word	0x00009c7a
    5be4:	00009fa4 	.word	0x00009fa4
    5be8:	20000c04 	.word	0x20000c04
    5bec:	20000c40 	.word	0x20000c40
    5bf0:	20000c3c 	.word	0x20000c3c
    5bf4:	00009f63 	.word	0x00009f63
    5bf8:	00009f7a 	.word	0x00009f7a

00005bfc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5bfc:	b538      	push	{r3, r4, r5, lr}
    5bfe:	4604      	mov	r4, r0
	__asm__ volatile(
    5c00:	f04f 0320 	mov.w	r3, #32
    5c04:	f3ef 8511 	mrs	r5, BASEPRI
    5c08:	f383 8812 	msr	BASEPRI_MAX, r3
    5c0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c10:	4817      	ldr	r0, [pc, #92]	; (5c70 <z_unpend_thread_no_timeout+0x74>)
    5c12:	f001 fbcf 	bl	73b4 <z_spin_lock_valid>
    5c16:	b968      	cbnz	r0, 5c34 <z_unpend_thread_no_timeout+0x38>
    5c18:	4a16      	ldr	r2, [pc, #88]	; (5c74 <z_unpend_thread_no_timeout+0x78>)
    5c1a:	4917      	ldr	r1, [pc, #92]	; (5c78 <z_unpend_thread_no_timeout+0x7c>)
    5c1c:	4817      	ldr	r0, [pc, #92]	; (5c7c <z_unpend_thread_no_timeout+0x80>)
    5c1e:	2381      	movs	r3, #129	; 0x81
    5c20:	f002 ffe7 	bl	8bf2 <printk>
    5c24:	4912      	ldr	r1, [pc, #72]	; (5c70 <z_unpend_thread_no_timeout+0x74>)
    5c26:	4816      	ldr	r0, [pc, #88]	; (5c80 <z_unpend_thread_no_timeout+0x84>)
    5c28:	f002 ffe3 	bl	8bf2 <printk>
    5c2c:	4811      	ldr	r0, [pc, #68]	; (5c74 <z_unpend_thread_no_timeout+0x78>)
    5c2e:	2181      	movs	r1, #129	; 0x81
    5c30:	f002 fdf0 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5c34:	480e      	ldr	r0, [pc, #56]	; (5c70 <z_unpend_thread_no_timeout+0x74>)
    5c36:	f001 fbdb 	bl	73f0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    5c3a:	4620      	mov	r0, r4
    5c3c:	f000 f900 	bl	5e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c40:	480b      	ldr	r0, [pc, #44]	; (5c70 <z_unpend_thread_no_timeout+0x74>)
    5c42:	f001 fbc5 	bl	73d0 <z_spin_unlock_valid>
    5c46:	b968      	cbnz	r0, 5c64 <z_unpend_thread_no_timeout+0x68>
    5c48:	4a0a      	ldr	r2, [pc, #40]	; (5c74 <z_unpend_thread_no_timeout+0x78>)
    5c4a:	490e      	ldr	r1, [pc, #56]	; (5c84 <z_unpend_thread_no_timeout+0x88>)
    5c4c:	480b      	ldr	r0, [pc, #44]	; (5c7c <z_unpend_thread_no_timeout+0x80>)
    5c4e:	23ac      	movs	r3, #172	; 0xac
    5c50:	f002 ffcf 	bl	8bf2 <printk>
    5c54:	4906      	ldr	r1, [pc, #24]	; (5c70 <z_unpend_thread_no_timeout+0x74>)
    5c56:	480c      	ldr	r0, [pc, #48]	; (5c88 <z_unpend_thread_no_timeout+0x8c>)
    5c58:	f002 ffcb 	bl	8bf2 <printk>
    5c5c:	4805      	ldr	r0, [pc, #20]	; (5c74 <z_unpend_thread_no_timeout+0x78>)
    5c5e:	21ac      	movs	r1, #172	; 0xac
    5c60:	f002 fdd8 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5c64:	f385 8811 	msr	BASEPRI, r5
    5c68:	f3bf 8f6f 	isb	sy
	}
}
    5c6c:	bd38      	pop	{r3, r4, r5, pc}
    5c6e:	bf00      	nop
    5c70:	20000c38 	.word	0x20000c38
    5c74:	00009f3d 	.word	0x00009f3d
    5c78:	00009f8f 	.word	0x00009f8f
    5c7c:	00009c7a 	.word	0x00009c7a
    5c80:	00009fa4 	.word	0x00009fa4
    5c84:	00009f63 	.word	0x00009f63
    5c88:	00009f7a 	.word	0x00009f7a

00005c8c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5c8c:	b538      	push	{r3, r4, r5, lr}
    5c8e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5c90:	460d      	mov	r5, r1
    5c92:	b9e9      	cbnz	r1, 5cd0 <z_reschedule+0x44>
    5c94:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    5c98:	b9d3      	cbnz	r3, 5cd0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    5c9a:	4b19      	ldr	r3, [pc, #100]	; (5d00 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    5c9c:	69da      	ldr	r2, [r3, #28]
    5c9e:	689b      	ldr	r3, [r3, #8]
    5ca0:	429a      	cmp	r2, r3
    5ca2:	d015      	beq.n	5cd0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ca4:	f001 fb94 	bl	73d0 <z_spin_unlock_valid>
    5ca8:	b968      	cbnz	r0, 5cc6 <z_reschedule+0x3a>
    5caa:	4a16      	ldr	r2, [pc, #88]	; (5d04 <z_reschedule+0x78>)
    5cac:	4916      	ldr	r1, [pc, #88]	; (5d08 <z_reschedule+0x7c>)
    5cae:	4817      	ldr	r0, [pc, #92]	; (5d0c <z_reschedule+0x80>)
    5cb0:	23c3      	movs	r3, #195	; 0xc3
    5cb2:	f002 ff9e 	bl	8bf2 <printk>
    5cb6:	4816      	ldr	r0, [pc, #88]	; (5d10 <z_reschedule+0x84>)
    5cb8:	4621      	mov	r1, r4
    5cba:	f002 ff9a 	bl	8bf2 <printk>
    5cbe:	4811      	ldr	r0, [pc, #68]	; (5d04 <z_reschedule+0x78>)
    5cc0:	21c3      	movs	r1, #195	; 0xc3
    5cc2:	f002 fda7 	bl	8814 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5cca:	2000      	movs	r0, #0
    5ccc:	f7fc b8ea 	b.w	1ea4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cd0:	4620      	mov	r0, r4
    5cd2:	f001 fb7d 	bl	73d0 <z_spin_unlock_valid>
    5cd6:	b968      	cbnz	r0, 5cf4 <z_reschedule+0x68>
    5cd8:	4a0a      	ldr	r2, [pc, #40]	; (5d04 <z_reschedule+0x78>)
    5cda:	490b      	ldr	r1, [pc, #44]	; (5d08 <z_reschedule+0x7c>)
    5cdc:	480b      	ldr	r0, [pc, #44]	; (5d0c <z_reschedule+0x80>)
    5cde:	23ac      	movs	r3, #172	; 0xac
    5ce0:	f002 ff87 	bl	8bf2 <printk>
    5ce4:	480a      	ldr	r0, [pc, #40]	; (5d10 <z_reschedule+0x84>)
    5ce6:	4621      	mov	r1, r4
    5ce8:	f002 ff83 	bl	8bf2 <printk>
    5cec:	4805      	ldr	r0, [pc, #20]	; (5d04 <z_reschedule+0x78>)
    5cee:	21ac      	movs	r1, #172	; 0xac
    5cf0:	f002 fd90 	bl	8814 <assert_post_action>
    5cf4:	f385 8811 	msr	BASEPRI, r5
    5cf8:	f3bf 8f6f 	isb	sy
    5cfc:	bd38      	pop	{r3, r4, r5, pc}
    5cfe:	bf00      	nop
    5d00:	20000c04 	.word	0x20000c04
    5d04:	00009f3d 	.word	0x00009f3d
    5d08:	00009f63 	.word	0x00009f63
    5d0c:	00009c7a 	.word	0x00009c7a
    5d10:	00009f7a 	.word	0x00009f7a

00005d14 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5d14:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5d16:	f04f 0320 	mov.w	r3, #32
    5d1a:	f3ef 8511 	mrs	r5, BASEPRI
    5d1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d26:	4829      	ldr	r0, [pc, #164]	; (5dcc <k_sched_lock+0xb8>)
    5d28:	f001 fb44 	bl	73b4 <z_spin_lock_valid>
    5d2c:	b968      	cbnz	r0, 5d4a <k_sched_lock+0x36>
    5d2e:	4a28      	ldr	r2, [pc, #160]	; (5dd0 <k_sched_lock+0xbc>)
    5d30:	4928      	ldr	r1, [pc, #160]	; (5dd4 <k_sched_lock+0xc0>)
    5d32:	4829      	ldr	r0, [pc, #164]	; (5dd8 <k_sched_lock+0xc4>)
    5d34:	2381      	movs	r3, #129	; 0x81
    5d36:	f002 ff5c 	bl	8bf2 <printk>
    5d3a:	4924      	ldr	r1, [pc, #144]	; (5dcc <k_sched_lock+0xb8>)
    5d3c:	4827      	ldr	r0, [pc, #156]	; (5ddc <k_sched_lock+0xc8>)
    5d3e:	f002 ff58 	bl	8bf2 <printk>
    5d42:	4823      	ldr	r0, [pc, #140]	; (5dd0 <k_sched_lock+0xbc>)
    5d44:	2181      	movs	r1, #129	; 0x81
    5d46:	f002 fd65 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d4a:	4820      	ldr	r0, [pc, #128]	; (5dcc <k_sched_lock+0xb8>)
    5d4c:	f001 fb50 	bl	73f0 <z_spin_lock_set_owner>
    5d50:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5d54:	b163      	cbz	r3, 5d70 <k_sched_lock+0x5c>
    5d56:	4922      	ldr	r1, [pc, #136]	; (5de0 <k_sched_lock+0xcc>)
    5d58:	4a22      	ldr	r2, [pc, #136]	; (5de4 <k_sched_lock+0xd0>)
    5d5a:	481f      	ldr	r0, [pc, #124]	; (5dd8 <k_sched_lock+0xc4>)
    5d5c:	23fd      	movs	r3, #253	; 0xfd
    5d5e:	f002 ff48 	bl	8bf2 <printk>
    5d62:	4821      	ldr	r0, [pc, #132]	; (5de8 <k_sched_lock+0xd4>)
    5d64:	f002 ff45 	bl	8bf2 <printk>
    5d68:	481e      	ldr	r0, [pc, #120]	; (5de4 <k_sched_lock+0xd0>)
    5d6a:	21fd      	movs	r1, #253	; 0xfd
    5d6c:	f002 fd52 	bl	8814 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5d70:	4c1e      	ldr	r4, [pc, #120]	; (5dec <k_sched_lock+0xd8>)
    5d72:	68a2      	ldr	r2, [r4, #8]
    5d74:	7bd2      	ldrb	r2, [r2, #15]
    5d76:	2a01      	cmp	r2, #1
    5d78:	d10c      	bne.n	5d94 <k_sched_lock+0x80>
    5d7a:	491d      	ldr	r1, [pc, #116]	; (5df0 <k_sched_lock+0xdc>)
    5d7c:	4a19      	ldr	r2, [pc, #100]	; (5de4 <k_sched_lock+0xd0>)
    5d7e:	4816      	ldr	r0, [pc, #88]	; (5dd8 <k_sched_lock+0xc4>)
    5d80:	23fe      	movs	r3, #254	; 0xfe
    5d82:	f002 ff36 	bl	8bf2 <printk>
    5d86:	4818      	ldr	r0, [pc, #96]	; (5de8 <k_sched_lock+0xd4>)
    5d88:	f002 ff33 	bl	8bf2 <printk>
    5d8c:	4815      	ldr	r0, [pc, #84]	; (5de4 <k_sched_lock+0xd0>)
    5d8e:	21fe      	movs	r1, #254	; 0xfe
    5d90:	f002 fd40 	bl	8814 <assert_post_action>
	--_current->base.sched_locked;
    5d94:	68a2      	ldr	r2, [r4, #8]
    5d96:	7bd3      	ldrb	r3, [r2, #15]
    5d98:	3b01      	subs	r3, #1
    5d9a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d9c:	480b      	ldr	r0, [pc, #44]	; (5dcc <k_sched_lock+0xb8>)
    5d9e:	f001 fb17 	bl	73d0 <z_spin_unlock_valid>
    5da2:	b968      	cbnz	r0, 5dc0 <k_sched_lock+0xac>
    5da4:	4a0a      	ldr	r2, [pc, #40]	; (5dd0 <k_sched_lock+0xbc>)
    5da6:	4913      	ldr	r1, [pc, #76]	; (5df4 <k_sched_lock+0xe0>)
    5da8:	480b      	ldr	r0, [pc, #44]	; (5dd8 <k_sched_lock+0xc4>)
    5daa:	23ac      	movs	r3, #172	; 0xac
    5dac:	f002 ff21 	bl	8bf2 <printk>
    5db0:	4906      	ldr	r1, [pc, #24]	; (5dcc <k_sched_lock+0xb8>)
    5db2:	4811      	ldr	r0, [pc, #68]	; (5df8 <k_sched_lock+0xe4>)
    5db4:	f002 ff1d 	bl	8bf2 <printk>
    5db8:	4805      	ldr	r0, [pc, #20]	; (5dd0 <k_sched_lock+0xbc>)
    5dba:	21ac      	movs	r1, #172	; 0xac
    5dbc:	f002 fd2a 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5dc0:	f385 8811 	msr	BASEPRI, r5
    5dc4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5dc8:	bd38      	pop	{r3, r4, r5, pc}
    5dca:	bf00      	nop
    5dcc:	20000c38 	.word	0x20000c38
    5dd0:	00009f3d 	.word	0x00009f3d
    5dd4:	00009f8f 	.word	0x00009f8f
    5dd8:	00009c7a 	.word	0x00009c7a
    5ddc:	00009fa4 	.word	0x00009fa4
    5de0:	0000a8d0 	.word	0x0000a8d0
    5de4:	0000a91e 	.word	0x0000a91e
    5de8:	0000a949 	.word	0x0000a949
    5dec:	20000c04 	.word	0x20000c04
    5df0:	0000a94c 	.word	0x0000a94c
    5df4:	00009f63 	.word	0x00009f63
    5df8:	00009f7a 	.word	0x00009f7a

00005dfc <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5dfc:	4b0c      	ldr	r3, [pc, #48]	; (5e30 <z_priq_dumb_remove+0x34>)
    5dfe:	4299      	cmp	r1, r3
{
    5e00:	b510      	push	{r4, lr}
    5e02:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5e04:	d10b      	bne.n	5e1e <z_priq_dumb_remove+0x22>
    5e06:	490b      	ldr	r1, [pc, #44]	; (5e34 <z_priq_dumb_remove+0x38>)
    5e08:	480b      	ldr	r0, [pc, #44]	; (5e38 <z_priq_dumb_remove+0x3c>)
    5e0a:	4a0c      	ldr	r2, [pc, #48]	; (5e3c <z_priq_dumb_remove+0x40>)
    5e0c:	f240 33e7 	movw	r3, #999	; 0x3e7
    5e10:	f002 feef 	bl	8bf2 <printk>
    5e14:	4809      	ldr	r0, [pc, #36]	; (5e3c <z_priq_dumb_remove+0x40>)
    5e16:	f240 31e7 	movw	r1, #999	; 0x3e7
    5e1a:	f002 fcfb 	bl	8814 <assert_post_action>
	sys_dnode_t *const next = node->next;
    5e1e:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    5e22:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5e24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5e26:	2300      	movs	r3, #0
	node->prev = NULL;
    5e28:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5e2c:	bd10      	pop	{r4, pc}
    5e2e:	bf00      	nop
    5e30:	20000410 	.word	0x20000410
    5e34:	0000aacf 	.word	0x0000aacf
    5e38:	00009c7a 	.word	0x00009c7a
    5e3c:	0000aaad 	.word	0x0000aaad

00005e40 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5e40:	6883      	ldr	r3, [r0, #8]
{
    5e42:	b510      	push	{r4, lr}
    5e44:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5e46:	b95b      	cbnz	r3, 5e60 <unpend_thread_no_timeout+0x20>
    5e48:	490b      	ldr	r1, [pc, #44]	; (5e78 <unpend_thread_no_timeout+0x38>)
    5e4a:	480c      	ldr	r0, [pc, #48]	; (5e7c <unpend_thread_no_timeout+0x3c>)
    5e4c:	4a0c      	ldr	r2, [pc, #48]	; (5e80 <unpend_thread_no_timeout+0x40>)
    5e4e:	f240 2383 	movw	r3, #643	; 0x283
    5e52:	f002 fece 	bl	8bf2 <printk>
    5e56:	480a      	ldr	r0, [pc, #40]	; (5e80 <unpend_thread_no_timeout+0x40>)
    5e58:	f240 2183 	movw	r1, #643	; 0x283
    5e5c:	f002 fcda 	bl	8814 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5e60:	68a0      	ldr	r0, [r4, #8]
    5e62:	4621      	mov	r1, r4
    5e64:	f7ff ffca 	bl	5dfc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5e68:	7b63      	ldrb	r3, [r4, #13]
    5e6a:	f023 0302 	bic.w	r3, r3, #2
    5e6e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5e70:	2300      	movs	r3, #0
    5e72:	60a3      	str	r3, [r4, #8]
}
    5e74:	bd10      	pop	{r4, pc}
    5e76:	bf00      	nop
    5e78:	0000aaf0 	.word	0x0000aaf0
    5e7c:	00009c7a 	.word	0x00009c7a
    5e80:	0000aaad 	.word	0x0000aaad

00005e84 <z_unpend_thread>:
{
    5e84:	b538      	push	{r3, r4, r5, lr}
    5e86:	4604      	mov	r4, r0
	__asm__ volatile(
    5e88:	f04f 0320 	mov.w	r3, #32
    5e8c:	f3ef 8511 	mrs	r5, BASEPRI
    5e90:	f383 8812 	msr	BASEPRI_MAX, r3
    5e94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e98:	4819      	ldr	r0, [pc, #100]	; (5f00 <z_unpend_thread+0x7c>)
    5e9a:	f001 fa8b 	bl	73b4 <z_spin_lock_valid>
    5e9e:	b968      	cbnz	r0, 5ebc <z_unpend_thread+0x38>
    5ea0:	4a18      	ldr	r2, [pc, #96]	; (5f04 <z_unpend_thread+0x80>)
    5ea2:	4919      	ldr	r1, [pc, #100]	; (5f08 <z_unpend_thread+0x84>)
    5ea4:	4819      	ldr	r0, [pc, #100]	; (5f0c <z_unpend_thread+0x88>)
    5ea6:	2381      	movs	r3, #129	; 0x81
    5ea8:	f002 fea3 	bl	8bf2 <printk>
    5eac:	4914      	ldr	r1, [pc, #80]	; (5f00 <z_unpend_thread+0x7c>)
    5eae:	4818      	ldr	r0, [pc, #96]	; (5f10 <z_unpend_thread+0x8c>)
    5eb0:	f002 fe9f 	bl	8bf2 <printk>
    5eb4:	4813      	ldr	r0, [pc, #76]	; (5f04 <z_unpend_thread+0x80>)
    5eb6:	2181      	movs	r1, #129	; 0x81
    5eb8:	f002 fcac 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    5ebc:	4810      	ldr	r0, [pc, #64]	; (5f00 <z_unpend_thread+0x7c>)
    5ebe:	f001 fa97 	bl	73f0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    5ec2:	4620      	mov	r0, r4
    5ec4:	f7ff ffbc 	bl	5e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ec8:	480d      	ldr	r0, [pc, #52]	; (5f00 <z_unpend_thread+0x7c>)
    5eca:	f001 fa81 	bl	73d0 <z_spin_unlock_valid>
    5ece:	b968      	cbnz	r0, 5eec <z_unpend_thread+0x68>
    5ed0:	4a0c      	ldr	r2, [pc, #48]	; (5f04 <z_unpend_thread+0x80>)
    5ed2:	4910      	ldr	r1, [pc, #64]	; (5f14 <z_unpend_thread+0x90>)
    5ed4:	480d      	ldr	r0, [pc, #52]	; (5f0c <z_unpend_thread+0x88>)
    5ed6:	23ac      	movs	r3, #172	; 0xac
    5ed8:	f002 fe8b 	bl	8bf2 <printk>
    5edc:	4908      	ldr	r1, [pc, #32]	; (5f00 <z_unpend_thread+0x7c>)
    5ede:	480e      	ldr	r0, [pc, #56]	; (5f18 <z_unpend_thread+0x94>)
    5ee0:	f002 fe87 	bl	8bf2 <printk>
    5ee4:	4807      	ldr	r0, [pc, #28]	; (5f04 <z_unpend_thread+0x80>)
    5ee6:	21ac      	movs	r1, #172	; 0xac
    5ee8:	f002 fc94 	bl	8814 <assert_post_action>
	__asm__ volatile(
    5eec:	f385 8811 	msr	BASEPRI, r5
    5ef0:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5ef4:	f104 0018 	add.w	r0, r4, #24
}
    5ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5efc:	f001 bba4 	b.w	7648 <z_abort_timeout>
    5f00:	20000c38 	.word	0x20000c38
    5f04:	00009f3d 	.word	0x00009f3d
    5f08:	00009f8f 	.word	0x00009f8f
    5f0c:	00009c7a 	.word	0x00009c7a
    5f10:	00009fa4 	.word	0x00009fa4
    5f14:	00009f63 	.word	0x00009f63
    5f18:	00009f7a 	.word	0x00009f7a

00005f1c <update_cache>:
{
    5f1c:	b538      	push	{r3, r4, r5, lr}
    5f1e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5f20:	4814      	ldr	r0, [pc, #80]	; (5f74 <update_cache+0x58>)
    5f22:	4d15      	ldr	r5, [pc, #84]	; (5f78 <update_cache+0x5c>)
    5f24:	f003 f9f8 	bl	9318 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5f28:	4604      	mov	r4, r0
    5f2a:	b900      	cbnz	r0, 5f2e <update_cache+0x12>
    5f2c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5f2e:	b9ca      	cbnz	r2, 5f64 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5f30:	68ab      	ldr	r3, [r5, #8]
    5f32:	b963      	cbnz	r3, 5f4e <update_cache+0x32>
    5f34:	4911      	ldr	r1, [pc, #68]	; (5f7c <update_cache+0x60>)
    5f36:	4a12      	ldr	r2, [pc, #72]	; (5f80 <update_cache+0x64>)
    5f38:	4812      	ldr	r0, [pc, #72]	; (5f84 <update_cache+0x68>)
    5f3a:	2389      	movs	r3, #137	; 0x89
    5f3c:	f002 fe59 	bl	8bf2 <printk>
    5f40:	4811      	ldr	r0, [pc, #68]	; (5f88 <update_cache+0x6c>)
    5f42:	f002 fe56 	bl	8bf2 <printk>
    5f46:	480e      	ldr	r0, [pc, #56]	; (5f80 <update_cache+0x64>)
    5f48:	2189      	movs	r1, #137	; 0x89
    5f4a:	f002 fc63 	bl	8814 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5f4e:	68ab      	ldr	r3, [r5, #8]
    5f50:	7b5a      	ldrb	r2, [r3, #13]
    5f52:	06d2      	lsls	r2, r2, #27
    5f54:	d106      	bne.n	5f64 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5f56:	69a2      	ldr	r2, [r4, #24]
    5f58:	b922      	cbnz	r2, 5f64 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5f5a:	89da      	ldrh	r2, [r3, #14]
    5f5c:	2a7f      	cmp	r2, #127	; 0x7f
    5f5e:	d901      	bls.n	5f64 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5f60:	61eb      	str	r3, [r5, #28]
}
    5f62:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5f64:	68ab      	ldr	r3, [r5, #8]
    5f66:	42a3      	cmp	r3, r4
    5f68:	d001      	beq.n	5f6e <update_cache+0x52>
			z_reset_time_slice();
    5f6a:	f7ff fdcb 	bl	5b04 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5f6e:	61ec      	str	r4, [r5, #28]
}
    5f70:	e7f7      	b.n	5f62 <update_cache+0x46>
    5f72:	bf00      	nop
    5f74:	20000c24 	.word	0x20000c24
    5f78:	20000c04 	.word	0x20000c04
    5f7c:	0000ab07 	.word	0x0000ab07
    5f80:	0000aaad 	.word	0x0000aaad
    5f84:	00009c7a 	.word	0x00009c7a
    5f88:	0000a949 	.word	0x0000a949

00005f8c <move_thread_to_end_of_prio_q>:
{
    5f8c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5f8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5f92:	7b43      	ldrb	r3, [r0, #13]
    5f94:	2a00      	cmp	r2, #0
{
    5f96:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5f98:	da06      	bge.n	5fa8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5fa0:	4601      	mov	r1, r0
    5fa2:	481f      	ldr	r0, [pc, #124]	; (6020 <move_thread_to_end_of_prio_q+0x94>)
    5fa4:	f7ff ff2a 	bl	5dfc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5fa8:	7b63      	ldrb	r3, [r4, #13]
    5faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5fae:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5fb0:	4b1c      	ldr	r3, [pc, #112]	; (6024 <move_thread_to_end_of_prio_q+0x98>)
    5fb2:	429c      	cmp	r4, r3
    5fb4:	d109      	bne.n	5fca <move_thread_to_end_of_prio_q+0x3e>
    5fb6:	491c      	ldr	r1, [pc, #112]	; (6028 <move_thread_to_end_of_prio_q+0x9c>)
    5fb8:	481c      	ldr	r0, [pc, #112]	; (602c <move_thread_to_end_of_prio_q+0xa0>)
    5fba:	4a1d      	ldr	r2, [pc, #116]	; (6030 <move_thread_to_end_of_prio_q+0xa4>)
    5fbc:	23ba      	movs	r3, #186	; 0xba
    5fbe:	f002 fe18 	bl	8bf2 <printk>
    5fc2:	481b      	ldr	r0, [pc, #108]	; (6030 <move_thread_to_end_of_prio_q+0xa4>)
    5fc4:	21ba      	movs	r1, #186	; 0xba
    5fc6:	f002 fc25 	bl	8814 <assert_post_action>
	return list->head == list;
    5fca:	4a1a      	ldr	r2, [pc, #104]	; (6034 <move_thread_to_end_of_prio_q+0xa8>)
    5fcc:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5fce:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5fd0:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fd4:	428b      	cmp	r3, r1
    5fd6:	bf08      	it	eq
    5fd8:	2300      	moveq	r3, #0
    5fda:	2b00      	cmp	r3, #0
    5fdc:	bf38      	it	cc
    5fde:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5fe0:	b1cb      	cbz	r3, 6016 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5fe2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5fe6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5fea:	4286      	cmp	r6, r0
    5fec:	d00f      	beq.n	600e <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    5fee:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ff0:	2800      	cmp	r0, #0
    5ff2:	dd0c      	ble.n	600e <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5ff4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5ff6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5ffa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5ffc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5ffe:	6890      	ldr	r0, [r2, #8]
    6000:	1b03      	subs	r3, r0, r4
    6002:	4258      	negs	r0, r3
}
    6004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6008:	4158      	adcs	r0, r3
    600a:	f7ff bf87 	b.w	5f1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    600e:	42ab      	cmp	r3, r5
    6010:	d001      	beq.n	6016 <move_thread_to_end_of_prio_q+0x8a>
    6012:	681b      	ldr	r3, [r3, #0]
    6014:	e7e4      	b.n	5fe0 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    6016:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    601a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    601c:	6254      	str	r4, [r2, #36]	; 0x24
}
    601e:	e7ee      	b.n	5ffe <move_thread_to_end_of_prio_q+0x72>
    6020:	20000c24 	.word	0x20000c24
    6024:	20000410 	.word	0x20000410
    6028:	0000aacf 	.word	0x0000aacf
    602c:	00009c7a 	.word	0x00009c7a
    6030:	0000aaad 	.word	0x0000aaad
    6034:	20000c04 	.word	0x20000c04

00006038 <z_time_slice>:
{
    6038:	b570      	push	{r4, r5, r6, lr}
    603a:	4604      	mov	r4, r0
	__asm__ volatile(
    603c:	f04f 0320 	mov.w	r3, #32
    6040:	f3ef 8511 	mrs	r5, BASEPRI
    6044:	f383 8812 	msr	BASEPRI_MAX, r3
    6048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    604c:	482a      	ldr	r0, [pc, #168]	; (60f8 <z_time_slice+0xc0>)
    604e:	f001 f9b1 	bl	73b4 <z_spin_lock_valid>
    6052:	b968      	cbnz	r0, 6070 <z_time_slice+0x38>
    6054:	4a29      	ldr	r2, [pc, #164]	; (60fc <z_time_slice+0xc4>)
    6056:	492a      	ldr	r1, [pc, #168]	; (6100 <z_time_slice+0xc8>)
    6058:	482a      	ldr	r0, [pc, #168]	; (6104 <z_time_slice+0xcc>)
    605a:	2381      	movs	r3, #129	; 0x81
    605c:	f002 fdc9 	bl	8bf2 <printk>
    6060:	4925      	ldr	r1, [pc, #148]	; (60f8 <z_time_slice+0xc0>)
    6062:	4829      	ldr	r0, [pc, #164]	; (6108 <z_time_slice+0xd0>)
    6064:	f002 fdc5 	bl	8bf2 <printk>
    6068:	4824      	ldr	r0, [pc, #144]	; (60fc <z_time_slice+0xc4>)
    606a:	2181      	movs	r1, #129	; 0x81
    606c:	f002 fbd2 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6070:	4821      	ldr	r0, [pc, #132]	; (60f8 <z_time_slice+0xc0>)
    6072:	f001 f9bd 	bl	73f0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6076:	4b25      	ldr	r3, [pc, #148]	; (610c <z_time_slice+0xd4>)
    6078:	4a25      	ldr	r2, [pc, #148]	; (6110 <z_time_slice+0xd8>)
    607a:	6898      	ldr	r0, [r3, #8]
    607c:	6811      	ldr	r1, [r2, #0]
    607e:	4288      	cmp	r0, r1
    6080:	4619      	mov	r1, r3
    6082:	d118      	bne.n	60b6 <z_time_slice+0x7e>
			z_reset_time_slice();
    6084:	f7ff fd3e 	bl	5b04 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6088:	481b      	ldr	r0, [pc, #108]	; (60f8 <z_time_slice+0xc0>)
    608a:	f001 f9a1 	bl	73d0 <z_spin_unlock_valid>
    608e:	b968      	cbnz	r0, 60ac <z_time_slice+0x74>
    6090:	4a1a      	ldr	r2, [pc, #104]	; (60fc <z_time_slice+0xc4>)
    6092:	4920      	ldr	r1, [pc, #128]	; (6114 <z_time_slice+0xdc>)
    6094:	481b      	ldr	r0, [pc, #108]	; (6104 <z_time_slice+0xcc>)
    6096:	23ac      	movs	r3, #172	; 0xac
    6098:	f002 fdab 	bl	8bf2 <printk>
    609c:	4916      	ldr	r1, [pc, #88]	; (60f8 <z_time_slice+0xc0>)
    609e:	481e      	ldr	r0, [pc, #120]	; (6118 <z_time_slice+0xe0>)
    60a0:	f002 fda7 	bl	8bf2 <printk>
    60a4:	4815      	ldr	r0, [pc, #84]	; (60fc <z_time_slice+0xc4>)
    60a6:	21ac      	movs	r1, #172	; 0xac
    60a8:	f002 fbb4 	bl	8814 <assert_post_action>
	__asm__ volatile(
    60ac:	f385 8811 	msr	BASEPRI, r5
    60b0:	f3bf 8f6f 	isb	sy
}
    60b4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    60b6:	2600      	movs	r6, #0
    60b8:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    60ba:	4a18      	ldr	r2, [pc, #96]	; (611c <z_time_slice+0xe4>)
    60bc:	6812      	ldr	r2, [r2, #0]
    60be:	b1ba      	cbz	r2, 60f0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    60c0:	89c2      	ldrh	r2, [r0, #14]
    60c2:	2a7f      	cmp	r2, #127	; 0x7f
    60c4:	d814      	bhi.n	60f0 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    60c6:	7b42      	ldrb	r2, [r0, #13]
    60c8:	06d2      	lsls	r2, r2, #27
    60ca:	d111      	bne.n	60f0 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    60cc:	4a14      	ldr	r2, [pc, #80]	; (6120 <z_time_slice+0xe8>)
    60ce:	f990 600e 	ldrsb.w	r6, [r0, #14]
    60d2:	6812      	ldr	r2, [r2, #0]
    60d4:	4296      	cmp	r6, r2
    60d6:	db0b      	blt.n	60f0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    60d8:	4a12      	ldr	r2, [pc, #72]	; (6124 <z_time_slice+0xec>)
    60da:	4290      	cmp	r0, r2
    60dc:	d008      	beq.n	60f0 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    60de:	691a      	ldr	r2, [r3, #16]
    60e0:	42a2      	cmp	r2, r4
    60e2:	dc02      	bgt.n	60ea <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    60e4:	f7ff ff52 	bl	5f8c <move_thread_to_end_of_prio_q>
    60e8:	e7cc      	b.n	6084 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    60ea:	1b12      	subs	r2, r2, r4
    60ec:	611a      	str	r2, [r3, #16]
    60ee:	e7cb      	b.n	6088 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    60f0:	2300      	movs	r3, #0
    60f2:	610b      	str	r3, [r1, #16]
    60f4:	e7c8      	b.n	6088 <z_time_slice+0x50>
    60f6:	bf00      	nop
    60f8:	20000c38 	.word	0x20000c38
    60fc:	00009f3d 	.word	0x00009f3d
    6100:	00009f8f 	.word	0x00009f8f
    6104:	00009c7a 	.word	0x00009c7a
    6108:	00009fa4 	.word	0x00009fa4
    610c:	20000c04 	.word	0x20000c04
    6110:	20000c34 	.word	0x20000c34
    6114:	00009f63 	.word	0x00009f63
    6118:	00009f7a 	.word	0x00009f7a
    611c:	20000c40 	.word	0x20000c40
    6120:	20000c3c 	.word	0x20000c3c
    6124:	20000410 	.word	0x20000410

00006128 <ready_thread>:
{
    6128:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    612a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    612e:	7b43      	ldrb	r3, [r0, #13]
    6130:	2a00      	cmp	r2, #0
{
    6132:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6134:	db3e      	blt.n	61b4 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6136:	06da      	lsls	r2, r3, #27
    6138:	d13c      	bne.n	61b4 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    613a:	6985      	ldr	r5, [r0, #24]
    613c:	2d00      	cmp	r5, #0
    613e:	d139      	bne.n	61b4 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    6140:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6144:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6146:	4b1c      	ldr	r3, [pc, #112]	; (61b8 <ready_thread+0x90>)
    6148:	4298      	cmp	r0, r3
    614a:	d109      	bne.n	6160 <ready_thread+0x38>
    614c:	491b      	ldr	r1, [pc, #108]	; (61bc <ready_thread+0x94>)
    614e:	481c      	ldr	r0, [pc, #112]	; (61c0 <ready_thread+0x98>)
    6150:	4a1c      	ldr	r2, [pc, #112]	; (61c4 <ready_thread+0x9c>)
    6152:	23ba      	movs	r3, #186	; 0xba
    6154:	f002 fd4d 	bl	8bf2 <printk>
    6158:	481a      	ldr	r0, [pc, #104]	; (61c4 <ready_thread+0x9c>)
    615a:	21ba      	movs	r1, #186	; 0xba
    615c:	f002 fb5a 	bl	8814 <assert_post_action>
	return list->head == list;
    6160:	4919      	ldr	r1, [pc, #100]	; (61c8 <ready_thread+0xa0>)
    6162:	460b      	mov	r3, r1
    6164:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6168:	4298      	cmp	r0, r3
    616a:	bf18      	it	ne
    616c:	4605      	movne	r5, r0
    616e:	2d00      	cmp	r5, #0
    6170:	461a      	mov	r2, r3
    6172:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6174:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6176:	bf38      	it	cc
    6178:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    617a:	b1b3      	cbz	r3, 61aa <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    617c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6180:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6184:	4286      	cmp	r6, r0
    6186:	d00c      	beq.n	61a2 <ready_thread+0x7a>
		return b2 - b1;
    6188:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    618a:	2800      	cmp	r0, #0
    618c:	dd09      	ble.n	61a2 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    618e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6190:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6194:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6196:	605c      	str	r4, [r3, #4]
}
    6198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    619c:	2000      	movs	r0, #0
    619e:	f7ff bebd 	b.w	5f1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    61a2:	42ab      	cmp	r3, r5
    61a4:	d001      	beq.n	61aa <ready_thread+0x82>
    61a6:	681b      	ldr	r3, [r3, #0]
    61a8:	e7e7      	b.n	617a <ready_thread+0x52>
	node->prev = tail;
    61aa:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    61ae:	602c      	str	r4, [r5, #0]
	list->tail = node;
    61b0:	624c      	str	r4, [r1, #36]	; 0x24
}
    61b2:	e7f1      	b.n	6198 <ready_thread+0x70>
}
    61b4:	bd70      	pop	{r4, r5, r6, pc}
    61b6:	bf00      	nop
    61b8:	20000410 	.word	0x20000410
    61bc:	0000aacf 	.word	0x0000aacf
    61c0:	00009c7a 	.word	0x00009c7a
    61c4:	0000aaad 	.word	0x0000aaad
    61c8:	20000c04 	.word	0x20000c04

000061cc <z_ready_thread>:
{
    61cc:	b538      	push	{r3, r4, r5, lr}
    61ce:	4604      	mov	r4, r0
	__asm__ volatile(
    61d0:	f04f 0320 	mov.w	r3, #32
    61d4:	f3ef 8511 	mrs	r5, BASEPRI
    61d8:	f383 8812 	msr	BASEPRI_MAX, r3
    61dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61e0:	4817      	ldr	r0, [pc, #92]	; (6240 <z_ready_thread+0x74>)
    61e2:	f001 f8e7 	bl	73b4 <z_spin_lock_valid>
    61e6:	b968      	cbnz	r0, 6204 <z_ready_thread+0x38>
    61e8:	4a16      	ldr	r2, [pc, #88]	; (6244 <z_ready_thread+0x78>)
    61ea:	4917      	ldr	r1, [pc, #92]	; (6248 <z_ready_thread+0x7c>)
    61ec:	4817      	ldr	r0, [pc, #92]	; (624c <z_ready_thread+0x80>)
    61ee:	2381      	movs	r3, #129	; 0x81
    61f0:	f002 fcff 	bl	8bf2 <printk>
    61f4:	4912      	ldr	r1, [pc, #72]	; (6240 <z_ready_thread+0x74>)
    61f6:	4816      	ldr	r0, [pc, #88]	; (6250 <z_ready_thread+0x84>)
    61f8:	f002 fcfb 	bl	8bf2 <printk>
    61fc:	4811      	ldr	r0, [pc, #68]	; (6244 <z_ready_thread+0x78>)
    61fe:	2181      	movs	r1, #129	; 0x81
    6200:	f002 fb08 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6204:	480e      	ldr	r0, [pc, #56]	; (6240 <z_ready_thread+0x74>)
    6206:	f001 f8f3 	bl	73f0 <z_spin_lock_set_owner>
			ready_thread(thread);
    620a:	4620      	mov	r0, r4
    620c:	f7ff ff8c 	bl	6128 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6210:	480b      	ldr	r0, [pc, #44]	; (6240 <z_ready_thread+0x74>)
    6212:	f001 f8dd 	bl	73d0 <z_spin_unlock_valid>
    6216:	b968      	cbnz	r0, 6234 <z_ready_thread+0x68>
    6218:	4a0a      	ldr	r2, [pc, #40]	; (6244 <z_ready_thread+0x78>)
    621a:	490e      	ldr	r1, [pc, #56]	; (6254 <z_ready_thread+0x88>)
    621c:	480b      	ldr	r0, [pc, #44]	; (624c <z_ready_thread+0x80>)
    621e:	23ac      	movs	r3, #172	; 0xac
    6220:	f002 fce7 	bl	8bf2 <printk>
    6224:	4906      	ldr	r1, [pc, #24]	; (6240 <z_ready_thread+0x74>)
    6226:	480c      	ldr	r0, [pc, #48]	; (6258 <z_ready_thread+0x8c>)
    6228:	f002 fce3 	bl	8bf2 <printk>
    622c:	4805      	ldr	r0, [pc, #20]	; (6244 <z_ready_thread+0x78>)
    622e:	21ac      	movs	r1, #172	; 0xac
    6230:	f002 faf0 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6234:	f385 8811 	msr	BASEPRI, r5
    6238:	f3bf 8f6f 	isb	sy
}
    623c:	bd38      	pop	{r3, r4, r5, pc}
    623e:	bf00      	nop
    6240:	20000c38 	.word	0x20000c38
    6244:	00009f3d 	.word	0x00009f3d
    6248:	00009f8f 	.word	0x00009f8f
    624c:	00009c7a 	.word	0x00009c7a
    6250:	00009fa4 	.word	0x00009fa4
    6254:	00009f63 	.word	0x00009f63
    6258:	00009f7a 	.word	0x00009f7a

0000625c <z_sched_start>:
{
    625c:	b538      	push	{r3, r4, r5, lr}
    625e:	4604      	mov	r4, r0
	__asm__ volatile(
    6260:	f04f 0320 	mov.w	r3, #32
    6264:	f3ef 8511 	mrs	r5, BASEPRI
    6268:	f383 8812 	msr	BASEPRI_MAX, r3
    626c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6270:	481d      	ldr	r0, [pc, #116]	; (62e8 <z_sched_start+0x8c>)
    6272:	f001 f89f 	bl	73b4 <z_spin_lock_valid>
    6276:	b968      	cbnz	r0, 6294 <z_sched_start+0x38>
    6278:	4a1c      	ldr	r2, [pc, #112]	; (62ec <z_sched_start+0x90>)
    627a:	491d      	ldr	r1, [pc, #116]	; (62f0 <z_sched_start+0x94>)
    627c:	481d      	ldr	r0, [pc, #116]	; (62f4 <z_sched_start+0x98>)
    627e:	2381      	movs	r3, #129	; 0x81
    6280:	f002 fcb7 	bl	8bf2 <printk>
    6284:	4918      	ldr	r1, [pc, #96]	; (62e8 <z_sched_start+0x8c>)
    6286:	481c      	ldr	r0, [pc, #112]	; (62f8 <z_sched_start+0x9c>)
    6288:	f002 fcb3 	bl	8bf2 <printk>
    628c:	4817      	ldr	r0, [pc, #92]	; (62ec <z_sched_start+0x90>)
    628e:	2181      	movs	r1, #129	; 0x81
    6290:	f002 fac0 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6294:	4814      	ldr	r0, [pc, #80]	; (62e8 <z_sched_start+0x8c>)
    6296:	f001 f8ab 	bl	73f0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    629a:	7b63      	ldrb	r3, [r4, #13]
    629c:	075a      	lsls	r2, r3, #29
    629e:	d416      	bmi.n	62ce <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62a0:	4811      	ldr	r0, [pc, #68]	; (62e8 <z_sched_start+0x8c>)
    62a2:	f001 f895 	bl	73d0 <z_spin_unlock_valid>
    62a6:	b968      	cbnz	r0, 62c4 <z_sched_start+0x68>
    62a8:	4a10      	ldr	r2, [pc, #64]	; (62ec <z_sched_start+0x90>)
    62aa:	4914      	ldr	r1, [pc, #80]	; (62fc <z_sched_start+0xa0>)
    62ac:	4811      	ldr	r0, [pc, #68]	; (62f4 <z_sched_start+0x98>)
    62ae:	23ac      	movs	r3, #172	; 0xac
    62b0:	f002 fc9f 	bl	8bf2 <printk>
    62b4:	490c      	ldr	r1, [pc, #48]	; (62e8 <z_sched_start+0x8c>)
    62b6:	4812      	ldr	r0, [pc, #72]	; (6300 <z_sched_start+0xa4>)
    62b8:	f002 fc9b 	bl	8bf2 <printk>
    62bc:	480b      	ldr	r0, [pc, #44]	; (62ec <z_sched_start+0x90>)
    62be:	21ac      	movs	r1, #172	; 0xac
    62c0:	f002 faa8 	bl	8814 <assert_post_action>
	__asm__ volatile(
    62c4:	f385 8811 	msr	BASEPRI, r5
    62c8:	f3bf 8f6f 	isb	sy
}
    62cc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    62ce:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    62d2:	4620      	mov	r0, r4
    62d4:	7363      	strb	r3, [r4, #13]
    62d6:	f7ff ff27 	bl	6128 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    62da:	4629      	mov	r1, r5
    62dc:	4802      	ldr	r0, [pc, #8]	; (62e8 <z_sched_start+0x8c>)
}
    62de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    62e2:	f7ff bcd3 	b.w	5c8c <z_reschedule>
    62e6:	bf00      	nop
    62e8:	20000c38 	.word	0x20000c38
    62ec:	00009f3d 	.word	0x00009f3d
    62f0:	00009f8f 	.word	0x00009f8f
    62f4:	00009c7a 	.word	0x00009c7a
    62f8:	00009fa4 	.word	0x00009fa4
    62fc:	00009f63 	.word	0x00009f63
    6300:	00009f7a 	.word	0x00009f7a

00006304 <z_thread_timeout>:
{
    6304:	b570      	push	{r4, r5, r6, lr}
    6306:	4604      	mov	r4, r0
	__asm__ volatile(
    6308:	f04f 0320 	mov.w	r3, #32
    630c:	f3ef 8611 	mrs	r6, BASEPRI
    6310:	f383 8812 	msr	BASEPRI_MAX, r3
    6314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6318:	4820      	ldr	r0, [pc, #128]	; (639c <z_thread_timeout+0x98>)
    631a:	f001 f84b 	bl	73b4 <z_spin_lock_valid>
    631e:	b968      	cbnz	r0, 633c <z_thread_timeout+0x38>
    6320:	4a1f      	ldr	r2, [pc, #124]	; (63a0 <z_thread_timeout+0x9c>)
    6322:	4920      	ldr	r1, [pc, #128]	; (63a4 <z_thread_timeout+0xa0>)
    6324:	4820      	ldr	r0, [pc, #128]	; (63a8 <z_thread_timeout+0xa4>)
    6326:	2381      	movs	r3, #129	; 0x81
    6328:	f002 fc63 	bl	8bf2 <printk>
    632c:	491b      	ldr	r1, [pc, #108]	; (639c <z_thread_timeout+0x98>)
    632e:	481f      	ldr	r0, [pc, #124]	; (63ac <z_thread_timeout+0xa8>)
    6330:	f002 fc5f 	bl	8bf2 <printk>
    6334:	481a      	ldr	r0, [pc, #104]	; (63a0 <z_thread_timeout+0x9c>)
    6336:	2181      	movs	r1, #129	; 0x81
    6338:	f002 fa6c 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    633c:	4817      	ldr	r0, [pc, #92]	; (639c <z_thread_timeout+0x98>)
    633e:	f001 f857 	bl	73f0 <z_spin_lock_set_owner>
		if (!killed) {
    6342:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6346:	f013 0f28 	tst.w	r3, #40	; 0x28
    634a:	d110      	bne.n	636e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    634c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6350:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6354:	b113      	cbz	r3, 635c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6356:	4628      	mov	r0, r5
    6358:	f7ff fd72 	bl	5e40 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    635c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6360:	f023 0314 	bic.w	r3, r3, #20
    6364:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6368:	4628      	mov	r0, r5
    636a:	f7ff fedd 	bl	6128 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    636e:	480b      	ldr	r0, [pc, #44]	; (639c <z_thread_timeout+0x98>)
    6370:	f001 f82e 	bl	73d0 <z_spin_unlock_valid>
    6374:	b968      	cbnz	r0, 6392 <z_thread_timeout+0x8e>
    6376:	4a0a      	ldr	r2, [pc, #40]	; (63a0 <z_thread_timeout+0x9c>)
    6378:	490d      	ldr	r1, [pc, #52]	; (63b0 <z_thread_timeout+0xac>)
    637a:	480b      	ldr	r0, [pc, #44]	; (63a8 <z_thread_timeout+0xa4>)
    637c:	23ac      	movs	r3, #172	; 0xac
    637e:	f002 fc38 	bl	8bf2 <printk>
    6382:	4906      	ldr	r1, [pc, #24]	; (639c <z_thread_timeout+0x98>)
    6384:	480b      	ldr	r0, [pc, #44]	; (63b4 <z_thread_timeout+0xb0>)
    6386:	f002 fc34 	bl	8bf2 <printk>
    638a:	4805      	ldr	r0, [pc, #20]	; (63a0 <z_thread_timeout+0x9c>)
    638c:	21ac      	movs	r1, #172	; 0xac
    638e:	f002 fa41 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6392:	f386 8811 	msr	BASEPRI, r6
    6396:	f3bf 8f6f 	isb	sy
}
    639a:	bd70      	pop	{r4, r5, r6, pc}
    639c:	20000c38 	.word	0x20000c38
    63a0:	00009f3d 	.word	0x00009f3d
    63a4:	00009f8f 	.word	0x00009f8f
    63a8:	00009c7a 	.word	0x00009c7a
    63ac:	00009fa4 	.word	0x00009fa4
    63b0:	00009f63 	.word	0x00009f63
    63b4:	00009f7a 	.word	0x00009f7a

000063b8 <unready_thread>:
{
    63b8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    63ba:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    63be:	7b43      	ldrb	r3, [r0, #13]
    63c0:	2a00      	cmp	r2, #0
{
    63c2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    63c4:	da06      	bge.n	63d4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    63ca:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    63cc:	4601      	mov	r1, r0
    63ce:	4806      	ldr	r0, [pc, #24]	; (63e8 <unready_thread+0x30>)
    63d0:	f7ff fd14 	bl	5dfc <z_priq_dumb_remove>
	update_cache(thread == _current);
    63d4:	4b05      	ldr	r3, [pc, #20]	; (63ec <unready_thread+0x34>)
    63d6:	6898      	ldr	r0, [r3, #8]
    63d8:	1b03      	subs	r3, r0, r4
    63da:	4258      	negs	r0, r3
}
    63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    63e0:	4158      	adcs	r0, r3
    63e2:	f7ff bd9b 	b.w	5f1c <update_cache>
    63e6:	bf00      	nop
    63e8:	20000c24 	.word	0x20000c24
    63ec:	20000c04 	.word	0x20000c04

000063f0 <add_to_waitq_locked>:
{
    63f0:	b538      	push	{r3, r4, r5, lr}
    63f2:	4604      	mov	r4, r0
    63f4:	460d      	mov	r5, r1
	unready_thread(thread);
    63f6:	f7ff ffdf 	bl	63b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    63fa:	7b63      	ldrb	r3, [r4, #13]
    63fc:	f043 0302 	orr.w	r3, r3, #2
    6400:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6402:	b31d      	cbz	r5, 644c <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6404:	4b17      	ldr	r3, [pc, #92]	; (6464 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    6406:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6408:	429c      	cmp	r4, r3
    640a:	d109      	bne.n	6420 <add_to_waitq_locked+0x30>
    640c:	4916      	ldr	r1, [pc, #88]	; (6468 <add_to_waitq_locked+0x78>)
    640e:	4817      	ldr	r0, [pc, #92]	; (646c <add_to_waitq_locked+0x7c>)
    6410:	4a17      	ldr	r2, [pc, #92]	; (6470 <add_to_waitq_locked+0x80>)
    6412:	23ba      	movs	r3, #186	; 0xba
    6414:	f002 fbed 	bl	8bf2 <printk>
    6418:	4815      	ldr	r0, [pc, #84]	; (6470 <add_to_waitq_locked+0x80>)
    641a:	21ba      	movs	r1, #186	; 0xba
    641c:	f002 f9fa 	bl	8814 <assert_post_action>
	return list->head == list;
    6420:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6422:	429d      	cmp	r5, r3
    6424:	bf08      	it	eq
    6426:	2300      	moveq	r3, #0
    6428:	2b00      	cmp	r3, #0
    642a:	bf38      	it	cc
    642c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    642e:	b19b      	cbz	r3, 6458 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    6430:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6434:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6438:	4291      	cmp	r1, r2
    643a:	d008      	beq.n	644e <add_to_waitq_locked+0x5e>
		return b2 - b1;
    643c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    643e:	2a00      	cmp	r2, #0
    6440:	dd05      	ble.n	644e <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    6442:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6444:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6448:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    644a:	605c      	str	r4, [r3, #4]
}
    644c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    644e:	686a      	ldr	r2, [r5, #4]
    6450:	4293      	cmp	r3, r2
    6452:	d001      	beq.n	6458 <add_to_waitq_locked+0x68>
    6454:	681b      	ldr	r3, [r3, #0]
    6456:	e7ea      	b.n	642e <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    6458:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    645a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    645e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6460:	606c      	str	r4, [r5, #4]
    6462:	e7f3      	b.n	644c <add_to_waitq_locked+0x5c>
    6464:	20000410 	.word	0x20000410
    6468:	0000aacf 	.word	0x0000aacf
    646c:	00009c7a 	.word	0x00009c7a
    6470:	0000aaad 	.word	0x0000aaad

00006474 <pend>:
{
    6474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6478:	4604      	mov	r4, r0
    647a:	460d      	mov	r5, r1
    647c:	4616      	mov	r6, r2
    647e:	461f      	mov	r7, r3
	__asm__ volatile(
    6480:	f04f 0320 	mov.w	r3, #32
    6484:	f3ef 8811 	mrs	r8, BASEPRI
    6488:	f383 8812 	msr	BASEPRI_MAX, r3
    648c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6490:	481f      	ldr	r0, [pc, #124]	; (6510 <pend+0x9c>)
    6492:	f000 ff8f 	bl	73b4 <z_spin_lock_valid>
    6496:	b968      	cbnz	r0, 64b4 <pend+0x40>
    6498:	4a1e      	ldr	r2, [pc, #120]	; (6514 <pend+0xa0>)
    649a:	491f      	ldr	r1, [pc, #124]	; (6518 <pend+0xa4>)
    649c:	481f      	ldr	r0, [pc, #124]	; (651c <pend+0xa8>)
    649e:	2381      	movs	r3, #129	; 0x81
    64a0:	f002 fba7 	bl	8bf2 <printk>
    64a4:	491a      	ldr	r1, [pc, #104]	; (6510 <pend+0x9c>)
    64a6:	481e      	ldr	r0, [pc, #120]	; (6520 <pend+0xac>)
    64a8:	f002 fba3 	bl	8bf2 <printk>
    64ac:	4819      	ldr	r0, [pc, #100]	; (6514 <pend+0xa0>)
    64ae:	2181      	movs	r1, #129	; 0x81
    64b0:	f002 f9b0 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    64b4:	4816      	ldr	r0, [pc, #88]	; (6510 <pend+0x9c>)
    64b6:	f000 ff9b 	bl	73f0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    64ba:	4620      	mov	r0, r4
    64bc:	4629      	mov	r1, r5
    64be:	f7ff ff97 	bl	63f0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64c2:	4813      	ldr	r0, [pc, #76]	; (6510 <pend+0x9c>)
    64c4:	f000 ff84 	bl	73d0 <z_spin_unlock_valid>
    64c8:	b968      	cbnz	r0, 64e6 <pend+0x72>
    64ca:	4a12      	ldr	r2, [pc, #72]	; (6514 <pend+0xa0>)
    64cc:	4915      	ldr	r1, [pc, #84]	; (6524 <pend+0xb0>)
    64ce:	4813      	ldr	r0, [pc, #76]	; (651c <pend+0xa8>)
    64d0:	23ac      	movs	r3, #172	; 0xac
    64d2:	f002 fb8e 	bl	8bf2 <printk>
    64d6:	490e      	ldr	r1, [pc, #56]	; (6510 <pend+0x9c>)
    64d8:	4813      	ldr	r0, [pc, #76]	; (6528 <pend+0xb4>)
    64da:	f002 fb8a 	bl	8bf2 <printk>
    64de:	480d      	ldr	r0, [pc, #52]	; (6514 <pend+0xa0>)
    64e0:	21ac      	movs	r1, #172	; 0xac
    64e2:	f002 f997 	bl	8814 <assert_post_action>
	__asm__ volatile(
    64e6:	f388 8811 	msr	BASEPRI, r8
    64ea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    64ee:	1c7b      	adds	r3, r7, #1
    64f0:	bf08      	it	eq
    64f2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    64f6:	d008      	beq.n	650a <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    64f8:	4632      	mov	r2, r6
    64fa:	463b      	mov	r3, r7
    64fc:	f104 0018 	add.w	r0, r4, #24
    6500:	490a      	ldr	r1, [pc, #40]	; (652c <pend+0xb8>)
}
    6502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6506:	f000 bfcb 	b.w	74a0 <z_add_timeout>
    650a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    650e:	bf00      	nop
    6510:	20000c38 	.word	0x20000c38
    6514:	00009f3d 	.word	0x00009f3d
    6518:	00009f8f 	.word	0x00009f8f
    651c:	00009c7a 	.word	0x00009c7a
    6520:	00009fa4 	.word	0x00009fa4
    6524:	00009f63 	.word	0x00009f63
    6528:	00009f7a 	.word	0x00009f7a
    652c:	00006305 	.word	0x00006305

00006530 <z_pend_curr>:
{
    6530:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6532:	4b11      	ldr	r3, [pc, #68]	; (6578 <z_pend_curr+0x48>)
{
    6534:	4604      	mov	r4, r0
	pending_current = _current;
    6536:	6898      	ldr	r0, [r3, #8]
    6538:	4b10      	ldr	r3, [pc, #64]	; (657c <z_pend_curr+0x4c>)
{
    653a:	460d      	mov	r5, r1
	pending_current = _current;
    653c:	6018      	str	r0, [r3, #0]
{
    653e:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6544:	f7ff ff96 	bl	6474 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6548:	4620      	mov	r0, r4
    654a:	f000 ff41 	bl	73d0 <z_spin_unlock_valid>
    654e:	b968      	cbnz	r0, 656c <z_pend_curr+0x3c>
    6550:	4a0b      	ldr	r2, [pc, #44]	; (6580 <z_pend_curr+0x50>)
    6552:	490c      	ldr	r1, [pc, #48]	; (6584 <z_pend_curr+0x54>)
    6554:	480c      	ldr	r0, [pc, #48]	; (6588 <z_pend_curr+0x58>)
    6556:	23c3      	movs	r3, #195	; 0xc3
    6558:	f002 fb4b 	bl	8bf2 <printk>
    655c:	480b      	ldr	r0, [pc, #44]	; (658c <z_pend_curr+0x5c>)
    655e:	4621      	mov	r1, r4
    6560:	f002 fb47 	bl	8bf2 <printk>
    6564:	4806      	ldr	r0, [pc, #24]	; (6580 <z_pend_curr+0x50>)
    6566:	21c3      	movs	r1, #195	; 0xc3
    6568:	f002 f954 	bl	8814 <assert_post_action>
    656c:	4628      	mov	r0, r5
}
    656e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6572:	f7fb bc97 	b.w	1ea4 <arch_swap>
    6576:	bf00      	nop
    6578:	20000c04 	.word	0x20000c04
    657c:	20000c34 	.word	0x20000c34
    6580:	00009f3d 	.word	0x00009f3d
    6584:	00009f63 	.word	0x00009f63
    6588:	00009c7a 	.word	0x00009c7a
    658c:	00009f7a 	.word	0x00009f7a

00006590 <z_set_prio>:
{
    6590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6592:	4604      	mov	r4, r0
    6594:	460e      	mov	r6, r1
	__asm__ volatile(
    6596:	f04f 0320 	mov.w	r3, #32
    659a:	f3ef 8711 	mrs	r7, BASEPRI
    659e:	f383 8812 	msr	BASEPRI_MAX, r3
    65a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65a6:	483c      	ldr	r0, [pc, #240]	; (6698 <z_set_prio+0x108>)
    65a8:	f000 ff04 	bl	73b4 <z_spin_lock_valid>
    65ac:	b968      	cbnz	r0, 65ca <z_set_prio+0x3a>
    65ae:	4a3b      	ldr	r2, [pc, #236]	; (669c <z_set_prio+0x10c>)
    65b0:	493b      	ldr	r1, [pc, #236]	; (66a0 <z_set_prio+0x110>)
    65b2:	483c      	ldr	r0, [pc, #240]	; (66a4 <z_set_prio+0x114>)
    65b4:	2381      	movs	r3, #129	; 0x81
    65b6:	f002 fb1c 	bl	8bf2 <printk>
    65ba:	4937      	ldr	r1, [pc, #220]	; (6698 <z_set_prio+0x108>)
    65bc:	483a      	ldr	r0, [pc, #232]	; (66a8 <z_set_prio+0x118>)
    65be:	f002 fb18 	bl	8bf2 <printk>
    65c2:	4836      	ldr	r0, [pc, #216]	; (669c <z_set_prio+0x10c>)
    65c4:	2181      	movs	r1, #129	; 0x81
    65c6:	f002 f925 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    65ca:	4833      	ldr	r0, [pc, #204]	; (6698 <z_set_prio+0x108>)
    65cc:	f000 ff10 	bl	73f0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    65d0:	7b63      	ldrb	r3, [r4, #13]
    65d2:	06da      	lsls	r2, r3, #27
    65d4:	b276      	sxtb	r6, r6
    65d6:	d15c      	bne.n	6692 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    65d8:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    65da:	2d00      	cmp	r5, #0
    65dc:	d159      	bne.n	6692 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    65de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    65e2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    65e4:	4831      	ldr	r0, [pc, #196]	; (66ac <z_set_prio+0x11c>)
    65e6:	4621      	mov	r1, r4
    65e8:	f7ff fc08 	bl	5dfc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    65ec:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    65ee:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    65f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    65f4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    65f6:	4b2e      	ldr	r3, [pc, #184]	; (66b0 <z_set_prio+0x120>)
    65f8:	429c      	cmp	r4, r3
    65fa:	d109      	bne.n	6610 <z_set_prio+0x80>
    65fc:	492d      	ldr	r1, [pc, #180]	; (66b4 <z_set_prio+0x124>)
    65fe:	4829      	ldr	r0, [pc, #164]	; (66a4 <z_set_prio+0x114>)
    6600:	4a2d      	ldr	r2, [pc, #180]	; (66b8 <z_set_prio+0x128>)
    6602:	23ba      	movs	r3, #186	; 0xba
    6604:	f002 faf5 	bl	8bf2 <printk>
    6608:	482b      	ldr	r0, [pc, #172]	; (66b8 <z_set_prio+0x128>)
    660a:	21ba      	movs	r1, #186	; 0xba
    660c:	f002 f902 	bl	8814 <assert_post_action>
	return list->head == list;
    6610:	492a      	ldr	r1, [pc, #168]	; (66bc <z_set_prio+0x12c>)
    6612:	460b      	mov	r3, r1
    6614:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6618:	4298      	cmp	r0, r3
    661a:	bf18      	it	ne
    661c:	4605      	movne	r5, r0
    661e:	2d00      	cmp	r5, #0
    6620:	461a      	mov	r2, r3
    6622:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6624:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6626:	bf38      	it	cc
    6628:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    662a:	b36b      	cbz	r3, 6688 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    662c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6630:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6634:	4286      	cmp	r6, r0
    6636:	d023      	beq.n	6680 <z_set_prio+0xf0>
		return b2 - b1;
    6638:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    663a:	2800      	cmp	r0, #0
    663c:	dd20      	ble.n	6680 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    663e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6640:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6644:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6646:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6648:	2001      	movs	r0, #1
    664a:	f7ff fc67 	bl	5f1c <update_cache>
    664e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6650:	4811      	ldr	r0, [pc, #68]	; (6698 <z_set_prio+0x108>)
    6652:	f000 febd 	bl	73d0 <z_spin_unlock_valid>
    6656:	b968      	cbnz	r0, 6674 <z_set_prio+0xe4>
    6658:	4a10      	ldr	r2, [pc, #64]	; (669c <z_set_prio+0x10c>)
    665a:	4919      	ldr	r1, [pc, #100]	; (66c0 <z_set_prio+0x130>)
    665c:	4811      	ldr	r0, [pc, #68]	; (66a4 <z_set_prio+0x114>)
    665e:	23ac      	movs	r3, #172	; 0xac
    6660:	f002 fac7 	bl	8bf2 <printk>
    6664:	490c      	ldr	r1, [pc, #48]	; (6698 <z_set_prio+0x108>)
    6666:	4817      	ldr	r0, [pc, #92]	; (66c4 <z_set_prio+0x134>)
    6668:	f002 fac3 	bl	8bf2 <printk>
    666c:	480b      	ldr	r0, [pc, #44]	; (669c <z_set_prio+0x10c>)
    666e:	21ac      	movs	r1, #172	; 0xac
    6670:	f002 f8d0 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6674:	f387 8811 	msr	BASEPRI, r7
    6678:	f3bf 8f6f 	isb	sy
}
    667c:	4620      	mov	r0, r4
    667e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6680:	42ab      	cmp	r3, r5
    6682:	d001      	beq.n	6688 <z_set_prio+0xf8>
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	e7d0      	b.n	662a <z_set_prio+0x9a>
	node->prev = tail;
    6688:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    668c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    668e:	624c      	str	r4, [r1, #36]	; 0x24
}
    6690:	e7da      	b.n	6648 <z_set_prio+0xb8>
			thread->base.prio = prio;
    6692:	73a6      	strb	r6, [r4, #14]
    6694:	2400      	movs	r4, #0
    6696:	e7db      	b.n	6650 <z_set_prio+0xc0>
    6698:	20000c38 	.word	0x20000c38
    669c:	00009f3d 	.word	0x00009f3d
    66a0:	00009f8f 	.word	0x00009f8f
    66a4:	00009c7a 	.word	0x00009c7a
    66a8:	00009fa4 	.word	0x00009fa4
    66ac:	20000c24 	.word	0x20000c24
    66b0:	20000410 	.word	0x20000410
    66b4:	0000aacf 	.word	0x0000aacf
    66b8:	0000aaad 	.word	0x0000aaad
    66bc:	20000c04 	.word	0x20000c04
    66c0:	00009f63 	.word	0x00009f63
    66c4:	00009f7a 	.word	0x00009f7a

000066c8 <z_impl_k_thread_suspend>:
{
    66c8:	b570      	push	{r4, r5, r6, lr}
    66ca:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    66cc:	3018      	adds	r0, #24
    66ce:	f000 ffbb 	bl	7648 <z_abort_timeout>
	__asm__ volatile(
    66d2:	f04f 0320 	mov.w	r3, #32
    66d6:	f3ef 8611 	mrs	r6, BASEPRI
    66da:	f383 8812 	msr	BASEPRI_MAX, r3
    66de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66e2:	4825      	ldr	r0, [pc, #148]	; (6778 <z_impl_k_thread_suspend+0xb0>)
    66e4:	f000 fe66 	bl	73b4 <z_spin_lock_valid>
    66e8:	b968      	cbnz	r0, 6706 <z_impl_k_thread_suspend+0x3e>
    66ea:	4a24      	ldr	r2, [pc, #144]	; (677c <z_impl_k_thread_suspend+0xb4>)
    66ec:	4924      	ldr	r1, [pc, #144]	; (6780 <z_impl_k_thread_suspend+0xb8>)
    66ee:	4825      	ldr	r0, [pc, #148]	; (6784 <z_impl_k_thread_suspend+0xbc>)
    66f0:	2381      	movs	r3, #129	; 0x81
    66f2:	f002 fa7e 	bl	8bf2 <printk>
    66f6:	4920      	ldr	r1, [pc, #128]	; (6778 <z_impl_k_thread_suspend+0xb0>)
    66f8:	4823      	ldr	r0, [pc, #140]	; (6788 <z_impl_k_thread_suspend+0xc0>)
    66fa:	f002 fa7a 	bl	8bf2 <printk>
    66fe:	481f      	ldr	r0, [pc, #124]	; (677c <z_impl_k_thread_suspend+0xb4>)
    6700:	2181      	movs	r1, #129	; 0x81
    6702:	f002 f887 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6706:	481c      	ldr	r0, [pc, #112]	; (6778 <z_impl_k_thread_suspend+0xb0>)
    6708:	f000 fe72 	bl	73f0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    670c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6710:	7b63      	ldrb	r3, [r4, #13]
    6712:	2a00      	cmp	r2, #0
    6714:	da06      	bge.n	6724 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    671a:	481c      	ldr	r0, [pc, #112]	; (678c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    671c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    671e:	4621      	mov	r1, r4
    6720:	f7ff fb6c 	bl	5dfc <z_priq_dumb_remove>
		update_cache(thread == _current);
    6724:	4d1a      	ldr	r5, [pc, #104]	; (6790 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6726:	7b63      	ldrb	r3, [r4, #13]
    6728:	68a8      	ldr	r0, [r5, #8]
    672a:	f043 0310 	orr.w	r3, r3, #16
    672e:	7363      	strb	r3, [r4, #13]
    6730:	1b03      	subs	r3, r0, r4
    6732:	4258      	negs	r0, r3
    6734:	4158      	adcs	r0, r3
    6736:	f7ff fbf1 	bl	5f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    673a:	480f      	ldr	r0, [pc, #60]	; (6778 <z_impl_k_thread_suspend+0xb0>)
    673c:	f000 fe48 	bl	73d0 <z_spin_unlock_valid>
    6740:	b968      	cbnz	r0, 675e <z_impl_k_thread_suspend+0x96>
    6742:	4a0e      	ldr	r2, [pc, #56]	; (677c <z_impl_k_thread_suspend+0xb4>)
    6744:	4913      	ldr	r1, [pc, #76]	; (6794 <z_impl_k_thread_suspend+0xcc>)
    6746:	480f      	ldr	r0, [pc, #60]	; (6784 <z_impl_k_thread_suspend+0xbc>)
    6748:	23ac      	movs	r3, #172	; 0xac
    674a:	f002 fa52 	bl	8bf2 <printk>
    674e:	490a      	ldr	r1, [pc, #40]	; (6778 <z_impl_k_thread_suspend+0xb0>)
    6750:	4811      	ldr	r0, [pc, #68]	; (6798 <z_impl_k_thread_suspend+0xd0>)
    6752:	f002 fa4e 	bl	8bf2 <printk>
    6756:	4809      	ldr	r0, [pc, #36]	; (677c <z_impl_k_thread_suspend+0xb4>)
    6758:	21ac      	movs	r1, #172	; 0xac
    675a:	f002 f85b 	bl	8814 <assert_post_action>
	__asm__ volatile(
    675e:	f386 8811 	msr	BASEPRI, r6
    6762:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6766:	68ab      	ldr	r3, [r5, #8]
    6768:	42a3      	cmp	r3, r4
    676a:	d103      	bne.n	6774 <z_impl_k_thread_suspend+0xac>
}
    676c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6770:	f002 bdc8 	b.w	9304 <z_reschedule_unlocked>
}
    6774:	bd70      	pop	{r4, r5, r6, pc}
    6776:	bf00      	nop
    6778:	20000c38 	.word	0x20000c38
    677c:	00009f3d 	.word	0x00009f3d
    6780:	00009f8f 	.word	0x00009f8f
    6784:	00009c7a 	.word	0x00009c7a
    6788:	00009fa4 	.word	0x00009fa4
    678c:	20000c24 	.word	0x20000c24
    6790:	20000c04 	.word	0x20000c04
    6794:	00009f63 	.word	0x00009f63
    6798:	00009f7a 	.word	0x00009f7a

0000679c <k_sched_unlock>:
{
    679c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    679e:	f04f 0320 	mov.w	r3, #32
    67a2:	f3ef 8511 	mrs	r5, BASEPRI
    67a6:	f383 8812 	msr	BASEPRI_MAX, r3
    67aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67ae:	482d      	ldr	r0, [pc, #180]	; (6864 <k_sched_unlock+0xc8>)
    67b0:	f000 fe00 	bl	73b4 <z_spin_lock_valid>
    67b4:	b968      	cbnz	r0, 67d2 <k_sched_unlock+0x36>
    67b6:	4a2c      	ldr	r2, [pc, #176]	; (6868 <k_sched_unlock+0xcc>)
    67b8:	492c      	ldr	r1, [pc, #176]	; (686c <k_sched_unlock+0xd0>)
    67ba:	482d      	ldr	r0, [pc, #180]	; (6870 <k_sched_unlock+0xd4>)
    67bc:	2381      	movs	r3, #129	; 0x81
    67be:	f002 fa18 	bl	8bf2 <printk>
    67c2:	4928      	ldr	r1, [pc, #160]	; (6864 <k_sched_unlock+0xc8>)
    67c4:	482b      	ldr	r0, [pc, #172]	; (6874 <k_sched_unlock+0xd8>)
    67c6:	f002 fa14 	bl	8bf2 <printk>
    67ca:	4827      	ldr	r0, [pc, #156]	; (6868 <k_sched_unlock+0xcc>)
    67cc:	2181      	movs	r1, #129	; 0x81
    67ce:	f002 f821 	bl	8814 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    67d2:	4c29      	ldr	r4, [pc, #164]	; (6878 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    67d4:	4823      	ldr	r0, [pc, #140]	; (6864 <k_sched_unlock+0xc8>)
    67d6:	f000 fe0b 	bl	73f0 <z_spin_lock_set_owner>
    67da:	68a2      	ldr	r2, [r4, #8]
    67dc:	7bd2      	ldrb	r2, [r2, #15]
    67de:	b972      	cbnz	r2, 67fe <k_sched_unlock+0x62>
    67e0:	4926      	ldr	r1, [pc, #152]	; (687c <k_sched_unlock+0xe0>)
    67e2:	4a27      	ldr	r2, [pc, #156]	; (6880 <k_sched_unlock+0xe4>)
    67e4:	4822      	ldr	r0, [pc, #136]	; (6870 <k_sched_unlock+0xd4>)
    67e6:	f240 3385 	movw	r3, #901	; 0x385
    67ea:	f002 fa02 	bl	8bf2 <printk>
    67ee:	4825      	ldr	r0, [pc, #148]	; (6884 <k_sched_unlock+0xe8>)
    67f0:	f002 f9ff 	bl	8bf2 <printk>
    67f4:	4822      	ldr	r0, [pc, #136]	; (6880 <k_sched_unlock+0xe4>)
    67f6:	f240 3185 	movw	r1, #901	; 0x385
    67fa:	f002 f80b 	bl	8814 <assert_post_action>
    67fe:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6802:	b173      	cbz	r3, 6822 <k_sched_unlock+0x86>
    6804:	4920      	ldr	r1, [pc, #128]	; (6888 <k_sched_unlock+0xec>)
    6806:	4a1e      	ldr	r2, [pc, #120]	; (6880 <k_sched_unlock+0xe4>)
    6808:	4819      	ldr	r0, [pc, #100]	; (6870 <k_sched_unlock+0xd4>)
    680a:	f240 3386 	movw	r3, #902	; 0x386
    680e:	f002 f9f0 	bl	8bf2 <printk>
    6812:	481c      	ldr	r0, [pc, #112]	; (6884 <k_sched_unlock+0xe8>)
    6814:	f002 f9ed 	bl	8bf2 <printk>
    6818:	4819      	ldr	r0, [pc, #100]	; (6880 <k_sched_unlock+0xe4>)
    681a:	f240 3186 	movw	r1, #902	; 0x386
    681e:	f001 fff9 	bl	8814 <assert_post_action>
		++_current->base.sched_locked;
    6822:	68a2      	ldr	r2, [r4, #8]
    6824:	7bd3      	ldrb	r3, [r2, #15]
    6826:	3301      	adds	r3, #1
		update_cache(0);
    6828:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    682a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    682c:	f7ff fb76 	bl	5f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6830:	480c      	ldr	r0, [pc, #48]	; (6864 <k_sched_unlock+0xc8>)
    6832:	f000 fdcd 	bl	73d0 <z_spin_unlock_valid>
    6836:	b968      	cbnz	r0, 6854 <k_sched_unlock+0xb8>
    6838:	4a0b      	ldr	r2, [pc, #44]	; (6868 <k_sched_unlock+0xcc>)
    683a:	4914      	ldr	r1, [pc, #80]	; (688c <k_sched_unlock+0xf0>)
    683c:	480c      	ldr	r0, [pc, #48]	; (6870 <k_sched_unlock+0xd4>)
    683e:	23ac      	movs	r3, #172	; 0xac
    6840:	f002 f9d7 	bl	8bf2 <printk>
    6844:	4907      	ldr	r1, [pc, #28]	; (6864 <k_sched_unlock+0xc8>)
    6846:	4812      	ldr	r0, [pc, #72]	; (6890 <k_sched_unlock+0xf4>)
    6848:	f002 f9d3 	bl	8bf2 <printk>
    684c:	4806      	ldr	r0, [pc, #24]	; (6868 <k_sched_unlock+0xcc>)
    684e:	21ac      	movs	r1, #172	; 0xac
    6850:	f001 ffe0 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6854:	f385 8811 	msr	BASEPRI, r5
    6858:	f3bf 8f6f 	isb	sy
}
    685c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    6860:	f002 bd50 	b.w	9304 <z_reschedule_unlocked>
    6864:	20000c38 	.word	0x20000c38
    6868:	00009f3d 	.word	0x00009f3d
    686c:	00009f8f 	.word	0x00009f8f
    6870:	00009c7a 	.word	0x00009c7a
    6874:	00009fa4 	.word	0x00009fa4
    6878:	20000c04 	.word	0x20000c04
    687c:	0000ab2e 	.word	0x0000ab2e
    6880:	0000aaad 	.word	0x0000aaad
    6884:	0000a949 	.word	0x0000a949
    6888:	0000a8d0 	.word	0x0000a8d0
    688c:	00009f63 	.word	0x00009f63
    6890:	00009f7a 	.word	0x00009f7a

00006894 <z_unpend1_no_timeout>:
{
    6894:	b538      	push	{r3, r4, r5, lr}
    6896:	4604      	mov	r4, r0
	__asm__ volatile(
    6898:	f04f 0320 	mov.w	r3, #32
    689c:	f3ef 8511 	mrs	r5, BASEPRI
    68a0:	f383 8812 	msr	BASEPRI_MAX, r3
    68a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    68a8:	4819      	ldr	r0, [pc, #100]	; (6910 <z_unpend1_no_timeout+0x7c>)
    68aa:	f000 fd83 	bl	73b4 <z_spin_lock_valid>
    68ae:	b968      	cbnz	r0, 68cc <z_unpend1_no_timeout+0x38>
    68b0:	4a18      	ldr	r2, [pc, #96]	; (6914 <z_unpend1_no_timeout+0x80>)
    68b2:	4919      	ldr	r1, [pc, #100]	; (6918 <z_unpend1_no_timeout+0x84>)
    68b4:	4819      	ldr	r0, [pc, #100]	; (691c <z_unpend1_no_timeout+0x88>)
    68b6:	2381      	movs	r3, #129	; 0x81
    68b8:	f002 f99b 	bl	8bf2 <printk>
    68bc:	4914      	ldr	r1, [pc, #80]	; (6910 <z_unpend1_no_timeout+0x7c>)
    68be:	4818      	ldr	r0, [pc, #96]	; (6920 <z_unpend1_no_timeout+0x8c>)
    68c0:	f002 f997 	bl	8bf2 <printk>
    68c4:	4813      	ldr	r0, [pc, #76]	; (6914 <z_unpend1_no_timeout+0x80>)
    68c6:	2181      	movs	r1, #129	; 0x81
    68c8:	f001 ffa4 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    68cc:	4810      	ldr	r0, [pc, #64]	; (6910 <z_unpend1_no_timeout+0x7c>)
    68ce:	f000 fd8f 	bl	73f0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    68d2:	4620      	mov	r0, r4
    68d4:	f002 fd20 	bl	9318 <z_priq_dumb_best>
		if (thread != NULL) {
    68d8:	4604      	mov	r4, r0
    68da:	b108      	cbz	r0, 68e0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    68dc:	f7ff fab0 	bl	5e40 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68e0:	480b      	ldr	r0, [pc, #44]	; (6910 <z_unpend1_no_timeout+0x7c>)
    68e2:	f000 fd75 	bl	73d0 <z_spin_unlock_valid>
    68e6:	b968      	cbnz	r0, 6904 <z_unpend1_no_timeout+0x70>
    68e8:	4a0a      	ldr	r2, [pc, #40]	; (6914 <z_unpend1_no_timeout+0x80>)
    68ea:	490e      	ldr	r1, [pc, #56]	; (6924 <z_unpend1_no_timeout+0x90>)
    68ec:	480b      	ldr	r0, [pc, #44]	; (691c <z_unpend1_no_timeout+0x88>)
    68ee:	23ac      	movs	r3, #172	; 0xac
    68f0:	f002 f97f 	bl	8bf2 <printk>
    68f4:	4906      	ldr	r1, [pc, #24]	; (6910 <z_unpend1_no_timeout+0x7c>)
    68f6:	480c      	ldr	r0, [pc, #48]	; (6928 <z_unpend1_no_timeout+0x94>)
    68f8:	f002 f97b 	bl	8bf2 <printk>
    68fc:	4805      	ldr	r0, [pc, #20]	; (6914 <z_unpend1_no_timeout+0x80>)
    68fe:	21ac      	movs	r1, #172	; 0xac
    6900:	f001 ff88 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6904:	f385 8811 	msr	BASEPRI, r5
    6908:	f3bf 8f6f 	isb	sy
}
    690c:	4620      	mov	r0, r4
    690e:	bd38      	pop	{r3, r4, r5, pc}
    6910:	20000c38 	.word	0x20000c38
    6914:	00009f3d 	.word	0x00009f3d
    6918:	00009f8f 	.word	0x00009f8f
    691c:	00009c7a 	.word	0x00009c7a
    6920:	00009fa4 	.word	0x00009fa4
    6924:	00009f63 	.word	0x00009f63
    6928:	00009f7a 	.word	0x00009f7a

0000692c <z_unpend_first_thread>:
{
    692c:	b538      	push	{r3, r4, r5, lr}
    692e:	4604      	mov	r4, r0
	__asm__ volatile(
    6930:	f04f 0320 	mov.w	r3, #32
    6934:	f3ef 8511 	mrs	r5, BASEPRI
    6938:	f383 8812 	msr	BASEPRI_MAX, r3
    693c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6940:	481b      	ldr	r0, [pc, #108]	; (69b0 <z_unpend_first_thread+0x84>)
    6942:	f000 fd37 	bl	73b4 <z_spin_lock_valid>
    6946:	b968      	cbnz	r0, 6964 <z_unpend_first_thread+0x38>
    6948:	4a1a      	ldr	r2, [pc, #104]	; (69b4 <z_unpend_first_thread+0x88>)
    694a:	491b      	ldr	r1, [pc, #108]	; (69b8 <z_unpend_first_thread+0x8c>)
    694c:	481b      	ldr	r0, [pc, #108]	; (69bc <z_unpend_first_thread+0x90>)
    694e:	2381      	movs	r3, #129	; 0x81
    6950:	f002 f94f 	bl	8bf2 <printk>
    6954:	4916      	ldr	r1, [pc, #88]	; (69b0 <z_unpend_first_thread+0x84>)
    6956:	481a      	ldr	r0, [pc, #104]	; (69c0 <z_unpend_first_thread+0x94>)
    6958:	f002 f94b 	bl	8bf2 <printk>
    695c:	4815      	ldr	r0, [pc, #84]	; (69b4 <z_unpend_first_thread+0x88>)
    695e:	2181      	movs	r1, #129	; 0x81
    6960:	f001 ff58 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6964:	4812      	ldr	r0, [pc, #72]	; (69b0 <z_unpend_first_thread+0x84>)
    6966:	f000 fd43 	bl	73f0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    696a:	4620      	mov	r0, r4
    696c:	f002 fcd4 	bl	9318 <z_priq_dumb_best>
		if (thread != NULL) {
    6970:	4604      	mov	r4, r0
    6972:	b128      	cbz	r0, 6980 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    6974:	f7ff fa64 	bl	5e40 <unpend_thread_no_timeout>
    6978:	f104 0018 	add.w	r0, r4, #24
    697c:	f000 fe64 	bl	7648 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6980:	480b      	ldr	r0, [pc, #44]	; (69b0 <z_unpend_first_thread+0x84>)
    6982:	f000 fd25 	bl	73d0 <z_spin_unlock_valid>
    6986:	b968      	cbnz	r0, 69a4 <z_unpend_first_thread+0x78>
    6988:	4a0a      	ldr	r2, [pc, #40]	; (69b4 <z_unpend_first_thread+0x88>)
    698a:	490e      	ldr	r1, [pc, #56]	; (69c4 <z_unpend_first_thread+0x98>)
    698c:	480b      	ldr	r0, [pc, #44]	; (69bc <z_unpend_first_thread+0x90>)
    698e:	23ac      	movs	r3, #172	; 0xac
    6990:	f002 f92f 	bl	8bf2 <printk>
    6994:	4906      	ldr	r1, [pc, #24]	; (69b0 <z_unpend_first_thread+0x84>)
    6996:	480c      	ldr	r0, [pc, #48]	; (69c8 <z_unpend_first_thread+0x9c>)
    6998:	f002 f92b 	bl	8bf2 <printk>
    699c:	4805      	ldr	r0, [pc, #20]	; (69b4 <z_unpend_first_thread+0x88>)
    699e:	21ac      	movs	r1, #172	; 0xac
    69a0:	f001 ff38 	bl	8814 <assert_post_action>
	__asm__ volatile(
    69a4:	f385 8811 	msr	BASEPRI, r5
    69a8:	f3bf 8f6f 	isb	sy
}
    69ac:	4620      	mov	r0, r4
    69ae:	bd38      	pop	{r3, r4, r5, pc}
    69b0:	20000c38 	.word	0x20000c38
    69b4:	00009f3d 	.word	0x00009f3d
    69b8:	00009f8f 	.word	0x00009f8f
    69bc:	00009c7a 	.word	0x00009c7a
    69c0:	00009fa4 	.word	0x00009fa4
    69c4:	00009f63 	.word	0x00009f63
    69c8:	00009f7a 	.word	0x00009f7a

000069cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    69cc:	4b04      	ldr	r3, [pc, #16]	; (69e0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    69ce:	2100      	movs	r1, #0
    69d0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    69d4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    69d8:	4608      	mov	r0, r1
    69da:	f7ff b8a9 	b.w	5b30 <k_sched_time_slice_set>
    69de:	bf00      	nop
    69e0:	20000c04 	.word	0x20000c04

000069e4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    69e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69e6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    69ea:	b173      	cbz	r3, 6a0a <z_impl_k_yield+0x26>
    69ec:	4941      	ldr	r1, [pc, #260]	; (6af4 <z_impl_k_yield+0x110>)
    69ee:	4a42      	ldr	r2, [pc, #264]	; (6af8 <z_impl_k_yield+0x114>)
    69f0:	4842      	ldr	r0, [pc, #264]	; (6afc <z_impl_k_yield+0x118>)
    69f2:	f240 43dc 	movw	r3, #1244	; 0x4dc
    69f6:	f002 f8fc 	bl	8bf2 <printk>
    69fa:	4841      	ldr	r0, [pc, #260]	; (6b00 <z_impl_k_yield+0x11c>)
    69fc:	f002 f8f9 	bl	8bf2 <printk>
    6a00:	483d      	ldr	r0, [pc, #244]	; (6af8 <z_impl_k_yield+0x114>)
    6a02:	f240 41dc 	movw	r1, #1244	; 0x4dc
    6a06:	f001 ff05 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6a0a:	f04f 0320 	mov.w	r3, #32
    6a0e:	f3ef 8611 	mrs	r6, BASEPRI
    6a12:	f383 8812 	msr	BASEPRI_MAX, r3
    6a16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a1a:	483a      	ldr	r0, [pc, #232]	; (6b04 <z_impl_k_yield+0x120>)
    6a1c:	f000 fcca 	bl	73b4 <z_spin_lock_valid>
    6a20:	b968      	cbnz	r0, 6a3e <z_impl_k_yield+0x5a>
    6a22:	4a39      	ldr	r2, [pc, #228]	; (6b08 <z_impl_k_yield+0x124>)
    6a24:	4939      	ldr	r1, [pc, #228]	; (6b0c <z_impl_k_yield+0x128>)
    6a26:	4835      	ldr	r0, [pc, #212]	; (6afc <z_impl_k_yield+0x118>)
    6a28:	2381      	movs	r3, #129	; 0x81
    6a2a:	f002 f8e2 	bl	8bf2 <printk>
    6a2e:	4935      	ldr	r1, [pc, #212]	; (6b04 <z_impl_k_yield+0x120>)
    6a30:	4837      	ldr	r0, [pc, #220]	; (6b10 <z_impl_k_yield+0x12c>)
    6a32:	f002 f8de 	bl	8bf2 <printk>
    6a36:	4834      	ldr	r0, [pc, #208]	; (6b08 <z_impl_k_yield+0x124>)
    6a38:	2181      	movs	r1, #129	; 0x81
    6a3a:	f001 feeb 	bl	8814 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6a3e:	4d35      	ldr	r5, [pc, #212]	; (6b14 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6a40:	4830      	ldr	r0, [pc, #192]	; (6b04 <z_impl_k_yield+0x120>)
    6a42:	f000 fcd5 	bl	73f0 <z_spin_lock_set_owner>
    6a46:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6a48:	7b4b      	ldrb	r3, [r1, #13]
    6a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6a4e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6a50:	f105 0020 	add.w	r0, r5, #32
    6a54:	f7ff f9d2 	bl	5dfc <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6a58:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6a5a:	7b63      	ldrb	r3, [r4, #13]
    6a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a60:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6a62:	4b2d      	ldr	r3, [pc, #180]	; (6b18 <z_impl_k_yield+0x134>)
    6a64:	429c      	cmp	r4, r3
    6a66:	d109      	bne.n	6a7c <z_impl_k_yield+0x98>
    6a68:	492c      	ldr	r1, [pc, #176]	; (6b1c <z_impl_k_yield+0x138>)
    6a6a:	4824      	ldr	r0, [pc, #144]	; (6afc <z_impl_k_yield+0x118>)
    6a6c:	4a22      	ldr	r2, [pc, #136]	; (6af8 <z_impl_k_yield+0x114>)
    6a6e:	23ba      	movs	r3, #186	; 0xba
    6a70:	f002 f8bf 	bl	8bf2 <printk>
    6a74:	4820      	ldr	r0, [pc, #128]	; (6af8 <z_impl_k_yield+0x114>)
    6a76:	21ba      	movs	r1, #186	; 0xba
    6a78:	f001 fecc 	bl	8814 <assert_post_action>
	return list->head == list;
    6a7c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a7e:	4828      	ldr	r0, [pc, #160]	; (6b20 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6a80:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a82:	4283      	cmp	r3, r0
    6a84:	bf08      	it	eq
    6a86:	2300      	moveq	r3, #0
    6a88:	2b00      	cmp	r3, #0
    6a8a:	bf38      	it	cc
    6a8c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a8e:	b35b      	cbz	r3, 6ae8 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6a90:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6a94:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6a98:	4297      	cmp	r7, r2
    6a9a:	d021      	beq.n	6ae0 <z_impl_k_yield+0xfc>
		return b2 - b1;
    6a9c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6a9e:	2a00      	cmp	r2, #0
    6aa0:	dd1e      	ble.n	6ae0 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    6aa2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6aa4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6aa8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6aaa:	605c      	str	r4, [r3, #4]
	update_cache(1);
    6aac:	2001      	movs	r0, #1
    6aae:	f7ff fa35 	bl	5f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ab2:	4814      	ldr	r0, [pc, #80]	; (6b04 <z_impl_k_yield+0x120>)
    6ab4:	f000 fc8c 	bl	73d0 <z_spin_unlock_valid>
    6ab8:	b968      	cbnz	r0, 6ad6 <z_impl_k_yield+0xf2>
    6aba:	4a13      	ldr	r2, [pc, #76]	; (6b08 <z_impl_k_yield+0x124>)
    6abc:	4919      	ldr	r1, [pc, #100]	; (6b24 <z_impl_k_yield+0x140>)
    6abe:	480f      	ldr	r0, [pc, #60]	; (6afc <z_impl_k_yield+0x118>)
    6ac0:	23c3      	movs	r3, #195	; 0xc3
    6ac2:	f002 f896 	bl	8bf2 <printk>
    6ac6:	490f      	ldr	r1, [pc, #60]	; (6b04 <z_impl_k_yield+0x120>)
    6ac8:	4817      	ldr	r0, [pc, #92]	; (6b28 <z_impl_k_yield+0x144>)
    6aca:	f002 f892 	bl	8bf2 <printk>
    6ace:	480e      	ldr	r0, [pc, #56]	; (6b08 <z_impl_k_yield+0x124>)
    6ad0:	21c3      	movs	r1, #195	; 0xc3
    6ad2:	f001 fe9f 	bl	8814 <assert_post_action>
    6ad6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    6ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6adc:	f7fb b9e2 	b.w	1ea4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6ae0:	428b      	cmp	r3, r1
    6ae2:	d001      	beq.n	6ae8 <z_impl_k_yield+0x104>
    6ae4:	681b      	ldr	r3, [r3, #0]
    6ae6:	e7d2      	b.n	6a8e <z_impl_k_yield+0xaa>
	node->prev = tail;
    6ae8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6aec:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6aee:	626c      	str	r4, [r5, #36]	; 0x24
}
    6af0:	e7dc      	b.n	6aac <z_impl_k_yield+0xc8>
    6af2:	bf00      	nop
    6af4:	0000a8d0 	.word	0x0000a8d0
    6af8:	0000aaad 	.word	0x0000aaad
    6afc:	00009c7a 	.word	0x00009c7a
    6b00:	0000a949 	.word	0x0000a949
    6b04:	20000c38 	.word	0x20000c38
    6b08:	00009f3d 	.word	0x00009f3d
    6b0c:	00009f8f 	.word	0x00009f8f
    6b10:	00009fa4 	.word	0x00009fa4
    6b14:	20000c04 	.word	0x20000c04
    6b18:	20000410 	.word	0x20000410
    6b1c:	0000aacf 	.word	0x0000aacf
    6b20:	20000c24 	.word	0x20000c24
    6b24:	00009f63 	.word	0x00009f63
    6b28:	00009f7a 	.word	0x00009f7a

00006b2c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b30:	4604      	mov	r4, r0
    6b32:	460d      	mov	r5, r1
    6b34:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6b38:	b173      	cbz	r3, 6b58 <z_tick_sleep+0x2c>
    6b3a:	4945      	ldr	r1, [pc, #276]	; (6c50 <z_tick_sleep+0x124>)
    6b3c:	4a45      	ldr	r2, [pc, #276]	; (6c54 <z_tick_sleep+0x128>)
    6b3e:	4846      	ldr	r0, [pc, #280]	; (6c58 <z_tick_sleep+0x12c>)
    6b40:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    6b44:	f002 f855 	bl	8bf2 <printk>
    6b48:	4844      	ldr	r0, [pc, #272]	; (6c5c <z_tick_sleep+0x130>)
    6b4a:	f002 f852 	bl	8bf2 <printk>
    6b4e:	4841      	ldr	r0, [pc, #260]	; (6c54 <z_tick_sleep+0x128>)
    6b50:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    6b54:	f001 fe5e 	bl	8814 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6b58:	ea54 0305 	orrs.w	r3, r4, r5
    6b5c:	d104      	bne.n	6b68 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    6b5e:	f7ff ff41 	bl	69e4 <z_impl_k_yield>
		k_yield();
		return 0;
    6b62:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    6b68:	f06f 0301 	mvn.w	r3, #1
    6b6c:	1b1e      	subs	r6, r3, r4
    6b6e:	f04f 33ff 	mov.w	r3, #4294967295
    6b72:	eb63 0705 	sbc.w	r7, r3, r5
    6b76:	2e01      	cmp	r6, #1
    6b78:	f177 0300 	sbcs.w	r3, r7, #0
    6b7c:	da64      	bge.n	6c48 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6b7e:	f002 fbf0 	bl	9362 <sys_clock_tick_get_32>
    6b82:	1906      	adds	r6, r0, r4
    6b84:	f04f 0320 	mov.w	r3, #32
    6b88:	f3ef 8811 	mrs	r8, BASEPRI
    6b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b94:	4832      	ldr	r0, [pc, #200]	; (6c60 <z_tick_sleep+0x134>)
    6b96:	f000 fc0d 	bl	73b4 <z_spin_lock_valid>
    6b9a:	b968      	cbnz	r0, 6bb8 <z_tick_sleep+0x8c>
    6b9c:	4a31      	ldr	r2, [pc, #196]	; (6c64 <z_tick_sleep+0x138>)
    6b9e:	4932      	ldr	r1, [pc, #200]	; (6c68 <z_tick_sleep+0x13c>)
    6ba0:	482d      	ldr	r0, [pc, #180]	; (6c58 <z_tick_sleep+0x12c>)
    6ba2:	2381      	movs	r3, #129	; 0x81
    6ba4:	f002 f825 	bl	8bf2 <printk>
    6ba8:	492d      	ldr	r1, [pc, #180]	; (6c60 <z_tick_sleep+0x134>)
    6baa:	4830      	ldr	r0, [pc, #192]	; (6c6c <z_tick_sleep+0x140>)
    6bac:	f002 f821 	bl	8bf2 <printk>
    6bb0:	482c      	ldr	r0, [pc, #176]	; (6c64 <z_tick_sleep+0x138>)
    6bb2:	2181      	movs	r1, #129	; 0x81
    6bb4:	f001 fe2e 	bl	8814 <assert_post_action>
	pending_current = _current;
    6bb8:	4f2d      	ldr	r7, [pc, #180]	; (6c70 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    6bba:	4829      	ldr	r0, [pc, #164]	; (6c60 <z_tick_sleep+0x134>)
    6bbc:	f000 fc18 	bl	73f0 <z_spin_lock_set_owner>
    6bc0:	4b2c      	ldr	r3, [pc, #176]	; (6c74 <z_tick_sleep+0x148>)
    6bc2:	68b8      	ldr	r0, [r7, #8]
    6bc4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6bc6:	f7ff fbf7 	bl	63b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6bca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6bcc:	492a      	ldr	r1, [pc, #168]	; (6c78 <z_tick_sleep+0x14c>)
    6bce:	4622      	mov	r2, r4
    6bd0:	462b      	mov	r3, r5
    6bd2:	3018      	adds	r0, #24
    6bd4:	f000 fc64 	bl	74a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6bd8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bda:	4821      	ldr	r0, [pc, #132]	; (6c60 <z_tick_sleep+0x134>)
    6bdc:	7b53      	ldrb	r3, [r2, #13]
    6bde:	f043 0310 	orr.w	r3, r3, #16
    6be2:	7353      	strb	r3, [r2, #13]
    6be4:	f000 fbf4 	bl	73d0 <z_spin_unlock_valid>
    6be8:	b968      	cbnz	r0, 6c06 <z_tick_sleep+0xda>
    6bea:	4a1e      	ldr	r2, [pc, #120]	; (6c64 <z_tick_sleep+0x138>)
    6bec:	4923      	ldr	r1, [pc, #140]	; (6c7c <z_tick_sleep+0x150>)
    6bee:	481a      	ldr	r0, [pc, #104]	; (6c58 <z_tick_sleep+0x12c>)
    6bf0:	23c3      	movs	r3, #195	; 0xc3
    6bf2:	f001 fffe 	bl	8bf2 <printk>
    6bf6:	491a      	ldr	r1, [pc, #104]	; (6c60 <z_tick_sleep+0x134>)
    6bf8:	4821      	ldr	r0, [pc, #132]	; (6c80 <z_tick_sleep+0x154>)
    6bfa:	f001 fffa 	bl	8bf2 <printk>
    6bfe:	4819      	ldr	r0, [pc, #100]	; (6c64 <z_tick_sleep+0x138>)
    6c00:	21c3      	movs	r1, #195	; 0xc3
    6c02:	f001 fe07 	bl	8814 <assert_post_action>
    6c06:	4640      	mov	r0, r8
    6c08:	f7fb f94c 	bl	1ea4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6c0c:	68bb      	ldr	r3, [r7, #8]
    6c0e:	7b5b      	ldrb	r3, [r3, #13]
    6c10:	06db      	lsls	r3, r3, #27
    6c12:	d50e      	bpl.n	6c32 <z_tick_sleep+0x106>
    6c14:	491b      	ldr	r1, [pc, #108]	; (6c84 <z_tick_sleep+0x158>)
    6c16:	4a0f      	ldr	r2, [pc, #60]	; (6c54 <z_tick_sleep+0x128>)
    6c18:	480f      	ldr	r0, [pc, #60]	; (6c58 <z_tick_sleep+0x12c>)
    6c1a:	f240 5319 	movw	r3, #1305	; 0x519
    6c1e:	f001 ffe8 	bl	8bf2 <printk>
    6c22:	480e      	ldr	r0, [pc, #56]	; (6c5c <z_tick_sleep+0x130>)
    6c24:	f001 ffe5 	bl	8bf2 <printk>
    6c28:	480a      	ldr	r0, [pc, #40]	; (6c54 <z_tick_sleep+0x128>)
    6c2a:	f240 5119 	movw	r1, #1305	; 0x519
    6c2e:	f001 fdf1 	bl	8814 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6c32:	f002 fb96 	bl	9362 <sys_clock_tick_get_32>
    6c36:	1a30      	subs	r0, r6, r0
    6c38:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    6c3c:	2801      	cmp	r0, #1
    6c3e:	f171 0300 	sbcs.w	r3, r1, #0
    6c42:	bfb8      	it	lt
    6c44:	2000      	movlt	r0, #0
    6c46:	e78d      	b.n	6b64 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6c48:	f06f 0601 	mvn.w	r6, #1
    6c4c:	1b36      	subs	r6, r6, r4
    6c4e:	e799      	b.n	6b84 <z_tick_sleep+0x58>
    6c50:	0000a8d0 	.word	0x0000a8d0
    6c54:	0000aaad 	.word	0x0000aaad
    6c58:	00009c7a 	.word	0x00009c7a
    6c5c:	0000a949 	.word	0x0000a949
    6c60:	20000c38 	.word	0x20000c38
    6c64:	00009f3d 	.word	0x00009f3d
    6c68:	00009f8f 	.word	0x00009f8f
    6c6c:	00009fa4 	.word	0x00009fa4
    6c70:	20000c04 	.word	0x20000c04
    6c74:	20000c34 	.word	0x20000c34
    6c78:	00006305 	.word	0x00006305
    6c7c:	00009f63 	.word	0x00009f63
    6c80:	00009f7a 	.word	0x00009f7a
    6c84:	0000ab5f 	.word	0x0000ab5f

00006c88 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6c88:	b538      	push	{r3, r4, r5, lr}
    6c8a:	4604      	mov	r4, r0
    6c8c:	460d      	mov	r5, r1
    6c8e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6c92:	b173      	cbz	r3, 6cb2 <z_impl_k_sleep+0x2a>
    6c94:	4913      	ldr	r1, [pc, #76]	; (6ce4 <z_impl_k_sleep+0x5c>)
    6c96:	4a14      	ldr	r2, [pc, #80]	; (6ce8 <z_impl_k_sleep+0x60>)
    6c98:	4814      	ldr	r0, [pc, #80]	; (6cec <z_impl_k_sleep+0x64>)
    6c9a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    6c9e:	f001 ffa8 	bl	8bf2 <printk>
    6ca2:	4813      	ldr	r0, [pc, #76]	; (6cf0 <z_impl_k_sleep+0x68>)
    6ca4:	f001 ffa5 	bl	8bf2 <printk>
    6ca8:	480f      	ldr	r0, [pc, #60]	; (6ce8 <z_impl_k_sleep+0x60>)
    6caa:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    6cae:	f001 fdb1 	bl	8814 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6cb2:	1c6b      	adds	r3, r5, #1
    6cb4:	bf08      	it	eq
    6cb6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    6cba:	d106      	bne.n	6cca <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    6cbc:	4b0d      	ldr	r3, [pc, #52]	; (6cf4 <z_impl_k_sleep+0x6c>)
    6cbe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6cc0:	f7ff fd02 	bl	66c8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6cc4:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6cc8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6cca:	4620      	mov	r0, r4
    6ccc:	4629      	mov	r1, r5
    6cce:	f7ff ff2d 	bl	6b2c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    6cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6cd6:	fb80 3403 	smull	r3, r4, r0, r3
    6cda:	0bd8      	lsrs	r0, r3, #15
    6cdc:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    6ce0:	e7f2      	b.n	6cc8 <z_impl_k_sleep+0x40>
    6ce2:	bf00      	nop
    6ce4:	0000a8d0 	.word	0x0000a8d0
    6ce8:	0000aaad 	.word	0x0000aaad
    6cec:	00009c7a 	.word	0x00009c7a
    6cf0:	0000a949 	.word	0x0000a949
    6cf4:	20000c04 	.word	0x20000c04

00006cf8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6cf8:	4b01      	ldr	r3, [pc, #4]	; (6d00 <z_impl_z_current_get+0x8>)
    6cfa:	6898      	ldr	r0, [r3, #8]
    6cfc:	4770      	bx	lr
    6cfe:	bf00      	nop
    6d00:	20000c04 	.word	0x20000c04

00006d04 <z_impl_k_is_preempt_thread>:
    6d04:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    6d08:	b93b      	cbnz	r3, 6d1a <z_impl_k_is_preempt_thread+0x16>
    6d0a:	4b05      	ldr	r3, [pc, #20]	; (6d20 <z_impl_k_is_preempt_thread+0x1c>)
    6d0c:	689b      	ldr	r3, [r3, #8]
    6d0e:	89d8      	ldrh	r0, [r3, #14]
    6d10:	287f      	cmp	r0, #127	; 0x7f
    6d12:	bf8c      	ite	hi
    6d14:	2000      	movhi	r0, #0
    6d16:	2001      	movls	r0, #1
    6d18:	4770      	bx	lr
    6d1a:	2000      	movs	r0, #0
}
    6d1c:	4770      	bx	lr
    6d1e:	bf00      	nop
    6d20:	20000c04 	.word	0x20000c04

00006d24 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d28:	4604      	mov	r4, r0
    6d2a:	f04f 0320 	mov.w	r3, #32
    6d2e:	f3ef 8611 	mrs	r6, BASEPRI
    6d32:	f383 8812 	msr	BASEPRI_MAX, r3
    6d36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d3a:	4848      	ldr	r0, [pc, #288]	; (6e5c <z_thread_abort+0x138>)
    6d3c:	f000 fb3a 	bl	73b4 <z_spin_lock_valid>
    6d40:	b968      	cbnz	r0, 6d5e <z_thread_abort+0x3a>
    6d42:	4a47      	ldr	r2, [pc, #284]	; (6e60 <z_thread_abort+0x13c>)
    6d44:	4947      	ldr	r1, [pc, #284]	; (6e64 <z_thread_abort+0x140>)
    6d46:	4848      	ldr	r0, [pc, #288]	; (6e68 <z_thread_abort+0x144>)
    6d48:	2381      	movs	r3, #129	; 0x81
    6d4a:	f001 ff52 	bl	8bf2 <printk>
    6d4e:	4943      	ldr	r1, [pc, #268]	; (6e5c <z_thread_abort+0x138>)
    6d50:	4846      	ldr	r0, [pc, #280]	; (6e6c <z_thread_abort+0x148>)
    6d52:	f001 ff4e 	bl	8bf2 <printk>
    6d56:	4842      	ldr	r0, [pc, #264]	; (6e60 <z_thread_abort+0x13c>)
    6d58:	2181      	movs	r1, #129	; 0x81
    6d5a:	f001 fd5b 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d5e:	483f      	ldr	r0, [pc, #252]	; (6e5c <z_thread_abort+0x138>)
    6d60:	f000 fb46 	bl	73f0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6d64:	7b63      	ldrb	r3, [r4, #13]
    6d66:	071a      	lsls	r2, r3, #28
    6d68:	d517      	bpl.n	6d9a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d6a:	483c      	ldr	r0, [pc, #240]	; (6e5c <z_thread_abort+0x138>)
    6d6c:	f000 fb30 	bl	73d0 <z_spin_unlock_valid>
    6d70:	b968      	cbnz	r0, 6d8e <z_thread_abort+0x6a>
    6d72:	4a3b      	ldr	r2, [pc, #236]	; (6e60 <z_thread_abort+0x13c>)
    6d74:	493e      	ldr	r1, [pc, #248]	; (6e70 <z_thread_abort+0x14c>)
    6d76:	483c      	ldr	r0, [pc, #240]	; (6e68 <z_thread_abort+0x144>)
    6d78:	23ac      	movs	r3, #172	; 0xac
    6d7a:	f001 ff3a 	bl	8bf2 <printk>
    6d7e:	4937      	ldr	r1, [pc, #220]	; (6e5c <z_thread_abort+0x138>)
    6d80:	483c      	ldr	r0, [pc, #240]	; (6e74 <z_thread_abort+0x150>)
    6d82:	f001 ff36 	bl	8bf2 <printk>
    6d86:	4836      	ldr	r0, [pc, #216]	; (6e60 <z_thread_abort+0x13c>)
    6d88:	21ac      	movs	r1, #172	; 0xac
    6d8a:	f001 fd43 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6d8e:	f386 8811 	msr	BASEPRI, r6
    6d92:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6d9a:	f023 0220 	bic.w	r2, r3, #32
    6d9e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6da2:	09d2      	lsrs	r2, r2, #7
    6da4:	d142      	bne.n	6e2c <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6da6:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6da8:	68a3      	ldr	r3, [r4, #8]
    6daa:	b113      	cbz	r3, 6db2 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6dac:	4620      	mov	r0, r4
    6dae:	f7ff f847 	bl	5e40 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6db2:	f104 0018 	add.w	r0, r4, #24
    6db6:	f000 fc47 	bl	7648 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6dba:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6dbe:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6dc2:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dc4:	42bd      	cmp	r5, r7
    6dc6:	d001      	beq.n	6dcc <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6dc8:	2d00      	cmp	r5, #0
    6dca:	d139      	bne.n	6e40 <z_thread_abort+0x11c>
		update_cache(1);
    6dcc:	2001      	movs	r0, #1
    6dce:	f7ff f8a5 	bl	5f1c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6dd2:	4b29      	ldr	r3, [pc, #164]	; (6e78 <z_thread_abort+0x154>)
    6dd4:	689b      	ldr	r3, [r3, #8]
    6dd6:	42a3      	cmp	r3, r4
    6dd8:	d1c7      	bne.n	6d6a <z_thread_abort+0x46>
    6dda:	f3ef 8305 	mrs	r3, IPSR
    6dde:	2b00      	cmp	r3, #0
    6de0:	d1c3      	bne.n	6d6a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6de2:	481e      	ldr	r0, [pc, #120]	; (6e5c <z_thread_abort+0x138>)
    6de4:	f000 faf4 	bl	73d0 <z_spin_unlock_valid>
    6de8:	b968      	cbnz	r0, 6e06 <z_thread_abort+0xe2>
    6dea:	4a1d      	ldr	r2, [pc, #116]	; (6e60 <z_thread_abort+0x13c>)
    6dec:	4920      	ldr	r1, [pc, #128]	; (6e70 <z_thread_abort+0x14c>)
    6dee:	481e      	ldr	r0, [pc, #120]	; (6e68 <z_thread_abort+0x144>)
    6df0:	23c3      	movs	r3, #195	; 0xc3
    6df2:	f001 fefe 	bl	8bf2 <printk>
    6df6:	4919      	ldr	r1, [pc, #100]	; (6e5c <z_thread_abort+0x138>)
    6df8:	481e      	ldr	r0, [pc, #120]	; (6e74 <z_thread_abort+0x150>)
    6dfa:	f001 fefa 	bl	8bf2 <printk>
    6dfe:	4818      	ldr	r0, [pc, #96]	; (6e60 <z_thread_abort+0x13c>)
    6e00:	21c3      	movs	r1, #195	; 0xc3
    6e02:	f001 fd07 	bl	8814 <assert_post_action>
    6e06:	4630      	mov	r0, r6
    6e08:	f7fb f84c 	bl	1ea4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6e0c:	4a1b      	ldr	r2, [pc, #108]	; (6e7c <z_thread_abort+0x158>)
    6e0e:	491c      	ldr	r1, [pc, #112]	; (6e80 <z_thread_abort+0x15c>)
    6e10:	4815      	ldr	r0, [pc, #84]	; (6e68 <z_thread_abort+0x144>)
    6e12:	f240 634b 	movw	r3, #1611	; 0x64b
    6e16:	f001 feec 	bl	8bf2 <printk>
    6e1a:	481a      	ldr	r0, [pc, #104]	; (6e84 <z_thread_abort+0x160>)
    6e1c:	f001 fee9 	bl	8bf2 <printk>
    6e20:	4816      	ldr	r0, [pc, #88]	; (6e7c <z_thread_abort+0x158>)
    6e22:	f240 614b 	movw	r1, #1611	; 0x64b
    6e26:	f001 fcf5 	bl	8814 <assert_post_action>
    6e2a:	e79e      	b.n	6d6a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e2c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6e30:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6e34:	4814      	ldr	r0, [pc, #80]	; (6e88 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e36:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e38:	4621      	mov	r1, r4
    6e3a:	f7fe ffdf 	bl	5dfc <z_priq_dumb_remove>
}
    6e3e:	e7b3      	b.n	6da8 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6e40:	4628      	mov	r0, r5
    6e42:	f7fe fffd 	bl	5e40 <unpend_thread_no_timeout>
    6e46:	f105 0018 	add.w	r0, r5, #24
    6e4a:	f000 fbfd 	bl	7648 <z_abort_timeout>
    6e4e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    6e52:	4628      	mov	r0, r5
    6e54:	f7ff f968 	bl	6128 <ready_thread>
    6e58:	e7b3      	b.n	6dc2 <z_thread_abort+0x9e>
    6e5a:	bf00      	nop
    6e5c:	20000c38 	.word	0x20000c38
    6e60:	00009f3d 	.word	0x00009f3d
    6e64:	00009f8f 	.word	0x00009f8f
    6e68:	00009c7a 	.word	0x00009c7a
    6e6c:	00009fa4 	.word	0x00009fa4
    6e70:	00009f63 	.word	0x00009f63
    6e74:	00009f7a 	.word	0x00009f7a
    6e78:	20000c04 	.word	0x20000c04
    6e7c:	0000aaad 	.word	0x0000aaad
    6e80:	0000a609 	.word	0x0000a609
    6e84:	0000ab9f 	.word	0x0000ab9f
    6e88:	20000c24 	.word	0x20000c24

00006e8c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    6e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e8e:	4604      	mov	r4, r0
    6e90:	460e      	mov	r6, r1
    6e92:	4615      	mov	r5, r2
	__asm__ volatile(
    6e94:	f04f 0320 	mov.w	r3, #32
    6e98:	f3ef 8711 	mrs	r7, BASEPRI
    6e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    6ea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ea4:	481e      	ldr	r0, [pc, #120]	; (6f20 <z_sched_wake+0x94>)
    6ea6:	f000 fa85 	bl	73b4 <z_spin_lock_valid>
    6eaa:	b968      	cbnz	r0, 6ec8 <z_sched_wake+0x3c>
    6eac:	4a1d      	ldr	r2, [pc, #116]	; (6f24 <z_sched_wake+0x98>)
    6eae:	491e      	ldr	r1, [pc, #120]	; (6f28 <z_sched_wake+0x9c>)
    6eb0:	481e      	ldr	r0, [pc, #120]	; (6f2c <z_sched_wake+0xa0>)
    6eb2:	2381      	movs	r3, #129	; 0x81
    6eb4:	f001 fe9d 	bl	8bf2 <printk>
    6eb8:	4919      	ldr	r1, [pc, #100]	; (6f20 <z_sched_wake+0x94>)
    6eba:	481d      	ldr	r0, [pc, #116]	; (6f30 <z_sched_wake+0xa4>)
    6ebc:	f001 fe99 	bl	8bf2 <printk>
    6ec0:	4818      	ldr	r0, [pc, #96]	; (6f24 <z_sched_wake+0x98>)
    6ec2:	2181      	movs	r1, #129	; 0x81
    6ec4:	f001 fca6 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ec8:	4815      	ldr	r0, [pc, #84]	; (6f20 <z_sched_wake+0x94>)
    6eca:	f000 fa91 	bl	73f0 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    6ece:	4620      	mov	r0, r4
    6ed0:	f002 fa22 	bl	9318 <z_priq_dumb_best>

		if (thread != NULL) {
    6ed4:	4604      	mov	r4, r0
    6ed6:	b158      	cbz	r0, 6ef0 <z_sched_wake+0x64>
    6ed8:	67c6      	str	r6, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
    6eda:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    6edc:	f7fe ffb0 	bl	5e40 <unpend_thread_no_timeout>
    6ee0:	f104 0018 	add.w	r0, r4, #24
    6ee4:	f000 fbb0 	bl	7648 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    6ee8:	4620      	mov	r0, r4
    6eea:	f7ff f91d 	bl	6128 <ready_thread>
			ret = true;
    6eee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ef0:	480b      	ldr	r0, [pc, #44]	; (6f20 <z_sched_wake+0x94>)
    6ef2:	f000 fa6d 	bl	73d0 <z_spin_unlock_valid>
    6ef6:	b968      	cbnz	r0, 6f14 <z_sched_wake+0x88>
    6ef8:	4a0a      	ldr	r2, [pc, #40]	; (6f24 <z_sched_wake+0x98>)
    6efa:	490e      	ldr	r1, [pc, #56]	; (6f34 <z_sched_wake+0xa8>)
    6efc:	480b      	ldr	r0, [pc, #44]	; (6f2c <z_sched_wake+0xa0>)
    6efe:	23ac      	movs	r3, #172	; 0xac
    6f00:	f001 fe77 	bl	8bf2 <printk>
    6f04:	4906      	ldr	r1, [pc, #24]	; (6f20 <z_sched_wake+0x94>)
    6f06:	480c      	ldr	r0, [pc, #48]	; (6f38 <z_sched_wake+0xac>)
    6f08:	f001 fe73 	bl	8bf2 <printk>
    6f0c:	4805      	ldr	r0, [pc, #20]	; (6f24 <z_sched_wake+0x98>)
    6f0e:	21ac      	movs	r1, #172	; 0xac
    6f10:	f001 fc80 	bl	8814 <assert_post_action>
	__asm__ volatile(
    6f14:	f387 8811 	msr	BASEPRI, r7
    6f18:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6f1c:	4620      	mov	r0, r4
    6f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f20:	20000c38 	.word	0x20000c38
    6f24:	00009f3d 	.word	0x00009f3d
    6f28:	00009f8f 	.word	0x00009f8f
    6f2c:	00009c7a 	.word	0x00009c7a
    6f30:	00009fa4 	.word	0x00009fa4
    6f34:	00009f63 	.word	0x00009f63
    6f38:	00009f7a 	.word	0x00009f7a

00006f3c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6f3c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6f3e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6f42:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6f44:	e9cd 6700 	strd	r6, r7, [sp]
    6f48:	f7ff faf2 	bl	6530 <z_pend_curr>

	if (data != NULL) {
    6f4c:	b11c      	cbz	r4, 6f56 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6f4e:	4b03      	ldr	r3, [pc, #12]	; (6f5c <z_sched_wait+0x20>)
    6f50:	689b      	ldr	r3, [r3, #8]
    6f52:	695b      	ldr	r3, [r3, #20]
    6f54:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6f56:	b002      	add	sp, #8
    6f58:	bdd0      	pop	{r4, r6, r7, pc}
    6f5a:	bf00      	nop
    6f5c:	20000c04 	.word	0x20000c04

00006f60 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6f60:	b538      	push	{r3, r4, r5, lr}
    6f62:	4604      	mov	r4, r0
	__asm__ volatile(
    6f64:	f04f 0320 	mov.w	r3, #32
    6f68:	f3ef 8511 	mrs	r5, BASEPRI
    6f6c:	f383 8812 	msr	BASEPRI_MAX, r3
    6f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f74:	4817      	ldr	r0, [pc, #92]	; (6fd4 <z_impl_k_sem_give+0x74>)
    6f76:	f000 fa1d 	bl	73b4 <z_spin_lock_valid>
    6f7a:	b968      	cbnz	r0, 6f98 <z_impl_k_sem_give+0x38>
    6f7c:	4a16      	ldr	r2, [pc, #88]	; (6fd8 <z_impl_k_sem_give+0x78>)
    6f7e:	4917      	ldr	r1, [pc, #92]	; (6fdc <z_impl_k_sem_give+0x7c>)
    6f80:	4817      	ldr	r0, [pc, #92]	; (6fe0 <z_impl_k_sem_give+0x80>)
    6f82:	2381      	movs	r3, #129	; 0x81
    6f84:	f001 fe35 	bl	8bf2 <printk>
    6f88:	4912      	ldr	r1, [pc, #72]	; (6fd4 <z_impl_k_sem_give+0x74>)
    6f8a:	4816      	ldr	r0, [pc, #88]	; (6fe4 <z_impl_k_sem_give+0x84>)
    6f8c:	f001 fe31 	bl	8bf2 <printk>
    6f90:	4811      	ldr	r0, [pc, #68]	; (6fd8 <z_impl_k_sem_give+0x78>)
    6f92:	2181      	movs	r1, #129	; 0x81
    6f94:	f001 fc3e 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f98:	480e      	ldr	r0, [pc, #56]	; (6fd4 <z_impl_k_sem_give+0x74>)
    6f9a:	f000 fa29 	bl	73f0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6f9e:	4620      	mov	r0, r4
    6fa0:	f7ff fcc4 	bl	692c <z_unpend_first_thread>

	if (thread != NULL) {
    6fa4:	b148      	cbz	r0, 6fba <z_impl_k_sem_give+0x5a>
    6fa6:	2200      	movs	r2, #0
    6fa8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6faa:	f7ff f90f 	bl	61cc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6fae:	4629      	mov	r1, r5
    6fb0:	4808      	ldr	r0, [pc, #32]	; (6fd4 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6fb6:	f7fe be69 	b.w	5c8c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6fba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6fbe:	429a      	cmp	r2, r3
    6fc0:	bf18      	it	ne
    6fc2:	3301      	addne	r3, #1
    6fc4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6fc6:	2102      	movs	r1, #2
    6fc8:	f104 0010 	add.w	r0, r4, #16
    6fcc:	f002 f95c 	bl	9288 <z_handle_obj_poll_events>
}
    6fd0:	e7ed      	b.n	6fae <z_impl_k_sem_give+0x4e>
    6fd2:	bf00      	nop
    6fd4:	20000c44 	.word	0x20000c44
    6fd8:	00009f3d 	.word	0x00009f3d
    6fdc:	00009f8f 	.word	0x00009f8f
    6fe0:	00009c7a 	.word	0x00009c7a
    6fe4:	00009fa4 	.word	0x00009fa4

00006fe8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6fea:	4604      	mov	r4, r0
    6fec:	4616      	mov	r6, r2
    6fee:	461f      	mov	r7, r3
    6ff0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6ff4:	b17b      	cbz	r3, 7016 <z_impl_k_sem_take+0x2e>
    6ff6:	ea56 0307 	orrs.w	r3, r6, r7
    6ffa:	d00c      	beq.n	7016 <z_impl_k_sem_take+0x2e>
    6ffc:	4935      	ldr	r1, [pc, #212]	; (70d4 <z_impl_k_sem_take+0xec>)
    6ffe:	4a36      	ldr	r2, [pc, #216]	; (70d8 <z_impl_k_sem_take+0xf0>)
    7000:	4836      	ldr	r0, [pc, #216]	; (70dc <z_impl_k_sem_take+0xf4>)
    7002:	2379      	movs	r3, #121	; 0x79
    7004:	f001 fdf5 	bl	8bf2 <printk>
    7008:	4835      	ldr	r0, [pc, #212]	; (70e0 <z_impl_k_sem_take+0xf8>)
    700a:	f001 fdf2 	bl	8bf2 <printk>
    700e:	4832      	ldr	r0, [pc, #200]	; (70d8 <z_impl_k_sem_take+0xf0>)
    7010:	2179      	movs	r1, #121	; 0x79
    7012:	f001 fbff 	bl	8814 <assert_post_action>
    7016:	f04f 0320 	mov.w	r3, #32
    701a:	f3ef 8511 	mrs	r5, BASEPRI
    701e:	f383 8812 	msr	BASEPRI_MAX, r3
    7022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7026:	482f      	ldr	r0, [pc, #188]	; (70e4 <z_impl_k_sem_take+0xfc>)
    7028:	f000 f9c4 	bl	73b4 <z_spin_lock_valid>
    702c:	b968      	cbnz	r0, 704a <z_impl_k_sem_take+0x62>
    702e:	4a2e      	ldr	r2, [pc, #184]	; (70e8 <z_impl_k_sem_take+0x100>)
    7030:	492e      	ldr	r1, [pc, #184]	; (70ec <z_impl_k_sem_take+0x104>)
    7032:	482a      	ldr	r0, [pc, #168]	; (70dc <z_impl_k_sem_take+0xf4>)
    7034:	2381      	movs	r3, #129	; 0x81
    7036:	f001 fddc 	bl	8bf2 <printk>
    703a:	492a      	ldr	r1, [pc, #168]	; (70e4 <z_impl_k_sem_take+0xfc>)
    703c:	482c      	ldr	r0, [pc, #176]	; (70f0 <z_impl_k_sem_take+0x108>)
    703e:	f001 fdd8 	bl	8bf2 <printk>
    7042:	4829      	ldr	r0, [pc, #164]	; (70e8 <z_impl_k_sem_take+0x100>)
    7044:	2181      	movs	r1, #129	; 0x81
    7046:	f001 fbe5 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    704a:	4826      	ldr	r0, [pc, #152]	; (70e4 <z_impl_k_sem_take+0xfc>)
    704c:	f000 f9d0 	bl	73f0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7050:	68a3      	ldr	r3, [r4, #8]
    7052:	b1d3      	cbz	r3, 708a <z_impl_k_sem_take+0xa2>
		sem->count--;
    7054:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7056:	4823      	ldr	r0, [pc, #140]	; (70e4 <z_impl_k_sem_take+0xfc>)
    7058:	60a3      	str	r3, [r4, #8]
    705a:	f000 f9b9 	bl	73d0 <z_spin_unlock_valid>
    705e:	b968      	cbnz	r0, 707c <z_impl_k_sem_take+0x94>
    7060:	4a21      	ldr	r2, [pc, #132]	; (70e8 <z_impl_k_sem_take+0x100>)
    7062:	4924      	ldr	r1, [pc, #144]	; (70f4 <z_impl_k_sem_take+0x10c>)
    7064:	481d      	ldr	r0, [pc, #116]	; (70dc <z_impl_k_sem_take+0xf4>)
    7066:	23ac      	movs	r3, #172	; 0xac
    7068:	f001 fdc3 	bl	8bf2 <printk>
    706c:	491d      	ldr	r1, [pc, #116]	; (70e4 <z_impl_k_sem_take+0xfc>)
    706e:	4822      	ldr	r0, [pc, #136]	; (70f8 <z_impl_k_sem_take+0x110>)
    7070:	f001 fdbf 	bl	8bf2 <printk>
    7074:	481c      	ldr	r0, [pc, #112]	; (70e8 <z_impl_k_sem_take+0x100>)
    7076:	21ac      	movs	r1, #172	; 0xac
    7078:	f001 fbcc 	bl	8814 <assert_post_action>
	__asm__ volatile(
    707c:	f385 8811 	msr	BASEPRI, r5
    7080:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7084:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7086:	b003      	add	sp, #12
    7088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    708a:	ea56 0307 	orrs.w	r3, r6, r7
    708e:	d118      	bne.n	70c2 <z_impl_k_sem_take+0xda>
    7090:	4814      	ldr	r0, [pc, #80]	; (70e4 <z_impl_k_sem_take+0xfc>)
    7092:	f000 f99d 	bl	73d0 <z_spin_unlock_valid>
    7096:	b968      	cbnz	r0, 70b4 <z_impl_k_sem_take+0xcc>
    7098:	4a13      	ldr	r2, [pc, #76]	; (70e8 <z_impl_k_sem_take+0x100>)
    709a:	4916      	ldr	r1, [pc, #88]	; (70f4 <z_impl_k_sem_take+0x10c>)
    709c:	480f      	ldr	r0, [pc, #60]	; (70dc <z_impl_k_sem_take+0xf4>)
    709e:	23ac      	movs	r3, #172	; 0xac
    70a0:	f001 fda7 	bl	8bf2 <printk>
    70a4:	490f      	ldr	r1, [pc, #60]	; (70e4 <z_impl_k_sem_take+0xfc>)
    70a6:	4814      	ldr	r0, [pc, #80]	; (70f8 <z_impl_k_sem_take+0x110>)
    70a8:	f001 fda3 	bl	8bf2 <printk>
    70ac:	480e      	ldr	r0, [pc, #56]	; (70e8 <z_impl_k_sem_take+0x100>)
    70ae:	21ac      	movs	r1, #172	; 0xac
    70b0:	f001 fbb0 	bl	8814 <assert_post_action>
    70b4:	f385 8811 	msr	BASEPRI, r5
    70b8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    70bc:	f06f 000f 	mvn.w	r0, #15
    70c0:	e7e1      	b.n	7086 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    70c2:	e9cd 6700 	strd	r6, r7, [sp]
    70c6:	4622      	mov	r2, r4
    70c8:	4629      	mov	r1, r5
    70ca:	4806      	ldr	r0, [pc, #24]	; (70e4 <z_impl_k_sem_take+0xfc>)
    70cc:	f7ff fa30 	bl	6530 <z_pend_curr>
	return ret;
    70d0:	e7d9      	b.n	7086 <z_impl_k_sem_take+0x9e>
    70d2:	bf00      	nop
    70d4:	0000abe1 	.word	0x0000abe1
    70d8:	0000abc1 	.word	0x0000abc1
    70dc:	00009c7a 	.word	0x00009c7a
    70e0:	0000a949 	.word	0x0000a949
    70e4:	20000c44 	.word	0x20000c44
    70e8:	00009f3d 	.word	0x00009f3d
    70ec:	00009f8f 	.word	0x00009f8f
    70f0:	00009fa4 	.word	0x00009fa4
    70f4:	00009f63 	.word	0x00009f63
    70f8:	00009f7a 	.word	0x00009f7a

000070fc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    70fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    70fe:	4b09      	ldr	r3, [pc, #36]	; (7124 <k_sys_work_q_init+0x28>)
    7100:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    7102:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    7104:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    7106:	9300      	str	r3, [sp, #0]
    7108:	4907      	ldr	r1, [pc, #28]	; (7128 <k_sys_work_q_init+0x2c>)
    710a:	4808      	ldr	r0, [pc, #32]	; (712c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    710c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    7110:	f04f 33ff 	mov.w	r3, #4294967295
    7114:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7118:	f000 ff88 	bl	802c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    711c:	4620      	mov	r0, r4
    711e:	b004      	add	sp, #16
    7120:	bd10      	pop	{r4, pc}
    7122:	bf00      	nop
    7124:	0000ac2e 	.word	0x0000ac2e
    7128:	20002840 	.word	0x20002840
    712c:	20000510 	.word	0x20000510

00007130 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7134:	b085      	sub	sp, #20
    7136:	4604      	mov	r4, r0
    7138:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    713c:	f1b8 0f0f 	cmp.w	r8, #15
{
    7140:	460f      	mov	r7, r1
    7142:	4615      	mov	r5, r2
    7144:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    7146:	d132      	bne.n	71ae <z_setup_new_thread+0x7e>
    7148:	4b25      	ldr	r3, [pc, #148]	; (71e0 <z_setup_new_thread+0xb0>)
    714a:	4599      	cmp	r9, r3
    714c:	d133      	bne.n	71b6 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    714e:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    7152:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7156:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7158:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    715a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    715c:	2304      	movs	r3, #4
    715e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7160:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7164:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    7168:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    716c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    716e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7172:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7174:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    717a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    717c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    717e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7180:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    7182:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7184:	464b      	mov	r3, r9
	node->prev = NULL;
    7186:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    718a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    718c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    718e:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7190:	4642      	mov	r2, r8
    7192:	4639      	mov	r1, r7
    7194:	4620      	mov	r0, r4
    7196:	f7fa fe9f 	bl	1ed8 <arch_new_thread>
	if (!_current) {
    719a:	4b12      	ldr	r3, [pc, #72]	; (71e4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    719c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    719e:	689b      	ldr	r3, [r3, #8]
    71a0:	b103      	cbz	r3, 71a4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    71a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    71a4:	6763      	str	r3, [r4, #116]	; 0x74
}
    71a6:	4640      	mov	r0, r8
    71a8:	b005      	add	sp, #20
    71aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    71ae:	f108 0310 	add.w	r3, r8, #16
    71b2:	2b1e      	cmp	r3, #30
    71b4:	d9cb      	bls.n	714e <z_setup_new_thread+0x1e>
    71b6:	4a0c      	ldr	r2, [pc, #48]	; (71e8 <z_setup_new_thread+0xb8>)
    71b8:	490c      	ldr	r1, [pc, #48]	; (71ec <z_setup_new_thread+0xbc>)
    71ba:	480d      	ldr	r0, [pc, #52]	; (71f0 <z_setup_new_thread+0xc0>)
    71bc:	f240 13ff 	movw	r3, #511	; 0x1ff
    71c0:	f001 fd17 	bl	8bf2 <printk>
    71c4:	4641      	mov	r1, r8
    71c6:	480b      	ldr	r0, [pc, #44]	; (71f4 <z_setup_new_thread+0xc4>)
    71c8:	f06f 030f 	mvn.w	r3, #15
    71cc:	220e      	movs	r2, #14
    71ce:	f001 fd10 	bl	8bf2 <printk>
    71d2:	4805      	ldr	r0, [pc, #20]	; (71e8 <z_setup_new_thread+0xb8>)
    71d4:	f240 11ff 	movw	r1, #511	; 0x1ff
    71d8:	f001 fb1c 	bl	8814 <assert_post_action>
    71dc:	e7b7      	b.n	714e <z_setup_new_thread+0x1e>
    71de:	bf00      	nop
    71e0:	00004fd1 	.word	0x00004fd1
    71e4:	20000c04 	.word	0x20000c04
    71e8:	0000ac37 	.word	0x0000ac37
    71ec:	0000ac5a 	.word	0x0000ac5a
    71f0:	00009c7a 	.word	0x00009c7a
    71f4:	0000acda 	.word	0x0000acda

000071f8 <z_impl_k_thread_create>:
{
    71f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    71fc:	b087      	sub	sp, #28
    71fe:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    7202:	4604      	mov	r4, r0
    7204:	460d      	mov	r5, r1
    7206:	4690      	mov	r8, r2
    7208:	4699      	mov	r9, r3
    720a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    720e:	b173      	cbz	r3, 722e <z_impl_k_thread_create+0x36>
    7210:	491b      	ldr	r1, [pc, #108]	; (7280 <z_impl_k_thread_create+0x88>)
    7212:	4a1c      	ldr	r2, [pc, #112]	; (7284 <z_impl_k_thread_create+0x8c>)
    7214:	481c      	ldr	r0, [pc, #112]	; (7288 <z_impl_k_thread_create+0x90>)
    7216:	f44f 731a 	mov.w	r3, #616	; 0x268
    721a:	f001 fcea 	bl	8bf2 <printk>
    721e:	481b      	ldr	r0, [pc, #108]	; (728c <z_impl_k_thread_create+0x94>)
    7220:	f001 fce7 	bl	8bf2 <printk>
    7224:	4817      	ldr	r0, [pc, #92]	; (7284 <z_impl_k_thread_create+0x8c>)
    7226:	f44f 711a 	mov.w	r1, #616	; 0x268
    722a:	f001 faf3 	bl	8814 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    722e:	2300      	movs	r3, #0
    7230:	9305      	str	r3, [sp, #20]
    7232:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7234:	9304      	str	r3, [sp, #16]
    7236:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7238:	9303      	str	r3, [sp, #12]
    723a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    723c:	9302      	str	r3, [sp, #8]
    723e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7240:	9301      	str	r3, [sp, #4]
    7242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7244:	9300      	str	r3, [sp, #0]
    7246:	4642      	mov	r2, r8
    7248:	464b      	mov	r3, r9
    724a:	4629      	mov	r1, r5
    724c:	4620      	mov	r0, r4
    724e:	f7ff ff6f 	bl	7130 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7252:	1c7b      	adds	r3, r7, #1
    7254:	bf08      	it	eq
    7256:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    725a:	d005      	beq.n	7268 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    725c:	ea56 0307 	orrs.w	r3, r6, r7
    7260:	d106      	bne.n	7270 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    7262:	4620      	mov	r0, r4
    7264:	f7fe fffa 	bl	625c <z_sched_start>
}
    7268:	4620      	mov	r0, r4
    726a:	b007      	add	sp, #28
    726c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7270:	4907      	ldr	r1, [pc, #28]	; (7290 <z_impl_k_thread_create+0x98>)
    7272:	4632      	mov	r2, r6
    7274:	463b      	mov	r3, r7
    7276:	f104 0018 	add.w	r0, r4, #24
    727a:	f000 f911 	bl	74a0 <z_add_timeout>
    727e:	e7f3      	b.n	7268 <z_impl_k_thread_create+0x70>
    7280:	0000a8d0 	.word	0x0000a8d0
    7284:	0000ac37 	.word	0x0000ac37
    7288:	00009c7a 	.word	0x00009c7a
    728c:	0000ad0b 	.word	0x0000ad0b
    7290:	00006305 	.word	0x00006305

00007294 <z_init_static_threads>:
{
    7294:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    7298:	4f3f      	ldr	r7, [pc, #252]	; (7398 <z_init_static_threads+0x104>)
    729a:	4d40      	ldr	r5, [pc, #256]	; (739c <z_init_static_threads+0x108>)
    729c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 73ac <z_init_static_threads+0x118>
{
    72a0:	b086      	sub	sp, #24
    72a2:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    72a4:	42bd      	cmp	r5, r7
    72a6:	d90e      	bls.n	72c6 <z_init_static_threads+0x32>
    72a8:	493d      	ldr	r1, [pc, #244]	; (73a0 <z_init_static_threads+0x10c>)
    72aa:	483e      	ldr	r0, [pc, #248]	; (73a4 <z_init_static_threads+0x110>)
    72ac:	f240 23cf 	movw	r3, #719	; 0x2cf
    72b0:	4642      	mov	r2, r8
    72b2:	f001 fc9e 	bl	8bf2 <printk>
    72b6:	483c      	ldr	r0, [pc, #240]	; (73a8 <z_init_static_threads+0x114>)
    72b8:	f001 fc9b 	bl	8bf2 <printk>
    72bc:	f240 21cf 	movw	r1, #719	; 0x2cf
    72c0:	4640      	mov	r0, r8
    72c2:	f001 faa7 	bl	8814 <assert_post_action>
    72c6:	42b5      	cmp	r5, r6
    72c8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    72cc:	d31f      	bcc.n	730e <z_init_static_threads+0x7a>
	k_sched_lock();
    72ce:	f7fe fd21 	bl	5d14 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    72d2:	4c32      	ldr	r4, [pc, #200]	; (739c <z_init_static_threads+0x108>)
    72d4:	4d35      	ldr	r5, [pc, #212]	; (73ac <z_init_static_threads+0x118>)
    72d6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 73a0 <z_init_static_threads+0x10c>
    72da:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 73a4 <z_init_static_threads+0x110>
    72de:	42b4      	cmp	r4, r6
    72e0:	d90e      	bls.n	7300 <z_init_static_threads+0x6c>
    72e2:	4641      	mov	r1, r8
    72e4:	f240 23ee 	movw	r3, #750	; 0x2ee
    72e8:	462a      	mov	r2, r5
    72ea:	4648      	mov	r0, r9
    72ec:	f001 fc81 	bl	8bf2 <printk>
    72f0:	482d      	ldr	r0, [pc, #180]	; (73a8 <z_init_static_threads+0x114>)
    72f2:	f001 fc7e 	bl	8bf2 <printk>
    72f6:	f240 21ee 	movw	r1, #750	; 0x2ee
    72fa:	4628      	mov	r0, r5
    72fc:	f001 fa8a 	bl	8814 <assert_post_action>
    7300:	42b4      	cmp	r4, r6
    7302:	d321      	bcc.n	7348 <z_init_static_threads+0xb4>
}
    7304:	b006      	add	sp, #24
    7306:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    730a:	f7ff ba47 	b.w	679c <k_sched_unlock>
		z_setup_new_thread(
    730e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7312:	9305      	str	r3, [sp, #20]
    7314:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7318:	9304      	str	r3, [sp, #16]
    731a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    731e:	9303      	str	r3, [sp, #12]
    7320:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7324:	9302      	str	r3, [sp, #8]
    7326:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    732a:	9301      	str	r3, [sp, #4]
    732c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7330:	9300      	str	r3, [sp, #0]
    7332:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7336:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    733a:	f7ff fef9 	bl	7130 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    733e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7342:	655d      	str	r5, [r3, #84]	; 0x54
    7344:	4625      	mov	r5, r4
    7346:	e7ad      	b.n	72a4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7348:	6a61      	ldr	r1, [r4, #36]	; 0x24
    734a:	1c4b      	adds	r3, r1, #1
    734c:	d014      	beq.n	7378 <z_init_static_threads+0xe4>
    734e:	f240 32e7 	movw	r2, #999	; 0x3e7
    7352:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    7354:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    735c:	4693      	mov	fp, r2
    735e:	469c      	mov	ip, r3
    7360:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7364:	459c      	cmp	ip, r3
    7366:	bf08      	it	eq
    7368:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    736a:	6827      	ldr	r7, [r4, #0]
    736c:	4658      	mov	r0, fp
    736e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7370:	d104      	bne.n	737c <z_init_static_threads+0xe8>
	z_sched_start(thread);
    7372:	4638      	mov	r0, r7
    7374:	f7fe ff72 	bl	625c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7378:	3430      	adds	r4, #48	; 0x30
    737a:	e7b0      	b.n	72de <z_init_static_threads+0x4a>
    737c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7380:	2300      	movs	r3, #0
    7382:	f7f8 febd 	bl	100 <__aeabi_uldivmod>
    7386:	4602      	mov	r2, r0
    7388:	460b      	mov	r3, r1
    738a:	f107 0018 	add.w	r0, r7, #24
    738e:	4908      	ldr	r1, [pc, #32]	; (73b0 <z_init_static_threads+0x11c>)
    7390:	f000 f886 	bl	74a0 <z_add_timeout>
    7394:	e7f0      	b.n	7378 <z_init_static_threads+0xe4>
    7396:	bf00      	nop
    7398:	20000208 	.word	0x20000208
    739c:	20000208 	.word	0x20000208
    73a0:	0000ad30 	.word	0x0000ad30
    73a4:	00009c7a 	.word	0x00009c7a
    73a8:	0000a88f 	.word	0x0000a88f
    73ac:	0000ac37 	.word	0x0000ac37
    73b0:	00006305 	.word	0x00006305

000073b4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    73b4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    73b6:	b138      	cbz	r0, 73c8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    73b8:	4b04      	ldr	r3, [pc, #16]	; (73cc <z_spin_lock_valid+0x18>)
    73ba:	7d1b      	ldrb	r3, [r3, #20]
    73bc:	f000 0003 	and.w	r0, r0, #3
    73c0:	1ac0      	subs	r0, r0, r3
    73c2:	bf18      	it	ne
    73c4:	2001      	movne	r0, #1
    73c6:	4770      	bx	lr
			return false;
		}
	}
	return true;
    73c8:	2001      	movs	r0, #1
}
    73ca:	4770      	bx	lr
    73cc:	20000c04 	.word	0x20000c04

000073d0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    73d0:	4906      	ldr	r1, [pc, #24]	; (73ec <z_spin_unlock_valid+0x1c>)
{
    73d2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    73d4:	688a      	ldr	r2, [r1, #8]
    73d6:	7d08      	ldrb	r0, [r1, #20]
    73d8:	6819      	ldr	r1, [r3, #0]
    73da:	4302      	orrs	r2, r0
    73dc:	4291      	cmp	r1, r2
    73de:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    73e2:	bf04      	itt	eq
    73e4:	6018      	streq	r0, [r3, #0]
	return true;
    73e6:	2001      	moveq	r0, #1
}
    73e8:	4770      	bx	lr
    73ea:	bf00      	nop
    73ec:	20000c04 	.word	0x20000c04

000073f0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    73f0:	4a02      	ldr	r2, [pc, #8]	; (73fc <z_spin_lock_set_owner+0xc>)
    73f2:	7d11      	ldrb	r1, [r2, #20]
    73f4:	6893      	ldr	r3, [r2, #8]
    73f6:	430b      	orrs	r3, r1
    73f8:	6003      	str	r3, [r0, #0]
}
    73fa:	4770      	bx	lr
    73fc:	20000c04 	.word	0x20000c04

00007400 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7400:	4b03      	ldr	r3, [pc, #12]	; (7410 <elapsed+0x10>)
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	b90b      	cbnz	r3, 740a <elapsed+0xa>
    7406:	f7fc bc65 	b.w	3cd4 <sys_clock_elapsed>
}
    740a:	2000      	movs	r0, #0
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	20000c48 	.word	0x20000c48

00007414 <next_timeout>:

static int32_t next_timeout(void)
{
    7414:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7416:	4b13      	ldr	r3, [pc, #76]	; (7464 <next_timeout+0x50>)
    7418:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    741a:	429c      	cmp	r4, r3
    741c:	bf08      	it	eq
    741e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7420:	f7ff ffee 	bl	7400 <elapsed>
    7424:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    7426:	b1bc      	cbz	r4, 7458 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7428:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    742c:	1b40      	subs	r0, r0, r5
    742e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7432:	2801      	cmp	r0, #1
    7434:	f171 0300 	sbcs.w	r3, r1, #0
    7438:	db11      	blt.n	745e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    743a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    743e:	2300      	movs	r3, #0
    7440:	4282      	cmp	r2, r0
    7442:	eb73 0401 	sbcs.w	r4, r3, r1
    7446:	da00      	bge.n	744a <next_timeout+0x36>
    7448:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    744a:	4b07      	ldr	r3, [pc, #28]	; (7468 <next_timeout+0x54>)
    744c:	691b      	ldr	r3, [r3, #16]
    744e:	b113      	cbz	r3, 7456 <next_timeout+0x42>
    7450:	4298      	cmp	r0, r3
    7452:	bfa8      	it	ge
    7454:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7456:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7458:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    745c:	e7f5      	b.n	744a <next_timeout+0x36>
    745e:	2000      	movs	r0, #0
    7460:	e7f3      	b.n	744a <next_timeout+0x36>
    7462:	bf00      	nop
    7464:	20000184 	.word	0x20000184
    7468:	20000c04 	.word	0x20000c04

0000746c <remove_timeout>:
{
    746c:	b530      	push	{r4, r5, lr}
    746e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7470:	b168      	cbz	r0, 748e <remove_timeout+0x22>
    7472:	4a0a      	ldr	r2, [pc, #40]	; (749c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    7474:	6852      	ldr	r2, [r2, #4]
    7476:	4290      	cmp	r0, r2
    7478:	d009      	beq.n	748e <remove_timeout+0x22>
	if (next(t) != NULL) {
    747a:	b143      	cbz	r3, 748e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    747c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7480:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7484:	1912      	adds	r2, r2, r4
    7486:	eb45 0101 	adc.w	r1, r5, r1
    748a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    748e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7490:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7492:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7494:	2300      	movs	r3, #0
	node->prev = NULL;
    7496:	e9c0 3300 	strd	r3, r3, [r0]
}
    749a:	bd30      	pop	{r4, r5, pc}
    749c:	20000184 	.word	0x20000184

000074a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    74a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74a4:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    74a6:	1c6b      	adds	r3, r5, #1
    74a8:	bf08      	it	eq
    74aa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    74ae:	4682      	mov	sl, r0
    74b0:	468b      	mov	fp, r1
    74b2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    74b4:	f000 80aa 	beq.w	760c <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    74b8:	6803      	ldr	r3, [r0, #0]
    74ba:	b163      	cbz	r3, 74d6 <z_add_timeout+0x36>
    74bc:	4955      	ldr	r1, [pc, #340]	; (7614 <z_add_timeout+0x174>)
    74be:	4a56      	ldr	r2, [pc, #344]	; (7618 <z_add_timeout+0x178>)
    74c0:	4856      	ldr	r0, [pc, #344]	; (761c <z_add_timeout+0x17c>)
    74c2:	235d      	movs	r3, #93	; 0x5d
    74c4:	f001 fb95 	bl	8bf2 <printk>
    74c8:	4855      	ldr	r0, [pc, #340]	; (7620 <z_add_timeout+0x180>)
    74ca:	f001 fb92 	bl	8bf2 <printk>
    74ce:	4852      	ldr	r0, [pc, #328]	; (7618 <z_add_timeout+0x178>)
    74d0:	215d      	movs	r1, #93	; 0x5d
    74d2:	f001 f99f 	bl	8814 <assert_post_action>
	to->fn = fn;
    74d6:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    74da:	f04f 0320 	mov.w	r3, #32
    74de:	f3ef 8b11 	mrs	fp, BASEPRI
    74e2:	f383 8812 	msr	BASEPRI_MAX, r3
    74e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74ea:	484e      	ldr	r0, [pc, #312]	; (7624 <z_add_timeout+0x184>)
    74ec:	f7ff ff62 	bl	73b4 <z_spin_lock_valid>
    74f0:	b968      	cbnz	r0, 750e <z_add_timeout+0x6e>
    74f2:	4a4d      	ldr	r2, [pc, #308]	; (7628 <z_add_timeout+0x188>)
    74f4:	494d      	ldr	r1, [pc, #308]	; (762c <z_add_timeout+0x18c>)
    74f6:	4849      	ldr	r0, [pc, #292]	; (761c <z_add_timeout+0x17c>)
    74f8:	2381      	movs	r3, #129	; 0x81
    74fa:	f001 fb7a 	bl	8bf2 <printk>
    74fe:	4949      	ldr	r1, [pc, #292]	; (7624 <z_add_timeout+0x184>)
    7500:	484b      	ldr	r0, [pc, #300]	; (7630 <z_add_timeout+0x190>)
    7502:	f001 fb76 	bl	8bf2 <printk>
    7506:	4848      	ldr	r0, [pc, #288]	; (7628 <z_add_timeout+0x188>)
    7508:	2181      	movs	r1, #129	; 0x81
    750a:	f001 f983 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    750e:	4845      	ldr	r0, [pc, #276]	; (7624 <z_add_timeout+0x184>)
    7510:	f7ff ff6e 	bl	73f0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7514:	f06f 0301 	mvn.w	r3, #1
    7518:	ebb3 0804 	subs.w	r8, r3, r4
    751c:	f04f 32ff 	mov.w	r2, #4294967295
    7520:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7524:	f1b8 0f00 	cmp.w	r8, #0
    7528:	f179 0100 	sbcs.w	r1, r9, #0
    752c:	db1c      	blt.n	7568 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    752e:	4841      	ldr	r0, [pc, #260]	; (7634 <z_add_timeout+0x194>)
    7530:	e9d0 1000 	ldrd	r1, r0, [r0]
    7534:	1a5b      	subs	r3, r3, r1
    7536:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    753a:	1b1e      	subs	r6, r3, r4
    753c:	eb62 0705 	sbc.w	r7, r2, r5
    7540:	2e01      	cmp	r6, #1
    7542:	f177 0300 	sbcs.w	r3, r7, #0
    7546:	bfbc      	itt	lt
    7548:	2601      	movlt	r6, #1
    754a:	2700      	movlt	r7, #0
    754c:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    7550:	4a39      	ldr	r2, [pc, #228]	; (7638 <z_add_timeout+0x198>)
    7552:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7556:	4293      	cmp	r3, r2
    7558:	d11d      	bne.n	7596 <z_add_timeout+0xf6>
	node->prev = tail;
    755a:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    755e:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    7562:	f8c2 a004 	str.w	sl, [r2, #4]
}
    7566:	e02c      	b.n	75c2 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7568:	f7ff ff4a 	bl	7400 <elapsed>
    756c:	1c63      	adds	r3, r4, #1
    756e:	9300      	str	r3, [sp, #0]
    7570:	f145 0300 	adc.w	r3, r5, #0
    7574:	9301      	str	r3, [sp, #4]
    7576:	e9dd 2300 	ldrd	r2, r3, [sp]
    757a:	1812      	adds	r2, r2, r0
    757c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    7580:	e9ca 2304 	strd	r2, r3, [sl, #16]
    7584:	e7e4      	b.n	7550 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7586:	1be0      	subs	r0, r4, r7
    7588:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    758c:	42b3      	cmp	r3, r6
    758e:	e9ca 0104 	strd	r0, r1, [sl, #16]
    7592:	d0e2      	beq.n	755a <z_add_timeout+0xba>
    7594:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7596:	2b00      	cmp	r3, #0
    7598:	d0df      	beq.n	755a <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    759a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    759e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    75a2:	42bc      	cmp	r4, r7
    75a4:	eb75 0108 	sbcs.w	r1, r5, r8
    75a8:	daed      	bge.n	7586 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    75aa:	1b38      	subs	r0, r7, r4
    75ac:	eb68 0105 	sbc.w	r1, r8, r5
    75b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    75b4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    75b6:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    75ba:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    75be:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    75c2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75c4:	4293      	cmp	r3, r2
    75c6:	d00b      	beq.n	75e0 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    75c8:	459a      	cmp	sl, r3
    75ca:	d109      	bne.n	75e0 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    75cc:	f7ff ff22 	bl	7414 <next_timeout>

			if (next_time == 0 ||
    75d0:	b118      	cbz	r0, 75da <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    75d2:	4b1a      	ldr	r3, [pc, #104]	; (763c <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    75d4:	691b      	ldr	r3, [r3, #16]
    75d6:	4283      	cmp	r3, r0
    75d8:	d002      	beq.n	75e0 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    75da:	2100      	movs	r1, #0
    75dc:	f7fc fb4a 	bl	3c74 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75e0:	4810      	ldr	r0, [pc, #64]	; (7624 <z_add_timeout+0x184>)
    75e2:	f7ff fef5 	bl	73d0 <z_spin_unlock_valid>
    75e6:	b968      	cbnz	r0, 7604 <z_add_timeout+0x164>
    75e8:	4a0f      	ldr	r2, [pc, #60]	; (7628 <z_add_timeout+0x188>)
    75ea:	4915      	ldr	r1, [pc, #84]	; (7640 <z_add_timeout+0x1a0>)
    75ec:	480b      	ldr	r0, [pc, #44]	; (761c <z_add_timeout+0x17c>)
    75ee:	23ac      	movs	r3, #172	; 0xac
    75f0:	f001 faff 	bl	8bf2 <printk>
    75f4:	490b      	ldr	r1, [pc, #44]	; (7624 <z_add_timeout+0x184>)
    75f6:	4813      	ldr	r0, [pc, #76]	; (7644 <z_add_timeout+0x1a4>)
    75f8:	f001 fafb 	bl	8bf2 <printk>
    75fc:	480a      	ldr	r0, [pc, #40]	; (7628 <z_add_timeout+0x188>)
    75fe:	21ac      	movs	r1, #172	; 0xac
    7600:	f001 f908 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7604:	f38b 8811 	msr	BASEPRI, fp
    7608:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    760c:	b003      	add	sp, #12
    760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7612:	bf00      	nop
    7614:	0000ad81 	.word	0x0000ad81
    7618:	0000ad5d 	.word	0x0000ad5d
    761c:	00009c7a 	.word	0x00009c7a
    7620:	0000a949 	.word	0x0000a949
    7624:	20000c4c 	.word	0x20000c4c
    7628:	00009f3d 	.word	0x00009f3d
    762c:	00009f8f 	.word	0x00009f8f
    7630:	00009fa4 	.word	0x00009fa4
    7634:	200005b0 	.word	0x200005b0
    7638:	20000184 	.word	0x20000184
    763c:	20000c04 	.word	0x20000c04
    7640:	00009f63 	.word	0x00009f63
    7644:	00009f7a 	.word	0x00009f7a

00007648 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7648:	b538      	push	{r3, r4, r5, lr}
    764a:	4604      	mov	r4, r0
	__asm__ volatile(
    764c:	f04f 0320 	mov.w	r3, #32
    7650:	f3ef 8511 	mrs	r5, BASEPRI
    7654:	f383 8812 	msr	BASEPRI_MAX, r3
    7658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    765c:	481a      	ldr	r0, [pc, #104]	; (76c8 <z_abort_timeout+0x80>)
    765e:	f7ff fea9 	bl	73b4 <z_spin_lock_valid>
    7662:	b968      	cbnz	r0, 7680 <z_abort_timeout+0x38>
    7664:	4a19      	ldr	r2, [pc, #100]	; (76cc <z_abort_timeout+0x84>)
    7666:	491a      	ldr	r1, [pc, #104]	; (76d0 <z_abort_timeout+0x88>)
    7668:	481a      	ldr	r0, [pc, #104]	; (76d4 <z_abort_timeout+0x8c>)
    766a:	2381      	movs	r3, #129	; 0x81
    766c:	f001 fac1 	bl	8bf2 <printk>
    7670:	4915      	ldr	r1, [pc, #84]	; (76c8 <z_abort_timeout+0x80>)
    7672:	4819      	ldr	r0, [pc, #100]	; (76d8 <z_abort_timeout+0x90>)
    7674:	f001 fabd 	bl	8bf2 <printk>
    7678:	4814      	ldr	r0, [pc, #80]	; (76cc <z_abort_timeout+0x84>)
    767a:	2181      	movs	r1, #129	; 0x81
    767c:	f001 f8ca 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7680:	4811      	ldr	r0, [pc, #68]	; (76c8 <z_abort_timeout+0x80>)
    7682:	f7ff feb5 	bl	73f0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7686:	6823      	ldr	r3, [r4, #0]
    7688:	b1db      	cbz	r3, 76c2 <z_abort_timeout+0x7a>
			remove_timeout(to);
    768a:	4620      	mov	r0, r4
    768c:	f7ff feee 	bl	746c <remove_timeout>
			ret = 0;
    7690:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7692:	480d      	ldr	r0, [pc, #52]	; (76c8 <z_abort_timeout+0x80>)
    7694:	f7ff fe9c 	bl	73d0 <z_spin_unlock_valid>
    7698:	b968      	cbnz	r0, 76b6 <z_abort_timeout+0x6e>
    769a:	4a0c      	ldr	r2, [pc, #48]	; (76cc <z_abort_timeout+0x84>)
    769c:	490f      	ldr	r1, [pc, #60]	; (76dc <z_abort_timeout+0x94>)
    769e:	480d      	ldr	r0, [pc, #52]	; (76d4 <z_abort_timeout+0x8c>)
    76a0:	23ac      	movs	r3, #172	; 0xac
    76a2:	f001 faa6 	bl	8bf2 <printk>
    76a6:	4908      	ldr	r1, [pc, #32]	; (76c8 <z_abort_timeout+0x80>)
    76a8:	480d      	ldr	r0, [pc, #52]	; (76e0 <z_abort_timeout+0x98>)
    76aa:	f001 faa2 	bl	8bf2 <printk>
    76ae:	4807      	ldr	r0, [pc, #28]	; (76cc <z_abort_timeout+0x84>)
    76b0:	21ac      	movs	r1, #172	; 0xac
    76b2:	f001 f8af 	bl	8814 <assert_post_action>
	__asm__ volatile(
    76b6:	f385 8811 	msr	BASEPRI, r5
    76ba:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    76be:	4620      	mov	r0, r4
    76c0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    76c2:	f06f 0415 	mvn.w	r4, #21
    76c6:	e7e4      	b.n	7692 <z_abort_timeout+0x4a>
    76c8:	20000c4c 	.word	0x20000c4c
    76cc:	00009f3d 	.word	0x00009f3d
    76d0:	00009f8f 	.word	0x00009f8f
    76d4:	00009c7a 	.word	0x00009c7a
    76d8:	00009fa4 	.word	0x00009fa4
    76dc:	00009f63 	.word	0x00009f63
    76e0:	00009f7a 	.word	0x00009f7a

000076e4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    76e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    76e6:	f04f 0320 	mov.w	r3, #32
    76ea:	f3ef 8511 	mrs	r5, BASEPRI
    76ee:	f383 8812 	msr	BASEPRI_MAX, r3
    76f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76f6:	4818      	ldr	r0, [pc, #96]	; (7758 <z_get_next_timeout_expiry+0x74>)
    76f8:	f7ff fe5c 	bl	73b4 <z_spin_lock_valid>
    76fc:	b968      	cbnz	r0, 771a <z_get_next_timeout_expiry+0x36>
    76fe:	4a17      	ldr	r2, [pc, #92]	; (775c <z_get_next_timeout_expiry+0x78>)
    7700:	4917      	ldr	r1, [pc, #92]	; (7760 <z_get_next_timeout_expiry+0x7c>)
    7702:	4818      	ldr	r0, [pc, #96]	; (7764 <z_get_next_timeout_expiry+0x80>)
    7704:	2381      	movs	r3, #129	; 0x81
    7706:	f001 fa74 	bl	8bf2 <printk>
    770a:	4913      	ldr	r1, [pc, #76]	; (7758 <z_get_next_timeout_expiry+0x74>)
    770c:	4816      	ldr	r0, [pc, #88]	; (7768 <z_get_next_timeout_expiry+0x84>)
    770e:	f001 fa70 	bl	8bf2 <printk>
    7712:	4812      	ldr	r0, [pc, #72]	; (775c <z_get_next_timeout_expiry+0x78>)
    7714:	2181      	movs	r1, #129	; 0x81
    7716:	f001 f87d 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    771a:	480f      	ldr	r0, [pc, #60]	; (7758 <z_get_next_timeout_expiry+0x74>)
    771c:	f7ff fe68 	bl	73f0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7720:	f7ff fe78 	bl	7414 <next_timeout>
    7724:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7726:	480c      	ldr	r0, [pc, #48]	; (7758 <z_get_next_timeout_expiry+0x74>)
    7728:	f7ff fe52 	bl	73d0 <z_spin_unlock_valid>
    772c:	b968      	cbnz	r0, 774a <z_get_next_timeout_expiry+0x66>
    772e:	4a0b      	ldr	r2, [pc, #44]	; (775c <z_get_next_timeout_expiry+0x78>)
    7730:	490e      	ldr	r1, [pc, #56]	; (776c <z_get_next_timeout_expiry+0x88>)
    7732:	480c      	ldr	r0, [pc, #48]	; (7764 <z_get_next_timeout_expiry+0x80>)
    7734:	23ac      	movs	r3, #172	; 0xac
    7736:	f001 fa5c 	bl	8bf2 <printk>
    773a:	4907      	ldr	r1, [pc, #28]	; (7758 <z_get_next_timeout_expiry+0x74>)
    773c:	480c      	ldr	r0, [pc, #48]	; (7770 <z_get_next_timeout_expiry+0x8c>)
    773e:	f001 fa58 	bl	8bf2 <printk>
    7742:	4806      	ldr	r0, [pc, #24]	; (775c <z_get_next_timeout_expiry+0x78>)
    7744:	21ac      	movs	r1, #172	; 0xac
    7746:	f001 f865 	bl	8814 <assert_post_action>
	__asm__ volatile(
    774a:	f385 8811 	msr	BASEPRI, r5
    774e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7752:	4620      	mov	r0, r4
    7754:	bd38      	pop	{r3, r4, r5, pc}
    7756:	bf00      	nop
    7758:	20000c4c 	.word	0x20000c4c
    775c:	00009f3d 	.word	0x00009f3d
    7760:	00009f8f 	.word	0x00009f8f
    7764:	00009c7a 	.word	0x00009c7a
    7768:	00009fa4 	.word	0x00009fa4
    776c:	00009f63 	.word	0x00009f63
    7770:	00009f7a 	.word	0x00009f7a

00007774 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7774:	b570      	push	{r4, r5, r6, lr}
    7776:	4604      	mov	r4, r0
    7778:	460d      	mov	r5, r1
	__asm__ volatile(
    777a:	f04f 0320 	mov.w	r3, #32
    777e:	f3ef 8611 	mrs	r6, BASEPRI
    7782:	f383 8812 	msr	BASEPRI_MAX, r3
    7786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    778a:	481b      	ldr	r0, [pc, #108]	; (77f8 <z_set_timeout_expiry+0x84>)
    778c:	f7ff fe12 	bl	73b4 <z_spin_lock_valid>
    7790:	b968      	cbnz	r0, 77ae <z_set_timeout_expiry+0x3a>
    7792:	4a1a      	ldr	r2, [pc, #104]	; (77fc <z_set_timeout_expiry+0x88>)
    7794:	491a      	ldr	r1, [pc, #104]	; (7800 <z_set_timeout_expiry+0x8c>)
    7796:	481b      	ldr	r0, [pc, #108]	; (7804 <z_set_timeout_expiry+0x90>)
    7798:	2381      	movs	r3, #129	; 0x81
    779a:	f001 fa2a 	bl	8bf2 <printk>
    779e:	4916      	ldr	r1, [pc, #88]	; (77f8 <z_set_timeout_expiry+0x84>)
    77a0:	4819      	ldr	r0, [pc, #100]	; (7808 <z_set_timeout_expiry+0x94>)
    77a2:	f001 fa26 	bl	8bf2 <printk>
    77a6:	4815      	ldr	r0, [pc, #84]	; (77fc <z_set_timeout_expiry+0x88>)
    77a8:	2181      	movs	r1, #129	; 0x81
    77aa:	f001 f833 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    77ae:	4812      	ldr	r0, [pc, #72]	; (77f8 <z_set_timeout_expiry+0x84>)
    77b0:	f7ff fe1e 	bl	73f0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    77b4:	f7ff fe2e 	bl	7414 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    77b8:	2801      	cmp	r0, #1
    77ba:	dd05      	ble.n	77c8 <z_set_timeout_expiry+0x54>
    77bc:	42a0      	cmp	r0, r4
    77be:	db03      	blt.n	77c8 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    77c0:	4629      	mov	r1, r5
    77c2:	4620      	mov	r0, r4
    77c4:	f7fc fa56 	bl	3c74 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77c8:	480b      	ldr	r0, [pc, #44]	; (77f8 <z_set_timeout_expiry+0x84>)
    77ca:	f7ff fe01 	bl	73d0 <z_spin_unlock_valid>
    77ce:	b968      	cbnz	r0, 77ec <z_set_timeout_expiry+0x78>
    77d0:	4a0a      	ldr	r2, [pc, #40]	; (77fc <z_set_timeout_expiry+0x88>)
    77d2:	490e      	ldr	r1, [pc, #56]	; (780c <z_set_timeout_expiry+0x98>)
    77d4:	480b      	ldr	r0, [pc, #44]	; (7804 <z_set_timeout_expiry+0x90>)
    77d6:	23ac      	movs	r3, #172	; 0xac
    77d8:	f001 fa0b 	bl	8bf2 <printk>
    77dc:	4906      	ldr	r1, [pc, #24]	; (77f8 <z_set_timeout_expiry+0x84>)
    77de:	480c      	ldr	r0, [pc, #48]	; (7810 <z_set_timeout_expiry+0x9c>)
    77e0:	f001 fa07 	bl	8bf2 <printk>
    77e4:	4805      	ldr	r0, [pc, #20]	; (77fc <z_set_timeout_expiry+0x88>)
    77e6:	21ac      	movs	r1, #172	; 0xac
    77e8:	f001 f814 	bl	8814 <assert_post_action>
	__asm__ volatile(
    77ec:	f386 8811 	msr	BASEPRI, r6
    77f0:	f3bf 8f6f 	isb	sy
		}
	}
}
    77f4:	bd70      	pop	{r4, r5, r6, pc}
    77f6:	bf00      	nop
    77f8:	20000c4c 	.word	0x20000c4c
    77fc:	00009f3d 	.word	0x00009f3d
    7800:	00009f8f 	.word	0x00009f8f
    7804:	00009c7a 	.word	0x00009c7a
    7808:	00009fa4 	.word	0x00009fa4
    780c:	00009f63 	.word	0x00009f63
    7810:	00009f7a 	.word	0x00009f7a

00007814 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7818:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    781a:	f7fe fc0d 	bl	6038 <z_time_slice>
	__asm__ volatile(
    781e:	f04f 0320 	mov.w	r3, #32
    7822:	f3ef 8711 	mrs	r7, BASEPRI
    7826:	f383 8812 	msr	BASEPRI_MAX, r3
    782a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    782e:	4855      	ldr	r0, [pc, #340]	; (7984 <sys_clock_announce+0x170>)
    7830:	f7ff fdc0 	bl	73b4 <z_spin_lock_valid>
    7834:	b968      	cbnz	r0, 7852 <sys_clock_announce+0x3e>
    7836:	4a54      	ldr	r2, [pc, #336]	; (7988 <sys_clock_announce+0x174>)
    7838:	4954      	ldr	r1, [pc, #336]	; (798c <sys_clock_announce+0x178>)
    783a:	4855      	ldr	r0, [pc, #340]	; (7990 <sys_clock_announce+0x17c>)
    783c:	2381      	movs	r3, #129	; 0x81
    783e:	f001 f9d8 	bl	8bf2 <printk>
    7842:	4950      	ldr	r1, [pc, #320]	; (7984 <sys_clock_announce+0x170>)
    7844:	4853      	ldr	r0, [pc, #332]	; (7994 <sys_clock_announce+0x180>)
    7846:	f001 f9d4 	bl	8bf2 <printk>
    784a:	484f      	ldr	r0, [pc, #316]	; (7988 <sys_clock_announce+0x174>)
    784c:	2181      	movs	r1, #129	; 0x81
    784e:	f000 ffe1 	bl	8814 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7852:	4d51      	ldr	r5, [pc, #324]	; (7998 <sys_clock_announce+0x184>)
    7854:	4e51      	ldr	r6, [pc, #324]	; (799c <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    7856:	484b      	ldr	r0, [pc, #300]	; (7984 <sys_clock_announce+0x170>)
	return list->head == list;
    7858:	f8df a14c 	ldr.w	sl, [pc, #332]	; 79a8 <sys_clock_announce+0x194>
    785c:	f7ff fdc8 	bl	73f0 <z_spin_lock_set_owner>
    7860:	46b3      	mov	fp, r6
    7862:	602c      	str	r4, [r5, #0]
    7864:	e9d6 2300 	ldrd	r2, r3, [r6]
    7868:	f8d5 c000 	ldr.w	ip, [r5]
    786c:	f8da 4000 	ldr.w	r4, [sl]
    7870:	e9cd 2300 	strd	r2, r3, [sp]
    7874:	4662      	mov	r2, ip
    7876:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7878:	4554      	cmp	r4, sl
    787a:	46e0      	mov	r8, ip
    787c:	4699      	mov	r9, r3
    787e:	d00c      	beq.n	789a <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7880:	b15c      	cbz	r4, 789a <sys_clock_announce+0x86>
    7882:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    7886:	458c      	cmp	ip, r1
    7888:	eb79 0302 	sbcs.w	r3, r9, r2
    788c:	da2e      	bge.n	78ec <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    788e:	ebb1 000c 	subs.w	r0, r1, ip
    7892:	eb62 0109 	sbc.w	r1, r2, r9
    7896:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    789a:	9a00      	ldr	r2, [sp, #0]
    789c:	9901      	ldr	r1, [sp, #4]
    789e:	eb18 0202 	adds.w	r2, r8, r2
    78a2:	464b      	mov	r3, r9
    78a4:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    78a8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    78aa:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    78ae:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    78b0:	f7ff fdb0 	bl	7414 <next_timeout>
    78b4:	4621      	mov	r1, r4
    78b6:	f7fc f9dd 	bl	3c74 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78ba:	4832      	ldr	r0, [pc, #200]	; (7984 <sys_clock_announce+0x170>)
    78bc:	f7ff fd88 	bl	73d0 <z_spin_unlock_valid>
    78c0:	b968      	cbnz	r0, 78de <sys_clock_announce+0xca>
    78c2:	4a31      	ldr	r2, [pc, #196]	; (7988 <sys_clock_announce+0x174>)
    78c4:	4936      	ldr	r1, [pc, #216]	; (79a0 <sys_clock_announce+0x18c>)
    78c6:	4832      	ldr	r0, [pc, #200]	; (7990 <sys_clock_announce+0x17c>)
    78c8:	23ac      	movs	r3, #172	; 0xac
    78ca:	f001 f992 	bl	8bf2 <printk>
    78ce:	492d      	ldr	r1, [pc, #180]	; (7984 <sys_clock_announce+0x170>)
    78d0:	4834      	ldr	r0, [pc, #208]	; (79a4 <sys_clock_announce+0x190>)
    78d2:	f001 f98e 	bl	8bf2 <printk>
    78d6:	482c      	ldr	r0, [pc, #176]	; (7988 <sys_clock_announce+0x174>)
    78d8:	21ac      	movs	r1, #172	; 0xac
    78da:	f000 ff9b 	bl	8814 <assert_post_action>
	__asm__ volatile(
    78de:	f387 8811 	msr	BASEPRI, r7
    78e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    78e6:	b003      	add	sp, #12
    78e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    78ec:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    78f0:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    78f4:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    78f8:	f04f 0200 	mov.w	r2, #0
    78fc:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7900:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7904:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    7906:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    790a:	4620      	mov	r0, r4
		curr_tick += dt;
    790c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7910:	f7ff fdac 	bl	746c <remove_timeout>
    7914:	481b      	ldr	r0, [pc, #108]	; (7984 <sys_clock_announce+0x170>)
    7916:	f7ff fd5b 	bl	73d0 <z_spin_unlock_valid>
    791a:	b968      	cbnz	r0, 7938 <sys_clock_announce+0x124>
    791c:	4a1a      	ldr	r2, [pc, #104]	; (7988 <sys_clock_announce+0x174>)
    791e:	4920      	ldr	r1, [pc, #128]	; (79a0 <sys_clock_announce+0x18c>)
    7920:	481b      	ldr	r0, [pc, #108]	; (7990 <sys_clock_announce+0x17c>)
    7922:	23ac      	movs	r3, #172	; 0xac
    7924:	f001 f965 	bl	8bf2 <printk>
    7928:	4916      	ldr	r1, [pc, #88]	; (7984 <sys_clock_announce+0x170>)
    792a:	481e      	ldr	r0, [pc, #120]	; (79a4 <sys_clock_announce+0x190>)
    792c:	f001 f961 	bl	8bf2 <printk>
    7930:	4815      	ldr	r0, [pc, #84]	; (7988 <sys_clock_announce+0x174>)
    7932:	21ac      	movs	r1, #172	; 0xac
    7934:	f000 ff6e 	bl	8814 <assert_post_action>
    7938:	f387 8811 	msr	BASEPRI, r7
    793c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7940:	68a3      	ldr	r3, [r4, #8]
    7942:	4620      	mov	r0, r4
    7944:	4798      	blx	r3
	__asm__ volatile(
    7946:	f04f 0320 	mov.w	r3, #32
    794a:	f3ef 8711 	mrs	r7, BASEPRI
    794e:	f383 8812 	msr	BASEPRI_MAX, r3
    7952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7956:	480b      	ldr	r0, [pc, #44]	; (7984 <sys_clock_announce+0x170>)
    7958:	f7ff fd2c 	bl	73b4 <z_spin_lock_valid>
    795c:	b968      	cbnz	r0, 797a <sys_clock_announce+0x166>
    795e:	4a0a      	ldr	r2, [pc, #40]	; (7988 <sys_clock_announce+0x174>)
    7960:	490a      	ldr	r1, [pc, #40]	; (798c <sys_clock_announce+0x178>)
    7962:	480b      	ldr	r0, [pc, #44]	; (7990 <sys_clock_announce+0x17c>)
    7964:	2381      	movs	r3, #129	; 0x81
    7966:	f001 f944 	bl	8bf2 <printk>
    796a:	4906      	ldr	r1, [pc, #24]	; (7984 <sys_clock_announce+0x170>)
    796c:	4809      	ldr	r0, [pc, #36]	; (7994 <sys_clock_announce+0x180>)
    796e:	f001 f940 	bl	8bf2 <printk>
    7972:	4805      	ldr	r0, [pc, #20]	; (7988 <sys_clock_announce+0x174>)
    7974:	2181      	movs	r1, #129	; 0x81
    7976:	f000 ff4d 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    797a:	4802      	ldr	r0, [pc, #8]	; (7984 <sys_clock_announce+0x170>)
    797c:	f7ff fd38 	bl	73f0 <z_spin_lock_set_owner>
	return k;
    7980:	e770      	b.n	7864 <sys_clock_announce+0x50>
    7982:	bf00      	nop
    7984:	20000c4c 	.word	0x20000c4c
    7988:	00009f3d 	.word	0x00009f3d
    798c:	00009f8f 	.word	0x00009f8f
    7990:	00009c7a 	.word	0x00009c7a
    7994:	00009fa4 	.word	0x00009fa4
    7998:	20000c48 	.word	0x20000c48
    799c:	200005b0 	.word	0x200005b0
    79a0:	00009f63 	.word	0x00009f63
    79a4:	00009f7a 	.word	0x00009f7a
    79a8:	20000184 	.word	0x20000184

000079ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    79ac:	b570      	push	{r4, r5, r6, lr}
    79ae:	f04f 0320 	mov.w	r3, #32
    79b2:	f3ef 8611 	mrs	r6, BASEPRI
    79b6:	f383 8812 	msr	BASEPRI_MAX, r3
    79ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79be:	481b      	ldr	r0, [pc, #108]	; (7a2c <sys_clock_tick_get+0x80>)
    79c0:	f7ff fcf8 	bl	73b4 <z_spin_lock_valid>
    79c4:	b968      	cbnz	r0, 79e2 <sys_clock_tick_get+0x36>
    79c6:	4a1a      	ldr	r2, [pc, #104]	; (7a30 <sys_clock_tick_get+0x84>)
    79c8:	491a      	ldr	r1, [pc, #104]	; (7a34 <sys_clock_tick_get+0x88>)
    79ca:	481b      	ldr	r0, [pc, #108]	; (7a38 <sys_clock_tick_get+0x8c>)
    79cc:	2381      	movs	r3, #129	; 0x81
    79ce:	f001 f910 	bl	8bf2 <printk>
    79d2:	4916      	ldr	r1, [pc, #88]	; (7a2c <sys_clock_tick_get+0x80>)
    79d4:	4819      	ldr	r0, [pc, #100]	; (7a3c <sys_clock_tick_get+0x90>)
    79d6:	f001 f90c 	bl	8bf2 <printk>
    79da:	4815      	ldr	r0, [pc, #84]	; (7a30 <sys_clock_tick_get+0x84>)
    79dc:	2181      	movs	r1, #129	; 0x81
    79de:	f000 ff19 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    79e2:	4812      	ldr	r0, [pc, #72]	; (7a2c <sys_clock_tick_get+0x80>)
    79e4:	f7ff fd04 	bl	73f0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    79e8:	f7fc f974 	bl	3cd4 <sys_clock_elapsed>
    79ec:	4b14      	ldr	r3, [pc, #80]	; (7a40 <sys_clock_tick_get+0x94>)
    79ee:	e9d3 4500 	ldrd	r4, r5, [r3]
    79f2:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79f4:	480d      	ldr	r0, [pc, #52]	; (7a2c <sys_clock_tick_get+0x80>)
    79f6:	f145 0500 	adc.w	r5, r5, #0
    79fa:	f7ff fce9 	bl	73d0 <z_spin_unlock_valid>
    79fe:	b968      	cbnz	r0, 7a1c <sys_clock_tick_get+0x70>
    7a00:	4a0b      	ldr	r2, [pc, #44]	; (7a30 <sys_clock_tick_get+0x84>)
    7a02:	4910      	ldr	r1, [pc, #64]	; (7a44 <sys_clock_tick_get+0x98>)
    7a04:	480c      	ldr	r0, [pc, #48]	; (7a38 <sys_clock_tick_get+0x8c>)
    7a06:	23ac      	movs	r3, #172	; 0xac
    7a08:	f001 f8f3 	bl	8bf2 <printk>
    7a0c:	4907      	ldr	r1, [pc, #28]	; (7a2c <sys_clock_tick_get+0x80>)
    7a0e:	480e      	ldr	r0, [pc, #56]	; (7a48 <sys_clock_tick_get+0x9c>)
    7a10:	f001 f8ef 	bl	8bf2 <printk>
    7a14:	4806      	ldr	r0, [pc, #24]	; (7a30 <sys_clock_tick_get+0x84>)
    7a16:	21ac      	movs	r1, #172	; 0xac
    7a18:	f000 fefc 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7a1c:	f386 8811 	msr	BASEPRI, r6
    7a20:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7a24:	4620      	mov	r0, r4
    7a26:	4629      	mov	r1, r5
    7a28:	bd70      	pop	{r4, r5, r6, pc}
    7a2a:	bf00      	nop
    7a2c:	20000c4c 	.word	0x20000c4c
    7a30:	00009f3d 	.word	0x00009f3d
    7a34:	00009f8f 	.word	0x00009f8f
    7a38:	00009c7a 	.word	0x00009c7a
    7a3c:	00009fa4 	.word	0x00009fa4
    7a40:	200005b0 	.word	0x200005b0
    7a44:	00009f63 	.word	0x00009f63
    7a48:	00009f7a 	.word	0x00009f7a

00007a4c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a4e:	4604      	mov	r4, r0
	__asm__ volatile(
    7a50:	f04f 0320 	mov.w	r3, #32
    7a54:	f3ef 8511 	mrs	r5, BASEPRI
    7a58:	f383 8812 	msr	BASEPRI_MAX, r3
    7a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a60:	484c      	ldr	r0, [pc, #304]	; (7b94 <z_timer_expiration_handler+0x148>)
    7a62:	f7ff fca7 	bl	73b4 <z_spin_lock_valid>
    7a66:	b968      	cbnz	r0, 7a84 <z_timer_expiration_handler+0x38>
    7a68:	4a4b      	ldr	r2, [pc, #300]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7a6a:	494c      	ldr	r1, [pc, #304]	; (7b9c <z_timer_expiration_handler+0x150>)
    7a6c:	484c      	ldr	r0, [pc, #304]	; (7ba0 <z_timer_expiration_handler+0x154>)
    7a6e:	2381      	movs	r3, #129	; 0x81
    7a70:	f001 f8bf 	bl	8bf2 <printk>
    7a74:	4947      	ldr	r1, [pc, #284]	; (7b94 <z_timer_expiration_handler+0x148>)
    7a76:	484b      	ldr	r0, [pc, #300]	; (7ba4 <z_timer_expiration_handler+0x158>)
    7a78:	f001 f8bb 	bl	8bf2 <printk>
    7a7c:	4846      	ldr	r0, [pc, #280]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7a7e:	2181      	movs	r1, #129	; 0x81
    7a80:	f000 fec8 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a84:	4843      	ldr	r0, [pc, #268]	; (7b94 <z_timer_expiration_handler+0x148>)
    7a86:	f7ff fcb3 	bl	73f0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7a8a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    7a8e:	1c56      	adds	r6, r2, #1
    7a90:	f143 0700 	adc.w	r7, r3, #0
    7a94:	2f00      	cmp	r7, #0
    7a96:	bf08      	it	eq
    7a98:	2e02      	cmpeq	r6, #2
    7a9a:	d303      	bcc.n	7aa4 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7a9c:	4942      	ldr	r1, [pc, #264]	; (7ba8 <z_timer_expiration_handler+0x15c>)
    7a9e:	4620      	mov	r0, r4
    7aa0:	f7ff fcfe 	bl	74a0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7aa6:	3301      	adds	r3, #1
    7aa8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    7aaa:	6a23      	ldr	r3, [r4, #32]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d035      	beq.n	7b1c <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ab0:	4838      	ldr	r0, [pc, #224]	; (7b94 <z_timer_expiration_handler+0x148>)
    7ab2:	f7ff fc8d 	bl	73d0 <z_spin_unlock_valid>
    7ab6:	b968      	cbnz	r0, 7ad4 <z_timer_expiration_handler+0x88>
    7ab8:	4a37      	ldr	r2, [pc, #220]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7aba:	493c      	ldr	r1, [pc, #240]	; (7bac <z_timer_expiration_handler+0x160>)
    7abc:	4838      	ldr	r0, [pc, #224]	; (7ba0 <z_timer_expiration_handler+0x154>)
    7abe:	23ac      	movs	r3, #172	; 0xac
    7ac0:	f001 f897 	bl	8bf2 <printk>
    7ac4:	4933      	ldr	r1, [pc, #204]	; (7b94 <z_timer_expiration_handler+0x148>)
    7ac6:	483a      	ldr	r0, [pc, #232]	; (7bb0 <z_timer_expiration_handler+0x164>)
    7ac8:	f001 f893 	bl	8bf2 <printk>
    7acc:	4832      	ldr	r0, [pc, #200]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7ace:	21ac      	movs	r1, #172	; 0xac
    7ad0:	f000 fea0 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7ad4:	f385 8811 	msr	BASEPRI, r5
    7ad8:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7adc:	6a23      	ldr	r3, [r4, #32]
    7ade:	4620      	mov	r0, r4
    7ae0:	4798      	blx	r3
	__asm__ volatile(
    7ae2:	f04f 0320 	mov.w	r3, #32
    7ae6:	f3ef 8511 	mrs	r5, BASEPRI
    7aea:	f383 8812 	msr	BASEPRI_MAX, r3
    7aee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7af2:	4828      	ldr	r0, [pc, #160]	; (7b94 <z_timer_expiration_handler+0x148>)
    7af4:	f7ff fc5e 	bl	73b4 <z_spin_lock_valid>
    7af8:	b968      	cbnz	r0, 7b16 <z_timer_expiration_handler+0xca>
    7afa:	4a27      	ldr	r2, [pc, #156]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7afc:	4927      	ldr	r1, [pc, #156]	; (7b9c <z_timer_expiration_handler+0x150>)
    7afe:	4828      	ldr	r0, [pc, #160]	; (7ba0 <z_timer_expiration_handler+0x154>)
    7b00:	2381      	movs	r3, #129	; 0x81
    7b02:	f001 f876 	bl	8bf2 <printk>
    7b06:	4923      	ldr	r1, [pc, #140]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b08:	4826      	ldr	r0, [pc, #152]	; (7ba4 <z_timer_expiration_handler+0x158>)
    7b0a:	f001 f872 	bl	8bf2 <printk>
    7b0e:	4822      	ldr	r0, [pc, #136]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7b10:	2181      	movs	r1, #129	; 0x81
    7b12:	f000 fe7f 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b16:	481f      	ldr	r0, [pc, #124]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b18:	f7ff fc6a 	bl	73f0 <z_spin_lock_set_owner>
	return list->head == list;
    7b1c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b20:	42a6      	cmp	r6, r4
    7b22:	d000      	beq.n	7b26 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7b24:	b9b6      	cbnz	r6, 7b54 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b26:	481b      	ldr	r0, [pc, #108]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b28:	f7ff fc52 	bl	73d0 <z_spin_unlock_valid>
    7b2c:	b968      	cbnz	r0, 7b4a <z_timer_expiration_handler+0xfe>
    7b2e:	4a1a      	ldr	r2, [pc, #104]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7b30:	491e      	ldr	r1, [pc, #120]	; (7bac <z_timer_expiration_handler+0x160>)
    7b32:	481b      	ldr	r0, [pc, #108]	; (7ba0 <z_timer_expiration_handler+0x154>)
    7b34:	23ac      	movs	r3, #172	; 0xac
    7b36:	f001 f85c 	bl	8bf2 <printk>
    7b3a:	4916      	ldr	r1, [pc, #88]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b3c:	481c      	ldr	r0, [pc, #112]	; (7bb0 <z_timer_expiration_handler+0x164>)
    7b3e:	f001 f858 	bl	8bf2 <printk>
    7b42:	4815      	ldr	r0, [pc, #84]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7b44:	21ac      	movs	r1, #172	; 0xac
    7b46:	f000 fe65 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7b4a:	f385 8811 	msr	BASEPRI, r5
    7b4e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    7b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    7b54:	4630      	mov	r0, r6
    7b56:	f7fe f851 	bl	5bfc <z_unpend_thread_no_timeout>
    7b5a:	2300      	movs	r3, #0
    7b5c:	480d      	ldr	r0, [pc, #52]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b5e:	67f3      	str	r3, [r6, #124]	; 0x7c
    7b60:	f7ff fc36 	bl	73d0 <z_spin_unlock_valid>
    7b64:	b968      	cbnz	r0, 7b82 <z_timer_expiration_handler+0x136>
    7b66:	4a0c      	ldr	r2, [pc, #48]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7b68:	4910      	ldr	r1, [pc, #64]	; (7bac <z_timer_expiration_handler+0x160>)
    7b6a:	480d      	ldr	r0, [pc, #52]	; (7ba0 <z_timer_expiration_handler+0x154>)
    7b6c:	23ac      	movs	r3, #172	; 0xac
    7b6e:	f001 f840 	bl	8bf2 <printk>
    7b72:	4908      	ldr	r1, [pc, #32]	; (7b94 <z_timer_expiration_handler+0x148>)
    7b74:	480e      	ldr	r0, [pc, #56]	; (7bb0 <z_timer_expiration_handler+0x164>)
    7b76:	f001 f83c 	bl	8bf2 <printk>
    7b7a:	4807      	ldr	r0, [pc, #28]	; (7b98 <z_timer_expiration_handler+0x14c>)
    7b7c:	21ac      	movs	r1, #172	; 0xac
    7b7e:	f000 fe49 	bl	8814 <assert_post_action>
    7b82:	f385 8811 	msr	BASEPRI, r5
    7b86:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    7b8a:	4630      	mov	r0, r6
}
    7b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7b90:	f7fe bb1c 	b.w	61cc <z_ready_thread>
    7b94:	20000c50 	.word	0x20000c50
    7b98:	00009f3d 	.word	0x00009f3d
    7b9c:	00009f8f 	.word	0x00009f8f
    7ba0:	00009c7a 	.word	0x00009c7a
    7ba4:	00009fa4 	.word	0x00009fa4
    7ba8:	00007a4d 	.word	0x00007a4d
    7bac:	00009f63 	.word	0x00009f63
    7bb0:	00009f7a 	.word	0x00009f7a

00007bb4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7bb4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    7bb8:	4619      	mov	r1, r3
    7bba:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7bbc:	1c4c      	adds	r4, r1, #1
{
    7bbe:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7bc0:	bf08      	it	eq
    7bc2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    7bc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    7bca:	4680      	mov	r8, r0
    7bcc:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7bce:	d04c      	beq.n	7c6a <z_impl_k_timer_start+0xb6>
    7bd0:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7bd2:	1c6b      	adds	r3, r5, #1
    7bd4:	bf08      	it	eq
    7bd6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    7bda:	4614      	mov	r4, r2
    7bdc:	d019      	beq.n	7c12 <z_impl_k_timer_start+0x5e>
    7bde:	ea54 0305 	orrs.w	r3, r4, r5
    7be2:	d016      	beq.n	7c12 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7be4:	f06f 0301 	mvn.w	r3, #1
    7be8:	ebb3 0a02 	subs.w	sl, r3, r2
    7bec:	f04f 33ff 	mov.w	r3, #4294967295
    7bf0:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7bf4:	f1ba 0f00 	cmp.w	sl, #0
    7bf8:	f17b 0300 	sbcs.w	r3, fp, #0
    7bfc:	da09      	bge.n	7c12 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7bfe:	f112 34ff 	adds.w	r4, r2, #4294967295
    7c02:	f145 35ff 	adc.w	r5, r5, #4294967295
    7c06:	2c01      	cmp	r4, #1
    7c08:	f175 0300 	sbcs.w	r3, r5, #0
    7c0c:	bfbc      	itt	lt
    7c0e:	2401      	movlt	r4, #1
    7c10:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7c12:	f06f 0301 	mvn.w	r3, #1
    7c16:	1a1b      	subs	r3, r3, r0
    7c18:	9300      	str	r3, [sp, #0]
    7c1a:	f04f 33ff 	mov.w	r3, #4294967295
    7c1e:	eb63 0301 	sbc.w	r3, r3, r1
    7c22:	9301      	str	r3, [sp, #4]
    7c24:	e9dd 2300 	ldrd	r2, r3, [sp]
    7c28:	2a00      	cmp	r2, #0
    7c2a:	f173 0300 	sbcs.w	r3, r3, #0
    7c2e:	da0c      	bge.n	7c4a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7c30:	f110 38ff 	adds.w	r8, r0, #4294967295
    7c34:	f141 39ff 	adc.w	r9, r1, #4294967295
    7c38:	f1b8 0f00 	cmp.w	r8, #0
    7c3c:	f179 0300 	sbcs.w	r3, r9, #0
    7c40:	bfbc      	itt	lt
    7c42:	f04f 0800 	movlt.w	r8, #0
    7c46:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    7c4a:	4630      	mov	r0, r6
    7c4c:	f7ff fcfc 	bl	7648 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7c50:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c52:	4907      	ldr	r1, [pc, #28]	; (7c70 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    7c54:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c56:	4642      	mov	r2, r8
    7c58:	464b      	mov	r3, r9
    7c5a:	4630      	mov	r0, r6
	timer->period = period;
    7c5c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7c60:	b002      	add	sp, #8
    7c62:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7c66:	f7ff bc1b 	b.w	74a0 <z_add_timeout>
}
    7c6a:	b002      	add	sp, #8
    7c6c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7c70:	00007a4d 	.word	0x00007a4d

00007c74 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c78:	4e7e      	ldr	r6, [pc, #504]	; (7e74 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7c7a:	4f7f      	ldr	r7, [pc, #508]	; (7e78 <work_queue_main+0x204>)
{
    7c7c:	b085      	sub	sp, #20
    7c7e:	4604      	mov	r4, r0
	__asm__ volatile(
    7c80:	f04f 0320 	mov.w	r3, #32
    7c84:	f3ef 8811 	mrs	r8, BASEPRI
    7c88:	f383 8812 	msr	BASEPRI_MAX, r3
    7c8c:	f3bf 8f6f 	isb	sy
    7c90:	4630      	mov	r0, r6
    7c92:	f7ff fb8f 	bl	73b4 <z_spin_lock_valid>
    7c96:	b968      	cbnz	r0, 7cb4 <work_queue_main+0x40>
    7c98:	4a78      	ldr	r2, [pc, #480]	; (7e7c <work_queue_main+0x208>)
    7c9a:	4979      	ldr	r1, [pc, #484]	; (7e80 <work_queue_main+0x20c>)
    7c9c:	4879      	ldr	r0, [pc, #484]	; (7e84 <work_queue_main+0x210>)
    7c9e:	2381      	movs	r3, #129	; 0x81
    7ca0:	f000 ffa7 	bl	8bf2 <printk>
    7ca4:	4878      	ldr	r0, [pc, #480]	; (7e88 <work_queue_main+0x214>)
    7ca6:	4631      	mov	r1, r6
    7ca8:	f000 ffa3 	bl	8bf2 <printk>
    7cac:	4873      	ldr	r0, [pc, #460]	; (7e7c <work_queue_main+0x208>)
    7cae:	2181      	movs	r1, #129	; 0x81
    7cb0:	f000 fdb0 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7cb4:	4630      	mov	r0, r6
    7cb6:	f7ff fb9b 	bl	73f0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    7cba:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    7cbe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    7cc2:	b9ad      	cbnz	r5, 7cf0 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    7cc4:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    7cc8:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    7cca:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    7cce:	f100 8092 	bmi.w	7df6 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    7cd2:	2300      	movs	r3, #0
    7cd4:	9302      	str	r3, [sp, #8]
    7cd6:	f04f 32ff 	mov.w	r2, #4294967295
    7cda:	f04f 33ff 	mov.w	r3, #4294967295
    7cde:	e9cd 2300 	strd	r2, r3, [sp]
    7ce2:	4641      	mov	r1, r8
    7ce4:	f104 0288 	add.w	r2, r4, #136	; 0x88
    7ce8:	4630      	mov	r0, r6
    7cea:	f7ff f927 	bl	6f3c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    7cee:	e7c7      	b.n	7c80 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7cf0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    7cf4:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    7cf6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7cfa:	428d      	cmp	r5, r1
    7cfc:	d101      	bne.n	7d02 <work_queue_main+0x8e>
	list->tail = node;
    7cfe:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7d02:	f043 0302 	orr.w	r3, r3, #2
    7d06:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    7d0a:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    7d0c:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    7d10:	f023 0304 	bic.w	r3, r3, #4
    7d14:	f043 0301 	orr.w	r3, r3, #1
    7d18:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d1a:	4630      	mov	r0, r6
    7d1c:	f7ff fb58 	bl	73d0 <z_spin_unlock_valid>
    7d20:	b968      	cbnz	r0, 7d3e <work_queue_main+0xca>
    7d22:	4a56      	ldr	r2, [pc, #344]	; (7e7c <work_queue_main+0x208>)
    7d24:	4959      	ldr	r1, [pc, #356]	; (7e8c <work_queue_main+0x218>)
    7d26:	4857      	ldr	r0, [pc, #348]	; (7e84 <work_queue_main+0x210>)
    7d28:	23ac      	movs	r3, #172	; 0xac
    7d2a:	f000 ff62 	bl	8bf2 <printk>
    7d2e:	4858      	ldr	r0, [pc, #352]	; (7e90 <work_queue_main+0x21c>)
    7d30:	4631      	mov	r1, r6
    7d32:	f000 ff5e 	bl	8bf2 <printk>
    7d36:	4851      	ldr	r0, [pc, #324]	; (7e7c <work_queue_main+0x208>)
    7d38:	21ac      	movs	r1, #172	; 0xac
    7d3a:	f000 fd6b 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7d3e:	f388 8811 	msr	BASEPRI, r8
    7d42:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    7d46:	f1b9 0f00 	cmp.w	r9, #0
    7d4a:	d10b      	bne.n	7d64 <work_queue_main+0xf0>
    7d4c:	4951      	ldr	r1, [pc, #324]	; (7e94 <work_queue_main+0x220>)
    7d4e:	484d      	ldr	r0, [pc, #308]	; (7e84 <work_queue_main+0x210>)
    7d50:	4a51      	ldr	r2, [pc, #324]	; (7e98 <work_queue_main+0x224>)
    7d52:	f44f 7322 	mov.w	r3, #648	; 0x288
    7d56:	f000 ff4c 	bl	8bf2 <printk>
    7d5a:	484f      	ldr	r0, [pc, #316]	; (7e98 <work_queue_main+0x224>)
    7d5c:	f44f 7122 	mov.w	r1, #648	; 0x288
    7d60:	f000 fd58 	bl	8814 <assert_post_action>
		handler(work);
    7d64:	4628      	mov	r0, r5
    7d66:	47c8      	blx	r9
	__asm__ volatile(
    7d68:	f04f 0320 	mov.w	r3, #32
    7d6c:	f3ef 8a11 	mrs	sl, BASEPRI
    7d70:	f383 8812 	msr	BASEPRI_MAX, r3
    7d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d78:	4630      	mov	r0, r6
    7d7a:	f7ff fb1b 	bl	73b4 <z_spin_lock_valid>
    7d7e:	b968      	cbnz	r0, 7d9c <work_queue_main+0x128>
    7d80:	4a3e      	ldr	r2, [pc, #248]	; (7e7c <work_queue_main+0x208>)
    7d82:	493f      	ldr	r1, [pc, #252]	; (7e80 <work_queue_main+0x20c>)
    7d84:	483f      	ldr	r0, [pc, #252]	; (7e84 <work_queue_main+0x210>)
    7d86:	2381      	movs	r3, #129	; 0x81
    7d88:	f000 ff33 	bl	8bf2 <printk>
    7d8c:	483e      	ldr	r0, [pc, #248]	; (7e88 <work_queue_main+0x214>)
    7d8e:	4631      	mov	r1, r6
    7d90:	f000 ff2f 	bl	8bf2 <printk>
    7d94:	4839      	ldr	r0, [pc, #228]	; (7e7c <work_queue_main+0x208>)
    7d96:	2181      	movs	r1, #129	; 0x81
    7d98:	f000 fd3c 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d9c:	4630      	mov	r0, r6
    7d9e:	f7ff fb27 	bl	73f0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    7da2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7da4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    7da6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7daa:	d42e      	bmi.n	7e0a <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    7dac:	60ea      	str	r2, [r5, #12]
    7dae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    7db2:	f023 0302 	bic.w	r3, r3, #2
    7db6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7dba:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    7dbc:	f3c3 2500 	ubfx	r5, r3, #8, #1
    7dc0:	f7ff fb06 	bl	73d0 <z_spin_unlock_valid>
    7dc4:	b968      	cbnz	r0, 7de2 <work_queue_main+0x16e>
    7dc6:	4a2d      	ldr	r2, [pc, #180]	; (7e7c <work_queue_main+0x208>)
    7dc8:	4930      	ldr	r1, [pc, #192]	; (7e8c <work_queue_main+0x218>)
    7dca:	482e      	ldr	r0, [pc, #184]	; (7e84 <work_queue_main+0x210>)
    7dcc:	23ac      	movs	r3, #172	; 0xac
    7dce:	f000 ff10 	bl	8bf2 <printk>
    7dd2:	482f      	ldr	r0, [pc, #188]	; (7e90 <work_queue_main+0x21c>)
    7dd4:	4631      	mov	r1, r6
    7dd6:	f000 ff0c 	bl	8bf2 <printk>
    7dda:	4828      	ldr	r0, [pc, #160]	; (7e7c <work_queue_main+0x208>)
    7ddc:	21ac      	movs	r1, #172	; 0xac
    7dde:	f000 fd19 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7de2:	f38a 8811 	msr	BASEPRI, sl
    7de6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    7dea:	2d00      	cmp	r5, #0
    7dec:	f47f af48 	bne.w	7c80 <work_queue_main+0xc>
	z_impl_k_yield();
    7df0:	f7fe fdf8 	bl	69e4 <z_impl_k_yield>
}
    7df4:	e744      	b.n	7c80 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    7df6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    7dfa:	2200      	movs	r2, #0
    7dfc:	2101      	movs	r1, #1
    7dfe:	4628      	mov	r0, r5
    7e00:	f7ff f844 	bl	6e8c <z_sched_wake>
    7e04:	2800      	cmp	r0, #0
    7e06:	d1f8      	bne.n	7dfa <work_queue_main+0x186>
    7e08:	e763      	b.n	7cd2 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e0a:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    7e0c:	f023 0303 	bic.w	r3, r3, #3
    7e10:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e12:	2800      	cmp	r0, #0
    7e14:	d0cb      	beq.n	7dae <work_queue_main+0x13a>
	return node->next;
    7e16:	6803      	ldr	r3, [r0, #0]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	bf38      	it	cc
    7e1c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7e1e:	f04f 0900 	mov.w	r9, #0
    7e22:	4698      	mov	r8, r3
	parent->next = child;
    7e24:	46cb      	mov	fp, r9
		if (wc->work == work) {
    7e26:	6843      	ldr	r3, [r0, #4]
    7e28:	429d      	cmp	r5, r3
    7e2a:	4602      	mov	r2, r0
    7e2c:	d10d      	bne.n	7e4a <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    7e2e:	6802      	ldr	r2, [r0, #0]
    7e30:	f1b9 0f00 	cmp.w	r9, #0
    7e34:	d115      	bne.n	7e62 <work_queue_main+0x1ee>
    7e36:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    7e38:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7e3a:	4283      	cmp	r3, r0
    7e3c:	d100      	bne.n	7e40 <work_queue_main+0x1cc>
	list->tail = node;
    7e3e:	607a      	str	r2, [r7, #4]
	parent->next = child;
    7e40:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    7e44:	f7ff f88c 	bl	6f60 <z_impl_k_sem_give>
}
    7e48:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7e4a:	f1b8 0f00 	cmp.w	r8, #0
    7e4e:	d0ae      	beq.n	7dae <work_queue_main+0x13a>
	return node->next;
    7e50:	f8d8 3000 	ldr.w	r3, [r8]
    7e54:	2b00      	cmp	r3, #0
    7e56:	bf38      	it	cc
    7e58:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7e5a:	4640      	mov	r0, r8
    7e5c:	4691      	mov	r9, r2
    7e5e:	4698      	mov	r8, r3
    7e60:	e7e1      	b.n	7e26 <work_queue_main+0x1b2>
	parent->next = child;
    7e62:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    7e66:	687b      	ldr	r3, [r7, #4]
    7e68:	4283      	cmp	r3, r0
	list->tail = node;
    7e6a:	bf08      	it	eq
    7e6c:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    7e70:	e7e6      	b.n	7e40 <work_queue_main+0x1cc>
    7e72:	bf00      	nop
    7e74:	20000c54 	.word	0x20000c54
    7e78:	20000c58 	.word	0x20000c58
    7e7c:	00009f3d 	.word	0x00009f3d
    7e80:	00009f8f 	.word	0x00009f8f
    7e84:	00009c7a 	.word	0x00009c7a
    7e88:	00009fa4 	.word	0x00009fa4
    7e8c:	00009f63 	.word	0x00009f63
    7e90:	00009f7a 	.word	0x00009f7a
    7e94:	0000adc2 	.word	0x0000adc2
    7e98:	0000ada1 	.word	0x0000ada1

00007e9c <submit_to_queue_locked>:
{
    7e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7e9e:	68c3      	ldr	r3, [r0, #12]
    7ea0:	079a      	lsls	r2, r3, #30
{
    7ea2:	4604      	mov	r4, r0
    7ea4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7ea6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7eaa:	d42b      	bmi.n	7f04 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7eac:	075f      	lsls	r7, r3, #29
    7eae:	d42b      	bmi.n	7f08 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    7eb0:	680a      	ldr	r2, [r1, #0]
    7eb2:	b90a      	cbnz	r2, 7eb8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    7eb4:	6882      	ldr	r2, [r0, #8]
    7eb6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7eb8:	07d8      	lsls	r0, r3, #31
    7eba:	d528      	bpl.n	7f0e <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    7ebc:	68a3      	ldr	r3, [r4, #8]
    7ebe:	b95b      	cbnz	r3, 7ed8 <submit_to_queue_locked+0x3c>
    7ec0:	4924      	ldr	r1, [pc, #144]	; (7f54 <submit_to_queue_locked+0xb8>)
    7ec2:	4825      	ldr	r0, [pc, #148]	; (7f58 <submit_to_queue_locked+0xbc>)
    7ec4:	4a25      	ldr	r2, [pc, #148]	; (7f5c <submit_to_queue_locked+0xc0>)
    7ec6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    7eca:	f000 fe92 	bl	8bf2 <printk>
    7ece:	4823      	ldr	r0, [pc, #140]	; (7f5c <submit_to_queue_locked+0xc0>)
    7ed0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    7ed4:	f000 fc9e 	bl	8814 <assert_post_action>
			*queuep = work->queue;
    7ed8:	68a3      	ldr	r3, [r4, #8]
    7eda:	6033      	str	r3, [r6, #0]
			ret = 2;
    7edc:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    7ede:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    7ee0:	b38f      	cbz	r7, 7f46 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7ee2:	4b1f      	ldr	r3, [pc, #124]	; (7f60 <submit_to_queue_locked+0xc4>)
    7ee4:	689b      	ldr	r3, [r3, #8]
    7ee6:	42bb      	cmp	r3, r7
    7ee8:	d113      	bne.n	7f12 <submit_to_queue_locked+0x76>
    7eea:	f001 fa2f 	bl	934c <k_is_in_isr>
    7eee:	f080 0001 	eor.w	r0, r0, #1
    7ef2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    7ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7ef8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7efa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7efe:	d525      	bpl.n	7f4c <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    7f00:	b14a      	cbz	r2, 7f16 <submit_to_queue_locked+0x7a>
    7f02:	b950      	cbnz	r0, 7f1a <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    7f04:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    7f08:	2300      	movs	r3, #0
    7f0a:	6033      	str	r3, [r6, #0]
	return ret;
    7f0c:	e015      	b.n	7f3a <submit_to_queue_locked+0x9e>
		ret = 1;
    7f0e:	2501      	movs	r5, #1
    7f10:	e7e5      	b.n	7ede <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7f12:	2000      	movs	r0, #0
    7f14:	e7ee      	b.n	7ef4 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    7f16:	071b      	lsls	r3, r3, #28
    7f18:	d4f4      	bmi.n	7f04 <submit_to_queue_locked+0x68>
	parent->next = child;
    7f1a:	2300      	movs	r3, #0
    7f1c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    7f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7f22:	b963      	cbnz	r3, 7f3e <submit_to_queue_locked+0xa2>
	list->head = node;
    7f24:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7f28:	4638      	mov	r0, r7
    7f2a:	f001 fa6a 	bl	9402 <notify_queue_locked>
	*flagp |= BIT(bit);
    7f2e:	68e3      	ldr	r3, [r4, #12]
    7f30:	f043 0304 	orr.w	r3, r3, #4
    7f34:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7f36:	6833      	ldr	r3, [r6, #0]
    7f38:	60a3      	str	r3, [r4, #8]
}
    7f3a:	4628      	mov	r0, r5
    7f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7f3e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7f40:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    7f44:	e7f0      	b.n	7f28 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    7f46:	f06f 0515 	mvn.w	r5, #21
    7f4a:	e7dd      	b.n	7f08 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    7f4c:	f06f 0512 	mvn.w	r5, #18
    7f50:	e7da      	b.n	7f08 <submit_to_queue_locked+0x6c>
    7f52:	bf00      	nop
    7f54:	0000add9 	.word	0x0000add9
    7f58:	00009c7a 	.word	0x00009c7a
    7f5c:	0000ada1 	.word	0x0000ada1
    7f60:	20000c04 	.word	0x20000c04

00007f64 <k_work_submit_to_queue>:
{
    7f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    7f66:	460c      	mov	r4, r1
{
    7f68:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    7f6a:	b959      	cbnz	r1, 7f84 <k_work_submit_to_queue+0x20>
    7f6c:	4926      	ldr	r1, [pc, #152]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f6e:	4827      	ldr	r0, [pc, #156]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f70:	4a27      	ldr	r2, [pc, #156]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f72:	f240 1369 	movw	r3, #361	; 0x169
    7f76:	f000 fe3c 	bl	8bf2 <printk>
    7f7a:	4825      	ldr	r0, [pc, #148]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7f7c:	f240 1169 	movw	r1, #361	; 0x169
    7f80:	f000 fc48 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7f84:	f04f 0320 	mov.w	r3, #32
    7f88:	f3ef 8511 	mrs	r5, BASEPRI
    7f8c:	f383 8812 	msr	BASEPRI_MAX, r3
    7f90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f94:	481f      	ldr	r0, [pc, #124]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f96:	f7ff fa0d 	bl	73b4 <z_spin_lock_valid>
    7f9a:	b968      	cbnz	r0, 7fb8 <k_work_submit_to_queue+0x54>
    7f9c:	4a1e      	ldr	r2, [pc, #120]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7f9e:	491f      	ldr	r1, [pc, #124]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7fa0:	481a      	ldr	r0, [pc, #104]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fa2:	2381      	movs	r3, #129	; 0x81
    7fa4:	f000 fe25 	bl	8bf2 <printk>
    7fa8:	491a      	ldr	r1, [pc, #104]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7faa:	481d      	ldr	r0, [pc, #116]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fac:	f000 fe21 	bl	8bf2 <printk>
    7fb0:	4819      	ldr	r0, [pc, #100]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7fb2:	2181      	movs	r1, #129	; 0x81
    7fb4:	f000 fc2e 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    7fb8:	4816      	ldr	r0, [pc, #88]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fba:	f7ff fa19 	bl	73f0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    7fbe:	4620      	mov	r0, r4
    7fc0:	a901      	add	r1, sp, #4
    7fc2:	f7ff ff6b 	bl	7e9c <submit_to_queue_locked>
    7fc6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fc8:	4812      	ldr	r0, [pc, #72]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fca:	f7ff fa01 	bl	73d0 <z_spin_unlock_valid>
    7fce:	b968      	cbnz	r0, 7fec <k_work_submit_to_queue+0x88>
    7fd0:	4a11      	ldr	r2, [pc, #68]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7fd2:	4914      	ldr	r1, [pc, #80]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fd4:	480d      	ldr	r0, [pc, #52]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fd6:	23ac      	movs	r3, #172	; 0xac
    7fd8:	f000 fe0b 	bl	8bf2 <printk>
    7fdc:	490d      	ldr	r1, [pc, #52]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fde:	4812      	ldr	r0, [pc, #72]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fe0:	f000 fe07 	bl	8bf2 <printk>
    7fe4:	480c      	ldr	r0, [pc, #48]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7fe6:	21ac      	movs	r1, #172	; 0xac
    7fe8:	f000 fc14 	bl	8814 <assert_post_action>
	__asm__ volatile(
    7fec:	f385 8811 	msr	BASEPRI, r5
    7ff0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    7ff4:	2c00      	cmp	r4, #0
    7ff6:	dd04      	ble.n	8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
	return z_impl_k_is_preempt_thread();
    7ff8:	f7fe fe84 	bl	6d04 <z_impl_k_is_preempt_thread>
    7ffc:	b108      	cbz	r0, 8002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
	z_impl_k_yield();
    7ffe:	f7fe fcf1 	bl	69e4 <z_impl_k_yield>
}
    8002:	4620      	mov	r0, r4
    8004:	b003      	add	sp, #12
    8006:	bd30      	pop	{r4, r5, pc}
    8008:	0000adf4 	.word	0x0000adf4
    800c:	00009c7a 	.word	0x00009c7a
    8010:	0000ada1 	.word	0x0000ada1
    8014:	20000c54 	.word	0x20000c54
    8018:	00009f3d 	.word	0x00009f3d
    801c:	00009f8f 	.word	0x00009f8f
    8020:	00009fa4 	.word	0x00009fa4
    8024:	00009f63 	.word	0x00009f63
    8028:	00009f7a 	.word	0x00009f7a

0000802c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8030:	b088      	sub	sp, #32
    8032:	460e      	mov	r6, r1
    8034:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8036:	4617      	mov	r7, r2
    8038:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    803a:	4604      	mov	r4, r0
    803c:	b958      	cbnz	r0, 8056 <k_work_queue_start+0x2a>
    803e:	492e      	ldr	r1, [pc, #184]	; (80f8 <k_work_queue_start+0xcc>)
    8040:	482e      	ldr	r0, [pc, #184]	; (80fc <k_work_queue_start+0xd0>)
    8042:	4a2f      	ldr	r2, [pc, #188]	; (8100 <k_work_queue_start+0xd4>)
    8044:	f240 23b5 	movw	r3, #693	; 0x2b5
    8048:	f000 fdd3 	bl	8bf2 <printk>
    804c:	482c      	ldr	r0, [pc, #176]	; (8100 <k_work_queue_start+0xd4>)
    804e:	f240 21b5 	movw	r1, #693	; 0x2b5
    8052:	f000 fbdf 	bl	8814 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    8056:	b95e      	cbnz	r6, 8070 <k_work_queue_start+0x44>
    8058:	492a      	ldr	r1, [pc, #168]	; (8104 <k_work_queue_start+0xd8>)
    805a:	4828      	ldr	r0, [pc, #160]	; (80fc <k_work_queue_start+0xd0>)
    805c:	4a28      	ldr	r2, [pc, #160]	; (8100 <k_work_queue_start+0xd4>)
    805e:	f240 23b6 	movw	r3, #694	; 0x2b6
    8062:	f000 fdc6 	bl	8bf2 <printk>
    8066:	4826      	ldr	r0, [pc, #152]	; (8100 <k_work_queue_start+0xd4>)
    8068:	f240 21b6 	movw	r1, #694	; 0x2b6
    806c:	f000 fbd2 	bl	8814 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    8070:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    8074:	07db      	lsls	r3, r3, #31
    8076:	d50b      	bpl.n	8090 <k_work_queue_start+0x64>
    8078:	4923      	ldr	r1, [pc, #140]	; (8108 <k_work_queue_start+0xdc>)
    807a:	4820      	ldr	r0, [pc, #128]	; (80fc <k_work_queue_start+0xd0>)
    807c:	4a20      	ldr	r2, [pc, #128]	; (8100 <k_work_queue_start+0xd4>)
    807e:	f240 23b7 	movw	r3, #695	; 0x2b7
    8082:	f000 fdb6 	bl	8bf2 <printk>
    8086:	481e      	ldr	r0, [pc, #120]	; (8100 <k_work_queue_start+0xd4>)
    8088:	f240 21b7 	movw	r1, #695	; 0x2b7
    808c:	f000 fbc2 	bl	8814 <assert_post_action>
	list->head = NULL;
    8090:	2300      	movs	r3, #0
	list->tail = NULL;
    8092:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    8096:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    809a:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    809e:	f104 0390 	add.w	r3, r4, #144	; 0x90
    80a2:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    80a6:	b32d      	cbz	r5, 80f4 <k_work_queue_start+0xc8>
    80a8:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    80aa:	2b00      	cmp	r3, #0
    80ac:	f240 1101 	movw	r1, #257	; 0x101
    80b0:	bf08      	it	eq
    80b2:	2101      	moveq	r1, #1
	*flagp = flags;
    80b4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    80b8:	f04f 32ff 	mov.w	r2, #4294967295
    80bc:	f04f 33ff 	mov.w	r3, #4294967295
    80c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    80c4:	2200      	movs	r2, #0
    80c6:	e9cd 8203 	strd	r8, r2, [sp, #12]
    80ca:	e9cd 2201 	strd	r2, r2, [sp, #4]
    80ce:	4b0f      	ldr	r3, [pc, #60]	; (810c <k_work_queue_start+0xe0>)
    80d0:	9400      	str	r4, [sp, #0]
    80d2:	463a      	mov	r2, r7
    80d4:	4631      	mov	r1, r6
    80d6:	4620      	mov	r0, r4
    80d8:	f7ff f88e 	bl	71f8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    80dc:	b125      	cbz	r5, 80e8 <k_work_queue_start+0xbc>
    80de:	6829      	ldr	r1, [r5, #0]
    80e0:	b111      	cbz	r1, 80e8 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    80e2:	4620      	mov	r0, r4
    80e4:	f001 f938 	bl	9358 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    80e8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    80ea:	b008      	add	sp, #32
    80ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    80f0:	f001 b935 	b.w	935e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    80f4:	2101      	movs	r1, #1
    80f6:	e7dd      	b.n	80b4 <k_work_queue_start+0x88>
    80f8:	0000ae08 	.word	0x0000ae08
    80fc:	00009c7a 	.word	0x00009c7a
    8100:	0000ada1 	.word	0x0000ada1
    8104:	0000ae0e 	.word	0x0000ae0e
    8108:	0000ae14 	.word	0x0000ae14
    810c:	00007c75 	.word	0x00007c75

00008110 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    8110:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    8112:	4806      	ldr	r0, [pc, #24]	; (812c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    8114:	4a06      	ldr	r2, [pc, #24]	; (8130 <z_data_copy+0x20>)
    8116:	4907      	ldr	r1, [pc, #28]	; (8134 <z_data_copy+0x24>)
    8118:	1a12      	subs	r2, r2, r0
    811a:	f000 fdb6 	bl	8c8a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    811e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8122:	4a05      	ldr	r2, [pc, #20]	; (8138 <z_data_copy+0x28>)
    8124:	4905      	ldr	r1, [pc, #20]	; (813c <z_data_copy+0x2c>)
    8126:	4806      	ldr	r0, [pc, #24]	; (8140 <z_data_copy+0x30>)
    8128:	f000 bdaf 	b.w	8c8a <memcpy>
    812c:	20000000 	.word	0x20000000
    8130:	20000270 	.word	0x20000270
    8134:	0000af7c 	.word	0x0000af7c
    8138:	00000000 	.word	0x00000000
    813c:	0000af7c 	.word	0x0000af7c
    8140:	20000000 	.word	0x20000000

00008144 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8144:	4a02      	ldr	r2, [pc, #8]	; (8150 <boot_banner+0xc>)
    8146:	4903      	ldr	r1, [pc, #12]	; (8154 <boot_banner+0x10>)
    8148:	4803      	ldr	r0, [pc, #12]	; (8158 <boot_banner+0x14>)
    814a:	f000 bd52 	b.w	8bf2 <printk>
    814e:	bf00      	nop
    8150:	0000a94b 	.word	0x0000a94b
    8154:	0000ae48 	.word	0x0000ae48
    8158:	0000ae57 	.word	0x0000ae57

0000815c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    815c:	2304      	movs	r3, #4
    815e:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    8160:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    8164:	4606      	mov	r6, r0
    8166:	460d      	mov	r5, r1
    8168:	d20a      	bcs.n	8180 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    816a:	f04f 0800 	mov.w	r8, #0
    816e:	f04f 0900 	mov.w	r9, #0
    8172:	e9cd 8900 	strd	r8, r9, [sp]
    8176:	4319      	orrs	r1, r3
    8178:	f000 f86a 	bl	8250 <k_heap_aligned_alloc>
	if (mem == NULL) {
    817c:	4604      	mov	r4, r0
    817e:	b920      	cbnz	r0, 818a <z_heap_aligned_alloc+0x2e>
		return NULL;
    8180:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    8182:	4620      	mov	r0, r4
    8184:	b002      	add	sp, #8
    8186:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    818a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    818e:	2d00      	cmp	r5, #0
    8190:	d0f7      	beq.n	8182 <z_heap_aligned_alloc+0x26>
    8192:	1e6b      	subs	r3, r5, #1
    8194:	421c      	tst	r4, r3
    8196:	d0f4      	beq.n	8182 <z_heap_aligned_alloc+0x26>
    8198:	2325      	movs	r3, #37	; 0x25
    819a:	4a07      	ldr	r2, [pc, #28]	; (81b8 <z_heap_aligned_alloc+0x5c>)
    819c:	4907      	ldr	r1, [pc, #28]	; (81bc <z_heap_aligned_alloc+0x60>)
    819e:	4808      	ldr	r0, [pc, #32]	; (81c0 <z_heap_aligned_alloc+0x64>)
    81a0:	f000 fd27 	bl	8bf2 <printk>
    81a4:	4621      	mov	r1, r4
    81a6:	4807      	ldr	r0, [pc, #28]	; (81c4 <z_heap_aligned_alloc+0x68>)
    81a8:	462a      	mov	r2, r5
    81aa:	f000 fd22 	bl	8bf2 <printk>
    81ae:	4802      	ldr	r0, [pc, #8]	; (81b8 <z_heap_aligned_alloc+0x5c>)
    81b0:	2125      	movs	r1, #37	; 0x25
    81b2:	f000 fb2f 	bl	8814 <assert_post_action>
    81b6:	e7e4      	b.n	8182 <z_heap_aligned_alloc+0x26>
    81b8:	0000ae7e 	.word	0x0000ae7e
    81bc:	0000aea2 	.word	0x0000aea2
    81c0:	00009c7a 	.word	0x00009c7a
    81c4:	0000aed4 	.word	0x0000aed4

000081c8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    81c8:	b538      	push	{r3, r4, r5, lr}
    81ca:	4604      	mov	r4, r0
    81cc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    81ce:	f001 f8bd 	bl	934c <k_is_in_isr>
    81d2:	b950      	cbnz	r0, 81ea <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    81d4:	4b06      	ldr	r3, [pc, #24]	; (81f0 <z_thread_aligned_alloc+0x28>)
    81d6:	689b      	ldr	r3, [r3, #8]
    81d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
    81da:	b143      	cbz	r3, 81ee <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
    81dc:	462a      	mov	r2, r5
    81de:	4621      	mov	r1, r4
    81e0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
    81e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    81e6:	f7ff bfb9 	b.w	815c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
    81ea:	4b02      	ldr	r3, [pc, #8]	; (81f4 <z_thread_aligned_alloc+0x2c>)
    81ec:	e7f6      	b.n	81dc <z_thread_aligned_alloc+0x14>
}
    81ee:	bd38      	pop	{r3, r4, r5, pc}
    81f0:	20000c04 	.word	0x20000c04
    81f4:	20000208 	.word	0x20000208

000081f8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    81f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    81fa:	4d0f      	ldr	r5, [pc, #60]	; (8238 <statics_init+0x40>)
    81fc:	4c0f      	ldr	r4, [pc, #60]	; (823c <statics_init+0x44>)
    81fe:	4e10      	ldr	r6, [pc, #64]	; (8240 <statics_init+0x48>)
    8200:	462f      	mov	r7, r5
    8202:	42ac      	cmp	r4, r5
    8204:	d90c      	bls.n	8220 <statics_init+0x28>
    8206:	490f      	ldr	r1, [pc, #60]	; (8244 <statics_init+0x4c>)
    8208:	480f      	ldr	r0, [pc, #60]	; (8248 <statics_init+0x50>)
    820a:	2318      	movs	r3, #24
    820c:	4632      	mov	r2, r6
    820e:	f000 fcf0 	bl	8bf2 <printk>
    8212:	480e      	ldr	r0, [pc, #56]	; (824c <statics_init+0x54>)
    8214:	f000 fced 	bl	8bf2 <printk>
    8218:	2118      	movs	r1, #24
    821a:	4630      	mov	r0, r6
    821c:	f000 fafa 	bl	8814 <assert_post_action>
    8220:	42bc      	cmp	r4, r7
    8222:	d301      	bcc.n	8228 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8224:	2000      	movs	r0, #0
    8226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8228:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    822c:	4620      	mov	r0, r4
    822e:	f001 f8f6 	bl	941e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8232:	3418      	adds	r4, #24
    8234:	e7e5      	b.n	8202 <statics_init+0xa>
    8236:	bf00      	nop
    8238:	20000220 	.word	0x20000220
    823c:	20000208 	.word	0x20000208
    8240:	0000aefc 	.word	0x0000aefc
    8244:	0000af1e 	.word	0x0000af1e
    8248:	00009c7a 	.word	0x00009c7a
    824c:	0000a88f 	.word	0x0000a88f

00008250 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    8250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8254:	b087      	sub	sp, #28
    8256:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    825a:	4606      	mov	r6, r0
    825c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    825e:	4640      	mov	r0, r8
    8260:	4649      	mov	r1, r9
{
    8262:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8264:	f001 f887 	bl	9376 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8268:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    826c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
    8270:	f04f 0320 	mov.w	r3, #32
    8274:	f3ef 8511 	mrs	r5, BASEPRI
    8278:	f383 8812 	msr	BASEPRI_MAX, r3
    827c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8280:	4620      	mov	r0, r4
    8282:	f7ff f897 	bl	73b4 <z_spin_lock_valid>
    8286:	b968      	cbnz	r0, 82a4 <k_heap_aligned_alloc+0x54>
    8288:	4a3f      	ldr	r2, [pc, #252]	; (8388 <k_heap_aligned_alloc+0x138>)
    828a:	4940      	ldr	r1, [pc, #256]	; (838c <k_heap_aligned_alloc+0x13c>)
    828c:	4840      	ldr	r0, [pc, #256]	; (8390 <k_heap_aligned_alloc+0x140>)
    828e:	2381      	movs	r3, #129	; 0x81
    8290:	f000 fcaf 	bl	8bf2 <printk>
    8294:	483f      	ldr	r0, [pc, #252]	; (8394 <k_heap_aligned_alloc+0x144>)
    8296:	4621      	mov	r1, r4
    8298:	f000 fcab 	bl	8bf2 <printk>
    829c:	483a      	ldr	r0, [pc, #232]	; (8388 <k_heap_aligned_alloc+0x138>)
    829e:	2181      	movs	r1, #129	; 0x81
    82a0:	f000 fab8 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    82a4:	4620      	mov	r0, r4
    82a6:	f7ff f8a3 	bl	73f0 <z_spin_lock_set_owner>
    82aa:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    82ae:	b17b      	cbz	r3, 82d0 <k_heap_aligned_alloc+0x80>
    82b0:	ea58 0309 	orrs.w	r3, r8, r9
    82b4:	d00c      	beq.n	82d0 <k_heap_aligned_alloc+0x80>
    82b6:	4938      	ldr	r1, [pc, #224]	; (8398 <k_heap_aligned_alloc+0x148>)
    82b8:	4a38      	ldr	r2, [pc, #224]	; (839c <k_heap_aligned_alloc+0x14c>)
    82ba:	4835      	ldr	r0, [pc, #212]	; (8390 <k_heap_aligned_alloc+0x140>)
    82bc:	2349      	movs	r3, #73	; 0x49
    82be:	f000 fc98 	bl	8bf2 <printk>
    82c2:	4837      	ldr	r0, [pc, #220]	; (83a0 <k_heap_aligned_alloc+0x150>)
    82c4:	f000 fc95 	bl	8bf2 <printk>
    82c8:	4834      	ldr	r0, [pc, #208]	; (839c <k_heap_aligned_alloc+0x14c>)
    82ca:	2149      	movs	r1, #73	; 0x49
    82cc:	f000 faa2 	bl	8814 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82d0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8388 <k_heap_aligned_alloc+0x138>
    82d4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 838c <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    82d8:	4652      	mov	r2, sl
    82da:	4659      	mov	r1, fp
    82dc:	4630      	mov	r0, r6
    82de:	f7f8 feab 	bl	1038 <sys_heap_aligned_alloc>
    82e2:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
    82e4:	f7ff fb62 	bl	79ac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    82e8:	b1cf      	cbz	r7, 831e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82ea:	4620      	mov	r0, r4
    82ec:	f7ff f870 	bl	73d0 <z_spin_unlock_valid>
    82f0:	b968      	cbnz	r0, 830e <k_heap_aligned_alloc+0xbe>
    82f2:	4a25      	ldr	r2, [pc, #148]	; (8388 <k_heap_aligned_alloc+0x138>)
    82f4:	492b      	ldr	r1, [pc, #172]	; (83a4 <k_heap_aligned_alloc+0x154>)
    82f6:	4826      	ldr	r0, [pc, #152]	; (8390 <k_heap_aligned_alloc+0x140>)
    82f8:	23ac      	movs	r3, #172	; 0xac
    82fa:	f000 fc7a 	bl	8bf2 <printk>
    82fe:	482a      	ldr	r0, [pc, #168]	; (83a8 <k_heap_aligned_alloc+0x158>)
    8300:	4621      	mov	r1, r4
    8302:	f000 fc76 	bl	8bf2 <printk>
    8306:	4820      	ldr	r0, [pc, #128]	; (8388 <k_heap_aligned_alloc+0x138>)
    8308:	21ac      	movs	r1, #172	; 0xac
    830a:	f000 fa83 	bl	8814 <assert_post_action>
	__asm__ volatile(
    830e:	f385 8811 	msr	BASEPRI, r5
    8312:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    8316:	4638      	mov	r0, r7
    8318:	b007      	add	sp, #28
    831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    831e:	9b04      	ldr	r3, [sp, #16]
    8320:	1a1b      	subs	r3, r3, r0
    8322:	9302      	str	r3, [sp, #8]
    8324:	9b05      	ldr	r3, [sp, #20]
    8326:	eb63 0301 	sbc.w	r3, r3, r1
    832a:	9303      	str	r3, [sp, #12]
    832c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8330:	2a01      	cmp	r2, #1
    8332:	f173 0300 	sbcs.w	r3, r3, #0
    8336:	dbd8      	blt.n	82ea <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    8338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    833c:	4629      	mov	r1, r5
    833e:	e9cd 2300 	strd	r2, r3, [sp]
    8342:	4620      	mov	r0, r4
    8344:	f106 020c 	add.w	r2, r6, #12
    8348:	f7fe f8f2 	bl	6530 <z_pend_curr>
	__asm__ volatile(
    834c:	f04f 0320 	mov.w	r3, #32
    8350:	f3ef 8511 	mrs	r5, BASEPRI
    8354:	f383 8812 	msr	BASEPRI_MAX, r3
    8358:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    835c:	4620      	mov	r0, r4
    835e:	f7ff f829 	bl	73b4 <z_spin_lock_valid>
    8362:	b968      	cbnz	r0, 8380 <k_heap_aligned_alloc+0x130>
    8364:	480a      	ldr	r0, [pc, #40]	; (8390 <k_heap_aligned_alloc+0x140>)
    8366:	2381      	movs	r3, #129	; 0x81
    8368:	4642      	mov	r2, r8
    836a:	4649      	mov	r1, r9
    836c:	f000 fc41 	bl	8bf2 <printk>
    8370:	4808      	ldr	r0, [pc, #32]	; (8394 <k_heap_aligned_alloc+0x144>)
    8372:	4621      	mov	r1, r4
    8374:	f000 fc3d 	bl	8bf2 <printk>
    8378:	2181      	movs	r1, #129	; 0x81
    837a:	4640      	mov	r0, r8
    837c:	f000 fa4a 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    8380:	4620      	mov	r0, r4
    8382:	f7ff f835 	bl	73f0 <z_spin_lock_set_owner>
	return k;
    8386:	e7a7      	b.n	82d8 <k_heap_aligned_alloc+0x88>
    8388:	00009f3d 	.word	0x00009f3d
    838c:	00009f8f 	.word	0x00009f8f
    8390:	00009c7a 	.word	0x00009c7a
    8394:	00009fa4 	.word	0x00009fa4
    8398:	0000af34 	.word	0x0000af34
    839c:	0000aefc 	.word	0x0000aefc
    83a0:	0000a949 	.word	0x0000a949
    83a4:	00009f63 	.word	0x00009f63
    83a8:	00009f7a 	.word	0x00009f7a

000083ac <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    83ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83ae:	4605      	mov	r5, r0
    83b0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    83b2:	f100 0414 	add.w	r4, r0, #20
    83b6:	f04f 0320 	mov.w	r3, #32
    83ba:	f3ef 8711 	mrs	r7, BASEPRI
    83be:	f383 8812 	msr	BASEPRI_MAX, r3
    83c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83c6:	4620      	mov	r0, r4
    83c8:	f7fe fff4 	bl	73b4 <z_spin_lock_valid>
    83cc:	b968      	cbnz	r0, 83ea <k_heap_free+0x3e>
    83ce:	4a1b      	ldr	r2, [pc, #108]	; (843c <k_heap_free+0x90>)
    83d0:	491b      	ldr	r1, [pc, #108]	; (8440 <k_heap_free+0x94>)
    83d2:	481c      	ldr	r0, [pc, #112]	; (8444 <k_heap_free+0x98>)
    83d4:	2381      	movs	r3, #129	; 0x81
    83d6:	f000 fc0c 	bl	8bf2 <printk>
    83da:	481b      	ldr	r0, [pc, #108]	; (8448 <k_heap_free+0x9c>)
    83dc:	4621      	mov	r1, r4
    83de:	f000 fc08 	bl	8bf2 <printk>
    83e2:	4816      	ldr	r0, [pc, #88]	; (843c <k_heap_free+0x90>)
    83e4:	2181      	movs	r1, #129	; 0x81
    83e6:	f000 fa15 	bl	8814 <assert_post_action>
	z_spin_lock_set_owner(l);
    83ea:	4620      	mov	r0, r4
    83ec:	f7ff f800 	bl	73f0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    83f0:	4628      	mov	r0, r5
    83f2:	4631      	mov	r1, r6
    83f4:	f7f8 fdd4 	bl	fa0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    83f8:	f105 000c 	add.w	r0, r5, #12
    83fc:	f000 ff96 	bl	932c <z_unpend_all>
    8400:	b128      	cbz	r0, 840e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    8402:	4639      	mov	r1, r7
    8404:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    8406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    840a:	f7fd bc3f 	b.w	5c8c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    840e:	4620      	mov	r0, r4
    8410:	f7fe ffde 	bl	73d0 <z_spin_unlock_valid>
    8414:	b968      	cbnz	r0, 8432 <k_heap_free+0x86>
    8416:	4a09      	ldr	r2, [pc, #36]	; (843c <k_heap_free+0x90>)
    8418:	490c      	ldr	r1, [pc, #48]	; (844c <k_heap_free+0xa0>)
    841a:	480a      	ldr	r0, [pc, #40]	; (8444 <k_heap_free+0x98>)
    841c:	23ac      	movs	r3, #172	; 0xac
    841e:	f000 fbe8 	bl	8bf2 <printk>
    8422:	480b      	ldr	r0, [pc, #44]	; (8450 <k_heap_free+0xa4>)
    8424:	4621      	mov	r1, r4
    8426:	f000 fbe4 	bl	8bf2 <printk>
    842a:	4804      	ldr	r0, [pc, #16]	; (843c <k_heap_free+0x90>)
    842c:	21ac      	movs	r1, #172	; 0xac
    842e:	f000 f9f1 	bl	8814 <assert_post_action>
	__asm__ volatile(
    8432:	f387 8811 	msr	BASEPRI, r7
    8436:	f3bf 8f6f 	isb	sy
}
    843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    843c:	00009f3d 	.word	0x00009f3d
    8440:	00009f8f 	.word	0x00009f8f
    8444:	00009c7a 	.word	0x00009c7a
    8448:	00009fa4 	.word	0x00009fa4
    844c:	00009f63 	.word	0x00009f63
    8450:	00009f7a 	.word	0x00009f7a

00008454 <nrf_cc3xx_platform_init_no_rng>:
    8454:	b510      	push	{r4, lr}
    8456:	4c0a      	ldr	r4, [pc, #40]	; (8480 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8458:	6823      	ldr	r3, [r4, #0]
    845a:	b11b      	cbz	r3, 8464 <nrf_cc3xx_platform_init_no_rng+0x10>
    845c:	2301      	movs	r3, #1
    845e:	6023      	str	r3, [r4, #0]
    8460:	2000      	movs	r0, #0
    8462:	bd10      	pop	{r4, pc}
    8464:	f000 f8d6 	bl	8614 <CC_LibInitNoRng>
    8468:	2800      	cmp	r0, #0
    846a:	d0f7      	beq.n	845c <nrf_cc3xx_platform_init_no_rng+0x8>
    846c:	3801      	subs	r0, #1
    846e:	2806      	cmp	r0, #6
    8470:	d803      	bhi.n	847a <nrf_cc3xx_platform_init_no_rng+0x26>
    8472:	4b04      	ldr	r3, [pc, #16]	; (8484 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8474:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8478:	bd10      	pop	{r4, pc}
    847a:	4803      	ldr	r0, [pc, #12]	; (8488 <nrf_cc3xx_platform_init_no_rng+0x34>)
    847c:	bd10      	pop	{r4, pc}
    847e:	bf00      	nop
    8480:	20000c60 	.word	0x20000c60
    8484:	00009894 	.word	0x00009894
    8488:	ffff8ffe 	.word	0xffff8ffe

0000848c <nrf_cc3xx_platform_abort>:
    848c:	f3bf 8f4f 	dsb	sy
    8490:	4905      	ldr	r1, [pc, #20]	; (84a8 <nrf_cc3xx_platform_abort+0x1c>)
    8492:	4b06      	ldr	r3, [pc, #24]	; (84ac <nrf_cc3xx_platform_abort+0x20>)
    8494:	68ca      	ldr	r2, [r1, #12]
    8496:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    849a:	4313      	orrs	r3, r2
    849c:	60cb      	str	r3, [r1, #12]
    849e:	f3bf 8f4f 	dsb	sy
    84a2:	bf00      	nop
    84a4:	e7fd      	b.n	84a2 <nrf_cc3xx_platform_abort+0x16>
    84a6:	bf00      	nop
    84a8:	e000ed00 	.word	0xe000ed00
    84ac:	05fa0004 	.word	0x05fa0004

000084b0 <CC_PalAbort>:
    84b0:	b4f0      	push	{r4, r5, r6, r7}
    84b2:	4f09      	ldr	r7, [pc, #36]	; (84d8 <CC_PalAbort+0x28>)
    84b4:	4e09      	ldr	r6, [pc, #36]	; (84dc <CC_PalAbort+0x2c>)
    84b6:	4c0a      	ldr	r4, [pc, #40]	; (84e0 <CC_PalAbort+0x30>)
    84b8:	4a0a      	ldr	r2, [pc, #40]	; (84e4 <CC_PalAbort+0x34>)
    84ba:	4d0b      	ldr	r5, [pc, #44]	; (84e8 <CC_PalAbort+0x38>)
    84bc:	490b      	ldr	r1, [pc, #44]	; (84ec <CC_PalAbort+0x3c>)
    84be:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    84c2:	603b      	str	r3, [r7, #0]
    84c4:	6852      	ldr	r2, [r2, #4]
    84c6:	6033      	str	r3, [r6, #0]
    84c8:	6023      	str	r3, [r4, #0]
    84ca:	2400      	movs	r4, #0
    84cc:	602b      	str	r3, [r5, #0]
    84ce:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    84d2:	bcf0      	pop	{r4, r5, r6, r7}
    84d4:	4710      	bx	r2
    84d6:	bf00      	nop
    84d8:	5002b400 	.word	0x5002b400
    84dc:	5002b404 	.word	0x5002b404
    84e0:	5002b408 	.word	0x5002b408
    84e4:	2000018c 	.word	0x2000018c
    84e8:	5002b40c 	.word	0x5002b40c
    84ec:	5002a000 	.word	0x5002a000

000084f0 <nrf_cc3xx_platform_set_abort>:
    84f0:	e9d0 1200 	ldrd	r1, r2, [r0]
    84f4:	4b01      	ldr	r3, [pc, #4]	; (84fc <nrf_cc3xx_platform_set_abort+0xc>)
    84f6:	e9c3 1200 	strd	r1, r2, [r3]
    84fa:	4770      	bx	lr
    84fc:	2000018c 	.word	0x2000018c

00008500 <mutex_free>:
    8500:	b510      	push	{r4, lr}
    8502:	4604      	mov	r4, r0
    8504:	b130      	cbz	r0, 8514 <mutex_free+0x14>
    8506:	6863      	ldr	r3, [r4, #4]
    8508:	06db      	lsls	r3, r3, #27
    850a:	d502      	bpl.n	8512 <mutex_free+0x12>
    850c:	2300      	movs	r3, #0
    850e:	6023      	str	r3, [r4, #0]
    8510:	6063      	str	r3, [r4, #4]
    8512:	bd10      	pop	{r4, pc}
    8514:	4b02      	ldr	r3, [pc, #8]	; (8520 <mutex_free+0x20>)
    8516:	4803      	ldr	r0, [pc, #12]	; (8524 <mutex_free+0x24>)
    8518:	685b      	ldr	r3, [r3, #4]
    851a:	4798      	blx	r3
    851c:	e7f3      	b.n	8506 <mutex_free+0x6>
    851e:	bf00      	nop
    8520:	2000018c 	.word	0x2000018c
    8524:	000098b0 	.word	0x000098b0

00008528 <mutex_unlock>:
    8528:	b168      	cbz	r0, 8546 <mutex_unlock+0x1e>
    852a:	6843      	ldr	r3, [r0, #4]
    852c:	b13b      	cbz	r3, 853e <mutex_unlock+0x16>
    852e:	06db      	lsls	r3, r3, #27
    8530:	d507      	bpl.n	8542 <mutex_unlock+0x1a>
    8532:	f3bf 8f5f 	dmb	sy
    8536:	2300      	movs	r3, #0
    8538:	6003      	str	r3, [r0, #0]
    853a:	4618      	mov	r0, r3
    853c:	4770      	bx	lr
    853e:	4803      	ldr	r0, [pc, #12]	; (854c <mutex_unlock+0x24>)
    8540:	4770      	bx	lr
    8542:	4803      	ldr	r0, [pc, #12]	; (8550 <mutex_unlock+0x28>)
    8544:	4770      	bx	lr
    8546:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    854a:	4770      	bx	lr
    854c:	ffff8fea 	.word	0xffff8fea
    8550:	ffff8fe9 	.word	0xffff8fe9

00008554 <mutex_init>:
    8554:	b510      	push	{r4, lr}
    8556:	4604      	mov	r4, r0
    8558:	b120      	cbz	r0, 8564 <mutex_init+0x10>
    855a:	2200      	movs	r2, #0
    855c:	2311      	movs	r3, #17
    855e:	6022      	str	r2, [r4, #0]
    8560:	6063      	str	r3, [r4, #4]
    8562:	bd10      	pop	{r4, pc}
    8564:	4801      	ldr	r0, [pc, #4]	; (856c <mutex_init+0x18>)
    8566:	f7ff ffa3 	bl	84b0 <CC_PalAbort>
    856a:	e7f6      	b.n	855a <mutex_init+0x6>
    856c:	000098d8 	.word	0x000098d8

00008570 <mutex_lock>:
    8570:	b1c0      	cbz	r0, 85a4 <mutex_lock+0x34>
    8572:	6843      	ldr	r3, [r0, #4]
    8574:	b1a3      	cbz	r3, 85a0 <mutex_lock+0x30>
    8576:	06db      	lsls	r3, r3, #27
    8578:	d510      	bpl.n	859c <mutex_lock+0x2c>
    857a:	2201      	movs	r2, #1
    857c:	f3bf 8f5b 	dmb	ish
    8580:	e850 3f00 	ldrex	r3, [r0]
    8584:	e840 2100 	strex	r1, r2, [r0]
    8588:	2900      	cmp	r1, #0
    858a:	d1f9      	bne.n	8580 <mutex_lock+0x10>
    858c:	f3bf 8f5b 	dmb	ish
    8590:	2b01      	cmp	r3, #1
    8592:	d0f3      	beq.n	857c <mutex_lock+0xc>
    8594:	f3bf 8f5f 	dmb	sy
    8598:	2000      	movs	r0, #0
    859a:	4770      	bx	lr
    859c:	4803      	ldr	r0, [pc, #12]	; (85ac <mutex_lock+0x3c>)
    859e:	4770      	bx	lr
    85a0:	4803      	ldr	r0, [pc, #12]	; (85b0 <mutex_lock+0x40>)
    85a2:	4770      	bx	lr
    85a4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    85a8:	4770      	bx	lr
    85aa:	bf00      	nop
    85ac:	ffff8fe9 	.word	0xffff8fe9
    85b0:	ffff8fea 	.word	0xffff8fea

000085b4 <nrf_cc3xx_platform_set_mutexes>:
    85b4:	b570      	push	{r4, r5, r6, lr}
    85b6:	e9d0 2300 	ldrd	r2, r3, [r0]
    85ba:	4c13      	ldr	r4, [pc, #76]	; (8608 <nrf_cc3xx_platform_set_mutexes+0x54>)
    85bc:	4d13      	ldr	r5, [pc, #76]	; (860c <nrf_cc3xx_platform_set_mutexes+0x58>)
    85be:	e9c4 2300 	strd	r2, r3, [r4]
    85c2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    85c6:	e9c4 6302 	strd	r6, r3, [r4, #8]
    85ca:	4b11      	ldr	r3, [pc, #68]	; (8610 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    85cc:	6808      	ldr	r0, [r1, #0]
    85ce:	6018      	str	r0, [r3, #0]
    85d0:	6848      	ldr	r0, [r1, #4]
    85d2:	6058      	str	r0, [r3, #4]
    85d4:	6888      	ldr	r0, [r1, #8]
    85d6:	6098      	str	r0, [r3, #8]
    85d8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    85dc:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    85e0:	60de      	str	r6, [r3, #12]
    85e2:	6118      	str	r0, [r3, #16]
    85e4:	06cb      	lsls	r3, r1, #27
    85e6:	d50d      	bpl.n	8604 <nrf_cc3xx_platform_set_mutexes+0x50>
    85e8:	2300      	movs	r3, #0
    85ea:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    85ee:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    85f2:	f505 7088 	add.w	r0, r5, #272	; 0x110
    85f6:	4790      	blx	r2
    85f8:	6823      	ldr	r3, [r4, #0]
    85fa:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    85fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8602:	4718      	bx	r3
    8604:	bd70      	pop	{r4, r5, r6, pc}
    8606:	bf00      	nop
    8608:	2000019c 	.word	0x2000019c
    860c:	20000c7c 	.word	0x20000c7c
    8610:	200001ac 	.word	0x200001ac

00008614 <CC_LibInitNoRng>:
    8614:	b510      	push	{r4, lr}
    8616:	f000 f833 	bl	8680 <CC_HalInit>
    861a:	b120      	cbz	r0, 8626 <CC_LibInitNoRng+0x12>
    861c:	2403      	movs	r4, #3
    861e:	f000 f867 	bl	86f0 <CC_PalTerminate>
    8622:	4620      	mov	r0, r4
    8624:	bd10      	pop	{r4, pc}
    8626:	f000 f835 	bl	8694 <CC_PalInit>
    862a:	b990      	cbnz	r0, 8652 <CC_LibInitNoRng+0x3e>
    862c:	f000 f8b0 	bl	8790 <CC_PalPowerSaveModeSelect>
    8630:	b990      	cbnz	r0, 8658 <CC_LibInitNoRng+0x44>
    8632:	4b0f      	ldr	r3, [pc, #60]	; (8670 <CC_LibInitNoRng+0x5c>)
    8634:	681b      	ldr	r3, [r3, #0]
    8636:	0e1b      	lsrs	r3, r3, #24
    8638:	2bf0      	cmp	r3, #240	; 0xf0
    863a:	d108      	bne.n	864e <CC_LibInitNoRng+0x3a>
    863c:	4a0d      	ldr	r2, [pc, #52]	; (8674 <CC_LibInitNoRng+0x60>)
    863e:	4b0e      	ldr	r3, [pc, #56]	; (8678 <CC_LibInitNoRng+0x64>)
    8640:	6812      	ldr	r2, [r2, #0]
    8642:	429a      	cmp	r2, r3
    8644:	d00a      	beq.n	865c <CC_LibInitNoRng+0x48>
    8646:	2407      	movs	r4, #7
    8648:	f000 f81c 	bl	8684 <CC_HalTerminate>
    864c:	e7e7      	b.n	861e <CC_LibInitNoRng+0xa>
    864e:	2406      	movs	r4, #6
    8650:	e7fa      	b.n	8648 <CC_LibInitNoRng+0x34>
    8652:	2404      	movs	r4, #4
    8654:	4620      	mov	r0, r4
    8656:	bd10      	pop	{r4, pc}
    8658:	2400      	movs	r4, #0
    865a:	e7f5      	b.n	8648 <CC_LibInitNoRng+0x34>
    865c:	2001      	movs	r0, #1
    865e:	f000 f897 	bl	8790 <CC_PalPowerSaveModeSelect>
    8662:	4604      	mov	r4, r0
    8664:	2800      	cmp	r0, #0
    8666:	d1f7      	bne.n	8658 <CC_LibInitNoRng+0x44>
    8668:	4b04      	ldr	r3, [pc, #16]	; (867c <CC_LibInitNoRng+0x68>)
    866a:	6018      	str	r0, [r3, #0]
    866c:	e7d9      	b.n	8622 <CC_LibInitNoRng+0xe>
    866e:	bf00      	nop
    8670:	5002b928 	.word	0x5002b928
    8674:	5002ba24 	.word	0x5002ba24
    8678:	20e00000 	.word	0x20e00000
    867c:	5002ba0c 	.word	0x5002ba0c

00008680 <CC_HalInit>:
    8680:	2000      	movs	r0, #0
    8682:	4770      	bx	lr

00008684 <CC_HalTerminate>:
    8684:	2000      	movs	r0, #0
    8686:	4770      	bx	lr

00008688 <CC_HalMaskInterrupt>:
    8688:	4b01      	ldr	r3, [pc, #4]	; (8690 <CC_HalMaskInterrupt+0x8>)
    868a:	6018      	str	r0, [r3, #0]
    868c:	4770      	bx	lr
    868e:	bf00      	nop
    8690:	5002ba04 	.word	0x5002ba04

00008694 <CC_PalInit>:
    8694:	b510      	push	{r4, lr}
    8696:	4811      	ldr	r0, [pc, #68]	; (86dc <CC_PalInit+0x48>)
    8698:	f000 f848 	bl	872c <CC_PalMutexCreate>
    869c:	b100      	cbz	r0, 86a0 <CC_PalInit+0xc>
    869e:	bd10      	pop	{r4, pc}
    86a0:	480f      	ldr	r0, [pc, #60]	; (86e0 <CC_PalInit+0x4c>)
    86a2:	f000 f843 	bl	872c <CC_PalMutexCreate>
    86a6:	2800      	cmp	r0, #0
    86a8:	d1f9      	bne.n	869e <CC_PalInit+0xa>
    86aa:	4c0e      	ldr	r4, [pc, #56]	; (86e4 <CC_PalInit+0x50>)
    86ac:	4620      	mov	r0, r4
    86ae:	f000 f83d 	bl	872c <CC_PalMutexCreate>
    86b2:	2800      	cmp	r0, #0
    86b4:	d1f3      	bne.n	869e <CC_PalInit+0xa>
    86b6:	4b0c      	ldr	r3, [pc, #48]	; (86e8 <CC_PalInit+0x54>)
    86b8:	480c      	ldr	r0, [pc, #48]	; (86ec <CC_PalInit+0x58>)
    86ba:	601c      	str	r4, [r3, #0]
    86bc:	f000 f836 	bl	872c <CC_PalMutexCreate>
    86c0:	4601      	mov	r1, r0
    86c2:	2800      	cmp	r0, #0
    86c4:	d1eb      	bne.n	869e <CC_PalInit+0xa>
    86c6:	f000 f82d 	bl	8724 <CC_PalDmaInit>
    86ca:	4604      	mov	r4, r0
    86cc:	b108      	cbz	r0, 86d2 <CC_PalInit+0x3e>
    86ce:	4620      	mov	r0, r4
    86d0:	bd10      	pop	{r4, pc}
    86d2:	f000 f83f 	bl	8754 <CC_PalPowerSaveModeInit>
    86d6:	4620      	mov	r0, r4
    86d8:	e7fa      	b.n	86d0 <CC_PalInit+0x3c>
    86da:	bf00      	nop
    86dc:	200001e4 	.word	0x200001e4
    86e0:	200001d8 	.word	0x200001d8
    86e4:	200001e0 	.word	0x200001e0
    86e8:	200001e8 	.word	0x200001e8
    86ec:	200001dc 	.word	0x200001dc

000086f0 <CC_PalTerminate>:
    86f0:	b508      	push	{r3, lr}
    86f2:	4808      	ldr	r0, [pc, #32]	; (8714 <CC_PalTerminate+0x24>)
    86f4:	f000 f824 	bl	8740 <CC_PalMutexDestroy>
    86f8:	4807      	ldr	r0, [pc, #28]	; (8718 <CC_PalTerminate+0x28>)
    86fa:	f000 f821 	bl	8740 <CC_PalMutexDestroy>
    86fe:	4807      	ldr	r0, [pc, #28]	; (871c <CC_PalTerminate+0x2c>)
    8700:	f000 f81e 	bl	8740 <CC_PalMutexDestroy>
    8704:	4806      	ldr	r0, [pc, #24]	; (8720 <CC_PalTerminate+0x30>)
    8706:	f000 f81b 	bl	8740 <CC_PalMutexDestroy>
    870a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    870e:	f000 b80b 	b.w	8728 <CC_PalDmaTerminate>
    8712:	bf00      	nop
    8714:	200001e4 	.word	0x200001e4
    8718:	200001d8 	.word	0x200001d8
    871c:	200001e0 	.word	0x200001e0
    8720:	200001dc 	.word	0x200001dc

00008724 <CC_PalDmaInit>:
    8724:	2000      	movs	r0, #0
    8726:	4770      	bx	lr

00008728 <CC_PalDmaTerminate>:
    8728:	4770      	bx	lr
    872a:	bf00      	nop

0000872c <CC_PalMutexCreate>:
    872c:	b508      	push	{r3, lr}
    872e:	4b03      	ldr	r3, [pc, #12]	; (873c <CC_PalMutexCreate+0x10>)
    8730:	6802      	ldr	r2, [r0, #0]
    8732:	681b      	ldr	r3, [r3, #0]
    8734:	6810      	ldr	r0, [r2, #0]
    8736:	4798      	blx	r3
    8738:	2000      	movs	r0, #0
    873a:	bd08      	pop	{r3, pc}
    873c:	2000019c 	.word	0x2000019c

00008740 <CC_PalMutexDestroy>:
    8740:	b508      	push	{r3, lr}
    8742:	4b03      	ldr	r3, [pc, #12]	; (8750 <CC_PalMutexDestroy+0x10>)
    8744:	6802      	ldr	r2, [r0, #0]
    8746:	685b      	ldr	r3, [r3, #4]
    8748:	6810      	ldr	r0, [r2, #0]
    874a:	4798      	blx	r3
    874c:	2000      	movs	r0, #0
    874e:	bd08      	pop	{r3, pc}
    8750:	2000019c 	.word	0x2000019c

00008754 <CC_PalPowerSaveModeInit>:
    8754:	b570      	push	{r4, r5, r6, lr}
    8756:	4c09      	ldr	r4, [pc, #36]	; (877c <CC_PalPowerSaveModeInit+0x28>)
    8758:	4d09      	ldr	r5, [pc, #36]	; (8780 <CC_PalPowerSaveModeInit+0x2c>)
    875a:	6920      	ldr	r0, [r4, #16]
    875c:	68ab      	ldr	r3, [r5, #8]
    875e:	4798      	blx	r3
    8760:	b118      	cbz	r0, 876a <CC_PalPowerSaveModeInit+0x16>
    8762:	4b08      	ldr	r3, [pc, #32]	; (8784 <CC_PalPowerSaveModeInit+0x30>)
    8764:	4808      	ldr	r0, [pc, #32]	; (8788 <CC_PalPowerSaveModeInit+0x34>)
    8766:	685b      	ldr	r3, [r3, #4]
    8768:	4798      	blx	r3
    876a:	4a08      	ldr	r2, [pc, #32]	; (878c <CC_PalPowerSaveModeInit+0x38>)
    876c:	68eb      	ldr	r3, [r5, #12]
    876e:	6920      	ldr	r0, [r4, #16]
    8770:	2100      	movs	r1, #0
    8772:	6011      	str	r1, [r2, #0]
    8774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8778:	4718      	bx	r3
    877a:	bf00      	nop
    877c:	200001ac 	.word	0x200001ac
    8780:	2000019c 	.word	0x2000019c
    8784:	2000018c 	.word	0x2000018c
    8788:	000098fc 	.word	0x000098fc
    878c:	20000c74 	.word	0x20000c74

00008790 <CC_PalPowerSaveModeSelect>:
    8790:	b570      	push	{r4, r5, r6, lr}
    8792:	4d1a      	ldr	r5, [pc, #104]	; (87fc <CC_PalPowerSaveModeSelect+0x6c>)
    8794:	4e1a      	ldr	r6, [pc, #104]	; (8800 <CC_PalPowerSaveModeSelect+0x70>)
    8796:	4604      	mov	r4, r0
    8798:	68b2      	ldr	r2, [r6, #8]
    879a:	6928      	ldr	r0, [r5, #16]
    879c:	4790      	blx	r2
    879e:	b9f0      	cbnz	r0, 87de <CC_PalPowerSaveModeSelect+0x4e>
    87a0:	b15c      	cbz	r4, 87ba <CC_PalPowerSaveModeSelect+0x2a>
    87a2:	4c18      	ldr	r4, [pc, #96]	; (8804 <CC_PalPowerSaveModeSelect+0x74>)
    87a4:	6823      	ldr	r3, [r4, #0]
    87a6:	b1ab      	cbz	r3, 87d4 <CC_PalPowerSaveModeSelect+0x44>
    87a8:	2b01      	cmp	r3, #1
    87aa:	d01a      	beq.n	87e2 <CC_PalPowerSaveModeSelect+0x52>
    87ac:	3b01      	subs	r3, #1
    87ae:	6023      	str	r3, [r4, #0]
    87b0:	6928      	ldr	r0, [r5, #16]
    87b2:	68f3      	ldr	r3, [r6, #12]
    87b4:	4798      	blx	r3
    87b6:	2000      	movs	r0, #0
    87b8:	bd70      	pop	{r4, r5, r6, pc}
    87ba:	4c12      	ldr	r4, [pc, #72]	; (8804 <CC_PalPowerSaveModeSelect+0x74>)
    87bc:	6821      	ldr	r1, [r4, #0]
    87be:	b939      	cbnz	r1, 87d0 <CC_PalPowerSaveModeSelect+0x40>
    87c0:	4b11      	ldr	r3, [pc, #68]	; (8808 <CC_PalPowerSaveModeSelect+0x78>)
    87c2:	4a12      	ldr	r2, [pc, #72]	; (880c <CC_PalPowerSaveModeSelect+0x7c>)
    87c4:	2001      	movs	r0, #1
    87c6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    87ca:	6813      	ldr	r3, [r2, #0]
    87cc:	2b00      	cmp	r3, #0
    87ce:	d1fc      	bne.n	87ca <CC_PalPowerSaveModeSelect+0x3a>
    87d0:	3101      	adds	r1, #1
    87d2:	6021      	str	r1, [r4, #0]
    87d4:	68f3      	ldr	r3, [r6, #12]
    87d6:	6928      	ldr	r0, [r5, #16]
    87d8:	4798      	blx	r3
    87da:	2000      	movs	r0, #0
    87dc:	bd70      	pop	{r4, r5, r6, pc}
    87de:	480c      	ldr	r0, [pc, #48]	; (8810 <CC_PalPowerSaveModeSelect+0x80>)
    87e0:	bd70      	pop	{r4, r5, r6, pc}
    87e2:	4a0a      	ldr	r2, [pc, #40]	; (880c <CC_PalPowerSaveModeSelect+0x7c>)
    87e4:	6813      	ldr	r3, [r2, #0]
    87e6:	2b00      	cmp	r3, #0
    87e8:	d1fc      	bne.n	87e4 <CC_PalPowerSaveModeSelect+0x54>
    87ea:	4a07      	ldr	r2, [pc, #28]	; (8808 <CC_PalPowerSaveModeSelect+0x78>)
    87ec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    87f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    87f4:	f7ff ff48 	bl	8688 <CC_HalMaskInterrupt>
    87f8:	6823      	ldr	r3, [r4, #0]
    87fa:	e7d7      	b.n	87ac <CC_PalPowerSaveModeSelect+0x1c>
    87fc:	200001ac 	.word	0x200001ac
    8800:	2000019c 	.word	0x2000019c
    8804:	20000c74 	.word	0x20000c74
    8808:	5002a000 	.word	0x5002a000
    880c:	5002b910 	.word	0x5002b910
    8810:	ffff8fe9 	.word	0xffff8fe9

00008814 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8814:	4040      	eors	r0, r0
    8816:	f380 8811 	msr	BASEPRI, r0
    881a:	f04f 0004 	mov.w	r0, #4
    881e:	df02      	svc	2
}
    8820:	4770      	bx	lr

00008822 <encode_uint>:
{
    8822:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8826:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8828:	78d3      	ldrb	r3, [r2, #3]
{
    882a:	4614      	mov	r4, r2
	switch (specifier) {
    882c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    882e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8832:	4606      	mov	r6, r0
    8834:	460f      	mov	r7, r1
    8836:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8838:	d02d      	beq.n	8896 <encode_uint+0x74>
    883a:	d828      	bhi.n	888e <encode_uint+0x6c>
		return 16;
    883c:	2b58      	cmp	r3, #88	; 0x58
    883e:	bf14      	ite	ne
    8840:	250a      	movne	r5, #10
    8842:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8844:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8848:	46aa      	mov	sl, r5
    884a:	f04f 0b00 	mov.w	fp, #0
    884e:	4652      	mov	r2, sl
    8850:	465b      	mov	r3, fp
    8852:	4630      	mov	r0, r6
    8854:	4639      	mov	r1, r7
    8856:	f7f7 fc53 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    885a:	2a09      	cmp	r2, #9
    885c:	b2d3      	uxtb	r3, r2
    885e:	d81f      	bhi.n	88a0 <encode_uint+0x7e>
    8860:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8862:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8864:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8866:	bf08      	it	eq
    8868:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    886a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    886e:	d301      	bcc.n	8874 <encode_uint+0x52>
    8870:	45c8      	cmp	r8, r9
    8872:	d812      	bhi.n	889a <encode_uint+0x78>
	if (conv->flag_hash) {
    8874:	7823      	ldrb	r3, [r4, #0]
    8876:	069b      	lsls	r3, r3, #26
    8878:	d505      	bpl.n	8886 <encode_uint+0x64>
		if (radix == 8) {
    887a:	2d08      	cmp	r5, #8
    887c:	d116      	bne.n	88ac <encode_uint+0x8a>
			conv->altform_0 = true;
    887e:	78a3      	ldrb	r3, [r4, #2]
    8880:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8884:	70a3      	strb	r3, [r4, #2]
}
    8886:	4640      	mov	r0, r8
    8888:	b003      	add	sp, #12
    888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    888e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8892:	2b70      	cmp	r3, #112	; 0x70
    8894:	e7d3      	b.n	883e <encode_uint+0x1c>
	switch (specifier) {
    8896:	2508      	movs	r5, #8
    8898:	e7d4      	b.n	8844 <encode_uint+0x22>
		value /= radix;
    889a:	4606      	mov	r6, r0
    889c:	460f      	mov	r7, r1
    889e:	e7d6      	b.n	884e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    88a0:	9a01      	ldr	r2, [sp, #4]
    88a2:	2a19      	cmp	r2, #25
    88a4:	bf94      	ite	ls
    88a6:	3337      	addls	r3, #55	; 0x37
    88a8:	3357      	addhi	r3, #87	; 0x57
    88aa:	e7da      	b.n	8862 <encode_uint+0x40>
		} else if (radix == 16) {
    88ac:	2d10      	cmp	r5, #16
    88ae:	d1ea      	bne.n	8886 <encode_uint+0x64>
			conv->altform_0c = true;
    88b0:	78a3      	ldrb	r3, [r4, #2]
    88b2:	f043 0310 	orr.w	r3, r3, #16
    88b6:	e7e5      	b.n	8884 <encode_uint+0x62>

000088b8 <outs>:
{
    88b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88bc:	4607      	mov	r7, r0
    88be:	4688      	mov	r8, r1
    88c0:	4615      	mov	r5, r2
    88c2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    88c4:	4614      	mov	r4, r2
    88c6:	42b4      	cmp	r4, r6
    88c8:	eba4 0005 	sub.w	r0, r4, r5
    88cc:	d302      	bcc.n	88d4 <outs+0x1c>
    88ce:	b93e      	cbnz	r6, 88e0 <outs+0x28>
    88d0:	7823      	ldrb	r3, [r4, #0]
    88d2:	b12b      	cbz	r3, 88e0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    88d4:	f814 0b01 	ldrb.w	r0, [r4], #1
    88d8:	4641      	mov	r1, r8
    88da:	47b8      	blx	r7
		if (rc < 0) {
    88dc:	2800      	cmp	r0, #0
    88de:	daf2      	bge.n	88c6 <outs+0xe>
}
    88e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000088e4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    88e4:	4770      	bx	lr

000088e6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    88e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    88ea:	8840      	ldrh	r0, [r0, #2]
}
    88ec:	0840      	lsrs	r0, r0, #1
    88ee:	4770      	bx	lr

000088f0 <free_list_add>:
{
    88f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88f2:	4603      	mov	r3, r0
    88f4:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
    88f6:	f7ff fff6 	bl	88e6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    88fa:	fab0 f080 	clz	r0, r0
    88fe:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8902:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    8906:	00ca      	lsls	r2, r1, #3
    8908:	f8dc 6010 	ldr.w	r6, [ip, #16]
    890c:	1d17      	adds	r7, r2, #4
    890e:	b28d      	uxth	r5, r1
    8910:	3206      	adds	r2, #6
    8912:	b956      	cbnz	r6, 892a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8914:	2101      	movs	r1, #1
    8916:	fa01 f000 	lsl.w	r0, r1, r0
    891a:	68d9      	ldr	r1, [r3, #12]
    891c:	4301      	orrs	r1, r0
    891e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8920:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8924:	53dd      	strh	r5, [r3, r7]
    8926:	529d      	strh	r5, [r3, r2]
}
    8928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    892a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    892c:	3104      	adds	r1, #4
    892e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8930:	53d8      	strh	r0, [r3, r7]
    8932:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8936:	529e      	strh	r6, [r3, r2]
    8938:	80c5      	strh	r5, [r0, #6]
    893a:	525d      	strh	r5, [r3, r1]
    893c:	e7f4      	b.n	8928 <free_list_add+0x38>

0000893e <free_list_remove_bidx>:
{
    893e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    8940:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    8944:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    8946:	4299      	cmp	r1, r3
    8948:	f102 0104 	add.w	r1, r2, #4
    894c:	d10a      	bne.n	8964 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    894e:	2301      	movs	r3, #1
    8950:	fa03 f202 	lsl.w	r2, r3, r2
    8954:	68c3      	ldr	r3, [r0, #12]
    8956:	ea23 0302 	bic.w	r3, r3, r2
    895a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    895c:	2300      	movs	r3, #0
    895e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    8962:	bd10      	pop	{r4, pc}
    8964:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    8966:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    896a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    896e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    8972:	80cb      	strh	r3, [r1, #6]
    8974:	8082      	strh	r2, [r0, #4]
}
    8976:	e7f4      	b.n	8962 <free_list_remove_bidx+0x24>

00008978 <free_list_remove>:
{
    8978:	b510      	push	{r4, lr}
    897a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    897c:	f7ff ffb3 	bl	88e6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8980:	fab0 f280 	clz	r2, r0
}
    8984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
    8988:	f1c2 021f 	rsb	r2, r2, #31
    898c:	4618      	mov	r0, r3
    898e:	f7ff bfd6 	b.w	893e <free_list_remove_bidx>

00008992 <alloc_chunk>:
{
    8992:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8996:	fab1 f581 	clz	r5, r1
    899a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    899e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    89a2:	4603      	mov	r3, r0
	if (b->next) {
    89a4:	693a      	ldr	r2, [r7, #16]
{
    89a6:	460e      	mov	r6, r1
	if (b->next) {
    89a8:	b1ca      	cbz	r2, 89de <alloc_chunk+0x4c>
    89aa:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
    89ae:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    89b0:	4618      	mov	r0, r3
    89b2:	4621      	mov	r1, r4
    89b4:	f7ff ff97 	bl	88e6 <chunk_size>
    89b8:	42b0      	cmp	r0, r6
    89ba:	d307      	bcc.n	89cc <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    89bc:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    89be:	4621      	mov	r1, r4
    89c0:	4618      	mov	r0, r3
    89c2:	f7ff ffbc 	bl	893e <free_list_remove_bidx>
}
    89c6:	4620      	mov	r0, r4
    89c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    89cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    89d0:	f1b8 0801 	subs.w	r8, r8, #1
    89d4:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
    89d6:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
    89d8:	d001      	beq.n	89de <alloc_chunk+0x4c>
    89da:	428a      	cmp	r2, r1
    89dc:	d1e7      	bne.n	89ae <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    89de:	68d9      	ldr	r1, [r3, #12]
    89e0:	f1c5 0520 	rsb	r5, r5, #32
    89e4:	f04f 34ff 	mov.w	r4, #4294967295
    89e8:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
    89ea:	400c      	ands	r4, r1
    89ec:	d0eb      	beq.n	89c6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    89ee:	fa94 f2a4 	rbit	r2, r4
    89f2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    89f6:	1d11      	adds	r1, r2, #4
    89f8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    89fc:	e7df      	b.n	89be <alloc_chunk+0x2c>

000089fe <merge_chunks>:
{
    89fe:	b538      	push	{r3, r4, r5, lr}
    8a00:	4603      	mov	r3, r0
    8a02:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    8a04:	f7ff ff6f 	bl	88e6 <chunk_size>
    8a08:	4611      	mov	r1, r2
    8a0a:	4604      	mov	r4, r0
    8a0c:	4618      	mov	r0, r3
    8a0e:	f7ff ff6a 	bl	88e6 <chunk_size>
    8a12:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
    8a14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8a18:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
    8a1a:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
    8a1c:	4618      	mov	r0, r3
    8a1e:	4611      	mov	r1, r2
    8a20:	f7ff ff61 	bl	88e6 <chunk_size>
	void *cmem = &buf[c];
    8a24:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    8a26:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
    8a2a:	bd38      	pop	{r3, r4, r5, pc}

00008a2c <split_chunks>:
{
    8a2c:	b538      	push	{r3, r4, r5, lr}
    8a2e:	4603      	mov	r3, r0
    8a30:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
    8a32:	f7ff ff58 	bl	88e6 <chunk_size>
	chunksz_t lsz = rc - lc;
    8a36:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    8a38:	1aa5      	subs	r5, r4, r2
    8a3a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    8a3e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8a40:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    8a42:	8060      	strh	r0, [r4, #2]
    8a44:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    8a48:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    8a4a:	8044      	strh	r4, [r0, #2]
    8a4c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    8a50:	4618      	mov	r0, r3
    8a52:	4611      	mov	r1, r2
    8a54:	f7ff ff47 	bl	88e6 <chunk_size>
	void *cmem = &buf[c];
    8a58:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    8a5a:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
    8a5e:	bd38      	pop	{r3, r4, r5, pc}

00008a60 <free_chunk>:
{
    8a60:	b538      	push	{r3, r4, r5, lr}
    8a62:	4605      	mov	r5, r0
    8a64:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
    8a66:	f7ff ff3e 	bl	88e6 <chunk_size>
    8a6a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    8a6c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8a70:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    8a72:	07da      	lsls	r2, r3, #31
    8a74:	d40a      	bmi.n	8a8c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    8a76:	4628      	mov	r0, r5
    8a78:	f7ff ff7e 	bl	8978 <free_list_remove>
	return c + chunk_size(h, c);
    8a7c:	4621      	mov	r1, r4
    8a7e:	4628      	mov	r0, r5
    8a80:	f7ff ff31 	bl	88e6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    8a84:	1822      	adds	r2, r4, r0
    8a86:	4628      	mov	r0, r5
    8a88:	f7ff ffb9 	bl	89fe <merge_chunks>
		return ((uint16_t *)cmem)[f];
    8a8c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8a90:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    8a92:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    8a96:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    8a98:	07db      	lsls	r3, r3, #31
    8a9a:	d40c      	bmi.n	8ab6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    8a9c:	4628      	mov	r0, r5
    8a9e:	f7ff ff6b 	bl	8978 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    8aa2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    8aa6:	4622      	mov	r2, r4
    8aa8:	1a61      	subs	r1, r4, r1
    8aaa:	4628      	mov	r0, r5
    8aac:	f7ff ffa7 	bl	89fe <merge_chunks>
    8ab0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    8ab4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    8ab6:	4621      	mov	r1, r4
    8ab8:	4628      	mov	r0, r5
}
    8aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    8abe:	f7ff bf17 	b.w	88f0 <free_list_add>

00008ac2 <sys_heap_alloc>:
{
    8ac2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    8ac4:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    8ac6:	b909      	cbnz	r1, 8acc <sys_heap_alloc+0xa>
		return NULL;
    8ac8:	2000      	movs	r0, #0
}
    8aca:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    8acc:	68ab      	ldr	r3, [r5, #8]
    8ace:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8ad2:	d9f9      	bls.n	8ac8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    8ad4:	310b      	adds	r1, #11
    8ad6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    8ad8:	4621      	mov	r1, r4
    8ada:	4628      	mov	r0, r5
    8adc:	f7ff ff59 	bl	8992 <alloc_chunk>
	if (c == 0U) {
    8ae0:	4606      	mov	r6, r0
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d0f0      	beq.n	8ac8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    8ae6:	4601      	mov	r1, r0
    8ae8:	4628      	mov	r0, r5
    8aea:	f7ff fefc 	bl	88e6 <chunk_size>
    8aee:	42a0      	cmp	r0, r4
    8af0:	d908      	bls.n	8b04 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
    8af2:	4434      	add	r4, r6
    8af4:	4628      	mov	r0, r5
    8af6:	4622      	mov	r2, r4
    8af8:	f7ff ff98 	bl	8a2c <split_chunks>
		free_list_add(h, c + chunk_sz);
    8afc:	4621      	mov	r1, r4
    8afe:	4628      	mov	r0, r5
    8b00:	f7ff fef6 	bl	88f0 <free_list_add>
	void *cmem = &buf[c];
    8b04:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    8b08:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    8b0a:	8853      	ldrh	r3, [r2, #2]
    8b0c:	f043 0301 	orr.w	r3, r3, #1
    8b10:	8053      	strh	r3, [r2, #2]
    8b12:	3004      	adds	r0, #4
	return chunk_mem(h, c);
    8b14:	e7d9      	b.n	8aca <sys_heap_alloc+0x8>

00008b16 <sys_notify_validate>:
	if (notify == NULL) {
    8b16:	4603      	mov	r3, r0
    8b18:	b140      	cbz	r0, 8b2c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8b1a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8b1c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8b20:	2a02      	cmp	r2, #2
    8b22:	d006      	beq.n	8b32 <sys_notify_validate+0x1c>
    8b24:	2a03      	cmp	r2, #3
    8b26:	d004      	beq.n	8b32 <sys_notify_validate+0x1c>
    8b28:	2a01      	cmp	r2, #1
    8b2a:	d005      	beq.n	8b38 <sys_notify_validate+0x22>
		return -EINVAL;
    8b2c:	f06f 0015 	mvn.w	r0, #21
}
    8b30:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    8b32:	681a      	ldr	r2, [r3, #0]
    8b34:	2a00      	cmp	r2, #0
    8b36:	d0f9      	beq.n	8b2c <sys_notify_validate+0x16>
		notify->result = 0;
    8b38:	2000      	movs	r0, #0
    8b3a:	6098      	str	r0, [r3, #8]
    8b3c:	4770      	bx	lr

00008b3e <abort_function>:
{
    8b3e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8b40:	2000      	movs	r0, #0
    8b42:	f7f9 f8b1 	bl	1ca8 <sys_reboot>

00008b46 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8b46:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8b48:	f013 0307 	ands.w	r3, r3, #7
    8b4c:	d105      	bne.n	8b5a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8b4e:	6803      	ldr	r3, [r0, #0]
    8b50:	2b00      	cmp	r3, #0
		evt = EVT_START;
    8b52:	bf0c      	ite	eq
    8b54:	2000      	moveq	r0, #0
    8b56:	2003      	movne	r0, #3
    8b58:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8b5a:	2b02      	cmp	r3, #2
    8b5c:	d105      	bne.n	8b6a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8b5e:	8bc3      	ldrh	r3, [r0, #30]
    8b60:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    8b62:	bf14      	ite	ne
    8b64:	2000      	movne	r0, #0
    8b66:	2004      	moveq	r0, #4
    8b68:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8b6a:	2b01      	cmp	r3, #1
    8b6c:	d105      	bne.n	8b7a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8b6e:	6803      	ldr	r3, [r0, #0]
    8b70:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    8b72:	bf0c      	ite	eq
    8b74:	2000      	moveq	r0, #0
    8b76:	2005      	movne	r0, #5
    8b78:	4770      	bx	lr
	int evt = EVT_NOP;
    8b7a:	2000      	movs	r0, #0
}
    8b7c:	4770      	bx	lr

00008b7e <notify_one>:
{
    8b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b82:	460d      	mov	r5, r1
    8b84:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8b86:	4619      	mov	r1, r3
    8b88:	1d28      	adds	r0, r5, #4
{
    8b8a:	4690      	mov	r8, r2
    8b8c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8b8e:	f7f8 fb6b 	bl	1268 <sys_notify_finalize>
	if (cb) {
    8b92:	4604      	mov	r4, r0
    8b94:	b138      	cbz	r0, 8ba6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8b96:	4633      	mov	r3, r6
    8b98:	4642      	mov	r2, r8
    8b9a:	4629      	mov	r1, r5
    8b9c:	4638      	mov	r0, r7
    8b9e:	46a4      	mov	ip, r4
}
    8ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8ba4:	4760      	bx	ip
}
    8ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008baa <validate_args>:
{
    8baa:	b510      	push	{r4, lr}
    8bac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8bae:	b140      	cbz	r0, 8bc2 <validate_args+0x18>
    8bb0:	b139      	cbz	r1, 8bc2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8bb2:	1d08      	adds	r0, r1, #4
    8bb4:	f7ff ffaf 	bl	8b16 <sys_notify_validate>
	if ((rv == 0)
    8bb8:	b928      	cbnz	r0, 8bc6 <validate_args+0x1c>
	    && ((cli->notify.flags
    8bba:	68a3      	ldr	r3, [r4, #8]
    8bbc:	f033 0303 	bics.w	r3, r3, #3
    8bc0:	d001      	beq.n	8bc6 <validate_args+0x1c>
		rv = -EINVAL;
    8bc2:	f06f 0015 	mvn.w	r0, #21
}
    8bc6:	bd10      	pop	{r4, pc}

00008bc8 <onoff_manager_init>:
{
    8bc8:	b538      	push	{r3, r4, r5, lr}
    8bca:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8bcc:	4605      	mov	r5, r0
    8bce:	b158      	cbz	r0, 8be8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8bd0:	b151      	cbz	r1, 8be8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8bd2:	680b      	ldr	r3, [r1, #0]
    8bd4:	b143      	cbz	r3, 8be8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8bd6:	684b      	ldr	r3, [r1, #4]
    8bd8:	b133      	cbz	r3, 8be8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8bda:	2220      	movs	r2, #32
    8bdc:	2100      	movs	r1, #0
    8bde:	f000 f85f 	bl	8ca0 <memset>
    8be2:	612c      	str	r4, [r5, #16]
	return 0;
    8be4:	2000      	movs	r0, #0
}
    8be6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8be8:	f06f 0015 	mvn.w	r0, #21
    8bec:	e7fb      	b.n	8be6 <onoff_manager_init+0x1e>

00008bee <arch_printk_char_out>:
}
    8bee:	2000      	movs	r0, #0
    8bf0:	4770      	bx	lr

00008bf2 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8bf2:	b40f      	push	{r0, r1, r2, r3}
    8bf4:	b507      	push	{r0, r1, r2, lr}
    8bf6:	a904      	add	r1, sp, #16
    8bf8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8bfc:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    8bfe:	f7f9 f845 	bl	1c8c <vprintk>
	}
	va_end(ap);
}
    8c02:	b003      	add	sp, #12
    8c04:	f85d eb04 	ldr.w	lr, [sp], #4
    8c08:	b004      	add	sp, #16
    8c0a:	4770      	bx	lr

00008c0c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8c0c:	2200      	movs	r2, #0
    8c0e:	e9c0 2200 	strd	r2, r2, [r0]
    8c12:	6082      	str	r2, [r0, #8]
}
    8c14:	4770      	bx	lr

00008c16 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8c16:	4604      	mov	r4, r0
    8c18:	b508      	push	{r3, lr}
    8c1a:	4608      	mov	r0, r1
    8c1c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8c1e:	461a      	mov	r2, r3
    8c20:	47a0      	blx	r4
	return z_impl_z_current_get();
    8c22:	f7fe f869 	bl	6cf8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8c26:	f7f9 fb7b 	bl	2320 <z_impl_k_thread_abort>

00008c2a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8c2a:	f7fc b99f 	b.w	4f6c <z_fatal_error>

00008c2e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8c2e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    8c30:	6800      	ldr	r0, [r0, #0]
    8c32:	f7fc b99b 	b.w	4f6c <z_fatal_error>

00008c36 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8c36:	2100      	movs	r1, #0
    8c38:	2001      	movs	r0, #1
    8c3a:	f7ff bff6 	b.w	8c2a <z_arm_fatal_error>

00008c3e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    8c3e:	b508      	push	{r3, lr}
	handler();
    8c40:	f7f9 f884 	bl	1d4c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8c44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8c48:	f7f9 b992 	b.w	1f70 <z_arm_exc_exit>

00008c4c <_stdout_hook_default>:
}
    8c4c:	f04f 30ff 	mov.w	r0, #4294967295
    8c50:	4770      	bx	lr

00008c52 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8c52:	4603      	mov	r3, r0
	size_t n = 0;
    8c54:	2000      	movs	r0, #0

	while (*s != '\0') {
    8c56:	5c1a      	ldrb	r2, [r3, r0]
    8c58:	b902      	cbnz	r2, 8c5c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8c5a:	4770      	bx	lr
		n++;
    8c5c:	3001      	adds	r0, #1
    8c5e:	e7fa      	b.n	8c56 <strlen+0x4>

00008c60 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8c60:	4603      	mov	r3, r0
	size_t n = 0;
    8c62:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8c64:	5c1a      	ldrb	r2, [r3, r0]
    8c66:	b10a      	cbz	r2, 8c6c <strnlen+0xc>
    8c68:	4288      	cmp	r0, r1
    8c6a:	d100      	bne.n	8c6e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8c6c:	4770      	bx	lr
		n++;
    8c6e:	3001      	adds	r0, #1
    8c70:	e7f8      	b.n	8c64 <strnlen+0x4>

00008c72 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8c72:	1e43      	subs	r3, r0, #1
    8c74:	3901      	subs	r1, #1
    8c76:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8c7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8c7e:	4282      	cmp	r2, r0
    8c80:	d101      	bne.n	8c86 <strcmp+0x14>
    8c82:	2a00      	cmp	r2, #0
    8c84:	d1f7      	bne.n	8c76 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8c86:	1a10      	subs	r0, r2, r0
    8c88:	4770      	bx	lr

00008c8a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8c8a:	b510      	push	{r4, lr}
    8c8c:	1e43      	subs	r3, r0, #1
    8c8e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8c90:	4291      	cmp	r1, r2
    8c92:	d100      	bne.n	8c96 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8c94:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8c96:	f811 4b01 	ldrb.w	r4, [r1], #1
    8c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8c9e:	e7f7      	b.n	8c90 <memcpy+0x6>

00008ca0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8ca0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8ca2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8ca4:	4603      	mov	r3, r0
	while (n > 0) {
    8ca6:	4293      	cmp	r3, r2
    8ca8:	d100      	bne.n	8cac <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8caa:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8cac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8cb0:	e7f9      	b.n	8ca6 <memset+0x6>

00008cb2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    8cb2:	b084      	sub	sp, #16
    8cb4:	ab04      	add	r3, sp, #16
    8cb6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    8cba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8cbe:	2b06      	cmp	r3, #6
    8cc0:	d108      	bne.n	8cd4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8cc6:	2201      	movs	r2, #1
    8cc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8ccc:	f3bf 8f4f 	dsb	sy
        __WFE();
    8cd0:	bf20      	wfe
    while (true)
    8cd2:	e7fd      	b.n	8cd0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    8cd4:	b004      	add	sp, #16
    8cd6:	4770      	bx	lr

00008cd8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8cd8:	b084      	sub	sp, #16
    8cda:	ab04      	add	r3, sp, #16
    8cdc:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8ce0:	2300      	movs	r3, #0
    8ce2:	f383 8811 	msr	BASEPRI, r3
    8ce6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8cea:	b004      	add	sp, #16
    8cec:	4770      	bx	lr

00008cee <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8cee:	f1a0 0308 	sub.w	r3, r0, #8
    8cf2:	f3bf 8f5b 	dmb	ish
    8cf6:	e853 2f00 	ldrex	r2, [r3]
    8cfa:	1c51      	adds	r1, r2, #1
    8cfc:	e843 1c00 	strex	ip, r1, [r3]
    8d00:	f1bc 0f00 	cmp.w	ip, #0
    8d04:	d1f7      	bne.n	8cf6 <adc_context_on_timer_expired+0x8>
    8d06:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    8d0a:	b91a      	cbnz	r2, 8d14 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    8d0c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8d10:	f7f9 bc96 	b.w	2640 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    8d14:	f06f 030f 	mvn.w	r3, #15
    8d18:	6683      	str	r3, [r0, #104]	; 0x68
}
    8d1a:	4770      	bx	lr

00008d1c <set_starting_state>:
{
    8d1c:	b510      	push	{r4, lr}
	__asm__ volatile(
    8d1e:	f04f 0320 	mov.w	r3, #32
    8d22:	f3ef 8211 	mrs	r2, BASEPRI
    8d26:	f383 8812 	msr	BASEPRI_MAX, r3
    8d2a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8d2e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8d30:	f003 0407 	and.w	r4, r3, #7
    8d34:	2c01      	cmp	r4, #1
    8d36:	d106      	bne.n	8d46 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8d38:	6001      	str	r1, [r0, #0]
	int err = 0;
    8d3a:	2000      	movs	r0, #0
	__asm__ volatile(
    8d3c:	f382 8811 	msr	BASEPRI, r2
    8d40:	f3bf 8f6f 	isb	sy
}
    8d44:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    8d4a:	428b      	cmp	r3, r1
		err = -EALREADY;
    8d4c:	bf14      	ite	ne
    8d4e:	f04f 30ff 	movne.w	r0, #4294967295
    8d52:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8d56:	e7f1      	b.n	8d3c <set_starting_state+0x20>

00008d58 <set_on_state>:
	__asm__ volatile(
    8d58:	f04f 0320 	mov.w	r3, #32
    8d5c:	f3ef 8211 	mrs	r2, BASEPRI
    8d60:	f383 8812 	msr	BASEPRI_MAX, r3
    8d64:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8d68:	6803      	ldr	r3, [r0, #0]
    8d6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8d6e:	f043 0302 	orr.w	r3, r3, #2
    8d72:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8d74:	f382 8811 	msr	BASEPRI, r2
    8d78:	f3bf 8f6f 	isb	sy
}
    8d7c:	4770      	bx	lr

00008d7e <onoff_started_callback>:
	return &data->mgr[type];
    8d7e:	6900      	ldr	r0, [r0, #16]
    8d80:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8d82:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8d86:	2100      	movs	r1, #0
    8d88:	4710      	bx	r2

00008d8a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8d8a:	2000      	movs	r0, #0
    8d8c:	f7fb b824 	b.w	3dd8 <nrfx_clock_start>

00008d90 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8d90:	2000      	movs	r0, #0
    8d92:	f7fb b875 	b.w	3e80 <nrfx_clock_stop>

00008d96 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8d96:	2280      	movs	r2, #128	; 0x80
    8d98:	f7f9 beb8 	b.w	2b0c <stop>

00008d9c <blocking_start_callback>:
{
    8d9c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8d9e:	f7fe b8df 	b.w	6f60 <z_impl_k_sem_give>

00008da2 <api_start>:
{
    8da2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8da6:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    8da8:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8daa:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    8dac:	436f      	muls	r7, r5
{
    8dae:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8db0:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8db4:	2180      	movs	r1, #128	; 0x80
    8db6:	4420      	add	r0, r4
{
    8db8:	4690      	mov	r8, r2
    8dba:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    8dbc:	f7ff ffae 	bl	8d1c <set_starting_state>
	if (err < 0) {
    8dc0:	2800      	cmp	r0, #0
    8dc2:	db07      	blt.n	8dd4 <api_start+0x32>
	subdata->cb = cb;
    8dc4:	443c      	add	r4, r7
	subdata->user_data = user_data;
    8dc6:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8dca:	6873      	ldr	r3, [r6, #4]
    8dcc:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    8dd0:	4798      	blx	r3
	return 0;
    8dd2:	2000      	movs	r0, #0
}
    8dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008dd8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8dd8:	6843      	ldr	r3, [r0, #4]
    8dda:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8ddc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8de0:	600b      	str	r3, [r1, #0]
}
    8de2:	2000      	movs	r0, #0
    8de4:	4770      	bx	lr

00008de6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8de6:	6843      	ldr	r3, [r0, #4]
    8de8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8dea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8dee:	4042      	eors	r2, r0
    8df0:	400a      	ands	r2, r1
    8df2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8df4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8df8:	2000      	movs	r0, #0
    8dfa:	4770      	bx	lr

00008dfc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8dfc:	6843      	ldr	r3, [r0, #4]
    8dfe:	685b      	ldr	r3, [r3, #4]
}
    8e00:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8e02:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8e06:	4770      	bx	lr

00008e08 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8e08:	6843      	ldr	r3, [r0, #4]
    8e0a:	685b      	ldr	r3, [r3, #4]
}
    8e0c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    8e0e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8e12:	4770      	bx	lr

00008e14 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8e14:	6843      	ldr	r3, [r0, #4]
    8e16:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8e18:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8e1c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8e1e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8e22:	2000      	movs	r0, #0
    8e24:	4770      	bx	lr

00008e26 <any_other_channel_is_active>:
{
    8e26:	b530      	push	{r4, r5, lr}
    8e28:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    8e2a:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    8e2c:	b2da      	uxtb	r2, r3
    8e2e:	4282      	cmp	r2, r0
    8e30:	d007      	beq.n	8e42 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    8e32:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    8e36:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8e3a:	b112      	cbz	r2, 8e42 <any_other_channel_is_active+0x1c>
    8e3c:	898d      	ldrh	r5, [r1, #12]
    8e3e:	4295      	cmp	r5, r2
    8e40:	d804      	bhi.n	8e4c <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    8e42:	3301      	adds	r3, #1
    8e44:	2b04      	cmp	r3, #4
    8e46:	d1f1      	bne.n	8e2c <any_other_channel_is_active+0x6>
	return false;
    8e48:	2000      	movs	r0, #0
}
    8e4a:	bd30      	pop	{r4, r5, pc}
			return true;
    8e4c:	2001      	movs	r0, #1
    8e4e:	e7fc      	b.n	8e4a <any_other_channel_is_active+0x24>

00008e50 <pwm_nrfx_pin_set>:
{
    8e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e54:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    8e58:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    8e5a:	6904      	ldr	r4, [r0, #16]
{
    8e5c:	4688      	mov	r8, r1
    8e5e:	4616      	mov	r6, r2
    8e60:	4699      	mov	r9, r3
	if (flags) {
    8e62:	2d00      	cmp	r5, #0
    8e64:	d140      	bne.n	8ee8 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8e66:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    8e68:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    8e6c:	2bff      	cmp	r3, #255	; 0xff
    8e6e:	d003      	beq.n	8e78 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8e74:	4598      	cmp	r8, r3
    8e76:	d03a      	beq.n	8eee <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8e78:	3501      	adds	r5, #1
    8e7a:	b2ed      	uxtb	r5, r5
    8e7c:	2d04      	cmp	r5, #4
    8e7e:	d1f3      	bne.n	8e68 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    8e80:	f06f 0015 	mvn.w	r0, #21
    8e84:	e009      	b.n	8e9a <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    8e86:	2000      	movs	r0, #0
    8e88:	e042      	b.n	8f10 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    8e8a:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8e8c:	2b08      	cmp	r3, #8
		countertop >>= 1;
    8e8e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8e92:	d158      	bne.n	8f46 <pwm_nrfx_pin_set+0xf6>
    8e94:	e7f4      	b.n	8e80 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    8e96:	b9d0      	cbnz	r0, 8ece <pwm_nrfx_pin_set+0x7e>
	return 0;
    8e98:	2000      	movs	r0, #0
}
    8e9a:	b003      	add	sp, #12
    8e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    8ea0:	454e      	cmp	r6, r9
    8ea2:	d87f      	bhi.n	8fa4 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8ea4:	a801      	add	r0, sp, #4
    8ea6:	f8cd 8004 	str.w	r8, [sp, #4]
    8eaa:	f7fa fa67 	bl	337c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8eae:	9a01      	ldr	r2, [sp, #4]
    8eb0:	2301      	movs	r3, #1
    8eb2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    8eb4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    8eb8:	4621      	mov	r1, r4
    8eba:	4628      	mov	r0, r5
    8ebc:	f7ff ffb3 	bl	8e26 <any_other_channel_is_active>
    8ec0:	2800      	cmp	r0, #0
    8ec2:	d1e9      	bne.n	8e98 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    8ec4:	4601      	mov	r1, r0
    8ec6:	4638      	mov	r0, r7
    8ec8:	f7fb fec4 	bl	4c54 <nrfx_pwm_stop>
    8ecc:	e7e4      	b.n	8e98 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    8ece:	4638      	mov	r0, r7
    8ed0:	f7fb fe92 	bl	4bf8 <nrfx_pwm_is_stopped>
    8ed4:	2800      	cmp	r0, #0
    8ed6:	d0fa      	beq.n	8ece <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    8ed8:	2302      	movs	r3, #2
    8eda:	2201      	movs	r2, #1
    8edc:	f107 0118 	add.w	r1, r7, #24
    8ee0:	4638      	mov	r0, r7
    8ee2:	f7fb fe15 	bl	4b10 <nrfx_pwm_simple_playback>
    8ee6:	e7d7      	b.n	8e98 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    8ee8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8eec:	e7d5      	b.n	8e9a <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    8eee:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    8ef2:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    8ef6:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8efa:	b113      	cbz	r3, 8f02 <pwm_nrfx_pin_set+0xb2>
    8efc:	89a2      	ldrh	r2, [r4, #12]
    8efe:	429a      	cmp	r2, r3
    8f00:	d8c1      	bhi.n	8e86 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    8f02:	4621      	mov	r1, r4
    8f04:	4628      	mov	r0, r5
    8f06:	f7ff ff8e 	bl	8e26 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    8f0a:	f080 0001 	eor.w	r0, r0, #1
    8f0e:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    8f10:	7bb9      	ldrb	r1, [r7, #14]
    8f12:	2901      	cmp	r1, #1
		period_cycles /= 2;
    8f14:	bf04      	itt	eq
    8f16:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    8f18:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    8f1c:	b326      	cbz	r6, 8f68 <pwm_nrfx_pin_set+0x118>
    8f1e:	6823      	ldr	r3, [r4, #0]
    8f20:	42b3      	cmp	r3, r6
    8f22:	d021      	beq.n	8f68 <pwm_nrfx_pin_set+0x118>
    8f24:	2300      	movs	r3, #0
				data->current[i]
    8f26:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    8f2a:	b2da      	uxtb	r2, r3
    8f2c:	42aa      	cmp	r2, r5
    8f2e:	d005      	beq.n	8f3c <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    8f30:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    8f34:	f3c2 020e 	ubfx	r2, r2, #0, #15
    8f38:	2a00      	cmp	r2, #0
    8f3a:	d1a1      	bne.n	8e80 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    8f3c:	3301      	adds	r3, #1
    8f3e:	2b04      	cmp	r3, #4
    8f40:	d1f3      	bne.n	8f2a <pwm_nrfx_pin_set+0xda>
    8f42:	4632      	mov	r2, r6
    8f44:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    8f46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    8f4a:	fa5f fc83 	uxtb.w	ip, r3
    8f4e:	d29c      	bcs.n	8e8a <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    8f50:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    8f54:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    8f58:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    8f5a:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    8f5c:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    8f60:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    8f64:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    8f68:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    8f6a:	454e      	cmp	r6, r9
    8f6c:	4633      	mov	r3, r6
    8f6e:	bf28      	it	cs
    8f70:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    8f72:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    8f76:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    8f7a:	ea42 020b 	orr.w	r2, r2, fp
    8f7e:	b292      	uxth	r2, r2
	data->current[channel] = (
    8f80:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    8f84:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8f88:	b112      	cbz	r2, 8f90 <pwm_nrfx_pin_set+0x140>
    8f8a:	89a1      	ldrh	r1, [r4, #12]
    8f8c:	4291      	cmp	r1, r2
    8f8e:	d882      	bhi.n	8e96 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8f90:	197a      	adds	r2, r7, r5
    8f92:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    8f96:	2b00      	cmp	r3, #0
    8f98:	d082      	beq.n	8ea0 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    8f9a:	454e      	cmp	r6, r9
    8f9c:	d805      	bhi.n	8faa <pwm_nrfx_pin_set+0x15a>
    8f9e:	2a00      	cmp	r2, #0
    8fa0:	db80      	blt.n	8ea4 <pwm_nrfx_pin_set+0x54>
    8fa2:	e002      	b.n	8faa <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    8fa4:	2a00      	cmp	r2, #0
    8fa6:	f6bf af7d 	bge.w	8ea4 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8faa:	a801      	add	r0, sp, #4
    8fac:	f8cd 8004 	str.w	r8, [sp, #4]
    8fb0:	f7fa f9e4 	bl	337c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8fb4:	9a01      	ldr	r2, [sp, #4]
    8fb6:	2301      	movs	r3, #1
    8fb8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8fba:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    8fbe:	e77b      	b.n	8eb8 <pwm_nrfx_pin_set+0x68>

00008fc0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8fc0:	6843      	ldr	r3, [r0, #4]
    8fc2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    8fc4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8fc8:	05d1      	lsls	r1, r2, #23
    8fca:	d518      	bpl.n	8ffe <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8fcc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8fd0:	b1aa      	cbz	r2, 8ffe <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8fd2:	f04f 0120 	mov.w	r1, #32
    8fd6:	f3ef 8211 	mrs	r2, BASEPRI
    8fda:	f381 8812 	msr	BASEPRI_MAX, r1
    8fde:	f3bf 8f6f 	isb	sy
    8fe2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8fe6:	b131      	cbz	r1, 8ff6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fe8:	2100      	movs	r1, #0
    8fea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8fee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ff2:	2101      	movs	r1, #1
    8ff4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8ff6:	f382 8811 	msr	BASEPRI, r2
    8ffa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8ffe:	6842      	ldr	r2, [r0, #4]
    9000:	6852      	ldr	r2, [r2, #4]
    9002:	06d2      	lsls	r2, r2, #27
    9004:	d515      	bpl.n	9032 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    9006:	f04f 0120 	mov.w	r1, #32
    900a:	f3ef 8211 	mrs	r2, BASEPRI
    900e:	f381 8812 	msr	BASEPRI_MAX, r1
    9012:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9016:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    901a:	b111      	cbz	r1, 9022 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    901c:	2100      	movs	r1, #0
    901e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    9022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9026:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    902a:	f382 8811 	msr	BASEPRI, r2
    902e:	f3bf 8f6f 	isb	sy
}
    9032:	4770      	bx	lr

00009034 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    9034:	6902      	ldr	r2, [r0, #16]
{
    9036:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    9038:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    903c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9040:	2000      	movs	r0, #0
    9042:	4770      	bx	lr

00009044 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9044:	6843      	ldr	r3, [r0, #4]
    9046:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9048:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    904c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9050:	4770      	bx	lr

00009052 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    9052:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9054:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9056:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    905a:	b940      	cbnz	r0, 906e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    905c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    905e:	0792      	lsls	r2, r2, #30
    9060:	d406      	bmi.n	9070 <is_tx_ready+0x1e>
    9062:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    9066:	3800      	subs	r0, #0
    9068:	bf18      	it	ne
    906a:	2001      	movne	r0, #1
    906c:	4770      	bx	lr
    906e:	2001      	movs	r0, #1
}
    9070:	4770      	bx	lr

00009072 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9072:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9074:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9076:	681b      	ldr	r3, [r3, #0]
    9078:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    907c:	b148      	cbz	r0, 9092 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    907e:	7c52      	ldrb	r2, [r2, #17]
    9080:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9082:	2000      	movs	r0, #0
    9084:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9088:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    908c:	2201      	movs	r2, #1
    908e:	601a      	str	r2, [r3, #0]
	return 0;
    9090:	4770      	bx	lr
		return -1;
    9092:	f04f 30ff 	mov.w	r0, #4294967295
}
    9096:	4770      	bx	lr

00009098 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9098:	b510      	push	{r4, lr}
    909a:	2200      	movs	r2, #0
    909c:	4604      	mov	r4, r0
    909e:	2101      	movs	r1, #1
    90a0:	2002      	movs	r0, #2
    90a2:	f7f8 feaf 	bl	1e04 <z_arm_irq_priority_set>
    90a6:	2002      	movs	r0, #2
    90a8:	f7f8 fe8e 	bl	1dc8 <arch_irq_enable>
    90ac:	4620      	mov	r0, r4
    90ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90b2:	f7fa bafb 	b.w	36ac <uarte_instance_init.isra.0>

000090b6 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    90b6:	b510      	push	{r4, lr}
    90b8:	2200      	movs	r2, #0
    90ba:	4604      	mov	r4, r0
    90bc:	2101      	movs	r1, #1
    90be:	2028      	movs	r0, #40	; 0x28
    90c0:	f7f8 fea0 	bl	1e04 <z_arm_irq_priority_set>
    90c4:	2028      	movs	r0, #40	; 0x28
    90c6:	f7f8 fe7f 	bl	1dc8 <arch_irq_enable>
    90ca:	4620      	mov	r0, r4
    90cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90d0:	f7fa baec 	b.w	36ac <uarte_instance_init.isra.0>

000090d4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    90d4:	4770      	bx	lr

000090d6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    90d6:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    90d8:	2000      	movs	r0, #0
    90da:	f7f9 fa91 	bl	2600 <sys_arch_reboot>

000090de <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    90de:	f7ff b9b9 	b.w	8454 <nrf_cc3xx_platform_init_no_rng>

000090e2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    90e2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    90e4:	f7f8 f8f0 	bl	12c8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    90e8:	f7f8 f9a2 	bl	1430 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    90ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    90f0:	f7ff b9b0 	b.w	8454 <nrf_cc3xx_platform_init_no_rng>

000090f4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    90f4:	4700      	bx	r0

000090f6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    90f6:	f000 b93a 	b.w	936e <z_impl_k_busy_wait>

000090fa <nrf_gpio_pin_present_check>:
    switch (port)
    90fa:	0943      	lsrs	r3, r0, #5
    90fc:	d00b      	beq.n	9116 <nrf_gpio_pin_present_check+0x1c>
    90fe:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    9100:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9104:	bf18      	it	ne
    9106:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9108:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    910c:	fa23 f000 	lsr.w	r0, r3, r0
}
    9110:	f000 0001 	and.w	r0, r0, #1
    9114:	4770      	bx	lr
    switch (port)
    9116:	f04f 33ff 	mov.w	r3, #4294967295
    911a:	e7f5      	b.n	9108 <nrf_gpio_pin_present_check+0xe>

0000911c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    911c:	0080      	lsls	r0, r0, #2
}
    911e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9122:	4770      	bx	lr

00009124 <nrf_gpio_reconfigure>:
{
    9124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9128:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    912a:	a801      	add	r0, sp, #4
{
    912c:	460e      	mov	r6, r1
    912e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9132:	4690      	mov	r8, r2
    9134:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9136:	f7fb f811 	bl	415c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    913a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    913c:	f1b8 0f00 	cmp.w	r8, #0
    9140:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9144:	bf14      	ite	ne
    9146:	2302      	movne	r3, #2
    9148:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    914a:	2e00      	cmp	r6, #0
    914c:	bf18      	it	ne
    914e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9152:	2d00      	cmp	r5, #0
    9154:	bf14      	ite	ne
    9156:	210c      	movne	r1, #12
    9158:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    915a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    915c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9160:	bf14      	ite	ne
    9162:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9166:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9168:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    916a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    916e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9172:	bf14      	ite	ne
    9174:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9178:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    917a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    917c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9180:	b106      	cbz	r6, 9184 <nrf_gpio_reconfigure+0x60>
    9182:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9184:	f1b8 0f00 	cmp.w	r8, #0
    9188:	d003      	beq.n	9192 <nrf_gpio_reconfigure+0x6e>
    918a:	f898 8000 	ldrb.w	r8, [r8]
    918e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    9192:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9194:	b10d      	cbz	r5, 919a <nrf_gpio_reconfigure+0x76>
    9196:	782d      	ldrb	r5, [r5, #0]
    9198:	00ad      	lsls	r5, r5, #2
    919a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    919e:	b10c      	cbz	r4, 91a4 <nrf_gpio_reconfigure+0x80>
    91a0:	7822      	ldrb	r2, [r4, #0]
    91a2:	0214      	lsls	r4, r2, #8
    91a4:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    91a6:	b10f      	cbz	r7, 91ac <nrf_gpio_reconfigure+0x88>
    91a8:	783f      	ldrb	r7, [r7, #0]
    91aa:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    91ac:	432c      	orrs	r4, r5
    91ae:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    91b0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    91b4:	b002      	add	sp, #8
    91b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000091ba <nrf_gpio_cfg_sense_set>:
{
    91ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    91bc:	f10d 030f 	add.w	r3, sp, #15
    91c0:	9301      	str	r3, [sp, #4]
    91c2:	2300      	movs	r3, #0
{
    91c4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    91c8:	9300      	str	r3, [sp, #0]
    91ca:	461a      	mov	r2, r3
    91cc:	4619      	mov	r1, r3
    91ce:	f7ff ffa9 	bl	9124 <nrf_gpio_reconfigure>
}
    91d2:	b005      	add	sp, #20
    91d4:	f85d fb04 	ldr.w	pc, [sp], #4

000091d8 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    91d8:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    91da:	2402      	movs	r4, #2
    91dc:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    91de:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    91e0:	6809      	ldr	r1, [r1, #0]
    91e2:	b171      	cbz	r1, 9202 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    91e4:	f012 0f04 	tst.w	r2, #4
    91e8:	bf0c      	ite	eq
    91ea:	2182      	moveq	r1, #130	; 0x82
    91ec:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    91ee:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    91f0:	bf48      	it	mi
    91f2:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    91f6:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    91f8:	bf48      	it	mi
    91fa:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    91fe:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    9202:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9204:	f04f 0100 	mov.w	r1, #0
    9208:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    920c:	bf58      	it	pl
    920e:	2201      	movpl	r2, #1
    9210:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    9214:	bf56      	itet	pl
    9216:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    9218:	18c0      	addmi	r0, r0, r3
    return 0;
    921a:	4608      	movpl	r0, r1
}
    921c:	bd10      	pop	{r4, pc}

0000921e <z_device_state_init>:
}
    921e:	4770      	bx	lr

00009220 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9220:	b138      	cbz	r0, 9232 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9222:	68c3      	ldr	r3, [r0, #12]
    9224:	8818      	ldrh	r0, [r3, #0]
    9226:	f3c0 0008 	ubfx	r0, r0, #0, #9
    922a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    922e:	4258      	negs	r0, r3
    9230:	4158      	adcs	r0, r3
}
    9232:	4770      	bx	lr

00009234 <z_pm_save_idle_exit>:
{
    9234:	b508      	push	{r3, lr}
	pm_system_resume();
    9236:	f7f8 fc57 	bl	1ae8 <pm_system_resume>
}
    923a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    923e:	f7ff bf49 	b.w	90d4 <sys_clock_idle_exit>

00009242 <k_mem_slab_init>:
{
    9242:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9244:	2400      	movs	r4, #0
    9246:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9248:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    924a:	ea41 0402 	orr.w	r4, r1, r2
    924e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    9252:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    9256:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9258:	d10c      	bne.n	9274 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    925a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    925c:	42a3      	cmp	r3, r4
    925e:	d103      	bne.n	9268 <k_mem_slab_init+0x26>
    9260:	e9c0 0000 	strd	r0, r0, [r0]
}
    9264:	2000      	movs	r0, #0
}
    9266:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9268:	6985      	ldr	r5, [r0, #24]
    926a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    926c:	3401      	adds	r4, #1
		slab->free_list = p;
    926e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    9270:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    9272:	e7f3      	b.n	925c <k_mem_slab_init+0x1a>
		return -EINVAL;
    9274:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9278:	e7f5      	b.n	9266 <k_mem_slab_init+0x24>

0000927a <z_impl_k_mutex_init>:
{
    927a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    927c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    927e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    9282:	e9c3 3300 	strd	r3, r3, [r3]
}
    9286:	4770      	bx	lr

00009288 <z_handle_obj_poll_events>:
{
    9288:	4603      	mov	r3, r0
	return list->head == list;
    928a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    928c:	4283      	cmp	r3, r0
    928e:	d008      	beq.n	92a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    9290:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9294:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9296:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9298:	2300      	movs	r3, #0
	node->prev = NULL;
    929a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    929e:	f7fc ba59 	b.w	5754 <signal_poll_event>
}
    92a2:	4770      	bx	lr

000092a4 <z_queue_node_peek>:
{
    92a4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    92a6:	4604      	mov	r4, r0
    92a8:	b130      	cbz	r0, 92b8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    92aa:	6802      	ldr	r2, [r0, #0]
    92ac:	0793      	lsls	r3, r2, #30
    92ae:	d003      	beq.n	92b8 <z_queue_node_peek+0x14>
		ret = anode->data;
    92b0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    92b2:	b109      	cbz	r1, 92b8 <z_queue_node_peek+0x14>
			k_free(anode);
    92b4:	f000 f8ac 	bl	9410 <k_free>
}
    92b8:	4620      	mov	r0, r4
    92ba:	bd10      	pop	{r4, pc}

000092bc <z_impl_k_queue_init>:
	list->head = NULL;
    92bc:	2300      	movs	r3, #0
	list->tail = NULL;
    92be:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
    92c2:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
    92c4:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
    92c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
    92cc:	f100 0314 	add.w	r3, r0, #20
    92d0:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
    92d4:	4770      	bx	lr

000092d6 <k_queue_append>:
{
    92d6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    92d8:	2301      	movs	r3, #1
    92da:	9300      	str	r3, [sp, #0]
    92dc:	2300      	movs	r3, #0
{
    92de:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    92e0:	4619      	mov	r1, r3
    92e2:	f7fc fb09 	bl	58f8 <queue_insert>
}
    92e6:	b003      	add	sp, #12
    92e8:	f85d fb04 	ldr.w	pc, [sp], #4

000092ec <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    92ec:	4603      	mov	r3, r0
    92ee:	b920      	cbnz	r0, 92fa <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    92f0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    92f4:	b90a      	cbnz	r2, 92fa <z_reschedule_irqlock+0xe>
    92f6:	f7f8 bdd5 	b.w	1ea4 <arch_swap>
    92fa:	f383 8811 	msr	BASEPRI, r3
    92fe:	f3bf 8f6f 	isb	sy
}
    9302:	4770      	bx	lr

00009304 <z_reschedule_unlocked>:
	__asm__ volatile(
    9304:	f04f 0320 	mov.w	r3, #32
    9308:	f3ef 8011 	mrs	r0, BASEPRI
    930c:	f383 8812 	msr	BASEPRI_MAX, r3
    9310:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9314:	f7ff bfea 	b.w	92ec <z_reschedule_irqlock>

00009318 <z_priq_dumb_best>:
{
    9318:	4603      	mov	r3, r0
	return list->head == list;
    931a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    931c:	4283      	cmp	r3, r0
    931e:	d003      	beq.n	9328 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    9320:	2800      	cmp	r0, #0
    9322:	bf38      	it	cc
    9324:	2000      	movcc	r0, #0
    9326:	4770      	bx	lr
	struct k_thread *thread = NULL;
    9328:	2000      	movs	r0, #0
}
    932a:	4770      	bx	lr

0000932c <z_unpend_all>:
{
    932c:	b538      	push	{r3, r4, r5, lr}
    932e:	4605      	mov	r5, r0
	int need_sched = 0;
    9330:	2000      	movs	r0, #0
	return list->head == list;
    9332:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9334:	42a5      	cmp	r5, r4
    9336:	d000      	beq.n	933a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9338:	b904      	cbnz	r4, 933c <z_unpend_all+0x10>
}
    933a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    933c:	4620      	mov	r0, r4
    933e:	f7fc fda1 	bl	5e84 <z_unpend_thread>
		z_ready_thread(thread);
    9342:	4620      	mov	r0, r4
    9344:	f7fc ff42 	bl	61cc <z_ready_thread>
		need_sched = 1;
    9348:	2001      	movs	r0, #1
    934a:	e7f2      	b.n	9332 <z_unpend_all+0x6>

0000934c <k_is_in_isr>:
    934c:	f3ef 8005 	mrs	r0, IPSR
}
    9350:	3800      	subs	r0, #0
    9352:	bf18      	it	ne
    9354:	2001      	movne	r0, #1
    9356:	4770      	bx	lr

00009358 <z_impl_k_thread_name_set>:
}
    9358:	f06f 0057 	mvn.w	r0, #87	; 0x57
    935c:	4770      	bx	lr

0000935e <z_impl_k_thread_start>:
	z_sched_start(thread);
    935e:	f7fc bf7d 	b.w	625c <z_sched_start>

00009362 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9362:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9364:	f7fe fb22 	bl	79ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9368:	bd08      	pop	{r3, pc}

0000936a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    936a:	f7fe bb1f 	b.w	79ac <sys_clock_tick_get>

0000936e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    936e:	b108      	cbz	r0, 9374 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9370:	f7f9 b95c 	b.w	262c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9374:	4770      	bx	lr

00009376 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    9376:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9378:	1c4b      	adds	r3, r1, #1
    937a:	bf08      	it	eq
    937c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    9380:	4604      	mov	r4, r0
    9382:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9384:	d013      	beq.n	93ae <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9386:	ea54 0105 	orrs.w	r1, r4, r5
    938a:	d103      	bne.n	9394 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    938c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    9390:	f7fe bb0c 	b.w	79ac <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    9394:	f06f 0101 	mvn.w	r1, #1
    9398:	1a0a      	subs	r2, r1, r0
    939a:	f04f 31ff 	mov.w	r1, #4294967295
    939e:	eb61 0305 	sbc.w	r3, r1, r5
    93a2:	2a00      	cmp	r2, #0
    93a4:	f173 0100 	sbcs.w	r1, r3, #0
    93a8:	db02      	blt.n	93b0 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    93aa:	4610      	mov	r0, r2
    93ac:	4619      	mov	r1, r3
}
    93ae:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
    93b0:	f7fe fafc 	bl	79ac <sys_clock_tick_get>
    93b4:	2c01      	cmp	r4, #1
    93b6:	f175 0300 	sbcs.w	r3, r5, #0
    93ba:	bfbc      	itt	lt
    93bc:	2401      	movlt	r4, #1
    93be:	2500      	movlt	r5, #0
    93c0:	1820      	adds	r0, r4, r0
    93c2:	eb45 0101 	adc.w	r1, r5, r1
    93c6:	e7f2      	b.n	93ae <sys_clock_timeout_end_calc+0x38>

000093c8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    93c8:	b510      	push	{r4, lr}
    93ca:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    93cc:	f7fe f93c 	bl	7648 <z_abort_timeout>

	if (inactive) {
    93d0:	b9b0      	cbnz	r0, 9400 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    93d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    93d4:	b10b      	cbz	r3, 93da <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    93d6:	4620      	mov	r0, r4
    93d8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    93da:	f104 0018 	add.w	r0, r4, #24
    93de:	f7fd fa59 	bl	6894 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    93e2:	b168      	cbz	r0, 9400 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    93e4:	f7fc fef2 	bl	61cc <z_ready_thread>
    93e8:	f04f 0320 	mov.w	r3, #32
    93ec:	f3ef 8011 	mrs	r0, BASEPRI
    93f0:	f383 8812 	msr	BASEPRI_MAX, r3
    93f4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    93f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93fc:	f7ff bf76 	b.w	92ec <z_reschedule_irqlock>
    9400:	bd10      	pop	{r4, pc}

00009402 <notify_queue_locked>:
	if (queue != NULL) {
    9402:	b120      	cbz	r0, 940e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9404:	2200      	movs	r2, #0
    9406:	4611      	mov	r1, r2
    9408:	3088      	adds	r0, #136	; 0x88
    940a:	f7fd bd3f 	b.w	6e8c <z_sched_wake>
}
    940e:	4770      	bx	lr

00009410 <k_free>:
	if (ptr != NULL) {
    9410:	b120      	cbz	r0, 941c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    9412:	1f01      	subs	r1, r0, #4
    9414:	f850 0c04 	ldr.w	r0, [r0, #-4]
    9418:	f7fe bfc8 	b.w	83ac <k_heap_free>
}
    941c:	4770      	bx	lr

0000941e <k_heap_init>:
{
    941e:	b410      	push	{r4}
    9420:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    9424:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9428:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    942a:	f7f7 be89 	b.w	1140 <sys_heap_init>

0000942e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    942e:	4770      	bx	lr

00009430 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9430:	f7fb bc68 	b.w	4d04 <SystemInit>
