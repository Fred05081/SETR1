
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001060 	.word	0x20001060
}
   4:	00001a75 	.word	0x00001a75
   8:	00007fdf 	.word	0x00007fdf
   c:	00001a61 	.word	0x00001a61
  10:	00001a61 	.word	0x00001a61
  14:	00001a61 	.word	0x00001a61
  18:	00001a61 	.word	0x00001a61
	...
  2c:	0000187d 	.word	0x0000187d
  30:	00001a61 	.word	0x00001a61
  34:	00000000 	.word	0x00000000
  38:	00001829 	.word	0x00001829
  3c:	00001a61 	.word	0x00001a61

00000040 <_irq_vector_table>:
  40:	000017e1 000017e1 000017e1 000017e1     ................
  50:	000017e1 000017e1 000017e1 000017e1     ................
  60:	000017e1 000017e1 000017e1 000017e1     ................
  70:	000017e1 000017e1 000017e1 000017e1     ................
  80:	000017e1 000017e1 000017e1 000017e1     ................
  90:	000017e1 000017e1 000017e1 000017e1     ................
  a0:	000017e1 000017e1 000017e1 000017e1     ................
  b0:	000017e1 000017e1 000017e1 000017e1     ................
  c0:	000017e1 000017e1 000017e1 000017e1     ................
  d0:	000017e1 000017e1 000017e1 000017e1     ................
  e0:	000017e1 000017e1 000017e1 000017e1     ................
  f0:	000017e1 000017e1 000017e1 000017e1     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x5a>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x1c8>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x1c8>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x1cc>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x1cc>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x96>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0x28>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0x26>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x1f4>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x50>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x4e>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x1fc>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x70>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x1c2>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x110>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x82>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x1f0>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0xe0>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x1ec>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x1ec>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x108>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <__data_size+0x1e4>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x1e4>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x2>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x162>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <__data_size+0x1e8>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x1e8>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x18c>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <__data_size+0x1e0>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x1e0>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x1d4>
     38c:	d016      	beq.n	3bc <__data_size+0x1d0>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x1bc>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x1a2>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x1a2>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x18c>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x108>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x162>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0xe0>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x8c>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0x28>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x50>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:
	return ret1;
}


void main(void)
{
     3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f8:	b08d      	sub	sp, #52	; 0x34
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     3fa:	4859      	ldr	r0, [pc, #356]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     3fc:	f004 faf4 	bl	49e8 <z_impl_device_get_binding>
    unsigned int pwmPeriod_us = 1000;       /* PWM priod in us */
    int err=0;

    /* Bind to GPIO 0 and PWM0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    if (gpio0_dev == NULL) {
     400:	b928      	cbnz	r0, 40e <CONFIG_FLASH_SIZE+0xe>
        printk("Error: Failed to bind to GPIO0\n\r");        
     402:	4858      	ldr	r0, [pc, #352]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
        printk("Bind to GPIO0 successfull \n\r");        
    }
    
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
	printk("Error: Failed to bind to PWM0\n r");
     404:	f007 fdc5 	bl	7f92 <printk>
            }
        }
        /* Sleep a while ... */
        k_msleep(TIMER_INTERVAL_MSEC);
    }
}
     408:	b00d      	add	sp, #52	; 0x34
     40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        printk("Bind to GPIO0 successfull \n\r");        
     40e:	4856      	ldr	r0, [pc, #344]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     410:	f007 fdbf 	bl	7f92 <printk>
     414:	4855      	ldr	r0, [pc, #340]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     416:	f004 fae7 	bl	49e8 <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
     41a:	4604      	mov	r4, r0
     41c:	b908      	cbnz	r0, 422 <CONFIG_FLASH_SIZE+0x22>
	printk("Error: Failed to bind to PWM0\n r");
     41e:	4854      	ldr	r0, [pc, #336]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     420:	e7f0      	b.n	404 <CONFIG_FLASH_SIZE+0x4>
        printk("Bind to PWM0 successful\n\r");            
     422:	4854      	ldr	r0, [pc, #336]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     424:	f007 fdb5 	bl	7f92 <printk>
    printk("\n\r Simple adc demo for  \n\r");
     428:	4853      	ldr	r0, [pc, #332]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     42a:	f007 fdb2 	bl	7f92 <printk>
    printk(" Reads an analog input connected to AN%d and prints its raw and mV value \n\r", ADC_CHANNEL_ID);
     42e:	2101      	movs	r1, #1
     430:	4852      	ldr	r0, [pc, #328]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     432:	f007 fdae 	bl	7f92 <printk>
    printk(" *** ASSURE THAT ANx IS BETWEEN [0...3V]\n\r");
     436:	4852      	ldr	r0, [pc, #328]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     438:	f007 fdab 	bl	7f92 <printk>
     43c:	4851      	ldr	r0, [pc, #324]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     43e:	f004 fad3 	bl	49e8 <z_impl_device_get_binding>
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     442:	4b51      	ldr	r3, [pc, #324]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     444:	6018      	str	r0, [r3, #0]
	if (!adc_dev) {
     446:	4698      	mov	r8, r3
     448:	b910      	cbnz	r0, 450 <CONFIG_FLASH_SIZE+0x50>
        printk("ADC device_get_binding() failed\n");
     44a:	4850      	ldr	r0, [pc, #320]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     44c:	f007 fda1 	bl	7f92 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     450:	f8d8 0000 	ldr.w	r0, [r8]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     454:	6883      	ldr	r3, [r0, #8]
     456:	494e      	ldr	r1, [pc, #312]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     458:	681b      	ldr	r3, [r3, #0]
     45a:	4798      	blx	r3
    if (err) {
     45c:	4601      	mov	r1, r0
     45e:	b110      	cbz	r0, 466 <CONFIG_FLASH_SIZE+0x66>
        printk("adc_channel_setup() failed with error code %d\n", err);
     460:	484c      	ldr	r0, [pc, #304]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     462:	f007 fd96 	bl	7f92 <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     466:	4b4c      	ldr	r3, [pc, #304]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
	const struct adc_sequence sequence = {
     468:	f8df 914c 	ldr.w	r9, [pc, #332]	; 5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     46c:	2201      	movs	r2, #1
     46e:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
     470:	2214      	movs	r2, #20
     472:	2100      	movs	r1, #0
     474:	a806      	add	r0, sp, #24
     476:	f007 fde3 	bl	8040 <memset>
     47a:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     47c:	f8d8 0000 	ldr.w	r0, [r8]
	const struct adc_sequence sequence = {
     480:	9309      	str	r3, [sp, #36]	; 0x24
     482:	e9cd 3907 	strd	r3, r9, [sp, #28]
     486:	230a      	movs	r3, #10
     488:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	if (adc_dev == NULL) {
     48c:	b970      	cbnz	r0, 4ac <CONFIG_FLASH_SIZE+0xac>
            printk("adc_sample(): error, must bind to adc first \n\r");
     48e:	4843      	ldr	r0, [pc, #268]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     490:	f007 fd7f 	bl	7f92 <printk>
            return -1;
     494:	f04f 35ff 	mov.w	r5, #4294967295
            printk("adc_sample() failed with error code %d\n\r",err);
     498:	4841      	ldr	r0, [pc, #260]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     49a:	4629      	mov	r1, r5
     49c:	f007 fd79 	bl	7f92 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4a0:	2100      	movs	r1, #0
     4a2:	f240 6067 	movw	r0, #1639	; 0x667
     4a6:	f006 f853 	bl	6550 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     4aa:	e7e1      	b.n	470 <CONFIG_FLASH_SIZE+0x70>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     4ac:	6883      	ldr	r3, [r0, #8]
     4ae:	a906      	add	r1, sp, #24
     4b0:	685b      	ldr	r3, [r3, #4]
     4b2:	4798      	blx	r3
	if (ret1) {
     4b4:	4605      	mov	r5, r0
     4b6:	b140      	cbz	r0, 4ca <CONFIG_FLASH_SIZE+0xca>
            printk("adc_read() failed with code %d\n", ret1);
     4b8:	4601      	mov	r1, r0
     4ba:	483a      	ldr	r0, [pc, #232]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     4bc:	f007 fd69 	bl	7f92 <printk>
        if(err) {
     4c0:	e7ea      	b.n	498 <CONFIG_FLASH_SIZE+0x98>
                printk("adc reading out of range\n\r");
     4c2:	4839      	ldr	r0, [pc, #228]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     4c4:	f007 fd65 	bl	7f92 <printk>
     4c8:	e7ea      	b.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
            if(adc_sample_buffer[0] > 1023) {
     4ca:	f8b9 1000 	ldrh.w	r1, [r9]
     4ce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     4d2:	d2f6      	bcs.n	4c2 <CONFIG_FLASH_SIZE+0xc2>
                printk("adc0 reading: raw:%4u \n\r",adc_sample_buffer[0]);
     4d4:	4835      	ldr	r0, [pc, #212]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     4d6:	f007 fd5c 	bl	7f92 <printk>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*adc_sample_buffer[0])/1023), PWM_POLARITY_NORMAL);
     4da:	f8b9 5000 	ldrh.w	r5, [r9]
     4de:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     4e2:	437d      	muls	r5, r7
                ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
     4e4:	f240 33ff 	movw	r3, #1023	; 0x3ff
     4e8:	fbb5 f5f3 	udiv	r5, r5, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4ec:	68a3      	ldr	r3, [r4, #8]
     4ee:	aa06      	add	r2, sp, #24
     4f0:	685b      	ldr	r3, [r3, #4]
     4f2:	210d      	movs	r1, #13
     4f4:	4620      	mov	r0, r4
     4f6:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     4f8:	9003      	str	r0, [sp, #12]
     4fa:	2800      	cmp	r0, #0
     4fc:	d1d0      	bne.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     4fe:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
     502:	fba6 ab07 	umull	sl, fp, r6, r7
     506:	fb07 bb03 	mla	fp, r7, r3, fp
     50a:	4a29      	ldr	r2, [pc, #164]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     50c:	9304      	str	r3, [sp, #16]
     50e:	4650      	mov	r0, sl
     510:	2300      	movs	r3, #0
     512:	4659      	mov	r1, fp
     514:	f7ff fdf4 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     518:	4b26      	ldr	r3, [pc, #152]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     51a:	9005      	str	r0, [sp, #20]
	if (period_cycles >= ((uint64_t)1 << 32)) {
     51c:	f04f 32ff 	mov.w	r2, #4294967295
     520:	455b      	cmp	r3, fp
     522:	bf08      	it	eq
     524:	4552      	cmpeq	r2, sl
     526:	d3bb      	bcc.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     528:	9b04      	ldr	r3, [sp, #16]
     52a:	4a21      	ldr	r2, [pc, #132]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     52c:	fba5 6706 	umull	r6, r7, r5, r6
     530:	fb05 7703 	mla	r7, r5, r3, r7
     534:	4630      	mov	r0, r6
     536:	2300      	movs	r3, #0
     538:	4639      	mov	r1, r7
     53a:	f7ff fde1 	bl	100 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     53e:	4a1d      	ldr	r2, [pc, #116]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     540:	f04f 31ff 	mov.w	r1, #4294967295
     544:	42ba      	cmp	r2, r7
     546:	bf08      	it	eq
     548:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     54a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     54c:	d3a8      	bcc.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
	return api->pin_set(dev, pwm, period, pulse, flags);
     54e:	68a2      	ldr	r2, [r4, #8]
     550:	9903      	ldr	r1, [sp, #12]
     552:	9100      	str	r1, [sp, #0]
     554:	6815      	ldr	r5, [r2, #0]
     556:	9a05      	ldr	r2, [sp, #20]
     558:	210d      	movs	r1, #13
     55a:	4620      	mov	r0, r4
     55c:	47a8      	blx	r5
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
     55e:	e79f      	b.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     560:	00008be4 	.word	0x00008be4
     564:	00008beb 	.word	0x00008beb
     568:	00008c0c 	.word	0x00008c0c
     56c:	00008c29 	.word	0x00008c29
     570:	00008c2f 	.word	0x00008c2f
     574:	00008c50 	.word	0x00008c50
     578:	00008c6a 	.word	0x00008c6a
     57c:	00008c85 	.word	0x00008c85
     580:	00008cd1 	.word	0x00008cd1
     584:	00008cfc 	.word	0x00008cfc
     588:	20000420 	.word	0x20000420
     58c:	00008d02 	.word	0x00008d02
     590:	00008bdc 	.word	0x00008bdc
     594:	00008d23 	.word	0x00008d23
     598:	40007000 	.word	0x40007000
     59c:	00008d52 	.word	0x00008d52
     5a0:	00008da1 	.word	0x00008da1
     5a4:	00008d81 	.word	0x00008d81
     5a8:	00008dca 	.word	0x00008dca
     5ac:	00008de5 	.word	0x00008de5
     5b0:	000f4240 	.word	0x000f4240
     5b4:	000f423f 	.word	0x000f423f
     5b8:	20000aa0 	.word	0x20000aa0

000005bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5c0:	b091      	sub	sp, #68	; 0x44
     5c2:	468b      	mov	fp, r1
     5c4:	9002      	str	r0, [sp, #8]
     5c6:	4692      	mov	sl, r2
     5c8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5ca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5cc:	f89a 0000 	ldrb.w	r0, [sl]
     5d0:	b908      	cbnz	r0, 5d6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5d2:	4628      	mov	r0, r5
     5d4:	e35e      	b.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
		if (*fp != '%') {
     5d6:	2825      	cmp	r0, #37	; 0x25
     5d8:	f10a 0701 	add.w	r7, sl, #1
     5dc:	d007      	beq.n	5ee <cbvprintf+0x32>
			OUTC('%');
     5de:	9b02      	ldr	r3, [sp, #8]
     5e0:	4659      	mov	r1, fp
     5e2:	4798      	blx	r3
     5e4:	2800      	cmp	r0, #0
     5e6:	f2c0 8355 	blt.w	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     5ea:	3501      	adds	r5, #1
			break;
     5ec:	e210      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
		} state = {
     5ee:	2218      	movs	r2, #24
     5f0:	2100      	movs	r1, #0
     5f2:	a80a      	add	r0, sp, #40	; 0x28
     5f4:	f007 fd24 	bl	8040 <memset>
	if (*sp == '%') {
     5f8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     5fc:	2b25      	cmp	r3, #37	; 0x25
     5fe:	d078      	beq.n	6f2 <cbvprintf+0x136>
     600:	2200      	movs	r2, #0
     602:	4694      	mov	ip, r2
     604:	4616      	mov	r6, r2
     606:	4696      	mov	lr, r2
     608:	4610      	mov	r0, r2
     60a:	4639      	mov	r1, r7
		switch (*sp) {
     60c:	f817 3b01 	ldrb.w	r3, [r7], #1
     610:	2b2b      	cmp	r3, #43	; 0x2b
     612:	f000 809d 	beq.w	750 <cbvprintf+0x194>
     616:	f200 8094 	bhi.w	742 <cbvprintf+0x186>
     61a:	2b20      	cmp	r3, #32
     61c:	f000 809b 	beq.w	756 <cbvprintf+0x19a>
     620:	2b23      	cmp	r3, #35	; 0x23
     622:	f000 809a 	beq.w	75a <cbvprintf+0x19e>
     626:	b128      	cbz	r0, 634 <cbvprintf+0x78>
     628:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     62c:	f040 0004 	orr.w	r0, r0, #4
     630:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     634:	f1be 0f00 	cmp.w	lr, #0
     638:	d005      	beq.n	646 <cbvprintf+0x8a>
     63a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     63e:	f040 0008 	orr.w	r0, r0, #8
     642:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     646:	b12e      	cbz	r6, 654 <cbvprintf+0x98>
     648:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     64c:	f040 0010 	orr.w	r0, r0, #16
     650:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     654:	f1bc 0f00 	cmp.w	ip, #0
     658:	d005      	beq.n	666 <cbvprintf+0xaa>
     65a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     65e:	f040 0020 	orr.w	r0, r0, #32
     662:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     666:	b12a      	cbz	r2, 674 <cbvprintf+0xb8>
     668:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     66c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     670:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     674:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     678:	f002 0044 	and.w	r0, r2, #68	; 0x44
     67c:	2844      	cmp	r0, #68	; 0x44
     67e:	d103      	bne.n	688 <cbvprintf+0xcc>
		conv->flag_zero = false;
     680:	f36f 1286 	bfc	r2, #6, #1
     684:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     688:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     68c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     68e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     692:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     696:	d17b      	bne.n	790 <cbvprintf+0x1d4>
		conv->width_star = true;
     698:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     69c:	f042 0201 	orr.w	r2, r2, #1
     6a0:	1c4b      	adds	r3, r1, #1
     6a2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     6a6:	781a      	ldrb	r2, [r3, #0]
     6a8:	2a2e      	cmp	r2, #46	; 0x2e
     6aa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6ae:	bf0c      	ite	eq
     6b0:	2101      	moveq	r1, #1
     6b2:	2100      	movne	r1, #0
     6b4:	f361 0241 	bfi	r2, r1, #1, #1
     6b8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     6bc:	d174      	bne.n	7a8 <cbvprintf+0x1ec>
	if (*sp == '*') {
     6be:	785a      	ldrb	r2, [r3, #1]
     6c0:	2a2a      	cmp	r2, #42	; 0x2a
     6c2:	d06a      	beq.n	79a <cbvprintf+0x1de>
     6c4:	3301      	adds	r3, #1
	size_t val = 0;
     6c6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     6c8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     6ca:	4618      	mov	r0, r3
     6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
     6d0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6d4:	2f09      	cmp	r7, #9
     6d6:	f240 808e 	bls.w	7f6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     6da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6de:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6e0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6e4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     6e8:	f361 0241 	bfi	r2, r1, #1, #1
     6ec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     6f0:	e05a      	b.n	7a8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     6f2:	f10a 0702 	add.w	r7, sl, #2
     6f6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     6fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6fe:	07d9      	lsls	r1, r3, #31
     700:	f140 8149 	bpl.w	996 <CONFIG_ISR_STACK_SIZE+0x196>
			width = va_arg(ap, int);
     704:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     708:	f1b9 0f00 	cmp.w	r9, #0
     70c:	da07      	bge.n	71e <cbvprintf+0x162>
				conv->flag_dash = true;
     70e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     712:	f042 0204 	orr.w	r2, r2, #4
     716:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     71a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     71e:	075a      	lsls	r2, r3, #29
     720:	f140 8142 	bpl.w	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
			int arg = va_arg(ap, int);
     724:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     728:	f1b8 0f00 	cmp.w	r8, #0
     72c:	f280 8141 	bge.w	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
				conv->prec_present = false;
     730:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     734:	f36f 0341 	bfc	r3, #1, #1
     738:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     73c:	f04f 38ff 	mov.w	r8, #4294967295
     740:	e137      	b.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
		switch (*sp) {
     742:	2b2d      	cmp	r3, #45	; 0x2d
     744:	d00c      	beq.n	760 <cbvprintf+0x1a4>
     746:	2b30      	cmp	r3, #48	; 0x30
     748:	f47f af6d 	bne.w	626 <cbvprintf+0x6a>
			conv->flag_zero = true;
     74c:	2201      	movs	r2, #1
	} while (loop);
     74e:	e75c      	b.n	60a <cbvprintf+0x4e>
			conv->flag_plus = true;
     750:	f04f 0e01 	mov.w	lr, #1
     754:	e759      	b.n	60a <cbvprintf+0x4e>
			conv->flag_space = true;
     756:	2601      	movs	r6, #1
     758:	e757      	b.n	60a <cbvprintf+0x4e>
			conv->flag_hash = true;
     75a:	f04f 0c01 	mov.w	ip, #1
     75e:	e754      	b.n	60a <cbvprintf+0x4e>
		switch (*sp) {
     760:	2001      	movs	r0, #1
     762:	e752      	b.n	60a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     764:	fb0c 0202 	mla	r2, ip, r2, r0
     768:	3a30      	subs	r2, #48	; 0x30
     76a:	4633      	mov	r3, r6
     76c:	461e      	mov	r6, r3
     76e:	f816 0b01 	ldrb.w	r0, [r6], #1
     772:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     776:	2f09      	cmp	r7, #9
     778:	d9f4      	bls.n	764 <cbvprintf+0x1a8>
	if (sp != wp) {
     77a:	4299      	cmp	r1, r3
     77c:	d093      	beq.n	6a6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     77e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     782:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     784:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     786:	f362 0141 	bfi	r1, r2, #1, #1
     78a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     78e:	e78a      	b.n	6a6 <cbvprintf+0xea>
     790:	460b      	mov	r3, r1
	size_t val = 0;
     792:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     794:	f04f 0c0a 	mov.w	ip, #10
     798:	e7e8      	b.n	76c <cbvprintf+0x1b0>
		conv->prec_star = true;
     79a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     79e:	f042 0204 	orr.w	r2, r2, #4
     7a2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     7a6:	3302      	adds	r3, #2
	switch (*sp) {
     7a8:	461f      	mov	r7, r3
     7aa:	f817 2b01 	ldrb.w	r2, [r7], #1
     7ae:	2a6c      	cmp	r2, #108	; 0x6c
     7b0:	d041      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     7b2:	d825      	bhi.n	800 <CONFIG_ISR_STACK_SIZE>
     7b4:	2a68      	cmp	r2, #104	; 0x68
     7b6:	d02b      	beq.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     7b8:	2a6a      	cmp	r2, #106	; 0x6a
     7ba:	d046      	beq.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
     7bc:	2a4c      	cmp	r2, #76	; 0x4c
     7be:	d04c      	beq.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
     7c0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     7c2:	f817 2b01 	ldrb.w	r2, [r7], #1
     7c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7ca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7ce:	2a78      	cmp	r2, #120	; 0x78
     7d0:	f200 80d9 	bhi.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     7d4:	2a57      	cmp	r2, #87	; 0x57
     7d6:	d84d      	bhi.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     7d8:	2a41      	cmp	r2, #65	; 0x41
     7da:	d003      	beq.n	7e4 <cbvprintf+0x228>
     7dc:	3a45      	subs	r2, #69	; 0x45
     7de:	2a02      	cmp	r2, #2
     7e0:	f200 80d1 	bhi.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
		conv->specifier_cat = SPECIFIER_FP;
     7e4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     7e8:	2204      	movs	r2, #4
     7ea:	f362 0302 	bfi	r3, r2, #0, #3
     7ee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     7f2:	2301      	movs	r3, #1
			break;
     7f4:	e09e      	b.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
		val = 10U * val + *sp++ - '0';
     7f6:	fb06 2101 	mla	r1, r6, r1, r2
     7fa:	3930      	subs	r1, #48	; 0x30
     7fc:	4603      	mov	r3, r0
     7fe:	e764      	b.n	6ca <cbvprintf+0x10e>
	switch (*sp) {
     800:	2a74      	cmp	r2, #116	; 0x74
     802:	d026      	beq.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
     804:	2a7a      	cmp	r2, #122	; 0x7a
     806:	d1db      	bne.n	7c0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     808:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     80c:	2206      	movs	r2, #6
     80e:	e00d      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		if (*++sp == 'h') {
     810:	785a      	ldrb	r2, [r3, #1]
     812:	2a68      	cmp	r2, #104	; 0x68
     814:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     818:	d106      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
			conv->length_mod = LENGTH_HH;
     81a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     81c:	f361 02c6 	bfi	r2, r1, #3, #4
     820:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     824:	1c9f      	adds	r7, r3, #2
     826:	e7cc      	b.n	7c2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     828:	4613      	mov	r3, r2
     82a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     82c:	f362 03c6 	bfi	r3, r2, #3, #4
     830:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     834:	e7c5      	b.n	7c2 <cbvprintf+0x206>
		if (*++sp == 'l') {
     836:	785a      	ldrb	r2, [r3, #1]
     838:	2a6c      	cmp	r2, #108	; 0x6c
     83a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     83e:	d101      	bne.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
			conv->length_mod = LENGTH_LL;
     840:	2104      	movs	r1, #4
     842:	e7eb      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
			conv->length_mod = LENGTH_L;
     844:	4613      	mov	r3, r2
     846:	2203      	movs	r2, #3
     848:	e7f0      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		conv->length_mod = LENGTH_J;
     84a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     84e:	2205      	movs	r2, #5
     850:	e7ec      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		conv->length_mod = LENGTH_T;
     852:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     856:	2207      	movs	r2, #7
     858:	e7e8      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		conv->unsupported = true;
     85a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     85e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     862:	f023 0302 	bic.w	r3, r3, #2
     866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     86a:	f043 0302 	orr.w	r3, r3, #2
     86e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     872:	e7a6      	b.n	7c2 <cbvprintf+0x206>
     874:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     878:	2920      	cmp	r1, #32
     87a:	f200 8084 	bhi.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     87e:	a001      	add	r0, pc, #4	; (adr r0, 884 <CONFIG_ISR_STACK_SIZE+0x84>)
     880:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     884:	00000949 	.word	0x00000949
     888:	00000987 	.word	0x00000987
     88c:	00000987 	.word	0x00000987
     890:	00000987 	.word	0x00000987
     894:	00000987 	.word	0x00000987
     898:	00000987 	.word	0x00000987
     89c:	00000987 	.word	0x00000987
     8a0:	00000987 	.word	0x00000987
     8a4:	00000987 	.word	0x00000987
     8a8:	000007e5 	.word	0x000007e5
     8ac:	00000987 	.word	0x00000987
     8b0:	00000949 	.word	0x00000949
     8b4:	00000909 	.word	0x00000909
     8b8:	000007e5 	.word	0x000007e5
     8bc:	000007e5 	.word	0x000007e5
     8c0:	000007e5 	.word	0x000007e5
     8c4:	00000987 	.word	0x00000987
     8c8:	00000909 	.word	0x00000909
     8cc:	00000987 	.word	0x00000987
     8d0:	00000987 	.word	0x00000987
     8d4:	00000987 	.word	0x00000987
     8d8:	00000987 	.word	0x00000987
     8dc:	00000951 	.word	0x00000951
     8e0:	00000949 	.word	0x00000949
     8e4:	0000096d 	.word	0x0000096d
     8e8:	00000987 	.word	0x00000987
     8ec:	00000987 	.word	0x00000987
     8f0:	0000096d 	.word	0x0000096d
     8f4:	00000987 	.word	0x00000987
     8f8:	00000949 	.word	0x00000949
     8fc:	00000987 	.word	0x00000987
     900:	00000987 	.word	0x00000987
     904:	00000949 	.word	0x00000949
		conv->specifier_cat = SPECIFIER_SINT;
     908:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     90c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     90e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     912:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     916:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     918:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     91c:	bf02      	ittt	eq
     91e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     922:	f041 0101 	orreq.w	r1, r1, #1
     926:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     92a:	2a63      	cmp	r2, #99	; 0x63
     92c:	d131      	bne.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
			unsupported = (conv->length_mod != LENGTH_NONE);
     92e:	3b00      	subs	r3, #0
     930:	bf18      	it	ne
     932:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     934:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     938:	f3c2 0140 	ubfx	r1, r2, #1, #1
     93c:	430b      	orrs	r3, r1
     93e:	f363 0241 	bfi	r2, r3, #1, #1
     942:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     946:	e6d8      	b.n	6fa <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     948:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     94c:	2002      	movs	r0, #2
     94e:	e7de      	b.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
		conv->specifier_cat = SPECIFIER_PTR;
     950:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     954:	f003 0378 	and.w	r3, r3, #120	; 0x78
     958:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     95c:	2103      	movs	r1, #3
     95e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     962:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     964:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     968:	4143      	adcs	r3, r0
     96a:	e7e3      	b.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
		conv->specifier_cat = SPECIFIER_PTR;
     96c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     970:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     972:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     976:	f361 0202 	bfi	r2, r1, #0, #3
     97a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     97e:	bf14      	ite	ne
     980:	2301      	movne	r3, #1
     982:	2300      	moveq	r3, #0
     984:	e7d6      	b.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
		conv->invalid = true;
     986:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     98a:	f043 0301 	orr.w	r3, r3, #1
     98e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     992:	2300      	movs	r3, #0
     994:	e7ce      	b.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
		} else if (conv->width_present) {
     996:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     99a:	2a00      	cmp	r2, #0
			width = conv->width_value;
     99c:	bfb4      	ite	lt
     99e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     9a2:	f04f 39ff 	movge.w	r9, #4294967295
     9a6:	e6ba      	b.n	71e <cbvprintf+0x162>
		} else if (conv->prec_present) {
     9a8:	079b      	lsls	r3, r3, #30
     9aa:	f57f aec7 	bpl.w	73c <cbvprintf+0x180>
			precision = conv->prec_value;
     9ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     9b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     9b6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     9b8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     9bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     9c0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     9c4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     9c6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     9ca:	d136      	bne.n	a3a <CONFIG_ISR_STACK_SIZE+0x23a>
			switch (length_mod) {
     9cc:	1ed3      	subs	r3, r2, #3
     9ce:	2b04      	cmp	r3, #4
     9d0:	d820      	bhi.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
     9d2:	e8df f003 	tbb	[pc, r3]
     9d6:	0703      	.short	0x0703
     9d8:	1f07      	.short	0x1f07
     9da:	1f          	.byte	0x1f
     9db:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9dc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     9e0:	17c1      	asrs	r1, r0, #31
     9e2:	e004      	b.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
					(sint_value_type)va_arg(ap, intmax_t);
     9e4:	3407      	adds	r4, #7
     9e6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     9ea:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     9ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     9f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9f6:	f013 0603 	ands.w	r6, r3, #3
     9fa:	d054      	beq.n	aa6 <CONFIG_ISR_STACK_SIZE+0x2a6>
			OUTS(sp, fp);
     9fc:	9802      	ldr	r0, [sp, #8]
     9fe:	463b      	mov	r3, r7
     a00:	4652      	mov	r2, sl
     a02:	4659      	mov	r1, fp
     a04:	f007 fa40 	bl	7e88 <outs>
     a08:	2800      	cmp	r0, #0
     a0a:	f2c0 8143 	blt.w	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     a0e:	4405      	add	r5, r0
			continue;
     a10:	46ba      	mov	sl, r7
     a12:	e5db      	b.n	5cc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a14:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     a18:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
     a1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a22:	d105      	bne.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
				value->uint = (unsigned char)value->uint;
     a24:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a28:	930a      	str	r3, [sp, #40]	; 0x28
     a2a:	2300      	movs	r3, #0
     a2c:	930b      	str	r3, [sp, #44]	; 0x2c
     a2e:	e7e0      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
			} else if (length_mod == LENGTH_H) {
     a30:	2a02      	cmp	r2, #2
     a32:	d1de      	bne.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
				value->sint = (short)value->sint;
     a34:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a38:	e7d2      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a3a:	2b02      	cmp	r3, #2
     a3c:	d123      	bne.n	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			switch (length_mod) {
     a3e:	1ed3      	subs	r3, r2, #3
     a40:	2b04      	cmp	r3, #4
     a42:	d813      	bhi.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     a44:	e8df f003 	tbb	[pc, r3]
     a48:	120a0a03 	.word	0x120a0a03
     a4c:	12          	.byte	0x12
     a4d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     a4e:	6820      	ldr	r0, [r4, #0]
     a50:	900a      	str	r0, [sp, #40]	; 0x28
     a52:	2100      	movs	r1, #0
     a54:	1d23      	adds	r3, r4, #4
     a56:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a58:	461c      	mov	r4, r3
     a5a:	e7ca      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
					(uint_value_type)va_arg(ap,
     a5c:	3407      	adds	r4, #7
     a5e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     a62:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     a66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     a6a:	e7f5      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
					(uint_value_type)va_arg(ap, size_t);
     a6c:	f854 3b04 	ldr.w	r3, [r4], #4
     a70:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a72:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     a74:	f04f 0300 	mov.w	r3, #0
     a78:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a7a:	d0d3      	beq.n	a24 <CONFIG_ISR_STACK_SIZE+0x224>
			} else if (length_mod == LENGTH_H) {
     a7c:	2a02      	cmp	r2, #2
     a7e:	d1b8      	bne.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
				value->uint = (unsigned short)value->uint;
     a80:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     a84:	e7d0      	b.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
		} else if (specifier_cat == SPECIFIER_FP) {
     a86:	2b04      	cmp	r3, #4
     a88:	d107      	bne.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
			if (length_mod == LENGTH_UPPER_L) {
     a8a:	3407      	adds	r4, #7
     a8c:	f024 0407 	bic.w	r4, r4, #7
     a90:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     a98:	e7ab      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     a9a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     a9c:	bf04      	itt	eq
     a9e:	f854 3b04 	ldreq.w	r3, [r4], #4
     aa2:	930a      	streq	r3, [sp, #40]	; 0x28
     aa4:	e7a5      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
		switch (conv->specifier) {
     aa6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     aaa:	2878      	cmp	r0, #120	; 0x78
     aac:	d8b0      	bhi.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
     aae:	2862      	cmp	r0, #98	; 0x62
     ab0:	d822      	bhi.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     ab2:	2825      	cmp	r0, #37	; 0x25
     ab4:	f43f ad93 	beq.w	5de <cbvprintf+0x22>
     ab8:	2858      	cmp	r0, #88	; 0x58
     aba:	d1a9      	bne.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
			bps = encode_uint(value->uint, conv, buf, bpe);
     abc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ac0:	9300      	str	r3, [sp, #0]
     ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     ac6:	ab04      	add	r3, sp, #16
     ac8:	aa0c      	add	r2, sp, #48	; 0x30
     aca:	f007 f992 	bl	7df2 <encode_uint>
     ace:	4682      	mov	sl, r0
			if (precision >= 0) {
     ad0:	f1b8 0f00 	cmp.w	r8, #0
     ad4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ad8:	db0c      	blt.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
				conv->flag_zero = false;
     ada:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     ade:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ae2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     ae6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     ae8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     aec:	d902      	bls.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
					conv->pad0_value = precision - (int)len;
     aee:	eba8 0303 	sub.w	r3, r8, r3
     af2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     af4:	4680      	mov	r8, r0
     af6:	e03d      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
     af8:	3863      	subs	r0, #99	; 0x63
     afa:	2815      	cmp	r0, #21
     afc:	d888      	bhi.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
     afe:	a101      	add	r1, pc, #4	; (adr r1, b04 <CONFIG_ISR_STACK_SIZE+0x304>)
     b00:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     b04:	00000b85 	.word	0x00000b85
     b08:	00000be9 	.word	0x00000be9
     b0c:	00000a11 	.word	0x00000a11
     b10:	00000a11 	.word	0x00000a11
     b14:	00000a11 	.word	0x00000a11
     b18:	00000a11 	.word	0x00000a11
     b1c:	00000be9 	.word	0x00000be9
     b20:	00000a11 	.word	0x00000a11
     b24:	00000a11 	.word	0x00000a11
     b28:	00000a11 	.word	0x00000a11
     b2c:	00000a11 	.word	0x00000a11
     b30:	00000c47 	.word	0x00000c47
     b34:	00000c15 	.word	0x00000c15
     b38:	00000c19 	.word	0x00000c19
     b3c:	00000a11 	.word	0x00000a11
     b40:	00000a11 	.word	0x00000a11
     b44:	00000b5d 	.word	0x00000b5d
     b48:	00000a11 	.word	0x00000a11
     b4c:	00000c15 	.word	0x00000c15
     b50:	00000a11 	.word	0x00000a11
     b54:	00000a11 	.word	0x00000a11
     b58:	00000c15 	.word	0x00000c15
			if (precision >= 0) {
     b5c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b64:	db0a      	blt.n	b7c <CONFIG_ISR_STACK_SIZE+0x37c>
				len = strnlen(bps, precision);
     b66:	4641      	mov	r1, r8
     b68:	4650      	mov	r0, sl
     b6a:	f007 fa49 	bl	8000 <strnlen>
			bpe = bps + len;
     b6e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     b72:	2600      	movs	r6, #0
		if (bps == NULL) {
     b74:	f1ba 0f00 	cmp.w	sl, #0
     b78:	d10c      	bne.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
     b7a:	e749      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
				len = strlen(bps);
     b7c:	4650      	mov	r0, sl
     b7e:	f007 fa38 	bl	7ff2 <strlen>
     b82:	e7f4      	b.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b86:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     b8a:	2600      	movs	r6, #0
			bpe = buf + 1;
     b8c:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     b90:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     b94:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     b98:	b106      	cbz	r6, b9c <CONFIG_ISR_STACK_SIZE+0x39c>
			nj_len += 1U;
     b9a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     b9c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     ba0:	06d0      	lsls	r0, r2, #27
     ba2:	d56b      	bpl.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
			nj_len += 2U;
     ba4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     ba6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     baa:	bf48      	it	mi
     bac:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     bae:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     bb0:	bf48      	it	mi
     bb2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     bb4:	f1b9 0f00 	cmp.w	r9, #0
     bb8:	dd79      	ble.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
			if (!conv->flag_dash) {
     bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     bbe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     bc2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     bc6:	9303      	str	r3, [sp, #12]
     bc8:	0753      	lsls	r3, r2, #29
     bca:	d470      	bmi.n	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
				if (conv->flag_zero) {
     bcc:	0650      	lsls	r0, r2, #25
     bce:	d564      	bpl.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
					if (sign != 0) {
     bd0:	b146      	cbz	r6, be4 <CONFIG_ISR_STACK_SIZE+0x3e4>
						OUTC(sign);
     bd2:	9b02      	ldr	r3, [sp, #8]
     bd4:	4659      	mov	r1, fp
     bd6:	4630      	mov	r0, r6
     bd8:	4798      	blx	r3
     bda:	2800      	cmp	r0, #0
     bdc:	db5a      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
						sign = 0;
     bde:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     be0:	3501      	adds	r5, #1
						sign = 0;
     be2:	461e      	mov	r6, r3
					pad = '0';
     be4:	2330      	movs	r3, #48	; 0x30
     be6:	e059      	b.n	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
			if (conv->flag_plus) {
     be8:	071e      	lsls	r6, r3, #28
     bea:	d411      	bmi.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
				sign = ' ';
     bec:	f013 0610 	ands.w	r6, r3, #16
     bf0:	bf18      	it	ne
     bf2:	2620      	movne	r6, #32
			sint = value->sint;
     bf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     bf8:	2a00      	cmp	r2, #0
     bfa:	f173 0100 	sbcs.w	r1, r3, #0
     bfe:	f6bf af5d 	bge.w	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
				value->uint = (uint_value_type)-sint;
     c02:	4252      	negs	r2, r2
     c04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c0c:	262d      	movs	r6, #45	; 0x2d
     c0e:	e755      	b.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
				sign = '+';
     c10:	262b      	movs	r6, #43	; 0x2b
     c12:	e7ef      	b.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
		switch (conv->specifier) {
     c14:	2600      	movs	r6, #0
     c16:	e751      	b.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
			if (value->ptr != NULL) {
     c18:	980a      	ldr	r0, [sp, #40]	; 0x28
     c1a:	b348      	cbz	r0, c70 <CONFIG_ISR_STACK_SIZE+0x470>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c1c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c20:	9300      	str	r3, [sp, #0]
     c22:	aa0c      	add	r2, sp, #48	; 0x30
     c24:	ab04      	add	r3, sp, #16
     c26:	2100      	movs	r1, #0
     c28:	f007 f8e3 	bl	7df2 <encode_uint>
				conv->altform_0c = true;
     c2c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c30:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c34:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c38:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c3c:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c3e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     c42:	2600      	movs	r6, #0
				goto prec_int_pad0;
     c44:	e744      	b.n	ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>
				store_count(conv, value->ptr, count);
     c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c48:	2a07      	cmp	r2, #7
     c4a:	f63f aee1 	bhi.w	a10 <CONFIG_ISR_STACK_SIZE+0x210>
     c4e:	e8df f002 	tbb	[pc, r2]
     c52:	040d      	.short	0x040d
     c54:	08080d06 	.word	0x08080d06
     c58:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     c5a:	701d      	strb	r5, [r3, #0]
		break;
     c5c:	e6d8      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
		*(short *)dp = (short)count;
     c5e:	801d      	strh	r5, [r3, #0]
		break;
     c60:	e6d6      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
		*(intmax_t *)dp = (intmax_t)count;
     c62:	4628      	mov	r0, r5
     c64:	17e9      	asrs	r1, r5, #31
     c66:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     c6a:	e6d1      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c6c:	601d      	str	r5, [r3, #0]
		break;
     c6e:	e6cf      	b.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
			bpe = bps + 5;
     c70:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d38 <CONFIG_ISR_STACK_SIZE+0x538>
     c74:	4606      	mov	r6, r0
			bps = "(nil)";
     c76:	f1a8 0a05 	sub.w	sl, r8, #5
     c7a:	e78b      	b.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
		} else if (conv->altform_0) {
     c7c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c7e:	bf48      	it	mi
     c80:	3301      	addmi	r3, #1
     c82:	e790      	b.n	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
					OUTC(pad);
     c84:	4618      	mov	r0, r3
     c86:	9303      	str	r3, [sp, #12]
     c88:	4659      	mov	r1, fp
     c8a:	9b02      	ldr	r3, [sp, #8]
     c8c:	4798      	blx	r3
     c8e:	2800      	cmp	r0, #0
     c90:	9b03      	ldr	r3, [sp, #12]
     c92:	da04      	bge.n	c9e <CONFIG_ISR_STACK_SIZE+0x49e>
#undef OUTS
#undef OUTC
}
     c94:	b011      	add	sp, #68	; 0x44
     c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     c9a:	2320      	movs	r3, #32
     c9c:	444d      	add	r5, r9
     c9e:	464a      	mov	r2, r9
				while (width-- > 0) {
     ca0:	2a00      	cmp	r2, #0
     ca2:	eba5 0109 	sub.w	r1, r5, r9
     ca6:	f109 39ff 	add.w	r9, r9, #4294967295
     caa:	dceb      	bgt.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
     cac:	460d      	mov	r5, r1
		if (sign != 0) {
     cae:	b136      	cbz	r6, cbe <CONFIG_ISR_STACK_SIZE+0x4be>
			OUTC(sign);
     cb0:	9b02      	ldr	r3, [sp, #8]
     cb2:	4659      	mov	r1, fp
     cb4:	4630      	mov	r0, r6
     cb6:	4798      	blx	r3
     cb8:	2800      	cmp	r0, #0
     cba:	dbeb      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     cbc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     cbe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cc2:	06d9      	lsls	r1, r3, #27
     cc4:	d401      	bmi.n	cca <CONFIG_ISR_STACK_SIZE+0x4ca>
     cc6:	071a      	lsls	r2, r3, #28
     cc8:	d506      	bpl.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
				OUTC('0');
     cca:	9b02      	ldr	r3, [sp, #8]
     ccc:	4659      	mov	r1, fp
     cce:	2030      	movs	r0, #48	; 0x30
     cd0:	4798      	blx	r3
     cd2:	2800      	cmp	r0, #0
     cd4:	dbde      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     cd6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cd8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cdc:	06db      	lsls	r3, r3, #27
     cde:	d507      	bpl.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
				OUTC(conv->specifier);
     ce0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     ce4:	9b02      	ldr	r3, [sp, #8]
     ce6:	4659      	mov	r1, fp
     ce8:	4798      	blx	r3
     cea:	2800      	cmp	r0, #0
     cec:	dbd2      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     cee:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     cf0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cf2:	442e      	add	r6, r5
     cf4:	1b73      	subs	r3, r6, r5
     cf6:	2b00      	cmp	r3, #0
     cf8:	dc16      	bgt.n	d28 <CONFIG_ISR_STACK_SIZE+0x528>
			OUTS(bps, bpe);
     cfa:	9802      	ldr	r0, [sp, #8]
     cfc:	4643      	mov	r3, r8
     cfe:	4652      	mov	r2, sl
     d00:	4659      	mov	r1, fp
     d02:	f007 f8c1 	bl	7e88 <outs>
     d06:	2800      	cmp	r0, #0
     d08:	dbc4      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     d0a:	4405      	add	r5, r0
		while (width > 0) {
     d0c:	44a9      	add	r9, r5
     d0e:	eba9 0305 	sub.w	r3, r9, r5
     d12:	2b00      	cmp	r3, #0
     d14:	f77f ae7c 	ble.w	a10 <CONFIG_ISR_STACK_SIZE+0x210>
			OUTC(' ');
     d18:	9b02      	ldr	r3, [sp, #8]
     d1a:	4659      	mov	r1, fp
     d1c:	2020      	movs	r0, #32
     d1e:	4798      	blx	r3
     d20:	2800      	cmp	r0, #0
     d22:	dbb7      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     d24:	3501      	adds	r5, #1
			--width;
     d26:	e7f2      	b.n	d0e <CONFIG_ISR_STACK_SIZE+0x50e>
				OUTC('0');
     d28:	9b02      	ldr	r3, [sp, #8]
     d2a:	4659      	mov	r1, fp
     d2c:	2030      	movs	r0, #48	; 0x30
     d2e:	4798      	blx	r3
     d30:	2800      	cmp	r0, #0
     d32:	dbaf      	blt.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
     d34:	3501      	adds	r5, #1
     d36:	e7dd      	b.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     d38:	00008e03 	.word	0x00008e03

00000d3c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     d3c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     d3e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     d42:	2b02      	cmp	r3, #2
{
     d44:	b570      	push	{r4, r5, r6, lr}
     d46:	4604      	mov	r4, r0
     d48:	460e      	mov	r6, r1
	notify->result = res;
     d4a:	6081      	str	r1, [r0, #8]
	switch (method) {
     d4c:	d010      	beq.n	d70 <sys_notify_finalize+0x34>
     d4e:	2b03      	cmp	r3, #3
     d50:	d004      	beq.n	d5c <sys_notify_finalize+0x20>
     d52:	2b01      	cmp	r3, #1
     d54:	d10f      	bne.n	d76 <sys_notify_finalize+0x3a>
     d56:	2500      	movs	r5, #0
     d58:	4628      	mov	r0, r5
     d5a:	e001      	b.n	d60 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     d5c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
     d5e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     d60:	2300      	movs	r3, #0
     d62:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
     d64:	b110      	cbz	r0, d6c <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
     d66:	4631      	mov	r1, r6
     d68:	f004 fad4 	bl	5314 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     d6c:	4628      	mov	r0, r5
     d6e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
     d70:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
     d72:	2500      	movs	r5, #0
		break;
     d74:	e7f4      	b.n	d60 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
     d76:	4a06      	ldr	r2, [pc, #24]	; (d90 <sys_notify_finalize+0x54>)
     d78:	4906      	ldr	r1, [pc, #24]	; (d94 <sys_notify_finalize+0x58>)
     d7a:	4807      	ldr	r0, [pc, #28]	; (d98 <sys_notify_finalize+0x5c>)
     d7c:	2345      	movs	r3, #69	; 0x45
     d7e:	f007 f908 	bl	7f92 <printk>
     d82:	4803      	ldr	r0, [pc, #12]	; (d90 <sys_notify_finalize+0x54>)
     d84:	2145      	movs	r1, #69	; 0x45
     d86:	f007 f82d 	bl	7de4 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     d8a:	2500      	movs	r5, #0
     d8c:	e7e7      	b.n	d5e <sys_notify_finalize+0x22>
     d8e:	bf00      	nop
     d90:	00008e04 	.word	0x00008e04
     d94:	00009606 	.word	0x00009606
     d98:	00008e27 	.word	0x00008e27

00000d9c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
     d9c:	4801      	ldr	r0, [pc, #4]	; (da4 <nrf_cc3xx_platform_abort_init+0x8>)
     d9e:	f006 be8f 	b.w	7ac0 <nrf_cc3xx_platform_set_abort>
     da2:	bf00      	nop
     da4:	000089d8 	.word	0x000089d8

00000da8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     da8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     daa:	b1d0      	cbz	r0, de2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     dac:	6843      	ldr	r3, [r0, #4]
     dae:	2b04      	cmp	r3, #4
     db0:	d111      	bne.n	dd6 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     db2:	2200      	movs	r2, #0
     db4:	6803      	ldr	r3, [r0, #0]
     db6:	f3bf 8f5b 	dmb	ish
     dba:	e853 1f00 	ldrex	r1, [r3]
     dbe:	2901      	cmp	r1, #1
     dc0:	d103      	bne.n	dca <mutex_unlock_platform+0x22>
     dc2:	e843 2000 	strex	r0, r2, [r3]
     dc6:	2800      	cmp	r0, #0
     dc8:	d1f7      	bne.n	dba <mutex_unlock_platform+0x12>
     dca:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
     dce:	4807      	ldr	r0, [pc, #28]	; (dec <mutex_unlock_platform+0x44>)
     dd0:	bf08      	it	eq
     dd2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
     dd4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     dd6:	b13b      	cbz	r3, de8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
     dd8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     dda:	f004 f95d 	bl	5098 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
     dde:	2000      	movs	r0, #0
     de0:	e7f8      	b.n	dd4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     de2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     de6:	e7f5      	b.n	dd4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     de8:	4801      	ldr	r0, [pc, #4]	; (df0 <mutex_unlock_platform+0x48>)
     dea:	e7f3      	b.n	dd4 <mutex_unlock_platform+0x2c>
     dec:	ffff8fe9 	.word	0xffff8fe9
     df0:	ffff8fea 	.word	0xffff8fea

00000df4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     df4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     df6:	4604      	mov	r4, r0
     df8:	b918      	cbnz	r0, e02 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
     dfa:	4b0d      	ldr	r3, [pc, #52]	; (e30 <mutex_free_platform+0x3c>)
     dfc:	480d      	ldr	r0, [pc, #52]	; (e34 <mutex_free_platform+0x40>)
     dfe:	685b      	ldr	r3, [r3, #4]
     e00:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e02:	6861      	ldr	r1, [r4, #4]
     e04:	2908      	cmp	r1, #8
     e06:	d00d      	beq.n	e24 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e08:	f031 0304 	bics.w	r3, r1, #4
     e0c:	d00a      	beq.n	e24 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
     e0e:	f011 0102 	ands.w	r1, r1, #2
     e12:	d008      	beq.n	e26 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
     e14:	4808      	ldr	r0, [pc, #32]	; (e38 <mutex_free_platform+0x44>)
     e16:	4621      	mov	r1, r4
     e18:	f003 ffda 	bl	4dd0 <k_mem_slab_free>
        mutex->mutex = NULL;
     e1c:	2300      	movs	r3, #0
     e1e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
     e20:	2300      	movs	r3, #0
     e22:	6063      	str	r3, [r4, #4]
}
     e24:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e26:	6820      	ldr	r0, [r4, #0]
     e28:	2214      	movs	r2, #20
     e2a:	f007 f909 	bl	8040 <memset>
     e2e:	e7f7      	b.n	e20 <mutex_free_platform+0x2c>
     e30:	2000018c 	.word	0x2000018c
     e34:	00008e44 	.word	0x00008e44
     e38:	20000424 	.word	0x20000424

00000e3c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e3c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e3e:	4604      	mov	r4, r0
     e40:	b918      	cbnz	r0, e4a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
     e42:	4b16      	ldr	r3, [pc, #88]	; (e9c <mutex_init_platform+0x60>)
     e44:	4816      	ldr	r0, [pc, #88]	; (ea0 <mutex_init_platform+0x64>)
     e46:	685b      	ldr	r3, [r3, #4]
     e48:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e4a:	6863      	ldr	r3, [r4, #4]
     e4c:	2b04      	cmp	r3, #4
     e4e:	d023      	beq.n	e98 <mutex_init_platform+0x5c>
     e50:	2b08      	cmp	r3, #8
     e52:	d021      	beq.n	e98 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
     e54:	b9cb      	cbnz	r3, e8a <mutex_init_platform+0x4e>
     e56:	6823      	ldr	r3, [r4, #0]
     e58:	b9bb      	cbnz	r3, e8a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     e5a:	4812      	ldr	r0, [pc, #72]	; (ea4 <mutex_init_platform+0x68>)
     e5c:	f04f 32ff 	mov.w	r2, #4294967295
     e60:	f04f 33ff 	mov.w	r3, #4294967295
     e64:	4621      	mov	r1, r4
     e66:	f003 ff47 	bl	4cf8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     e6a:	b908      	cbnz	r0, e70 <mutex_init_platform+0x34>
     e6c:	6823      	ldr	r3, [r4, #0]
     e6e:	b91b      	cbnz	r3, e78 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
     e70:	4b0a      	ldr	r3, [pc, #40]	; (e9c <mutex_init_platform+0x60>)
     e72:	480d      	ldr	r0, [pc, #52]	; (ea8 <mutex_init_platform+0x6c>)
     e74:	685b      	ldr	r3, [r3, #4]
     e76:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e78:	6820      	ldr	r0, [r4, #0]
     e7a:	2214      	movs	r2, #20
     e7c:	2100      	movs	r1, #0
     e7e:	f007 f8df 	bl	8040 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     e82:	6863      	ldr	r3, [r4, #4]
     e84:	f043 0302 	orr.w	r3, r3, #2
     e88:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     e8a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     e8c:	f007 fbc5 	bl	861a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
     e90:	6863      	ldr	r3, [r4, #4]
     e92:	f043 0301 	orr.w	r3, r3, #1
     e96:	6063      	str	r3, [r4, #4]
}
     e98:	bd10      	pop	{r4, pc}
     e9a:	bf00      	nop
     e9c:	2000018c 	.word	0x2000018c
     ea0:	00008e44 	.word	0x00008e44
     ea4:	20000424 	.word	0x20000424
     ea8:	00008e6a 	.word	0x00008e6a

00000eac <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     eac:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     eae:	b308      	cbz	r0, ef4 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
     eb0:	6843      	ldr	r3, [r0, #4]
     eb2:	2b04      	cmp	r3, #4
     eb4:	d110      	bne.n	ed8 <mutex_lock_platform+0x2c>
     eb6:	2201      	movs	r2, #1
     eb8:	6803      	ldr	r3, [r0, #0]
     eba:	f3bf 8f5b 	dmb	ish
     ebe:	e853 1f00 	ldrex	r1, [r3]
     ec2:	2900      	cmp	r1, #0
     ec4:	d103      	bne.n	ece <mutex_lock_platform+0x22>
     ec6:	e843 2000 	strex	r0, r2, [r3]
     eca:	2800      	cmp	r0, #0
     ecc:	d1f7      	bne.n	ebe <mutex_lock_platform+0x12>
     ece:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
     ed2:	d10b      	bne.n	eec <mutex_lock_platform+0x40>
     ed4:	2000      	movs	r0, #0
}
     ed6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     ed8:	b153      	cbz	r3, ef0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
     eda:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     edc:	f04f 32ff 	mov.w	r2, #4294967295
     ee0:	f04f 33ff 	mov.w	r3, #4294967295
     ee4:	f003 ffd8 	bl	4e98 <z_impl_k_mutex_lock>
        if (ret == 0) {
     ee8:	2800      	cmp	r0, #0
     eea:	d0f3      	beq.n	ed4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
     eec:	4803      	ldr	r0, [pc, #12]	; (efc <mutex_lock_platform+0x50>)
     eee:	e7f2      	b.n	ed6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     ef0:	4803      	ldr	r0, [pc, #12]	; (f00 <mutex_lock_platform+0x54>)
     ef2:	e7f0      	b.n	ed6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     ef4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     ef8:	e7ed      	b.n	ed6 <mutex_lock_platform+0x2a>
     efa:	bf00      	nop
     efc:	ffff8fe9 	.word	0xffff8fe9
     f00:	ffff8fea 	.word	0xffff8fea

00000f04 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
     f04:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     f06:	4906      	ldr	r1, [pc, #24]	; (f20 <nrf_cc3xx_platform_mutex_init+0x1c>)
     f08:	4806      	ldr	r0, [pc, #24]	; (f24 <nrf_cc3xx_platform_mutex_init+0x20>)
     f0a:	2340      	movs	r3, #64	; 0x40
     f0c:	2214      	movs	r2, #20
     f0e:	f007 fb68 	bl	85e2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
     f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
     f16:	4904      	ldr	r1, [pc, #16]	; (f28 <nrf_cc3xx_platform_mutex_init+0x24>)
     f18:	4804      	ldr	r0, [pc, #16]	; (f2c <nrf_cc3xx_platform_mutex_init+0x28>)
     f1a:	f006 be33 	b.w	7b84 <nrf_cc3xx_platform_set_mutexes>
     f1e:	bf00      	nop
     f20:	20000444 	.word	0x20000444
     f24:	20000424 	.word	0x20000424
     f28:	000089f0 	.word	0x000089f0
     f2c:	000089e0 	.word	0x000089e0

00000f30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f34:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     f38:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f3a:	f019 0f08 	tst.w	r9, #8
{
     f3e:	4604      	mov	r4, r0
     f40:	9203      	str	r2, [sp, #12]
	if (processing) {
     f42:	d022      	beq.n	f8a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
     f44:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f46:	bf0c      	ite	eq
     f48:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     f4c:	f049 0920 	orrne.w	r9, r9, #32
     f50:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     f54:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f56:	4620      	mov	r0, r4
     f58:	f005 fe9e 	bl	6c98 <z_spin_unlock_valid>
     f5c:	b968      	cbnz	r0, f7a <process_event+0x4a>
     f5e:	4a9f      	ldr	r2, [pc, #636]	; (11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>)
     f60:	499f      	ldr	r1, [pc, #636]	; (11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
     f62:	48a0      	ldr	r0, [pc, #640]	; (11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>)
     f64:	23ac      	movs	r3, #172	; 0xac
     f66:	f007 f814 	bl	7f92 <printk>
     f6a:	489f      	ldr	r0, [pc, #636]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
     f6c:	4621      	mov	r1, r4
     f6e:	f007 f810 	bl	7f92 <printk>
     f72:	489a      	ldr	r0, [pc, #616]	; (11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>)
     f74:	21ac      	movs	r1, #172	; 0xac
     f76:	f006 ff35 	bl	7de4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     f7a:	9b03      	ldr	r3, [sp, #12]
     f7c:	f383 8811 	msr	BASEPRI, r3
     f80:	f3bf 8f6f 	isb	sy
}
     f84:	b005      	add	sp, #20
     f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     f8a:	4f98      	ldr	r7, [pc, #608]	; (11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>)
     f8c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f90:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     f94:	2902      	cmp	r1, #2
     f96:	d106      	bne.n	fa6 <process_event+0x76>
			evt = process_recheck(mgr);
     f98:	4620      	mov	r0, r4
     f9a:	f006 ffa4 	bl	7ee6 <process_recheck>
		if (evt == EVT_NOP) {
     f9e:	2800      	cmp	r0, #0
     fa0:	d0d8      	beq.n	f54 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
     fa2:	2801      	cmp	r0, #1
     fa4:	d168      	bne.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
			res = mgr->last_res;
     fa6:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     faa:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     fac:	f1bb 0f00 	cmp.w	fp, #0
     fb0:	da0a      	bge.n	fc8 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     fb2:	2600      	movs	r6, #0
		*clients = mgr->clients;
     fb4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fb6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     fba:	e9c4 6600 	strd	r6, r6, [r4]
     fbe:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     fc2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     fc4:	9601      	str	r6, [sp, #4]
     fc6:	e027      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fc8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     fcc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     fce:	2901      	cmp	r1, #1
     fd0:	d834      	bhi.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
	list->head = NULL;
     fd2:	2100      	movs	r1, #0
     fd4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     fd8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     fda:	6825      	ldr	r5, [r4, #0]
     fdc:	b29b      	uxth	r3, r3
	list->tail = NULL;
     fde:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     fe2:	d10c      	bne.n	ffe <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     fe4:	428d      	cmp	r5, r1
     fe6:	462a      	mov	r2, r5
     fe8:	bf38      	it	cc
     fea:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     fec:	b12a      	cbz	r2, ffa <process_event+0xca>
				mgr->refs += 1U;
     fee:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     ff0:	6812      	ldr	r2, [r2, #0]
     ff2:	3101      	adds	r1, #1
     ff4:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ff6:	2a00      	cmp	r2, #0
     ff8:	d1f8      	bne.n	fec <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ffa:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     ffe:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1000:	4620      	mov	r0, r4
    1002:	f006 ff70 	bl	7ee6 <process_recheck>
    1006:	4606      	mov	r6, r0
    1008:	2800      	cmp	r0, #0
    100a:	d0db      	beq.n	fc4 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    100c:	8ba3      	ldrh	r3, [r4, #28]
    100e:	f043 0320 	orr.w	r3, r3, #32
    1012:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1014:	2300      	movs	r3, #0
    1016:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1018:	8ba3      	ldrh	r3, [r4, #28]
    101a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    101e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1020:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1022:	d003      	beq.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
		if (do_monitors
    1024:	68a2      	ldr	r2, [r4, #8]
    1026:	2a00      	cmp	r2, #0
    1028:	f040 80f0 	bne.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
		    || !sys_slist_is_empty(&clients)
    102c:	b91d      	cbnz	r5, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		    || (transit != NULL)) {
    102e:	9a01      	ldr	r2, [sp, #4]
    1030:	2a00      	cmp	r2, #0
    1032:	f000 8136 	beq.w	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
    1036:	f04f 0900 	mov.w	r9, #0
    103a:	e0e9      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
	} else if (state == ONOFF_STATE_TO_OFF) {
    103c:	2a04      	cmp	r2, #4
    103e:	d10e      	bne.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1040:	f023 0307 	bic.w	r3, r3, #7
    1044:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1046:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1048:	4620      	mov	r0, r4
    104a:	f006 ff4c 	bl	7ee6 <process_recheck>
    104e:	4605      	mov	r5, r0
    1050:	b118      	cbz	r0, 105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1052:	f042 0220 	orr.w	r2, r2, #32
    1056:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1058:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    105a:	9501      	str	r5, [sp, #4]
    105c:	e7dc      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		__ASSERT_NO_MSG(false);
    105e:	4640      	mov	r0, r8
    1060:	4963      	ldr	r1, [pc, #396]	; (11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    1062:	f240 131b 	movw	r3, #283	; 0x11b
    1066:	463a      	mov	r2, r7
    1068:	f006 ff93 	bl	7f92 <printk>
    106c:	f240 111b 	movw	r1, #283	; 0x11b
    1070:	4638      	mov	r0, r7
    1072:	f006 feb7 	bl	7de4 <assert_post_action>
    1076:	e7ef      	b.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
		} else if (evt == EVT_START) {
    1078:	2803      	cmp	r0, #3
    107a:	d135      	bne.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    107c:	f1b9 0f00 	cmp.w	r9, #0
    1080:	d00b      	beq.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    1082:	495c      	ldr	r1, [pc, #368]	; (11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>)
    1084:	4640      	mov	r0, r8
    1086:	f44f 73ab 	mov.w	r3, #342	; 0x156
    108a:	463a      	mov	r2, r7
    108c:	f006 ff81 	bl	7f92 <printk>
    1090:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1094:	4638      	mov	r0, r7
    1096:	f006 fea5 	bl	7de4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    109a:	6823      	ldr	r3, [r4, #0]
    109c:	b95b      	cbnz	r3, 10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
    109e:	4956      	ldr	r1, [pc, #344]	; (11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    10a0:	4640      	mov	r0, r8
    10a2:	f240 1357 	movw	r3, #343	; 0x157
    10a6:	463a      	mov	r2, r7
    10a8:	f006 ff73 	bl	7f92 <printk>
    10ac:	f240 1157 	movw	r1, #343	; 0x157
    10b0:	4638      	mov	r0, r7
    10b2:	f006 fe97 	bl	7de4 <assert_post_action>
			transit = mgr->transitions->start;
    10b6:	6923      	ldr	r3, [r4, #16]
    10b8:	681b      	ldr	r3, [r3, #0]
    10ba:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    10bc:	b95b      	cbnz	r3, 10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
    10be:	494f      	ldr	r1, [pc, #316]	; (11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    10c0:	4640      	mov	r0, r8
    10c2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    10c6:	463a      	mov	r2, r7
    10c8:	f006 ff63 	bl	7f92 <printk>
    10cc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    10d0:	4638      	mov	r0, r7
    10d2:	f006 fe87 	bl	7de4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10d6:	8ba3      	ldrh	r3, [r4, #28]
    10d8:	f023 0307 	bic.w	r3, r3, #7
    10dc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    10e0:	83a3      	strh	r3, [r4, #28]
}
    10e2:	2500      	movs	r5, #0
		res = 0;
    10e4:	46ab      	mov	fp, r5
}
    10e6:	e797      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
		} else if (evt == EVT_STOP) {
    10e8:	2804      	cmp	r0, #4
    10ea:	d132      	bne.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    10ec:	f1b9 0f02 	cmp.w	r9, #2
    10f0:	d00b      	beq.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
    10f2:	4943      	ldr	r1, [pc, #268]	; (1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    10f4:	4640      	mov	r0, r8
    10f6:	f240 135d 	movw	r3, #349	; 0x15d
    10fa:	463a      	mov	r2, r7
    10fc:	f006 ff49 	bl	7f92 <printk>
    1100:	f240 115d 	movw	r1, #349	; 0x15d
    1104:	4638      	mov	r0, r7
    1106:	f006 fe6d 	bl	7de4 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    110a:	8be3      	ldrh	r3, [r4, #30]
    110c:	b15b      	cbz	r3, 1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    110e:	493d      	ldr	r1, [pc, #244]	; (1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>)
    1110:	4640      	mov	r0, r8
    1112:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1116:	463a      	mov	r2, r7
    1118:	f006 ff3b 	bl	7f92 <printk>
    111c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1120:	4638      	mov	r0, r7
    1122:	f006 fe5f 	bl	7de4 <assert_post_action>
			transit = mgr->transitions->stop;
    1126:	6923      	ldr	r3, [r4, #16]
    1128:	685b      	ldr	r3, [r3, #4]
    112a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    112c:	b95b      	cbnz	r3, 1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    112e:	4933      	ldr	r1, [pc, #204]	; (11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    1130:	4640      	mov	r0, r8
    1132:	f240 1361 	movw	r3, #353	; 0x161
    1136:	463a      	mov	r2, r7
    1138:	f006 ff2b 	bl	7f92 <printk>
    113c:	f240 1161 	movw	r1, #353	; 0x161
    1140:	4638      	mov	r0, r7
    1142:	f006 fe4f 	bl	7de4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1146:	8ba3      	ldrh	r3, [r4, #28]
    1148:	f023 0307 	bic.w	r3, r3, #7
    114c:	f043 0304 	orr.w	r3, r3, #4
    1150:	e7c6      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		} else if (evt == EVT_RESET) {
    1152:	2805      	cmp	r0, #5
    1154:	d132      	bne.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1156:	f1b9 0f01 	cmp.w	r9, #1
    115a:	d00b      	beq.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
    115c:	492a      	ldr	r1, [pc, #168]	; (1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    115e:	4640      	mov	r0, r8
    1160:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1164:	463a      	mov	r2, r7
    1166:	f006 ff14 	bl	7f92 <printk>
    116a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    116e:	4638      	mov	r0, r7
    1170:	f006 fe38 	bl	7de4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1174:	6823      	ldr	r3, [r4, #0]
    1176:	b95b      	cbnz	r3, 1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
    1178:	491f      	ldr	r1, [pc, #124]	; (11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    117a:	4640      	mov	r0, r8
    117c:	f240 1365 	movw	r3, #357	; 0x165
    1180:	463a      	mov	r2, r7
    1182:	f006 ff06 	bl	7f92 <printk>
    1186:	f240 1165 	movw	r1, #357	; 0x165
    118a:	4638      	mov	r0, r7
    118c:	f006 fe2a 	bl	7de4 <assert_post_action>
			transit = mgr->transitions->reset;
    1190:	6923      	ldr	r3, [r4, #16]
    1192:	689b      	ldr	r3, [r3, #8]
    1194:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1196:	b95b      	cbnz	r3, 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1198:	4918      	ldr	r1, [pc, #96]	; (11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>)
    119a:	4640      	mov	r0, r8
    119c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    11a0:	463a      	mov	r2, r7
    11a2:	f006 fef6 	bl	7f92 <printk>
    11a6:	f44f 71b4 	mov.w	r1, #360	; 0x168
    11aa:	4638      	mov	r0, r7
    11ac:	f006 fe1a 	bl	7de4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11b0:	8ba3      	ldrh	r3, [r4, #28]
    11b2:	f023 0307 	bic.w	r3, r3, #7
    11b6:	f043 0305 	orr.w	r3, r3, #5
    11ba:	e791      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
			__ASSERT_NO_MSG(false);
    11bc:	490c      	ldr	r1, [pc, #48]	; (11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    11be:	f240 136b 	movw	r3, #363	; 0x16b
    11c2:	463a      	mov	r2, r7
    11c4:	4640      	mov	r0, r8
    11c6:	f006 fee4 	bl	7f92 <printk>
    11ca:	2500      	movs	r5, #0
    11cc:	f240 116b 	movw	r1, #363	; 0x16b
    11d0:	4638      	mov	r0, r7
    11d2:	f006 fe07 	bl	7de4 <assert_post_action>
		onoff_transition_fn transit = NULL;
    11d6:	9501      	str	r5, [sp, #4]
    11d8:	e784      	b.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    11da:	bf00      	nop
    11dc:	00008f3a 	.word	0x00008f3a
    11e0:	00008f60 	.word	0x00008f60
    11e4:	00008e27 	.word	0x00008e27
    11e8:	00008f77 	.word	0x00008f77
    11ec:	00008e97 	.word	0x00008e97
    11f0:	00009606 	.word	0x00009606
    11f4:	00008eb9 	.word	0x00008eb9
    11f8:	00008ec5 	.word	0x00008ec5
    11fc:	00008ee8 	.word	0x00008ee8
    1200:	00008eff 	.word	0x00008eff
    1204:	00008f15 	.word	0x00008f15
    1208:	00008f24 	.word	0x00008f24
				   && !sys_slist_is_empty(&mgr->monitors);
    120c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1210:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1214:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1218:	83a3      	strh	r3, [r4, #28]
    121a:	4650      	mov	r0, sl
    121c:	f005 fd3c 	bl	6c98 <z_spin_unlock_valid>
    1220:	b968      	cbnz	r0, 123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
    1222:	4a3a      	ldr	r2, [pc, #232]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    1224:	493a      	ldr	r1, [pc, #232]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    1226:	23ac      	movs	r3, #172	; 0xac
    1228:	4640      	mov	r0, r8
    122a:	f006 feb2 	bl	7f92 <printk>
    122e:	4839      	ldr	r0, [pc, #228]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    1230:	4651      	mov	r1, sl
    1232:	f006 feae 	bl	7f92 <printk>
    1236:	4835      	ldr	r0, [pc, #212]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    1238:	21ac      	movs	r1, #172	; 0xac
    123a:	f006 fdd3 	bl	7de4 <assert_post_action>
    123e:	9b03      	ldr	r3, [sp, #12]
    1240:	f383 8811 	msr	BASEPRI, r3
    1244:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1248:	f1b9 0f00 	cmp.w	r9, #0
    124c:	d138      	bne.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
	while (!sys_slist_is_empty(list)) {
    124e:	2d00      	cmp	r5, #0
    1250:	d14b      	bne.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
			if (transit != NULL) {
    1252:	9b01      	ldr	r3, [sp, #4]
    1254:	b113      	cbz	r3, 125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
				transit(mgr, transition_complete);
    1256:	4930      	ldr	r1, [pc, #192]	; (1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>)
    1258:	4620      	mov	r0, r4
    125a:	4798      	blx	r3
	__asm__ volatile(
    125c:	f04f 0320 	mov.w	r3, #32
    1260:	f3ef 8b11 	mrs	fp, BASEPRI
    1264:	f383 8812 	msr	BASEPRI_MAX, r3
    1268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    126c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    126e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1272:	f005 fd03 	bl	6c7c <z_spin_lock_valid>
    1276:	b968      	cbnz	r0, 1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    1278:	4a24      	ldr	r2, [pc, #144]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    127a:	4928      	ldr	r1, [pc, #160]	; (131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>)
    127c:	2381      	movs	r3, #129	; 0x81
    127e:	4640      	mov	r0, r8
    1280:	f006 fe87 	bl	7f92 <printk>
    1284:	4826      	ldr	r0, [pc, #152]	; (1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>)
    1286:	4651      	mov	r1, sl
    1288:	f006 fe83 	bl	7f92 <printk>
    128c:	481f      	ldr	r0, [pc, #124]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    128e:	2181      	movs	r1, #129	; 0x81
    1290:	f006 fda8 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    1294:	4650      	mov	r0, sl
    1296:	f005 fd0f 	bl	6cb8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    129a:	8ba3      	ldrh	r3, [r4, #28]
    129c:	f023 0308 	bic.w	r3, r3, #8
    12a0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    12a2:	8ba3      	ldrh	r3, [r4, #28]
    12a4:	06da      	lsls	r2, r3, #27
    12a6:	d528      	bpl.n	12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    12a8:	f023 0310 	bic.w	r3, r3, #16
    12ac:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    12ae:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    12b0:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    12b4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    12b8:	2900      	cmp	r1, #0
    12ba:	f47f ae6b 	bne.w	f94 <process_event+0x64>
out:
    12be:	e649      	b.n	f54 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12c0:	68a1      	ldr	r1, [r4, #8]
    12c2:	2900      	cmp	r1, #0
    12c4:	d0c3      	beq.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
	return node->next;
    12c6:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    12c8:	9a02      	ldr	r2, [sp, #8]
    12ca:	2b00      	cmp	r3, #0
    12cc:	bf38      	it	cc
    12ce:	2300      	movcc	r3, #0
    12d0:	4699      	mov	r9, r3
    12d2:	684b      	ldr	r3, [r1, #4]
    12d4:	4620      	mov	r0, r4
    12d6:	461e      	mov	r6, r3
    12d8:	465b      	mov	r3, fp
    12da:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12dc:	f1b9 0f00 	cmp.w	r9, #0
    12e0:	d0b5      	beq.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    12e2:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    12e6:	4649      	mov	r1, r9
    12e8:	e7ee      	b.n	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    12ea:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    12ec:	9a02      	ldr	r2, [sp, #8]
    12ee:	682d      	ldr	r5, [r5, #0]
    12f0:	465b      	mov	r3, fp
    12f2:	4620      	mov	r0, r4
    12f4:	f006 fe13 	bl	7f1e <notify_one>
    12f8:	e7a9      	b.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    12fa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    12fe:	bf1e      	ittt	ne
    1300:	f023 0320 	bicne.w	r3, r3, #32
    1304:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1306:	2102      	movne	r1, #2
    1308:	e7d2      	b.n	12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
    130a:	bf00      	nop
    130c:	00008f3a 	.word	0x00008f3a
    1310:	00008f60 	.word	0x00008f60
    1314:	00008f77 	.word	0x00008f77
    1318:	00001325 	.word	0x00001325
    131c:	00008f8c 	.word	0x00008f8c
    1320:	00008fa1 	.word	0x00008fa1

00001324 <transition_complete>:
{
    1324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1326:	4604      	mov	r4, r0
    1328:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    132a:	f100 0614 	add.w	r6, r0, #20
    132e:	f04f 0320 	mov.w	r3, #32
    1332:	f3ef 8711 	mrs	r7, BASEPRI
    1336:	f383 8812 	msr	BASEPRI_MAX, r3
    133a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    133e:	4630      	mov	r0, r6
    1340:	f005 fc9c 	bl	6c7c <z_spin_lock_valid>
    1344:	b968      	cbnz	r0, 1362 <transition_complete+0x3e>
    1346:	4a0c      	ldr	r2, [pc, #48]	; (1378 <transition_complete+0x54>)
    1348:	490c      	ldr	r1, [pc, #48]	; (137c <transition_complete+0x58>)
    134a:	480d      	ldr	r0, [pc, #52]	; (1380 <transition_complete+0x5c>)
    134c:	2381      	movs	r3, #129	; 0x81
    134e:	f006 fe20 	bl	7f92 <printk>
    1352:	480c      	ldr	r0, [pc, #48]	; (1384 <transition_complete+0x60>)
    1354:	4631      	mov	r1, r6
    1356:	f006 fe1c 	bl	7f92 <printk>
    135a:	4807      	ldr	r0, [pc, #28]	; (1378 <transition_complete+0x54>)
    135c:	2181      	movs	r1, #129	; 0x81
    135e:	f006 fd41 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    1362:	4630      	mov	r0, r6
    1364:	f005 fca8 	bl	6cb8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1368:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    136a:	463a      	mov	r2, r7
    136c:	4620      	mov	r0, r4
    136e:	2101      	movs	r1, #1
}
    1370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1374:	f7ff bddc 	b.w	f30 <process_event>
    1378:	00008f3a 	.word	0x00008f3a
    137c:	00008f8c 	.word	0x00008f8c
    1380:	00008e27 	.word	0x00008e27
    1384:	00008fa1 	.word	0x00008fa1

00001388 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    138c:	4604      	mov	r4, r0
    138e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1390:	f006 fddb 	bl	7f4a <validate_args>

	if (rv < 0) {
    1394:	1e05      	subs	r5, r0, #0
    1396:	db5e      	blt.n	1456 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1398:	f104 0914 	add.w	r9, r4, #20
    139c:	f04f 0320 	mov.w	r3, #32
    13a0:	f3ef 8a11 	mrs	sl, BASEPRI
    13a4:	f383 8812 	msr	BASEPRI_MAX, r3
    13a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    13ac:	4648      	mov	r0, r9
    13ae:	f005 fc65 	bl	6c7c <z_spin_lock_valid>
    13b2:	b968      	cbnz	r0, 13d0 <onoff_request+0x48>
    13b4:	4a38      	ldr	r2, [pc, #224]	; (1498 <onoff_request+0x110>)
    13b6:	4939      	ldr	r1, [pc, #228]	; (149c <onoff_request+0x114>)
    13b8:	4839      	ldr	r0, [pc, #228]	; (14a0 <onoff_request+0x118>)
    13ba:	2381      	movs	r3, #129	; 0x81
    13bc:	f006 fde9 	bl	7f92 <printk>
    13c0:	4838      	ldr	r0, [pc, #224]	; (14a4 <onoff_request+0x11c>)
    13c2:	4649      	mov	r1, r9
    13c4:	f006 fde5 	bl	7f92 <printk>
    13c8:	4833      	ldr	r0, [pc, #204]	; (1498 <onoff_request+0x110>)
    13ca:	2181      	movs	r1, #129	; 0x81
    13cc:	f006 fd0a 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    13d0:	4648      	mov	r0, r9
    13d2:	f005 fc71 	bl	6cb8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    13d6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13d8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    13da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13de:	428b      	cmp	r3, r1
    13e0:	f002 0607 	and.w	r6, r2, #7
    13e4:	d050      	beq.n	1488 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    13e6:	2e02      	cmp	r6, #2
    13e8:	d124      	bne.n	1434 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    13ea:	3301      	adds	r3, #1
    13ec:	83e3      	strh	r3, [r4, #30]
	rv = state;
    13ee:	4635      	mov	r5, r6
		notify = true;
    13f0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13f4:	4648      	mov	r0, r9
    13f6:	f005 fc4f 	bl	6c98 <z_spin_unlock_valid>
    13fa:	b968      	cbnz	r0, 1418 <onoff_request+0x90>
    13fc:	4a26      	ldr	r2, [pc, #152]	; (1498 <onoff_request+0x110>)
    13fe:	492a      	ldr	r1, [pc, #168]	; (14a8 <onoff_request+0x120>)
    1400:	4827      	ldr	r0, [pc, #156]	; (14a0 <onoff_request+0x118>)
    1402:	23ac      	movs	r3, #172	; 0xac
    1404:	f006 fdc5 	bl	7f92 <printk>
    1408:	4828      	ldr	r0, [pc, #160]	; (14ac <onoff_request+0x124>)
    140a:	4649      	mov	r1, r9
    140c:	f006 fdc1 	bl	7f92 <printk>
    1410:	4821      	ldr	r0, [pc, #132]	; (1498 <onoff_request+0x110>)
    1412:	21ac      	movs	r1, #172	; 0xac
    1414:	f006 fce6 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    1418:	f38a 8811 	msr	BASEPRI, sl
    141c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1420:	f1b8 0f00 	cmp.w	r8, #0
    1424:	d017      	beq.n	1456 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1426:	2300      	movs	r3, #0
    1428:	4632      	mov	r2, r6
    142a:	4639      	mov	r1, r7
    142c:	4620      	mov	r0, r4
    142e:	f006 fd76 	bl	7f1e <notify_one>
    1432:	e010      	b.n	1456 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1434:	0793      	lsls	r3, r2, #30
    1436:	d001      	beq.n	143c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1438:	2e06      	cmp	r6, #6
    143a:	d10f      	bne.n	145c <onoff_request+0xd4>
	parent->next = child;
    143c:	2300      	movs	r3, #0
    143e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1440:	6863      	ldr	r3, [r4, #4]
    1442:	b9f3      	cbnz	r3, 1482 <onoff_request+0xfa>
	list->head = node;
    1444:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1448:	4635      	mov	r5, r6
    144a:	b9fe      	cbnz	r6, 148c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    144c:	4652      	mov	r2, sl
    144e:	2102      	movs	r1, #2
    1450:	4620      	mov	r0, r4
    1452:	f7ff fd6d 	bl	f30 <process_event>
		}
	}

	return rv;
}
    1456:	4628      	mov	r0, r5
    1458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    145c:	2e05      	cmp	r6, #5
    145e:	d018      	beq.n	1492 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1460:	2e01      	cmp	r6, #1
    1462:	d00b      	beq.n	147c <onoff_request+0xf4>
    1464:	4912      	ldr	r1, [pc, #72]	; (14b0 <onoff_request+0x128>)
    1466:	480e      	ldr	r0, [pc, #56]	; (14a0 <onoff_request+0x118>)
    1468:	4a12      	ldr	r2, [pc, #72]	; (14b4 <onoff_request+0x12c>)
    146a:	f240 13c9 	movw	r3, #457	; 0x1c9
    146e:	f006 fd90 	bl	7f92 <printk>
    1472:	4810      	ldr	r0, [pc, #64]	; (14b4 <onoff_request+0x12c>)
    1474:	f240 11c9 	movw	r1, #457	; 0x1c9
    1478:	f006 fcb4 	bl	7de4 <assert_post_action>
		rv = -EIO;
    147c:	f06f 0504 	mvn.w	r5, #4
    1480:	e004      	b.n	148c <onoff_request+0x104>
	parent->next = child;
    1482:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1484:	6067      	str	r7, [r4, #4]
}
    1486:	e7df      	b.n	1448 <onoff_request+0xc0>
		rv = -EAGAIN;
    1488:	f06f 050a 	mvn.w	r5, #10
    148c:	f04f 0800 	mov.w	r8, #0
    1490:	e7b0      	b.n	13f4 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1492:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1496:	e7f9      	b.n	148c <onoff_request+0x104>
    1498:	00008f3a 	.word	0x00008f3a
    149c:	00008f8c 	.word	0x00008f8c
    14a0:	00008e27 	.word	0x00008e27
    14a4:	00008fa1 	.word	0x00008fa1
    14a8:	00008f60 	.word	0x00008f60
    14ac:	00008f77 	.word	0x00008f77
    14b0:	00008f24 	.word	0x00008f24
    14b4:	00008e97 	.word	0x00008e97

000014b8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    14b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14bc:	4605      	mov	r5, r0
	__asm__ volatile(
    14be:	f04f 0320 	mov.w	r3, #32
    14c2:	f3ef 8611 	mrs	r6, BASEPRI
    14c6:	f383 8812 	msr	BASEPRI_MAX, r3
    14ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14ce:	4823      	ldr	r0, [pc, #140]	; (155c <pm_state_notify+0xa4>)
    14d0:	f005 fbd4 	bl	6c7c <z_spin_lock_valid>
    14d4:	b968      	cbnz	r0, 14f2 <pm_state_notify+0x3a>
    14d6:	4a22      	ldr	r2, [pc, #136]	; (1560 <pm_state_notify+0xa8>)
    14d8:	4922      	ldr	r1, [pc, #136]	; (1564 <pm_state_notify+0xac>)
    14da:	4823      	ldr	r0, [pc, #140]	; (1568 <pm_state_notify+0xb0>)
    14dc:	2381      	movs	r3, #129	; 0x81
    14de:	f006 fd58 	bl	7f92 <printk>
    14e2:	491e      	ldr	r1, [pc, #120]	; (155c <pm_state_notify+0xa4>)
    14e4:	4821      	ldr	r0, [pc, #132]	; (156c <pm_state_notify+0xb4>)
    14e6:	f006 fd54 	bl	7f92 <printk>
    14ea:	481d      	ldr	r0, [pc, #116]	; (1560 <pm_state_notify+0xa8>)
    14ec:	2181      	movs	r1, #129	; 0x81
    14ee:	f006 fc79 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    14f2:	481a      	ldr	r0, [pc, #104]	; (155c <pm_state_notify+0xa4>)
    14f4:	f005 fbe0 	bl	6cb8 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    14f8:	4b1d      	ldr	r3, [pc, #116]	; (1570 <pm_state_notify+0xb8>)
    14fa:	681c      	ldr	r4, [r3, #0]
    14fc:	2c00      	cmp	r4, #0
    14fe:	bf38      	it	cc
    1500:	2400      	movcc	r4, #0
    1502:	b19c      	cbz	r4, 152c <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1504:	4f1b      	ldr	r7, [pc, #108]	; (1574 <pm_state_notify+0xbc>)
    1506:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1580 <pm_state_notify+0xc8>
    150a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    150e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1512:	2d00      	cmp	r5, #0
    1514:	bf08      	it	eq
    1516:	4613      	moveq	r3, r2
		if (callback) {
    1518:	b12b      	cbz	r3, 1526 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    151a:	f898 2014 	ldrb.w	r2, [r8, #20]
    151e:	fb09 f202 	mul.w	r2, r9, r2
    1522:	5cb8      	ldrb	r0, [r7, r2]
    1524:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1526:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1528:	2c00      	cmp	r4, #0
    152a:	d1f0      	bne.n	150e <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    152c:	480b      	ldr	r0, [pc, #44]	; (155c <pm_state_notify+0xa4>)
    152e:	f005 fbb3 	bl	6c98 <z_spin_unlock_valid>
    1532:	b968      	cbnz	r0, 1550 <pm_state_notify+0x98>
    1534:	4a0a      	ldr	r2, [pc, #40]	; (1560 <pm_state_notify+0xa8>)
    1536:	4910      	ldr	r1, [pc, #64]	; (1578 <pm_state_notify+0xc0>)
    1538:	480b      	ldr	r0, [pc, #44]	; (1568 <pm_state_notify+0xb0>)
    153a:	23ac      	movs	r3, #172	; 0xac
    153c:	f006 fd29 	bl	7f92 <printk>
    1540:	4906      	ldr	r1, [pc, #24]	; (155c <pm_state_notify+0xa4>)
    1542:	480e      	ldr	r0, [pc, #56]	; (157c <pm_state_notify+0xc4>)
    1544:	f006 fd25 	bl	7f92 <printk>
    1548:	4805      	ldr	r0, [pc, #20]	; (1560 <pm_state_notify+0xa8>)
    154a:	21ac      	movs	r1, #172	; 0xac
    154c:	f006 fc4a 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    1550:	f386 8811 	msr	BASEPRI, r6
    1554:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    155c:	20000944 	.word	0x20000944
    1560:	00008f3a 	.word	0x00008f3a
    1564:	00008f8c 	.word	0x00008f8c
    1568:	00008e27 	.word	0x00008e27
    156c:	00008fa1 	.word	0x00008fa1
    1570:	20000948 	.word	0x20000948
    1574:	20000954 	.word	0x20000954
    1578:	00008f60 	.word	0x00008f60
    157c:	00008f77 	.word	0x00008f77
    1580:	20000a2c 	.word	0x20000a2c

00001584 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1584:	f000 031f 	and.w	r3, r0, #31
    1588:	2201      	movs	r2, #1
    158a:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    158c:	4b0a      	ldr	r3, [pc, #40]	; (15b8 <atomic_test_and_set_bit.constprop.0+0x34>)
    158e:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1592:	0940      	lsrs	r0, r0, #5
    1594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1598:	e850 3f00 	ldrex	r3, [r0]
    159c:	ea43 0102 	orr.w	r1, r3, r2
    15a0:	e840 1c00 	strex	ip, r1, [r0]
    15a4:	f1bc 0f00 	cmp.w	ip, #0
    15a8:	d1f6      	bne.n	1598 <atomic_test_and_set_bit.constprop.0+0x14>
    15aa:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    15ae:	421a      	tst	r2, r3
}
    15b0:	bf14      	ite	ne
    15b2:	2001      	movne	r0, #1
    15b4:	2000      	moveq	r0, #0
    15b6:	4770      	bx	lr
    15b8:	20000960 	.word	0x20000960

000015bc <pm_system_resume>:

void pm_system_resume(void)
{
    15bc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    15be:	4b1d      	ldr	r3, [pc, #116]	; (1634 <pm_system_resume+0x78>)
    15c0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    15c2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    15c6:	f005 031f 	and.w	r3, r5, #31
    15ca:	2201      	movs	r2, #1
    15cc:	409a      	lsls	r2, r3
    15ce:	4b1a      	ldr	r3, [pc, #104]	; (1638 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    15d0:	0969      	lsrs	r1, r5, #5
{
    15d2:	b085      	sub	sp, #20
    15d4:	43d0      	mvns	r0, r2
    15d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    15da:	e853 1f00 	ldrex	r1, [r3]
    15de:	ea01 0400 	and.w	r4, r1, r0
    15e2:	e843 4c00 	strex	ip, r4, [r3]
    15e6:	f1bc 0f00 	cmp.w	ip, #0
    15ea:	d1f6      	bne.n	15da <pm_system_resume+0x1e>
    15ec:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    15f0:	4211      	tst	r1, r2
    15f2:	d017      	beq.n	1624 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    15f4:	4c11      	ldr	r4, [pc, #68]	; (163c <pm_system_resume+0x80>)
    15f6:	220c      	movs	r2, #12
    15f8:	fb02 4205 	mla	r2, r2, r5, r4
    15fc:	ca07      	ldmia	r2, {r0, r1, r2}
    15fe:	ab01      	add	r3, sp, #4
    1600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1604:	4a0e      	ldr	r2, [pc, #56]	; (1640 <pm_system_resume+0x84>)
    1606:	b17a      	cbz	r2, 1628 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1608:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    160c:	f006 fd34 	bl	8078 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1610:	2000      	movs	r0, #0
    1612:	f7ff ff51 	bl	14b8 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1616:	230c      	movs	r3, #12
    1618:	436b      	muls	r3, r5
    161a:	2200      	movs	r2, #0
    161c:	18e1      	adds	r1, r4, r3
    161e:	50e2      	str	r2, [r4, r3]
    1620:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1624:	b005      	add	sp, #20
    1626:	bd30      	pop	{r4, r5, pc}
    1628:	f382 8811 	msr	BASEPRI, r2
    162c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1630:	e7ee      	b.n	1610 <pm_system_resume+0x54>
    1632:	bf00      	nop
    1634:	20000a2c 	.word	0x20000a2c
    1638:	20000950 	.word	0x20000950
    163c:	20000954 	.word	0x20000954
    1640:	00008079 	.word	0x00008079

00001644 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1648:	4b37      	ldr	r3, [pc, #220]	; (1728 <pm_system_suspend+0xe4>)
    164a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1740 <pm_system_suspend+0xfc>
    164e:	7d1c      	ldrb	r4, [r3, #20]
{
    1650:	b088      	sub	sp, #32
    1652:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1654:	4620      	mov	r0, r4
    1656:	f7ff ff95 	bl	1584 <atomic_test_and_set_bit.constprop.0>
    165a:	b960      	cbnz	r0, 1676 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    165c:	466e      	mov	r6, sp
    165e:	463a      	mov	r2, r7
    1660:	4621      	mov	r1, r4
    1662:	4630      	mov	r0, r6
    1664:	f006 fca2 	bl	7fac <pm_policy_next_state>
    1668:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    166c:	250c      	movs	r5, #12
    166e:	fb05 8504 	mla	r5, r5, r4, r8
    1672:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1676:	230c      	movs	r3, #12
    1678:	4363      	muls	r3, r4
    167a:	eb08 0203 	add.w	r2, r8, r3
    167e:	f818 0003 	ldrb.w	r0, [r8, r3]
    1682:	0965      	lsrs	r5, r4, #5
    1684:	f004 061f 	and.w	r6, r4, #31
    1688:	b3c8      	cbz	r0, 16fe <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    168a:	1c7b      	adds	r3, r7, #1
    168c:	d00f      	beq.n	16ae <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    168e:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1692:	4826      	ldr	r0, [pc, #152]	; (172c <pm_system_suspend+0xe8>)
    1694:	4a26      	ldr	r2, [pc, #152]	; (1730 <pm_system_suspend+0xec>)
    1696:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    169a:	2100      	movs	r1, #0
    169c:	2300      	movs	r3, #0
    169e:	fbec 010e 	umlal	r0, r1, ip, lr
    16a2:	f7fe fd2d 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    16a6:	2101      	movs	r1, #1
    16a8:	1a38      	subs	r0, r7, r0
    16aa:	f005 fcc7 	bl	703c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    16ae:	f003 ff95 	bl	55dc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    16b2:	2001      	movs	r0, #1
    16b4:	f7ff ff00 	bl	14b8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    16b8:	f3bf 8f5b 	dmb	ish
    16bc:	4b1d      	ldr	r3, [pc, #116]	; (1734 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    16be:	2201      	movs	r2, #1
    16c0:	40b2      	lsls	r2, r6
    16c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    16c6:	e853 1f00 	ldrex	r1, [r3]
    16ca:	4311      	orrs	r1, r2
    16cc:	e843 1000 	strex	r0, r1, [r3]
    16d0:	2800      	cmp	r0, #0
    16d2:	d1f8      	bne.n	16c6 <pm_system_suspend+0x82>
    16d4:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    16d8:	230c      	movs	r3, #12
    16da:	fb03 8404 	mla	r4, r3, r4, r8
    16de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    16e2:	ab05      	add	r3, sp, #20
    16e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    16e8:	4a13      	ldr	r2, [pc, #76]	; (1738 <pm_system_suspend+0xf4>)
    16ea:	b11a      	cbz	r2, 16f4 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    16ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    16f0:	f006 fcaf 	bl	8052 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    16f4:	f7ff ff62 	bl	15bc <pm_system_resume>
	k_sched_unlock();
    16f8:	f004 fcb4 	bl	6064 <k_sched_unlock>
	bool ret = true;
    16fc:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    16fe:	4a0f      	ldr	r2, [pc, #60]	; (173c <pm_system_suspend+0xf8>)
    1700:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1704:	2301      	movs	r3, #1
    1706:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1708:	43db      	mvns	r3, r3
    170a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    170e:	e855 2f00 	ldrex	r2, [r5]
    1712:	401a      	ands	r2, r3
    1714:	e845 2100 	strex	r1, r2, [r5]
    1718:	2900      	cmp	r1, #0
    171a:	d1f8      	bne.n	170e <pm_system_suspend+0xca>
    171c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1720:	b008      	add	sp, #32
    1722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1726:	bf00      	nop
    1728:	20000a2c 	.word	0x20000a2c
    172c:	000f423f 	.word	0x000f423f
    1730:	000f4240 	.word	0x000f4240
    1734:	20000950 	.word	0x20000950
    1738:	00008053 	.word	0x00008053
    173c:	20000960 	.word	0x20000960
    1740:	20000954 	.word	0x20000954

00001744 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1744:	680b      	ldr	r3, [r1, #0]
    1746:	3301      	adds	r3, #1
    1748:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    174a:	4b01      	ldr	r3, [pc, #4]	; (1750 <char_out+0xc>)
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	4718      	bx	r3
    1750:	200000d0 	.word	0x200000d0

00001754 <__printk_hook_install>:
	_char_out = fn;
    1754:	4b01      	ldr	r3, [pc, #4]	; (175c <__printk_hook_install+0x8>)
    1756:	6018      	str	r0, [r3, #0]
}
    1758:	4770      	bx	lr
    175a:	bf00      	nop
    175c:	200000d0 	.word	0x200000d0

00001760 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1760:	b507      	push	{r0, r1, r2, lr}
    1762:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1764:	2100      	movs	r1, #0
{
    1766:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1768:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    176a:	4803      	ldr	r0, [pc, #12]	; (1778 <vprintk+0x18>)
    176c:	a901      	add	r1, sp, #4
    176e:	f7fe ff25 	bl	5bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1772:	b003      	add	sp, #12
    1774:	f85d fb04 	ldr.w	pc, [sp], #4
    1778:	00001745 	.word	0x00001745

0000177c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    177c:	b508      	push	{r3, lr}
	__asm__ volatile(
    177e:	f04f 0220 	mov.w	r2, #32
    1782:	f3ef 8311 	mrs	r3, BASEPRI
    1786:	f382 8812 	msr	BASEPRI_MAX, r2
    178a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    178e:	f000 fca1 	bl	20d4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1792:	4803      	ldr	r0, [pc, #12]	; (17a0 <sys_reboot+0x24>)
    1794:	f006 fbfd 	bl	7f92 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1798:	f000 f80a 	bl	17b0 <arch_cpu_idle>
    179c:	e7fc      	b.n	1798 <sys_reboot+0x1c>
    179e:	bf00      	nop
    17a0:	00008fb9 	.word	0x00008fb9

000017a4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    17a4:	4901      	ldr	r1, [pc, #4]	; (17ac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    17a6:	2210      	movs	r2, #16
	str	r2, [r1]
    17a8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    17aa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    17ac:	e000ed10 	.word	0xe000ed10

000017b0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    17b0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    17b2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    17b4:	f380 8811 	msr	BASEPRI, r0
	isb
    17b8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    17bc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    17c0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    17c2:	b662      	cpsie	i
	isb
    17c4:	f3bf 8f6f 	isb	sy

	bx	lr
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop

000017cc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    17cc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    17ce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    17d0:	f381 8811 	msr	BASEPRI, r1

	wfe
    17d4:	bf20      	wfe

	msr	BASEPRI, r0
    17d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    17da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    17dc:	4770      	bx	lr
    17de:	bf00      	nop

000017e0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    17e0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    17e2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    17e4:	4a0b      	ldr	r2, [pc, #44]	; (1814 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    17e6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    17e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    17ea:	bf1e      	ittt	ne
	movne	r1, #0
    17ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    17ee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    17f0:	f006 fef0 	blne	85d4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    17f4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    17f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    17fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    17fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1802:	4905      	ldr	r1, [pc, #20]	; (1818 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1804:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1806:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1808:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    180a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    180e:	4903      	ldr	r1, [pc, #12]	; (181c <_isr_wrapper+0x3c>)
	bx r1
    1810:	4708      	bx	r1
    1812:	0000      	.short	0x0000
	ldr r2, =_kernel
    1814:	20000a2c 	.word	0x20000a2c
	ldr r1, =_sw_isr_table
    1818:	00008818 	.word	0x00008818
	ldr r1, =z_arm_int_exit
    181c:	00001a45 	.word	0x00001a45

00001820 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1820:	bf30      	wfi
    b z_SysNmiOnReset
    1822:	f7ff bffd 	b.w	1820 <z_SysNmiOnReset>
    1826:	bf00      	nop

00001828 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1828:	4912      	ldr	r1, [pc, #72]	; (1874 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    182a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    182c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1830:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1832:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1836:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    183a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    183c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1840:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1844:	4f0c      	ldr	r7, [pc, #48]	; (1878 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1846:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    184a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    184c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    184e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1850:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    1852:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1854:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1856:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    185a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    185c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    185e:	f000 fae7 	bl	1e30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1862:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1866:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    186a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    186e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1872:	4770      	bx	lr
    ldr r1, =_kernel
    1874:	20000a2c 	.word	0x20000a2c
    ldr v4, =_SCS_ICSR
    1878:	e000ed04 	.word	0xe000ed04

0000187c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    187c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1880:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1882:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1886:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    188a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    188c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1890:	2902      	cmp	r1, #2
    beq _oops
    1892:	d0ff      	beq.n	1894 <_oops>

00001894 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1894:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1896:	f006 fb9a 	bl	7fce <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    189a:	bd01      	pop	{r0, pc}

0000189c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    189c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    189e:	2b00      	cmp	r3, #0
    18a0:	db08      	blt.n	18b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18a2:	2201      	movs	r2, #1
    18a4:	f000 001f 	and.w	r0, r0, #31
    18a8:	fa02 f000 	lsl.w	r0, r2, r0
    18ac:	095b      	lsrs	r3, r3, #5
    18ae:	4a02      	ldr	r2, [pc, #8]	; (18b8 <arch_irq_enable+0x1c>)
    18b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    18b4:	4770      	bx	lr
    18b6:	bf00      	nop
    18b8:	e000e100 	.word	0xe000e100

000018bc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    18bc:	4b05      	ldr	r3, [pc, #20]	; (18d4 <arch_irq_is_enabled+0x18>)
    18be:	0942      	lsrs	r2, r0, #5
    18c0:	f000 001f 	and.w	r0, r0, #31
    18c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    18c8:	2301      	movs	r3, #1
    18ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    18ce:	4010      	ands	r0, r2
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	e000e100 	.word	0xe000e100

000018d8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    18d8:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    18da:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    18dc:	2c07      	cmp	r4, #7
{
    18de:	4605      	mov	r5, r0
    18e0:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    18e2:	d90f      	bls.n	1904 <z_arm_irq_priority_set+0x2c>
    18e4:	4a11      	ldr	r2, [pc, #68]	; (192c <z_arm_irq_priority_set+0x54>)
    18e6:	4912      	ldr	r1, [pc, #72]	; (1930 <z_arm_irq_priority_set+0x58>)
    18e8:	4812      	ldr	r0, [pc, #72]	; (1934 <z_arm_irq_priority_set+0x5c>)
    18ea:	2359      	movs	r3, #89	; 0x59
    18ec:	f006 fb51 	bl	7f92 <printk>
    18f0:	4811      	ldr	r0, [pc, #68]	; (1938 <z_arm_irq_priority_set+0x60>)
    18f2:	4631      	mov	r1, r6
    18f4:	2307      	movs	r3, #7
    18f6:	462a      	mov	r2, r5
    18f8:	f006 fb4b 	bl	7f92 <printk>
    18fc:	480b      	ldr	r0, [pc, #44]	; (192c <z_arm_irq_priority_set+0x54>)
    18fe:	2159      	movs	r1, #89	; 0x59
    1900:	f006 fa70 	bl	7de4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1904:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1906:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1908:	bfac      	ite	ge
    190a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    190e:	4b0b      	ldrlt	r3, [pc, #44]	; (193c <z_arm_irq_priority_set+0x64>)
    1910:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1914:	bfb8      	it	lt
    1916:	f005 050f 	andlt.w	r5, r5, #15
    191a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    191c:	bfaa      	itet	ge
    191e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1922:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1924:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1928:	bd70      	pop	{r4, r5, r6, pc}
    192a:	bf00      	nop
    192c:	00008fe2 	.word	0x00008fe2
    1930:	00009018 	.word	0x00009018
    1934:	00008e27 	.word	0x00008e27
    1938:	00009033 	.word	0x00009033
    193c:	e000ed14 	.word	0xe000ed14

00001940 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1940:	4a0b      	ldr	r2, [pc, #44]	; (1970 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1942:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1944:	4b0b      	ldr	r3, [pc, #44]	; (1974 <z_arm_prep_c+0x34>)
    1946:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    194a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    194c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1950:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1958:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    195c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1960:	f003 f912 	bl	4b88 <z_bss_zero>
	z_data_copy();
    1964:	f006 f838 	bl	79d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1968:	f000 f9f6 	bl	1d58 <z_arm_interrupt_init>
	z_cstart();
    196c:	f003 f916 	bl	4b9c <z_cstart>
    1970:	00000000 	.word	0x00000000
    1974:	e000ed00 	.word	0xe000ed00

00001978 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1978:	4a09      	ldr	r2, [pc, #36]	; (19a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    197a:	490a      	ldr	r1, [pc, #40]	; (19a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    197c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    197e:	6809      	ldr	r1, [r1, #0]
    1980:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1982:	4909      	ldr	r1, [pc, #36]	; (19a8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1984:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1986:	684b      	ldr	r3, [r1, #4]
    1988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    198c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    198e:	2300      	movs	r3, #0
    1990:	f383 8811 	msr	BASEPRI, r3
    1994:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1998:	6893      	ldr	r3, [r2, #8]
}
    199a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    199c:	4770      	bx	lr
    199e:	bf00      	nop
    19a0:	20000a2c 	.word	0x20000a2c
    19a4:	00008b50 	.word	0x00008b50
    19a8:	e000ed00 	.word	0xe000ed00

000019ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    19ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    19b0:	9b00      	ldr	r3, [sp, #0]
    19b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    19b6:	490a      	ldr	r1, [pc, #40]	; (19e0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    19b8:	9b01      	ldr	r3, [sp, #4]
    19ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    19be:	9b02      	ldr	r3, [sp, #8]
    19c0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    19c4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    19c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    19cc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    19d0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    19d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    19d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    19d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    19da:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	00007fb7 	.word	0x00007fb7

000019e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    19e4:	4a0b      	ldr	r2, [pc, #44]	; (1a14 <z_check_thread_stack_fail+0x30>)
{
    19e6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    19e8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    19ea:	b190      	cbz	r0, 1a12 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    19ec:	f113 0f16 	cmn.w	r3, #22
    19f0:	6e80      	ldr	r0, [r0, #104]	; 0x68
    19f2:	d005      	beq.n	1a00 <z_check_thread_stack_fail+0x1c>
    19f4:	f1a0 0220 	sub.w	r2, r0, #32
    19f8:	429a      	cmp	r2, r3
    19fa:	d806      	bhi.n	1a0a <z_check_thread_stack_fail+0x26>
    19fc:	4283      	cmp	r3, r0
    19fe:	d204      	bcs.n	1a0a <z_check_thread_stack_fail+0x26>
    1a00:	4281      	cmp	r1, r0
    1a02:	bf2c      	ite	cs
    1a04:	2100      	movcs	r1, #0
    1a06:	2101      	movcc	r1, #1
    1a08:	e000      	b.n	1a0c <z_check_thread_stack_fail+0x28>
    1a0a:	2100      	movs	r1, #0
    1a0c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1a0e:	bf08      	it	eq
    1a10:	2000      	moveq	r0, #0
}
    1a12:	4770      	bx	lr
    1a14:	20000a2c 	.word	0x20000a2c

00001a18 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1a18:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1a1a:	4b09      	ldr	r3, [pc, #36]	; (1a40 <arch_switch_to_main_thread+0x28>)
    1a1c:	6098      	str	r0, [r3, #8]
{
    1a1e:	460d      	mov	r5, r1
    1a20:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1a22:	f000 fa05 	bl	1e30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1a26:	4620      	mov	r0, r4
    1a28:	f385 8809 	msr	PSP, r5
    1a2c:	2100      	movs	r1, #0
    1a2e:	b663      	cpsie	if
    1a30:	f381 8811 	msr	BASEPRI, r1
    1a34:	f3bf 8f6f 	isb	sy
    1a38:	2200      	movs	r2, #0
    1a3a:	2300      	movs	r3, #0
    1a3c:	f006 fabb 	bl	7fb6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1a40:	20000a2c 	.word	0x20000a2c

00001a44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1a46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1a48:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1a4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1a4c:	d003      	beq.n	1a56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1a4e:	4903      	ldr	r1, [pc, #12]	; (1a5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1a54:	600a      	str	r2, [r1, #0]

00001a56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1a56:	4770      	bx	lr
	ldr r3, =_kernel
    1a58:	20000a2c 	.word	0x20000a2c
	ldr r1, =_SCS_ICSR
    1a5c:	e000ed04 	.word	0xe000ed04

00001a60 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1a60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1a64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1a68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1a6a:	4672      	mov	r2, lr
	bl z_arm_fault
    1a6c:	f000 f8ae 	bl	1bcc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1a70:	bd01      	pop	{r0, pc}
    1a72:	bf00      	nop

00001a74 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1a74:	2000      	movs	r0, #0
    msr CONTROL, r0
    1a76:	f380 8814 	msr	CONTROL, r0
    isb
    1a7a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1a7e:	f006 fe39 	bl	86f4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a82:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a84:	490d      	ldr	r1, [pc, #52]	; (1abc <__start+0x48>)
    str r0, [r1]
    1a86:	6008      	str	r0, [r1, #0]
    dsb
    1a88:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a8c:	480c      	ldr	r0, [pc, #48]	; (1ac0 <__start+0x4c>)
    msr msp, r0
    1a8e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a92:	f000 f97d 	bl	1d90 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a96:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a98:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a9c:	4809      	ldr	r0, [pc, #36]	; (1ac4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a9e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1aa2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1aa4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1aa8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1aac:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1aae:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ab0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1ab4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1ab8:	f7ff ff42 	bl	1940 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1abc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ac0:	20001060 	.word	0x20001060
    ldr r0, =z_interrupt_stacks
    1ac4:	200011e0 	.word	0x200011e0

00001ac8 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ac8:	4b23      	ldr	r3, [pc, #140]	; (1b58 <mem_manage_fault+0x90>)
{
    1aca:	b570      	push	{r4, r5, r6, lr}
    1acc:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1ad4:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ad6:	0790      	lsls	r0, r2, #30
    1ad8:	d51a      	bpl.n	1b10 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1ada:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ade:	0612      	lsls	r2, r2, #24
    1ae0:	d516      	bpl.n	1b10 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1ae2:	b119      	cbz	r1, 1aec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1aea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1af2:	06d6      	lsls	r6, r2, #27
    1af4:	d40f      	bmi.n	1b16 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1af8:	0799      	lsls	r1, r3, #30
    1afa:	d40c      	bmi.n	1b16 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1afc:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1afe:	4a16      	ldr	r2, [pc, #88]	; (1b58 <mem_manage_fault+0x90>)
    1b00:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1b02:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b06:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1b08:	2300      	movs	r3, #0
    1b0a:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1b0c:	4620      	mov	r0, r4
    1b0e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1b10:	f06f 0015 	mvn.w	r0, #21
    1b14:	e7ea      	b.n	1aec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1b16:	4e10      	ldr	r6, [pc, #64]	; (1b58 <mem_manage_fault+0x90>)
    1b18:	6873      	ldr	r3, [r6, #4]
    1b1a:	051a      	lsls	r2, r3, #20
    1b1c:	d5ee      	bpl.n	1afc <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1b1e:	4621      	mov	r1, r4
    1b20:	f7ff ff60 	bl	19e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1b24:	4604      	mov	r4, r0
    1b26:	b118      	cbz	r0, 1b30 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1b28:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1b2c:	2402      	movs	r4, #2
    1b2e:	e7e6      	b.n	1afe <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1b30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b32:	06db      	lsls	r3, r3, #27
    1b34:	d5e2      	bpl.n	1afc <mem_manage_fault+0x34>
    1b36:	4a09      	ldr	r2, [pc, #36]	; (1b5c <mem_manage_fault+0x94>)
    1b38:	4909      	ldr	r1, [pc, #36]	; (1b60 <mem_manage_fault+0x98>)
    1b3a:	480a      	ldr	r0, [pc, #40]	; (1b64 <mem_manage_fault+0x9c>)
    1b3c:	f240 1349 	movw	r3, #329	; 0x149
    1b40:	f006 fa27 	bl	7f92 <printk>
    1b44:	4808      	ldr	r0, [pc, #32]	; (1b68 <mem_manage_fault+0xa0>)
    1b46:	f006 fa24 	bl	7f92 <printk>
    1b4a:	4804      	ldr	r0, [pc, #16]	; (1b5c <mem_manage_fault+0x94>)
    1b4c:	f240 1149 	movw	r1, #329	; 0x149
    1b50:	f006 f948 	bl	7de4 <assert_post_action>
    1b54:	e7d3      	b.n	1afe <mem_manage_fault+0x36>
    1b56:	bf00      	nop
    1b58:	e000ed00 	.word	0xe000ed00
    1b5c:	00009073 	.word	0x00009073
    1b60:	000090ad 	.word	0x000090ad
    1b64:	00008e27 	.word	0x00008e27
    1b68:	000090f7 	.word	0x000090f7

00001b6c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1b6c:	4b0d      	ldr	r3, [pc, #52]	; (1ba4 <bus_fault.isra.0+0x38>)
    1b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b74:	0592      	lsls	r2, r2, #22
    1b76:	d508      	bpl.n	1b8a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b7c:	0412      	lsls	r2, r2, #16
    1b7e:	d504      	bpl.n	1b8a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1b80:	b118      	cbz	r0, 1b8a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1b88:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1b8a:	4b06      	ldr	r3, [pc, #24]	; (1ba4 <bus_fault.isra.0+0x38>)
    1b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b90:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1b92:	bf58      	it	pl
    1b94:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1b98:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b9a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1b9e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1ba0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1ba2:	4770      	bx	lr
    1ba4:	e000ed00 	.word	0xe000ed00

00001ba8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1ba8:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <usage_fault.isra.0+0x20>)
    1baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bb8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1bbc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1bc0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1bc2:	2000      	movs	r0, #0
    1bc4:	4770      	bx	lr
    1bc6:	bf00      	nop
    1bc8:	e000ed00 	.word	0xe000ed00

00001bcc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1bcc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bce:	4b54      	ldr	r3, [pc, #336]	; (1d20 <z_arm_fault+0x154>)
    1bd0:	685c      	ldr	r4, [r3, #4]
{
    1bd2:	b08a      	sub	sp, #40	; 0x28
    1bd4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bd6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1bda:	2600      	movs	r6, #0
    1bdc:	f386 8811 	msr	BASEPRI, r6
    1be0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1be4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1be8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1bec:	d108      	bne.n	1c00 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1bee:	f002 030c 	and.w	r3, r2, #12
    1bf2:	2b08      	cmp	r3, #8
    1bf4:	d004      	beq.n	1c00 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1bf6:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1bf8:	bf5c      	itt	pl
    1bfa:	4605      	movpl	r5, r0
			*nested_exc = true;
    1bfc:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1bfe:	b97d      	cbnz	r5, 1c20 <z_arm_fault+0x54>
    1c00:	4a48      	ldr	r2, [pc, #288]	; (1d24 <z_arm_fault+0x158>)
    1c02:	4949      	ldr	r1, [pc, #292]	; (1d28 <z_arm_fault+0x15c>)
    1c04:	4849      	ldr	r0, [pc, #292]	; (1d2c <z_arm_fault+0x160>)
    1c06:	f240 33f2 	movw	r3, #1010	; 0x3f2
    1c0a:	f006 f9c2 	bl	7f92 <printk>
    1c0e:	4848      	ldr	r0, [pc, #288]	; (1d30 <z_arm_fault+0x164>)
    1c10:	f006 f9bf 	bl	7f92 <printk>
    1c14:	4843      	ldr	r0, [pc, #268]	; (1d24 <z_arm_fault+0x158>)
    1c16:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1c1a:	f006 f8e3 	bl	7de4 <assert_post_action>
    1c1e:	2500      	movs	r5, #0
	*recoverable = false;
    1c20:	2300      	movs	r3, #0
    1c22:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1c26:	1ee3      	subs	r3, r4, #3
    1c28:	2b03      	cmp	r3, #3
    1c2a:	d872      	bhi.n	1d12 <z_arm_fault+0x146>
    1c2c:	e8df f003 	tbb	[pc, r3]
    1c30:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c34:	4b3a      	ldr	r3, [pc, #232]	; (1d20 <z_arm_fault+0x154>)
    1c36:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c38:	f014 0402 	ands.w	r4, r4, #2
    1c3c:	d169      	bne.n	1d12 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c40:	2a00      	cmp	r2, #0
    1c42:	db18      	blt.n	1c76 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c46:	005b      	lsls	r3, r3, #1
    1c48:	d54e      	bpl.n	1ce8 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    1c4a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1c4c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1c50:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1c54:	429a      	cmp	r2, r3
    1c56:	d00d      	beq.n	1c74 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1c58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1c5c:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	b30b      	cbz	r3, 1ca8 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1c64:	f10d 0207 	add.w	r2, sp, #7
    1c68:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1c6a:	4628      	mov	r0, r5
    1c6c:	f7ff ff2c 	bl	1ac8 <mem_manage_fault>
		reason = usage_fault(esf);
    1c70:	4604      	mov	r4, r0
		break;
    1c72:	e000      	b.n	1c76 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    1c74:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c7a:	b99b      	cbnz	r3, 1ca4 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1c7c:	2220      	movs	r2, #32
    1c7e:	4629      	mov	r1, r5
    1c80:	a802      	add	r0, sp, #8
    1c82:	f006 f9d2 	bl	802a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c88:	2e00      	cmp	r6, #0
    1c8a:	d044      	beq.n	1d16 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c90:	b922      	cbnz	r2, 1c9c <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c92:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c96:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c9a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c9c:	a902      	add	r1, sp, #8
    1c9e:	4620      	mov	r0, r4
    1ca0:	f006 f993 	bl	7fca <z_arm_fatal_error>
}
    1ca4:	b00a      	add	sp, #40	; 0x28
    1ca6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1ca8:	4b22      	ldr	r3, [pc, #136]	; (1d34 <z_arm_fault+0x168>)
    1caa:	781b      	ldrb	r3, [r3, #0]
    1cac:	b12b      	cbz	r3, 1cba <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1cae:	f10d 0107 	add.w	r1, sp, #7
    1cb2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1cb4:	f7ff ff5a 	bl	1b6c <bus_fault.isra.0>
    1cb8:	e7da      	b.n	1c70 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    1cba:	4b1f      	ldr	r3, [pc, #124]	; (1d38 <z_arm_fault+0x16c>)
    1cbc:	881b      	ldrh	r3, [r3, #0]
    1cbe:	b29b      	uxth	r3, r3
    1cc0:	b113      	cbz	r3, 1cc8 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    1cc2:	f7ff ff71 	bl	1ba8 <usage_fault.isra.0>
    1cc6:	e7d3      	b.n	1c70 <z_arm_fault+0xa4>
			__ASSERT(0,
    1cc8:	491c      	ldr	r1, [pc, #112]	; (1d3c <z_arm_fault+0x170>)
    1cca:	4a16      	ldr	r2, [pc, #88]	; (1d24 <z_arm_fault+0x158>)
    1ccc:	4817      	ldr	r0, [pc, #92]	; (1d2c <z_arm_fault+0x160>)
    1cce:	f240 23c3 	movw	r3, #707	; 0x2c3
    1cd2:	f006 f95e 	bl	7f92 <printk>
    1cd6:	481a      	ldr	r0, [pc, #104]	; (1d40 <z_arm_fault+0x174>)
    1cd8:	f006 f95b 	bl	7f92 <printk>
    1cdc:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1ce0:	4810      	ldr	r0, [pc, #64]	; (1d24 <z_arm_fault+0x158>)
    1ce2:	f006 f87f 	bl	7de4 <assert_post_action>
    1ce6:	e7c6      	b.n	1c76 <z_arm_fault+0xaa>
    1ce8:	4914      	ldr	r1, [pc, #80]	; (1d3c <z_arm_fault+0x170>)
    1cea:	4a0e      	ldr	r2, [pc, #56]	; (1d24 <z_arm_fault+0x158>)
    1cec:	480f      	ldr	r0, [pc, #60]	; (1d2c <z_arm_fault+0x160>)
    1cee:	f240 23c7 	movw	r3, #711	; 0x2c7
    1cf2:	f006 f94e 	bl	7f92 <printk>
    1cf6:	4813      	ldr	r0, [pc, #76]	; (1d44 <z_arm_fault+0x178>)
    1cf8:	f006 f94b 	bl	7f92 <printk>
    1cfc:	f240 21c7 	movw	r1, #711	; 0x2c7
    1d00:	e7ee      	b.n	1ce0 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d02:	f10d 0207 	add.w	r2, sp, #7
    1d06:	2100      	movs	r1, #0
    1d08:	e7af      	b.n	1c6a <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    1d0a:	f10d 0107 	add.w	r1, sp, #7
    1d0e:	2000      	movs	r0, #0
    1d10:	e7d0      	b.n	1cb4 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d12:	2400      	movs	r4, #0
    1d14:	e7af      	b.n	1c76 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d16:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1d1a:	f023 0301 	bic.w	r3, r3, #1
    1d1e:	e7bc      	b.n	1c9a <z_arm_fault+0xce>
    1d20:	e000ed00 	.word	0xe000ed00
    1d24:	00009073 	.word	0x00009073
    1d28:	0000911a 	.word	0x0000911a
    1d2c:	00008e27 	.word	0x00008e27
    1d30:	0000912d 	.word	0x0000912d
    1d34:	e000ed29 	.word	0xe000ed29
    1d38:	e000ed2a 	.word	0xe000ed2a
    1d3c:	00009606 	.word	0x00009606
    1d40:	0000916b 	.word	0x0000916b
    1d44:	0000918f 	.word	0x0000918f

00001d48 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1d48:	4a02      	ldr	r2, [pc, #8]	; (1d54 <z_arm_fault_init+0xc>)
    1d4a:	6953      	ldr	r3, [r2, #20]
    1d4c:	f043 0310 	orr.w	r3, r3, #16
    1d50:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1d52:	4770      	bx	lr
    1d54:	e000ed00 	.word	0xe000ed00

00001d58 <z_arm_interrupt_init>:
    1d58:	4804      	ldr	r0, [pc, #16]	; (1d6c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1d5a:	2300      	movs	r3, #0
    1d5c:	2120      	movs	r1, #32
    1d5e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1d60:	3301      	adds	r3, #1
    1d62:	2b30      	cmp	r3, #48	; 0x30
    1d64:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1d68:	d1f9      	bne.n	1d5e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1d6a:	4770      	bx	lr
    1d6c:	e000e100 	.word	0xe000e100

00001d70 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1d70:	4a06      	ldr	r2, [pc, #24]	; (1d8c <z_arm_clear_arm_mpu_config+0x1c>)
    1d72:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1d74:	2300      	movs	r3, #0
	int num_regions =
    1d76:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1d7a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1d7c:	428b      	cmp	r3, r1
    1d7e:	d100      	bne.n	1d82 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1d80:	4770      	bx	lr
  MPU->RNR = rnr;
    1d82:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1d84:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1d86:	3301      	adds	r3, #1
    1d88:	e7f8      	b.n	1d7c <z_arm_clear_arm_mpu_config+0xc>
    1d8a:	bf00      	nop
    1d8c:	e000ed90 	.word	0xe000ed90

00001d90 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1d90:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1d92:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1d94:	2300      	movs	r3, #0
    1d96:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1d9a:	f7ff ffe9 	bl	1d70 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1d9e:	4b14      	ldr	r3, [pc, #80]	; (1df0 <z_arm_init_arch_hw_at_boot+0x60>)
    1da0:	f04f 32ff 	mov.w	r2, #4294967295
    1da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1db8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1dbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1dc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1dc4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1dc8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1dcc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1dd0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1dd4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1dd8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ddc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1de0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1de4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1de6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dea:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1dee:	bd08      	pop	{r3, pc}
    1df0:	e000e100 	.word	0xe000e100

00001df4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1df4:	4b06      	ldr	r3, [pc, #24]	; (1e10 <z_impl_k_thread_abort+0x1c>)
    1df6:	689b      	ldr	r3, [r3, #8]
    1df8:	4283      	cmp	r3, r0
    1dfa:	d107      	bne.n	1e0c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1dfc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1e00:	b123      	cbz	r3, 1e0c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e02:	4a04      	ldr	r2, [pc, #16]	; (1e14 <z_impl_k_thread_abort+0x20>)
    1e04:	6853      	ldr	r3, [r2, #4]
    1e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e0a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1e0c:	f004 bbee 	b.w	65ec <z_thread_abort>
    1e10:	20000a2c 	.word	0x20000a2c
    1e14:	e000ed00 	.word	0xe000ed00

00001e18 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1e18:	4b02      	ldr	r3, [pc, #8]	; (1e24 <z_arm_configure_static_mpu_regions+0xc>)
    1e1a:	4a03      	ldr	r2, [pc, #12]	; (1e28 <z_arm_configure_static_mpu_regions+0x10>)
    1e1c:	4803      	ldr	r0, [pc, #12]	; (1e2c <z_arm_configure_static_mpu_regions+0x14>)
    1e1e:	2101      	movs	r1, #1
    1e20:	f000 b868 	b.w	1ef4 <arm_core_mpu_configure_static_mpu_regions>
    1e24:	20040000 	.word	0x20040000
    1e28:	20000000 	.word	0x20000000
    1e2c:	00008a04 	.word	0x00008a04

00001e30 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1e30:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1e32:	4b05      	ldr	r3, [pc, #20]	; (1e48 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1e34:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1e36:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1e38:	4a04      	ldr	r2, [pc, #16]	; (1e4c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1e3a:	2120      	movs	r1, #32
    1e3c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1e40:	4618      	mov	r0, r3
    1e42:	2101      	movs	r1, #1
    1e44:	f000 b87e 	b.w	1f44 <arm_core_mpu_configure_dynamic_mpu_regions>
    1e48:	20000964 	.word	0x20000964
    1e4c:	150b0000 	.word	0x150b0000

00001e50 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1e50:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1e52:	4f1e      	ldr	r7, [pc, #120]	; (1ecc <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1e54:	2600      	movs	r6, #0
    1e56:	428e      	cmp	r6, r1
    1e58:	db01      	blt.n	1e5e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1e5a:	4610      	mov	r0, r2
    1e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1e5e:	6844      	ldr	r4, [r0, #4]
    1e60:	b384      	cbz	r4, 1ec4 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    1e62:	b153      	cbz	r3, 1e7a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1e64:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1e68:	ea14 0f0c 	tst.w	r4, ip
    1e6c:	d118      	bne.n	1ea0 <mpu_configure_regions+0x50>
		&&
    1e6e:	2c1f      	cmp	r4, #31
    1e70:	d916      	bls.n	1ea0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1e72:	6805      	ldr	r5, [r0, #0]
		&&
    1e74:	ea1c 0f05 	tst.w	ip, r5
    1e78:	d112      	bne.n	1ea0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1e7a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1e7c:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1e7e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1e82:	b2d2      	uxtb	r2, r2
    1e84:	d90f      	bls.n	1ea6 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1e86:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1e8a:	d80e      	bhi.n	1eaa <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1e8c:	3c01      	subs	r4, #1
    1e8e:	fab4 f484 	clz	r4, r4
    1e92:	f1c4 041f 	rsb	r4, r4, #31
    1e96:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1e98:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1e9a:	ea4c 0404 	orr.w	r4, ip, r4
    1e9e:	d906      	bls.n	1eae <mpu_configure_regions+0x5e>
			return -EINVAL;
    1ea0:	f06f 0215 	mvn.w	r2, #21
    1ea4:	e7d9      	b.n	1e5a <mpu_configure_regions+0xa>
		return REGION_32B;
    1ea6:	2408      	movs	r4, #8
    1ea8:	e7f6      	b.n	1e98 <mpu_configure_regions+0x48>
		return REGION_4G;
    1eaa:	243e      	movs	r4, #62	; 0x3e
    1eac:	e7f4      	b.n	1e98 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1eae:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1eb2:	4315      	orrs	r5, r2
    1eb4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1eb8:	f044 0401 	orr.w	r4, r4, #1
    1ebc:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ebe:	60fd      	str	r5, [r7, #12]
		reg_index++;
    1ec0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ec2:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    1ec4:	3601      	adds	r6, #1
    1ec6:	300c      	adds	r0, #12
    1ec8:	e7c5      	b.n	1e56 <mpu_configure_regions+0x6>
    1eca:	bf00      	nop
    1ecc:	e000ed90 	.word	0xe000ed90

00001ed0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1ed0:	4b03      	ldr	r3, [pc, #12]	; (1ee0 <arm_core_mpu_enable+0x10>)
    1ed2:	2205      	movs	r2, #5
    1ed4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1eda:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1ede:	4770      	bx	lr
    1ee0:	e000ed90 	.word	0xe000ed90

00001ee4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1ee4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1ee8:	4b01      	ldr	r3, [pc, #4]	; (1ef0 <arm_core_mpu_disable+0xc>)
    1eea:	2200      	movs	r2, #0
    1eec:	605a      	str	r2, [r3, #4]
}
    1eee:	4770      	bx	lr
    1ef0:	e000ed90 	.word	0xe000ed90

00001ef4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1ef4:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1ef6:	4d0e      	ldr	r5, [pc, #56]	; (1f30 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ef8:	2301      	movs	r3, #1
    1efa:	782a      	ldrb	r2, [r5, #0]
    1efc:	460c      	mov	r4, r1
    1efe:	f7ff ffa7 	bl	1e50 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1f02:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1f04:	3016      	adds	r0, #22
    1f06:	d111      	bne.n	1f2c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1f08:	f240 1311 	movw	r3, #273	; 0x111
    1f0c:	4a09      	ldr	r2, [pc, #36]	; (1f34 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1f0e:	490a      	ldr	r1, [pc, #40]	; (1f38 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1f10:	480a      	ldr	r0, [pc, #40]	; (1f3c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    1f12:	f006 f83e 	bl	7f92 <printk>
    1f16:	4621      	mov	r1, r4
    1f18:	4809      	ldr	r0, [pc, #36]	; (1f40 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    1f1a:	f006 f83a 	bl	7f92 <printk>
			regions_num);
	}
}
    1f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1f22:	4804      	ldr	r0, [pc, #16]	; (1f34 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1f24:	f240 1111 	movw	r1, #273	; 0x111
    1f28:	f005 bf5c 	b.w	7de4 <assert_post_action>
}
    1f2c:	bd38      	pop	{r3, r4, r5, pc}
    1f2e:	bf00      	nop
    1f30:	20000aa2 	.word	0x20000aa2
    1f34:	000091bf 	.word	0x000091bf
    1f38:	00009606 	.word	0x00009606
    1f3c:	00008e27 	.word	0x00008e27
    1f40:	000091f6 	.word	0x000091f6

00001f44 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1f44:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1f46:	4a12      	ldr	r2, [pc, #72]	; (1f90 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    1f48:	2300      	movs	r3, #0
    1f4a:	7812      	ldrb	r2, [r2, #0]
    1f4c:	460c      	mov	r4, r1
    1f4e:	f7ff ff7f 	bl	1e50 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1f52:	f110 0f16 	cmn.w	r0, #22
    1f56:	d008      	beq.n	1f6a <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    1f58:	4b0e      	ldr	r3, [pc, #56]	; (1f94 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    1f5a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1f5c:	2807      	cmp	r0, #7
    1f5e:	dd00      	ble.n	1f62 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1f60:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    1f62:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1f64:	611a      	str	r2, [r3, #16]
    1f66:	3001      	adds	r0, #1
    1f68:	e7f8      	b.n	1f5c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1f6a:	4a0b      	ldr	r2, [pc, #44]	; (1f98 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1f6c:	490b      	ldr	r1, [pc, #44]	; (1f9c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    1f6e:	480c      	ldr	r0, [pc, #48]	; (1fa0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    1f70:	f44f 7398 	mov.w	r3, #304	; 0x130
    1f74:	f006 f80d 	bl	7f92 <printk>
    1f78:	4621      	mov	r1, r4
    1f7a:	480a      	ldr	r0, [pc, #40]	; (1fa4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    1f7c:	f006 f809 	bl	7f92 <printk>
}
    1f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1f84:	4804      	ldr	r0, [pc, #16]	; (1f98 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1f86:	f44f 7198 	mov.w	r1, #304	; 0x130
    1f8a:	f005 bf2b 	b.w	7de4 <assert_post_action>
    1f8e:	bf00      	nop
    1f90:	20000aa2 	.word	0x20000aa2
    1f94:	e000ed90 	.word	0xe000ed90
    1f98:	000091bf 	.word	0x000091bf
    1f9c:	00009606 	.word	0x00009606
    1fa0:	00008e27 	.word	0x00008e27
    1fa4:	00009222 	.word	0x00009222

00001fa8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1fa8:	4925      	ldr	r1, [pc, #148]	; (2040 <z_arm_mpu_init+0x98>)
{
    1faa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1fac:	680c      	ldr	r4, [r1, #0]
    1fae:	2c08      	cmp	r4, #8
    1fb0:	d913      	bls.n	1fda <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    1fb2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    1fb6:	4a23      	ldr	r2, [pc, #140]	; (2044 <z_arm_mpu_init+0x9c>)
    1fb8:	4923      	ldr	r1, [pc, #140]	; (2048 <z_arm_mpu_init+0xa0>)
    1fba:	4824      	ldr	r0, [pc, #144]	; (204c <z_arm_mpu_init+0xa4>)
    1fbc:	f005 ffe9 	bl	7f92 <printk>
    1fc0:	4823      	ldr	r0, [pc, #140]	; (2050 <z_arm_mpu_init+0xa8>)
    1fc2:	2208      	movs	r2, #8
    1fc4:	4621      	mov	r1, r4
    1fc6:	f005 ffe4 	bl	7f92 <printk>
    1fca:	481e      	ldr	r0, [pc, #120]	; (2044 <z_arm_mpu_init+0x9c>)
    1fcc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    1fd0:	f005 ff08 	bl	7de4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    1fd4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    1fd8:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    1fda:	f7ff ff83 	bl	1ee4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1fde:	6848      	ldr	r0, [r1, #4]
    1fe0:	491c      	ldr	r1, [pc, #112]	; (2054 <z_arm_mpu_init+0xac>)
    1fe2:	2200      	movs	r2, #0
    1fe4:	4294      	cmp	r4, r2
    1fe6:	f100 000c 	add.w	r0, r0, #12
    1fea:	d119      	bne.n	2020 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    1fec:	4b1a      	ldr	r3, [pc, #104]	; (2058 <z_arm_mpu_init+0xb0>)
    1fee:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1ff0:	f7ff ff6e 	bl	1ed0 <arm_core_mpu_enable>
	__ASSERT(
    1ff4:	680b      	ldr	r3, [r1, #0]
    1ff6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1ffa:	2b08      	cmp	r3, #8
    1ffc:	d00e      	beq.n	201c <z_arm_mpu_init+0x74>
    1ffe:	4917      	ldr	r1, [pc, #92]	; (205c <z_arm_mpu_init+0xb4>)
    2000:	4a10      	ldr	r2, [pc, #64]	; (2044 <z_arm_mpu_init+0x9c>)
    2002:	4812      	ldr	r0, [pc, #72]	; (204c <z_arm_mpu_init+0xa4>)
    2004:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2008:	f005 ffc3 	bl	7f92 <printk>
    200c:	4814      	ldr	r0, [pc, #80]	; (2060 <z_arm_mpu_init+0xb8>)
    200e:	f005 ffc0 	bl	7f92 <printk>
    2012:	480c      	ldr	r0, [pc, #48]	; (2044 <z_arm_mpu_init+0x9c>)
    2014:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2018:	f005 fee4 	bl	7de4 <assert_post_action>
	return 0;
    201c:	2000      	movs	r0, #0
    201e:	e7db      	b.n	1fd8 <z_arm_mpu_init+0x30>
    2020:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2022:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2026:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    202a:	4313      	orrs	r3, r2
    202c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2030:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2032:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2036:	f043 0301 	orr.w	r3, r3, #1
    203a:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    203c:	3201      	adds	r2, #1
    203e:	e7d1      	b.n	1fe4 <z_arm_mpu_init+0x3c>
    2040:	00008a10 	.word	0x00008a10
    2044:	000091bf 	.word	0x000091bf
    2048:	00009606 	.word	0x00009606
    204c:	00008e27 	.word	0x00008e27
    2050:	0000924f 	.word	0x0000924f
    2054:	e000ed90 	.word	0xe000ed90
    2058:	20000aa2 	.word	0x20000aa2
    205c:	00009283 	.word	0x00009283
    2060:	000092d3 	.word	0x000092d3

00002064 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2064:	4b01      	ldr	r3, [pc, #4]	; (206c <__stdout_hook_install+0x8>)
    2066:	6018      	str	r0, [r3, #0]
}
    2068:	4770      	bx	lr
    206a:	bf00      	nop
    206c:	200000d4 	.word	0x200000d4

00002070 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2070:	f04f 0320 	mov.w	r3, #32
    2074:	f3ef 8111 	mrs	r1, BASEPRI
    2078:	f383 8812 	msr	BASEPRI_MAX, r3
    207c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2080:	4a0f      	ldr	r2, [pc, #60]	; (20c0 <nordicsemi_nrf52_init+0x50>)
    2082:	2301      	movs	r3, #1
    2084:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    208c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2090:	4a0c      	ldr	r2, [pc, #48]	; (20c4 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2092:	6812      	ldr	r2, [r2, #0]
    2094:	2a08      	cmp	r2, #8
    2096:	d108      	bne.n	20aa <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2098:	4a0b      	ldr	r2, [pc, #44]	; (20c8 <nordicsemi_nrf52_init+0x58>)
    209a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    209c:	2a05      	cmp	r2, #5
    209e:	d804      	bhi.n	20aa <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    20a0:	480a      	ldr	r0, [pc, #40]	; (20cc <nordicsemi_nrf52_init+0x5c>)
    20a2:	5c82      	ldrb	r2, [r0, r2]
    20a4:	b10a      	cbz	r2, 20aa <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    20a6:	4a0a      	ldr	r2, [pc, #40]	; (20d0 <nordicsemi_nrf52_init+0x60>)
    20a8:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    20aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20ae:	2201      	movs	r2, #1
    20b0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    20b4:	f381 8811 	msr	BASEPRI, r1
    20b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    20bc:	2000      	movs	r0, #0
    20be:	4770      	bx	lr
    20c0:	4001e000 	.word	0x4001e000
    20c4:	10000130 	.word	0x10000130
    20c8:	10000134 	.word	0x10000134
    20cc:	00009303 	.word	0x00009303
    20d0:	40000638 	.word	0x40000638

000020d4 <sys_arch_reboot>:
    *p_gpregret = val;
    20d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20d8:	b2c0      	uxtb	r0, r0
    20da:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    20de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    20e2:	4905      	ldr	r1, [pc, #20]	; (20f8 <sys_arch_reboot+0x24>)
    20e4:	4b05      	ldr	r3, [pc, #20]	; (20fc <sys_arch_reboot+0x28>)
    20e6:	68ca      	ldr	r2, [r1, #12]
    20e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    20ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    20ee:	60cb      	str	r3, [r1, #12]
    20f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    20f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    20f6:	e7fd      	b.n	20f4 <sys_arch_reboot+0x20>
    20f8:	e000ed00 	.word	0xe000ed00
    20fc:	05fa0004 	.word	0x05fa0004

00002100 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2100:	b120      	cbz	r0, 210c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2102:	4b03      	ldr	r3, [pc, #12]	; (2110 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2104:	0180      	lsls	r0, r0, #6
    2106:	f043 0301 	orr.w	r3, r3, #1
    210a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    210c:	4770      	bx	lr
    210e:	bf00      	nop
    2110:	000089d0 	.word	0x000089d0

00002114 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2114:	4a05      	ldr	r2, [pc, #20]	; (212c <adc_context_start_sampling.isra.0+0x18>)
    2116:	2301      	movs	r3, #1
    2118:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    211c:	b108      	cbz	r0, 2122 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    211e:	60d3      	str	r3, [r2, #12]
}
    2120:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2122:	6013      	str	r3, [r2, #0]
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <adc_context_start_sampling.isra.0+0x1c>)
    2126:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2128:	4770      	bx	lr
    212a:	bf00      	nop
    212c:	40007000 	.word	0x40007000
    2130:	40007004 	.word	0x40007004

00002134 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2134:	7908      	ldrb	r0, [r1, #4]
{
    2136:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2138:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    213c:	2c07      	cmp	r4, #7
    213e:	d81f      	bhi.n	2180 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    2140:	780b      	ldrb	r3, [r1, #0]
    2142:	2b09      	cmp	r3, #9
    2144:	d81c      	bhi.n	2180 <adc_nrfx_channel_setup+0x4c>
    2146:	e8df f003 	tbb	[pc, r3]
    214a:	0606      	.short	0x0606
    214c:	1b060606 	.word	0x1b060606
    2150:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2154:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2156:	784a      	ldrb	r2, [r1, #1]
    2158:	2a03      	cmp	r2, #3
    215a:	d018      	beq.n	218e <adc_nrfx_channel_setup+0x5a>
    215c:	2a04      	cmp	r2, #4
    215e:	d10f      	bne.n	2180 <adc_nrfx_channel_setup+0x4c>
    2160:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    2162:	884a      	ldrh	r2, [r1, #2]
    2164:	f244 060a 	movw	r6, #16394	; 0x400a
    2168:	42b2      	cmp	r2, r6
    216a:	d044      	beq.n	21f6 <adc_nrfx_channel_setup+0xc2>
    216c:	d811      	bhi.n	2192 <adc_nrfx_channel_setup+0x5e>
    216e:	f244 0603 	movw	r6, #16387	; 0x4003
    2172:	42b2      	cmp	r2, r6
    2174:	d03b      	beq.n	21ee <adc_nrfx_channel_setup+0xba>
    2176:	f244 0605 	movw	r6, #16389	; 0x4005
    217a:	42b2      	cmp	r2, r6
    217c:	d039      	beq.n	21f2 <adc_nrfx_channel_setup+0xbe>
    217e:	b3d2      	cbz	r2, 21f6 <adc_nrfx_channel_setup+0xc2>
    2180:	f06f 0015 	mvn.w	r0, #21
    2184:	e032      	b.n	21ec <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2186:	2306      	movs	r3, #6
		break;
    2188:	e7e5      	b.n	2156 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    218a:	2307      	movs	r3, #7
		break;
    218c:	e7e3      	b.n	2156 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    218e:	2501      	movs	r5, #1
    2190:	e7e7      	b.n	2162 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    2192:	f244 0614 	movw	r6, #16404	; 0x4014
    2196:	42b2      	cmp	r2, r6
    2198:	d02f      	beq.n	21fa <adc_nrfx_channel_setup+0xc6>
    219a:	f244 0628 	movw	r6, #16424	; 0x4028
    219e:	42b2      	cmp	r2, r6
    21a0:	d02d      	beq.n	21fe <adc_nrfx_channel_setup+0xca>
    21a2:	f244 060f 	movw	r6, #16399	; 0x400f
    21a6:	42b2      	cmp	r2, r6
    21a8:	d1ea      	bne.n	2180 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    21aa:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    21ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    21b0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    21b2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    21b6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    21ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    21be:	0122      	lsls	r2, r4, #4
    21c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    21c4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    21c8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    21ca:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    21ce:	0123      	lsls	r3, r4, #4
    21d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    21d4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    21d8:	798a      	ldrb	r2, [r1, #6]
    21da:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    21de:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    21e2:	4b08      	ldr	r3, [pc, #32]	; (2204 <adc_nrfx_channel_setup+0xd0>)
    21e4:	441c      	add	r4, r3
    21e6:	794b      	ldrb	r3, [r1, #5]
    21e8:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    21ec:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    21ee:	2200      	movs	r2, #0
    21f0:	e7dc      	b.n	21ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    21f2:	2201      	movs	r2, #1
    21f4:	e7da      	b.n	21ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    21f6:	2202      	movs	r2, #2
    21f8:	e7d8      	b.n	21ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    21fa:	2204      	movs	r2, #4
    21fc:	e7d6      	b.n	21ac <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    21fe:	2205      	movs	r2, #5
    2200:	e7d4      	b.n	21ac <adc_nrfx_channel_setup+0x78>
    2202:	bf00      	nop
    2204:	20000000 	.word	0x20000000

00002208 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    2208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    220a:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    220c:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    220e:	b910      	cbnz	r0, 2216 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    2210:	f06f 0015 	mvn.w	r0, #21
    2214:	e09c      	b.n	2350 <start_read.isra.0+0x148>
	if (!selected_channels ||
    2216:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    221a:	d1f9      	bne.n	2210 <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    221c:	4c57      	ldr	r4, [pc, #348]	; (237c <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    221e:	4f58      	ldr	r7, [pc, #352]	; (2380 <start_read.isra.0+0x178>)
	active_channels = 0U;
    2220:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    2222:	fa20 f302 	lsr.w	r3, r0, r2
    2226:	f013 0301 	ands.w	r3, r3, #1
    222a:	d033      	beq.n	2294 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    222c:	18bb      	adds	r3, r7, r2
    222e:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    2232:	f1bc 0f00 	cmp.w	ip, #0
    2236:	d0eb      	beq.n	2210 <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2238:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    223c:	7c6e      	ldrb	r6, [r5, #17]
    223e:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    2242:	3e00      	subs	r6, #0
    2244:	bf18      	it	ne
    2246:	2601      	movne	r6, #1
    2248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    224c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    2250:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2254:	f102 0351 	add.w	r3, r2, #81	; 0x51
    2258:	011b      	lsls	r3, r3, #4
			++active_channels;
    225a:	3101      	adds	r1, #1
    225c:	f844 c003 	str.w	ip, [r4, r3]
    2260:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    2262:	3201      	adds	r2, #1
    2264:	2a08      	cmp	r2, #8
    2266:	d1dc      	bne.n	2222 <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    2268:	7c2b      	ldrb	r3, [r5, #16]
    226a:	3b08      	subs	r3, #8
    226c:	2b06      	cmp	r3, #6
    226e:	d8cf      	bhi.n	2210 <start_read.isra.0+0x8>
    2270:	a201      	add	r2, pc, #4	; (adr r2, 2278 <start_read.isra.0+0x70>)
    2272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2276:	bf00      	nop
    2278:	0000235d 	.word	0x0000235d
    227c:	00002211 	.word	0x00002211
    2280:	0000229f 	.word	0x0000229f
    2284:	00002211 	.word	0x00002211
    2288:	00002355 	.word	0x00002355
    228c:	00002211 	.word	0x00002211
    2290:	00002359 	.word	0x00002359
    2294:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2298:	0136      	lsls	r6, r6, #4
    229a:	51a3      	str	r3, [r4, r6]
}
    229c:	e7e1      	b.n	2262 <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    229e:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    22a0:	4b36      	ldr	r3, [pc, #216]	; (237c <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    22a2:	2901      	cmp	r1, #1
    22a4:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    22a8:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    22aa:	d959      	bls.n	2360 <start_read.isra.0+0x158>
    22ac:	2a00      	cmp	r2, #0
    22ae:	d1af      	bne.n	2210 <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    22b0:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    22b4:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    22b6:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    22b8:	b112      	cbz	r2, 22c0 <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    22ba:	8992      	ldrh	r2, [r2, #12]
    22bc:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    22c0:	68ea      	ldr	r2, [r5, #12]
    22c2:	429a      	cmp	r2, r3
    22c4:	d356      	bcc.n	2374 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    22c6:	4b2d      	ldr	r3, [pc, #180]	; (237c <start_read.isra.0+0x174>)
    22c8:	68aa      	ldr	r2, [r5, #8]
    22ca:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    22ce:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    22d0:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    22d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    22d6:	4c2a      	ldr	r4, [pc, #168]	; (2380 <start_read.isra.0+0x178>)
    22d8:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    22dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    22de:	683b      	ldr	r3, [r7, #0]
    22e0:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    22e2:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    22e4:	2600      	movs	r6, #0
    22e6:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    22e8:	2b00      	cmp	r3, #0
    22ea:	d03c      	beq.n	2366 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    22ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    22ee:	f104 0590 	add.w	r5, r4, #144	; 0x90
    22f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    22f6:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    22f8:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    22fc:	b398      	cbz	r0, 2366 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    22fe:	f3bf 8f5b 	dmb	ish
    2302:	e854 3f00 	ldrex	r3, [r4]
    2306:	e844 6200 	strex	r2, r6, [r4]
    230a:	2a00      	cmp	r2, #0
    230c:	d1f9      	bne.n	2302 <start_read.isra.0+0xfa>
    230e:	f3bf 8f5b 	dmb	ish
		} else {
			return (t * to_hz + off) / from_hz;
    2312:	481c      	ldr	r0, [pc, #112]	; (2384 <start_read.isra.0+0x17c>)
    2314:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    2318:	4a1b      	ldr	r2, [pc, #108]	; (2388 <start_read.isra.0+0x180>)
    231a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    231e:	2100      	movs	r1, #0
    2320:	2300      	movs	r3, #0
    2322:	fbe5 0106 	umlal	r0, r1, r5, r6
    2326:	f7fd feeb 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    232a:	2200      	movs	r2, #0
    232c:	e9cd 0100 	strd	r0, r1, [sp]
    2330:	2300      	movs	r3, #0
    2332:	f104 0008 	add.w	r0, r4, #8
    2336:	f005 f8a1 	bl	747c <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    233a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    233e:	b9bb      	cbnz	r3, 2370 <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    2340:	4812      	ldr	r0, [pc, #72]	; (238c <start_read.isra.0+0x184>)
    2342:	f04f 32ff 	mov.w	r2, #4294967295
    2346:	f04f 33ff 	mov.w	r3, #4294967295
    234a:	f004 fab1 	bl	68b0 <z_impl_k_sem_take>
	return ctx->status;
    234e:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    2350:	b003      	add	sp, #12
    2352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    2354:	2202      	movs	r2, #2
		break;
    2356:	e7a3      	b.n	22a0 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2358:	2203      	movs	r2, #3
		break;
    235a:	e7a1      	b.n	22a0 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    235c:	2200      	movs	r2, #0
    235e:	e79f      	b.n	22a0 <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    2360:	2a08      	cmp	r2, #8
    2362:	d9a5      	bls.n	22b0 <start_read.isra.0+0xa8>
    2364:	e754      	b.n	2210 <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    2366:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    236a:	f7ff fed3 	bl	2114 <adc_context_start_sampling.isra.0>
    236e:	e7e4      	b.n	233a <start_read.isra.0+0x132>
		return 0;
    2370:	2000      	movs	r0, #0
	return error;
    2372:	e7ed      	b.n	2350 <start_read.isra.0+0x148>
		return -ENOMEM;
    2374:	f06f 000b 	mvn.w	r0, #11
    2378:	e7ea      	b.n	2350 <start_read.isra.0+0x148>
    237a:	bf00      	nop
    237c:	40007000 	.word	0x40007000
    2380:	20000000 	.word	0x20000000
    2384:	000f423f 	.word	0x000f423f
    2388:	000f4240 	.word	0x000f4240
    238c:	20000058 	.word	0x20000058

00002390 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	460c      	mov	r4, r1
    2394:	4616      	mov	r6, r2
    2396:	4d0d      	ldr	r5, [pc, #52]	; (23cc <adc_nrfx_read_async+0x3c>)
    2398:	f04f 32ff 	mov.w	r2, #4294967295
    239c:	f04f 33ff 	mov.w	r3, #4294967295
    23a0:	f105 0040 	add.w	r0, r5, #64	; 0x40
    23a4:	f004 fa84 	bl	68b0 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    23a8:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    23aa:	4620      	mov	r0, r4
    23ac:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    23b0:	676e      	str	r6, [r5, #116]	; 0x74
    23b2:	f7ff ff29 	bl	2208 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    23b6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    23ba:	4604      	mov	r4, r0
    23bc:	b103      	cbz	r3, 23c0 <adc_nrfx_read_async+0x30>
    23be:	b110      	cbz	r0, 23c6 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    23c0:	4803      	ldr	r0, [pc, #12]	; (23d0 <adc_nrfx_read_async+0x40>)
    23c2:	f004 fa31 	bl	6828 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    23c6:	4620      	mov	r0, r4
    23c8:	bd70      	pop	{r4, r5, r6, pc}
    23ca:	bf00      	nop
    23cc:	20000000 	.word	0x20000000
    23d0:	20000040 	.word	0x20000040

000023d4 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23d4:	4b0d      	ldr	r3, [pc, #52]	; (240c <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    23d6:	b510      	push	{r4, lr}
    23d8:	2400      	movs	r4, #0
    23da:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    23dc:	681b      	ldr	r3, [r3, #0]
    23de:	4b0c      	ldr	r3, [pc, #48]	; (2410 <init_saadc+0x3c>)
    23e0:	601c      	str	r4, [r3, #0]
    23e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    23e4:	4b0b      	ldr	r3, [pc, #44]	; (2414 <init_saadc+0x40>)
    23e6:	2212      	movs	r2, #18
    23e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    23ec:	2007      	movs	r0, #7
    23ee:	f7ff fa55 	bl	189c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    23f2:	4622      	mov	r2, r4
    23f4:	2101      	movs	r1, #1
    23f6:	2007      	movs	r0, #7
    23f8:	f7ff fa6e 	bl	18d8 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    23fc:	4806      	ldr	r0, [pc, #24]	; (2418 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    23fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2400:	b913      	cbnz	r3, 2408 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    2402:	3040      	adds	r0, #64	; 0x40
    2404:	f004 fa10 	bl	6828 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    2408:	2000      	movs	r0, #0
    240a:	bd10      	pop	{r4, pc}
    240c:	40007104 	.word	0x40007104
    2410:	40007110 	.word	0x40007110
    2414:	40007000 	.word	0x40007000
    2418:	20000000 	.word	0x20000000

0000241c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    241c:	4b34      	ldr	r3, [pc, #208]	; (24f0 <saadc_irq_handler+0xd4>)
    241e:	681a      	ldr	r2, [r3, #0]
{
    2420:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    2422:	2a00      	cmp	r2, #0
    2424:	d055      	beq.n	24d2 <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2426:	2200      	movs	r2, #0
    2428:	601a      	str	r2, [r3, #0]
    242a:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    242c:	4c31      	ldr	r4, [pc, #196]	; (24f4 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    242e:	4b32      	ldr	r3, [pc, #200]	; (24f8 <saadc_irq_handler+0xdc>)
    2430:	2101      	movs	r1, #1
    2432:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2434:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    2438:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    243a:	b3db      	cbz	r3, 24b4 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    243c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    2440:	b143      	cbz	r3, 2454 <saadc_irq_handler+0x38>
			action = callback(dev,
    2442:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    2446:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    244a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    244c:	2801      	cmp	r0, #1
    244e:	d014      	beq.n	247a <saadc_irq_handler+0x5e>
    2450:	2802      	cmp	r0, #2
    2452:	d029      	beq.n	24a8 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    2454:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    2458:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    245c:	429a      	cmp	r2, r3
    245e:	d923      	bls.n	24a8 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    2460:	3301      	adds	r3, #1
    2462:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    2466:	4b25      	ldr	r3, [pc, #148]	; (24fc <saadc_irq_handler+0xe0>)
    2468:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    246c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    2470:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    2472:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2476:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    247a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    247e:	b92b      	cbnz	r3, 248c <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    2480:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    2484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2488:	f7ff be44 	b.w	2114 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    248c:	f3bf 8f5b 	dmb	ish
    2490:	e854 3f00 	ldrex	r3, [r4]
    2494:	1e5a      	subs	r2, r3, #1
    2496:	e844 2100 	strex	r1, r2, [r4]
    249a:	2900      	cmp	r1, #0
    249c:	d1f8      	bne.n	2490 <saadc_irq_handler+0x74>
    249e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    24a2:	2b01      	cmp	r3, #1
    24a4:	dcec      	bgt.n	2480 <saadc_irq_handler+0x64>
    24a6:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    24a8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    24ac:	b113      	cbz	r3, 24b4 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    24ae:	4814      	ldr	r0, [pc, #80]	; (2500 <saadc_irq_handler+0xe4>)
    24b0:	f006 f8fb 	bl	86aa <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    24b4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    24b8:	b14b      	cbz	r3, 24ce <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    24ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
    24bc:	b110      	cbz	r0, 24c4 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    24be:	2100      	movs	r1, #0
    24c0:	f002 ff28 	bl	5314 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    24c4:	480f      	ldr	r0, [pc, #60]	; (2504 <saadc_irq_handler+0xe8>)
    24c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    24ca:	f004 b9ad 	b.w	6828 <z_impl_k_sem_give>
    24ce:	480e      	ldr	r0, [pc, #56]	; (2508 <saadc_irq_handler+0xec>)
    24d0:	e7f9      	b.n	24c6 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    24d2:	4b0e      	ldr	r3, [pc, #56]	; (250c <saadc_irq_handler+0xf0>)
    24d4:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    24d6:	2900      	cmp	r1, #0
    24d8:	d0e5      	beq.n	24a6 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24da:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24dc:	4a06      	ldr	r2, [pc, #24]	; (24f8 <saadc_irq_handler+0xdc>)
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	2301      	movs	r3, #1
    24e2:	6013      	str	r3, [r2, #0]
    24e4:	f842 3c08 	str.w	r3, [r2, #-8]
    24e8:	f842 3c04 	str.w	r3, [r2, #-4]
}
    24ec:	e7db      	b.n	24a6 <saadc_irq_handler+0x8a>
    24ee:	bf00      	nop
    24f0:	40007104 	.word	0x40007104
    24f4:	20000000 	.word	0x20000000
    24f8:	40007008 	.word	0x40007008
    24fc:	40007000 	.word	0x40007000
    2500:	20000008 	.word	0x20000008
    2504:	20000040 	.word	0x20000040
    2508:	20000058 	.word	0x20000058
    250c:	40007110 	.word	0x40007110

00002510 <adc_nrfx_read>:
{
    2510:	b538      	push	{r3, r4, r5, lr}
    2512:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    2514:	4d0c      	ldr	r5, [pc, #48]	; (2548 <adc_nrfx_read+0x38>)
    2516:	f04f 32ff 	mov.w	r2, #4294967295
    251a:	f04f 33ff 	mov.w	r3, #4294967295
    251e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    2522:	f004 f9c5 	bl	68b0 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    2526:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    2528:	4620      	mov	r0, r4
    252a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    252e:	676b      	str	r3, [r5, #116]	; 0x74
    2530:	f7ff fe6a 	bl	2208 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    2534:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2538:	4604      	mov	r4, r0
    253a:	b103      	cbz	r3, 253e <adc_nrfx_read+0x2e>
    253c:	b110      	cbz	r0, 2544 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    253e:	4803      	ldr	r0, [pc, #12]	; (254c <adc_nrfx_read+0x3c>)
    2540:	f004 f972 	bl	6828 <z_impl_k_sem_give>
}
    2544:	4620      	mov	r0, r4
    2546:	bd38      	pop	{r3, r4, r5, pc}
    2548:	20000000 	.word	0x20000000
    254c:	20000040 	.word	0x20000040

00002550 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2554:	4c10      	ldr	r4, [pc, #64]	; (2598 <onoff_start+0x48>)
    2556:	1b07      	subs	r7, r0, r4
    2558:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    255c:	f04f 080c 	mov.w	r8, #12
    2560:	fb08 f807 	mul.w	r8, r8, r7
{
    2564:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2566:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    256a:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    256c:	4420      	add	r0, r4
    256e:	2140      	movs	r1, #64	; 0x40
    2570:	f005 fda4 	bl	80bc <set_starting_state>
	if (err < 0) {
    2574:	1e01      	subs	r1, r0, #0
    2576:	db09      	blt.n	258c <onoff_start+0x3c>
	subdata->cb = cb;
    2578:	4b08      	ldr	r3, [pc, #32]	; (259c <onoff_start+0x4c>)
    257a:	4444      	add	r4, r8
	subdata->user_data = user_data;
    257c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2580:	4b07      	ldr	r3, [pc, #28]	; (25a0 <onoff_start+0x50>)
    2582:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    258a:	4718      	bx	r3
		notify(mgr, err);
    258c:	4630      	mov	r0, r6
    258e:	462b      	mov	r3, r5
}
    2590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2594:	4718      	bx	r3
    2596:	bf00      	nop
    2598:	20000980 	.word	0x20000980
    259c:	0000811f 	.word	0x0000811f
    25a0:	00008a58 	.word	0x00008a58

000025a4 <get_status>:
{
    25a4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25a6:	b2cc      	uxtb	r4, r1
    25a8:	2c01      	cmp	r4, #1
{
    25aa:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25ac:	d909      	bls.n	25c2 <get_status+0x1e>
    25ae:	4909      	ldr	r1, [pc, #36]	; (25d4 <get_status+0x30>)
    25b0:	4809      	ldr	r0, [pc, #36]	; (25d8 <get_status+0x34>)
    25b2:	4a0a      	ldr	r2, [pc, #40]	; (25dc <get_status+0x38>)
    25b4:	2379      	movs	r3, #121	; 0x79
    25b6:	f005 fcec 	bl	7f92 <printk>
    25ba:	4808      	ldr	r0, [pc, #32]	; (25dc <get_status+0x38>)
    25bc:	2179      	movs	r1, #121	; 0x79
    25be:	f005 fc11 	bl	7de4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    25c2:	692b      	ldr	r3, [r5, #16]
    25c4:	210c      	movs	r1, #12
    25c6:	fb04 3401 	mla	r4, r4, r1, r3
    25ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    25cc:	f000 0007 	and.w	r0, r0, #7
    25d0:	bd38      	pop	{r3, r4, r5, pc}
    25d2:	bf00      	nop
    25d4:	00009346 	.word	0x00009346
    25d8:	00008e27 	.word	0x00008e27
    25dc:	00009309 	.word	0x00009309

000025e0 <stop>:
{
    25e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25e2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25e4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    25e6:	6907      	ldr	r7, [r0, #16]
{
    25e8:	4605      	mov	r5, r0
    25ea:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    25ec:	d90b      	bls.n	2606 <stop+0x26>
    25ee:	4918      	ldr	r1, [pc, #96]	; (2650 <stop+0x70>)
    25f0:	4818      	ldr	r0, [pc, #96]	; (2654 <stop+0x74>)
    25f2:	4a19      	ldr	r2, [pc, #100]	; (2658 <stop+0x78>)
    25f4:	f240 134d 	movw	r3, #333	; 0x14d
    25f8:	f005 fccb 	bl	7f92 <printk>
    25fc:	4816      	ldr	r0, [pc, #88]	; (2658 <stop+0x78>)
    25fe:	f240 114d 	movw	r1, #333	; 0x14d
    2602:	f005 fbef 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    2606:	f04f 0320 	mov.w	r3, #32
    260a:	f3ef 8211 	mrs	r2, BASEPRI
    260e:	f383 8812 	msr	BASEPRI_MAX, r3
    2612:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2616:	230c      	movs	r3, #12
    2618:	fb03 7104 	mla	r1, r3, r4, r7
    261c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    261e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2622:	d001      	beq.n	2628 <stop+0x48>
    2624:	428e      	cmp	r6, r1
    2626:	d110      	bne.n	264a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2628:	fb03 7304 	mla	r3, r3, r4, r7
    262c:	2101      	movs	r1, #1
    262e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2630:	2000      	movs	r0, #0
	__asm__ volatile(
    2632:	f382 8811 	msr	BASEPRI, r2
    2636:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    263a:	b928      	cbnz	r0, 2648 <stop+0x68>
	get_sub_config(dev, type)->stop();
    263c:	6869      	ldr	r1, [r5, #4]
    263e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2642:	6863      	ldr	r3, [r4, #4]
    2644:	4798      	blx	r3
	return 0;
    2646:	2000      	movs	r0, #0
}
    2648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    264a:	f04f 30ff 	mov.w	r0, #4294967295
    264e:	e7f0      	b.n	2632 <stop+0x52>
    2650:	00009346 	.word	0x00009346
    2654:	00008e27 	.word	0x00008e27
    2658:	00009309 	.word	0x00009309

0000265c <onoff_stop>:
{
    265c:	b570      	push	{r4, r5, r6, lr}
    265e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2660:	4906      	ldr	r1, [pc, #24]	; (267c <onoff_stop+0x20>)
    2662:	1a41      	subs	r1, r0, r1
{
    2664:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2666:	1149      	asrs	r1, r1, #5
    2668:	4805      	ldr	r0, [pc, #20]	; (2680 <onoff_stop+0x24>)
    266a:	2240      	movs	r2, #64	; 0x40
    266c:	f7ff ffb8 	bl	25e0 <stop>
	notify(mgr, res);
    2670:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2672:	4601      	mov	r1, r0
	notify(mgr, res);
    2674:	4620      	mov	r0, r4
}
    2676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    267a:	4718      	bx	r3
    267c:	20000980 	.word	0x20000980
    2680:	00008770 	.word	0x00008770

00002684 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2684:	2200      	movs	r2, #0
{
    2686:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2688:	2101      	movs	r1, #1
{
    268a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    268c:	4610      	mov	r0, r2
    268e:	f7ff f923 	bl	18d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2692:	2000      	movs	r0, #0
    2694:	f7ff f902 	bl	189c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2698:	480f      	ldr	r0, [pc, #60]	; (26d8 <clk_init+0x54>)
    269a:	f001 f8c3 	bl	3824 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    269e:	4b0f      	ldr	r3, [pc, #60]	; (26dc <clk_init+0x58>)
    26a0:	4298      	cmp	r0, r3
    26a2:	d115      	bne.n	26d0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    26a4:	f001 f8e2 	bl	386c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    26a8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    26aa:	490d      	ldr	r1, [pc, #52]	; (26e0 <clk_init+0x5c>)
    26ac:	4630      	mov	r0, r6
    26ae:	f005 fc5b 	bl	7f68 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    26b2:	2800      	cmp	r0, #0
    26b4:	db0b      	blt.n	26ce <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    26b6:	2501      	movs	r5, #1
    26b8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    26ba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    26bc:	4908      	ldr	r1, [pc, #32]	; (26e0 <clk_init+0x5c>)
    26be:	f104 0020 	add.w	r0, r4, #32
    26c2:	f005 fc51 	bl	7f68 <onoff_manager_init>
		if (err < 0) {
    26c6:	2800      	cmp	r0, #0
    26c8:	db01      	blt.n	26ce <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    26ca:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    26cc:	2000      	movs	r0, #0
}
    26ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    26d0:	f06f 0004 	mvn.w	r0, #4
    26d4:	e7fb      	b.n	26ce <clk_init+0x4a>
    26d6:	bf00      	nop
    26d8:	00002719 	.word	0x00002719
    26dc:	0bad0000 	.word	0x0bad0000
    26e0:	00008a68 	.word	0x00008a68

000026e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    26e4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    26e6:	230c      	movs	r3, #12
    26e8:	4809      	ldr	r0, [pc, #36]	; (2710 <clkstarted_handle.constprop.0+0x2c>)
    26ea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    26ec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    26ee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    26f0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    26f4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    26f6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    26f8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    26fa:	4418      	add	r0, r3
    26fc:	f005 fcfc 	bl	80f8 <set_on_state>
	if (callback) {
    2700:	b12d      	cbz	r5, 270e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2702:	4632      	mov	r2, r6
    2704:	462b      	mov	r3, r5
    2706:	4803      	ldr	r0, [pc, #12]	; (2714 <clkstarted_handle.constprop.0+0x30>)
}
    2708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    270c:	4718      	bx	r3
}
    270e:	bd70      	pop	{r4, r5, r6, pc}
    2710:	20000980 	.word	0x20000980
    2714:	00008770 	.word	0x00008770

00002718 <clock_event_handler>:
	switch (event) {
    2718:	2801      	cmp	r0, #1
{
    271a:	b508      	push	{r3, lr}
	switch (event) {
    271c:	d006      	beq.n	272c <clock_event_handler+0x14>
    271e:	2803      	cmp	r0, #3
    2720:	d008      	beq.n	2734 <clock_event_handler+0x1c>
    2722:	b9a8      	cbnz	r0, 2750 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2724:	4b10      	ldr	r3, [pc, #64]	; (2768 <clock_event_handler+0x50>)
    2726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2728:	075b      	lsls	r3, r3, #29
    272a:	d11b      	bne.n	2764 <clock_event_handler+0x4c>
}
    272c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2730:	f7ff bfd8 	b.w	26e4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2734:	490d      	ldr	r1, [pc, #52]	; (276c <clock_event_handler+0x54>)
    2736:	4a0e      	ldr	r2, [pc, #56]	; (2770 <clock_event_handler+0x58>)
    2738:	480e      	ldr	r0, [pc, #56]	; (2774 <clock_event_handler+0x5c>)
    273a:	f240 235e 	movw	r3, #606	; 0x25e
    273e:	f005 fc28 	bl	7f92 <printk>
    2742:	f240 215e 	movw	r1, #606	; 0x25e
}
    2746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    274a:	4809      	ldr	r0, [pc, #36]	; (2770 <clock_event_handler+0x58>)
    274c:	f005 bb4a 	b.w	7de4 <assert_post_action>
    2750:	4906      	ldr	r1, [pc, #24]	; (276c <clock_event_handler+0x54>)
    2752:	4a07      	ldr	r2, [pc, #28]	; (2770 <clock_event_handler+0x58>)
    2754:	4807      	ldr	r0, [pc, #28]	; (2774 <clock_event_handler+0x5c>)
    2756:	f240 2362 	movw	r3, #610	; 0x262
    275a:	f005 fc1a 	bl	7f92 <printk>
    275e:	f240 2162 	movw	r1, #610	; 0x262
    2762:	e7f0      	b.n	2746 <clock_event_handler+0x2e>
}
    2764:	bd08      	pop	{r3, pc}
    2766:	bf00      	nop
    2768:	20000980 	.word	0x20000980
    276c:	00009606 	.word	0x00009606
    2770:	00009309 	.word	0x00009309
    2774:	00008e27 	.word	0x00008e27

00002778 <generic_hfclk_start>:
{
    2778:	b508      	push	{r3, lr}
	__asm__ volatile(
    277a:	f04f 0320 	mov.w	r3, #32
    277e:	f3ef 8111 	mrs	r1, BASEPRI
    2782:	f383 8812 	msr	BASEPRI_MAX, r3
    2786:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    278a:	4a12      	ldr	r2, [pc, #72]	; (27d4 <generic_hfclk_start+0x5c>)
    278c:	6813      	ldr	r3, [r2, #0]
    278e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2792:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2796:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2798:	d00c      	beq.n	27b4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    279a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    279e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27a2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    27a6:	f013 0301 	ands.w	r3, r3, #1
    27aa:	d003      	beq.n	27b4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    27ac:	480a      	ldr	r0, [pc, #40]	; (27d8 <generic_hfclk_start+0x60>)
    27ae:	f005 fca3 	bl	80f8 <set_on_state>
			already_started = true;
    27b2:	2301      	movs	r3, #1
	__asm__ volatile(
    27b4:	f381 8811 	msr	BASEPRI, r1
    27b8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    27bc:	b123      	cbz	r3, 27c8 <generic_hfclk_start+0x50>
}
    27be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    27c2:	2000      	movs	r0, #0
    27c4:	f7ff bf8e 	b.w	26e4 <clkstarted_handle.constprop.0>
}
    27c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    27cc:	2001      	movs	r0, #1
    27ce:	f001 b86d 	b.w	38ac <nrfx_clock_start>
    27d2:	bf00      	nop
    27d4:	200009d8 	.word	0x200009d8
    27d8:	200009c8 	.word	0x200009c8

000027dc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27dc:	4b09      	ldr	r3, [pc, #36]	; (2804 <generic_hfclk_stop+0x28>)
    27de:	f3bf 8f5b 	dmb	ish
    27e2:	e853 2f00 	ldrex	r2, [r3]
    27e6:	f022 0102 	bic.w	r1, r2, #2
    27ea:	e843 1000 	strex	r0, r1, [r3]
    27ee:	2800      	cmp	r0, #0
    27f0:	d1f7      	bne.n	27e2 <generic_hfclk_stop+0x6>
    27f2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    27f6:	07d3      	lsls	r3, r2, #31
    27f8:	d402      	bmi.n	2800 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    27fa:	2001      	movs	r0, #1
    27fc:	f001 b8aa 	b.w	3954 <nrfx_clock_stop>
}
    2800:	4770      	bx	lr
    2802:	bf00      	nop
    2804:	200009d8 	.word	0x200009d8

00002808 <api_blocking_start>:
{
    2808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    280a:	2200      	movs	r2, #0
    280c:	2301      	movs	r3, #1
    280e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2812:	ab04      	add	r3, sp, #16
    2814:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2818:	4a09      	ldr	r2, [pc, #36]	; (2840 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    281a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    281e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2820:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2824:	f005 fc8d 	bl	8142 <api_start>
	if (err < 0) {
    2828:	2800      	cmp	r0, #0
    282a:	db05      	blt.n	2838 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    282c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2830:	2300      	movs	r3, #0
    2832:	4668      	mov	r0, sp
    2834:	f004 f83c 	bl	68b0 <z_impl_k_sem_take>
}
    2838:	b007      	add	sp, #28
    283a:	f85d fb04 	ldr.w	pc, [sp], #4
    283e:	bf00      	nop
    2840:	0000813d 	.word	0x0000813d

00002844 <z_nrf_clock_control_lf_on>:
{
    2844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2848:	4949      	ldr	r1, [pc, #292]	; (2970 <z_nrf_clock_control_lf_on+0x12c>)
    284a:	f3bf 8f5b 	dmb	ish
    284e:	4605      	mov	r5, r0
    2850:	2201      	movs	r2, #1
    2852:	e851 3f00 	ldrex	r3, [r1]
    2856:	e841 2000 	strex	r0, r2, [r1]
    285a:	2800      	cmp	r0, #0
    285c:	d1f9      	bne.n	2852 <z_nrf_clock_control_lf_on+0xe>
    285e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2862:	b9a3      	cbnz	r3, 288e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2864:	4943      	ldr	r1, [pc, #268]	; (2974 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2866:	4844      	ldr	r0, [pc, #272]	; (2978 <z_nrf_clock_control_lf_on+0x134>)
    2868:	604b      	str	r3, [r1, #4]
    286a:	60cb      	str	r3, [r1, #12]
    286c:	608a      	str	r2, [r1, #8]
    286e:	f7fe fd8b 	bl	1388 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2872:	2800      	cmp	r0, #0
    2874:	da0b      	bge.n	288e <z_nrf_clock_control_lf_on+0x4a>
    2876:	4941      	ldr	r1, [pc, #260]	; (297c <z_nrf_clock_control_lf_on+0x138>)
    2878:	4841      	ldr	r0, [pc, #260]	; (2980 <z_nrf_clock_control_lf_on+0x13c>)
    287a:	4a42      	ldr	r2, [pc, #264]	; (2984 <z_nrf_clock_control_lf_on+0x140>)
    287c:	f44f 7308 	mov.w	r3, #544	; 0x220
    2880:	f005 fb87 	bl	7f92 <printk>
    2884:	483f      	ldr	r0, [pc, #252]	; (2984 <z_nrf_clock_control_lf_on+0x140>)
    2886:	f44f 7108 	mov.w	r1, #544	; 0x220
    288a:	f005 faab 	bl	7de4 <assert_post_action>
	switch (start_mode) {
    288e:	b3ad      	cbz	r5, 28fc <z_nrf_clock_control_lf_on+0xb8>
    2890:	1e6b      	subs	r3, r5, #1
    2892:	2b01      	cmp	r3, #1
    2894:	d856      	bhi.n	2944 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2896:	2d01      	cmp	r5, #1
    2898:	d107      	bne.n	28aa <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    289a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    289e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    28a2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    28a6:	2b01      	cmp	r3, #1
    28a8:	d028      	beq.n	28fc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28aa:	f005 feeb 	bl	8684 <k_is_in_isr>
    28ae:	4604      	mov	r4, r0
    28b0:	b918      	cbnz	r0, 28ba <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    28b2:	4b35      	ldr	r3, [pc, #212]	; (2988 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d152      	bne.n	2960 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    28ba:	f04f 0320 	mov.w	r3, #32
    28be:	f3ef 8611 	mrs	r6, BASEPRI
    28c2:	f383 8812 	msr	BASEPRI_MAX, r3
    28c6:	f3bf 8f6f 	isb	sy
    28ca:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28cc:	4f2f      	ldr	r7, [pc, #188]	; (298c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28ce:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2994 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    28d2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2998 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    28d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28da:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    28de:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    28e2:	03d2      	lsls	r2, r2, #15
    28e4:	d50c      	bpl.n	2900 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    28e6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    28ea:	2b01      	cmp	r3, #1
    28ec:	d001      	beq.n	28f2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    28ee:	2d01      	cmp	r5, #1
    28f0:	d106      	bne.n	2900 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    28f2:	b30c      	cbz	r4, 2938 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    28f4:	f386 8811 	msr	BASEPRI, r6
    28f8:	f3bf 8f6f 	isb	sy
}
    28fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2900:	b1ac      	cbz	r4, 292e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2902:	4630      	mov	r0, r6
    2904:	f7fe ff62 	bl	17cc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    290c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2910:	2b00      	cmp	r3, #0
    2912:	d1e0      	bne.n	28d6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2914:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2916:	2900      	cmp	r1, #0
    2918:	d0dd      	beq.n	28d6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    291a:	603b      	str	r3, [r7, #0]
    291c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    291e:	2301      	movs	r3, #1
    2920:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2924:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2928:	f8c9 3000 	str.w	r3, [r9]
}
    292c:	e7d3      	b.n	28d6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    292e:	2100      	movs	r1, #0
    2930:	2021      	movs	r0, #33	; 0x21
    2932:	f003 fe0d 	bl	6550 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2936:	e7e7      	b.n	2908 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    293c:	2202      	movs	r2, #2
    293e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2942:	e7db      	b.n	28fc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2944:	4912      	ldr	r1, [pc, #72]	; (2990 <z_nrf_clock_control_lf_on+0x14c>)
    2946:	480e      	ldr	r0, [pc, #56]	; (2980 <z_nrf_clock_control_lf_on+0x13c>)
    2948:	4a0e      	ldr	r2, [pc, #56]	; (2984 <z_nrf_clock_control_lf_on+0x140>)
    294a:	f240 2332 	movw	r3, #562	; 0x232
    294e:	f005 fb20 	bl	7f92 <printk>
}
    2952:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2956:	480b      	ldr	r0, [pc, #44]	; (2984 <z_nrf_clock_control_lf_on+0x140>)
    2958:	f240 2132 	movw	r1, #562	; 0x232
    295c:	f005 ba42 	b.w	7de4 <assert_post_action>
    p_reg->INTENCLR = mask;
    2960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2964:	2202      	movs	r2, #2
    2966:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    296a:	4606      	mov	r6, r0
}
    296c:	e7ae      	b.n	28cc <z_nrf_clock_control_lf_on+0x88>
    296e:	bf00      	nop
    2970:	200009dc 	.word	0x200009dc
    2974:	20000970 	.word	0x20000970
    2978:	200009a0 	.word	0x200009a0
    297c:	0000936a 	.word	0x0000936a
    2980:	00008e27 	.word	0x00008e27
    2984:	00009309 	.word	0x00009309
    2988:	20000aa3 	.word	0x20000aa3
    298c:	40000104 	.word	0x40000104
    2990:	00009606 	.word	0x00009606
    2994:	e000e100 	.word	0xe000e100
    2998:	40000008 	.word	0x40000008

0000299c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    299c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    299e:	4b08      	ldr	r3, [pc, #32]	; (29c0 <uart_console_init+0x24>)
    29a0:	4808      	ldr	r0, [pc, #32]	; (29c4 <uart_console_init+0x28>)
    29a2:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    29a4:	f005 fe0c 	bl	85c0 <z_device_ready>
    29a8:	b138      	cbz	r0, 29ba <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    29aa:	4807      	ldr	r0, [pc, #28]	; (29c8 <uart_console_init+0x2c>)
    29ac:	f7ff fb5a 	bl	2064 <__stdout_hook_install>
	__printk_hook_install(console_out);
    29b0:	4805      	ldr	r0, [pc, #20]	; (29c8 <uart_console_init+0x2c>)
    29b2:	f7fe fecf 	bl	1754 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    29b6:	2000      	movs	r0, #0
}
    29b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    29ba:	f06f 0012 	mvn.w	r0, #18
    29be:	e7fb      	b.n	29b8 <uart_console_init+0x1c>
    29c0:	200009e0 	.word	0x200009e0
    29c4:	000087d0 	.word	0x000087d0
    29c8:	000029cd 	.word	0x000029cd

000029cc <console_out>:
	if ('\n' == c) {
    29cc:	280a      	cmp	r0, #10
{
    29ce:	b538      	push	{r3, r4, r5, lr}
    29d0:	4d07      	ldr	r5, [pc, #28]	; (29f0 <console_out+0x24>)
    29d2:	4604      	mov	r4, r0
	if ('\n' == c) {
    29d4:	d104      	bne.n	29e0 <console_out+0x14>
    29d6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    29d8:	6883      	ldr	r3, [r0, #8]
    29da:	210d      	movs	r1, #13
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    29e0:	6828      	ldr	r0, [r5, #0]
    29e2:	6883      	ldr	r3, [r0, #8]
    29e4:	b2e1      	uxtb	r1, r4
    29e6:	685b      	ldr	r3, [r3, #4]
    29e8:	4798      	blx	r3
}
    29ea:	4620      	mov	r0, r4
    29ec:	bd38      	pop	{r3, r4, r5, pc}
    29ee:	bf00      	nop
    29f0:	200009e0 	.word	0x200009e0

000029f4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    29f4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    29f6:	6905      	ldr	r5, [r0, #16]
{
    29f8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    29fa:	460c      	mov	r4, r1
    29fc:	b961      	cbnz	r1, 2a18 <gpio_nrfx_manage_callback+0x24>
    29fe:	4922      	ldr	r1, [pc, #136]	; (2a88 <gpio_nrfx_manage_callback+0x94>)
    2a00:	4a22      	ldr	r2, [pc, #136]	; (2a8c <gpio_nrfx_manage_callback+0x98>)
    2a02:	4823      	ldr	r0, [pc, #140]	; (2a90 <gpio_nrfx_manage_callback+0x9c>)
    2a04:	2324      	movs	r3, #36	; 0x24
    2a06:	f005 fac4 	bl	7f92 <printk>
    2a0a:	4822      	ldr	r0, [pc, #136]	; (2a94 <gpio_nrfx_manage_callback+0xa0>)
    2a0c:	f005 fac1 	bl	7f92 <printk>
    2a10:	481e      	ldr	r0, [pc, #120]	; (2a8c <gpio_nrfx_manage_callback+0x98>)
    2a12:	2124      	movs	r1, #36	; 0x24
    2a14:	f005 f9e6 	bl	7de4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2a18:	6863      	ldr	r3, [r4, #4]
    2a1a:	b963      	cbnz	r3, 2a36 <gpio_nrfx_manage_callback+0x42>
    2a1c:	491e      	ldr	r1, [pc, #120]	; (2a98 <gpio_nrfx_manage_callback+0xa4>)
    2a1e:	4a1b      	ldr	r2, [pc, #108]	; (2a8c <gpio_nrfx_manage_callback+0x98>)
    2a20:	481b      	ldr	r0, [pc, #108]	; (2a90 <gpio_nrfx_manage_callback+0x9c>)
    2a22:	2325      	movs	r3, #37	; 0x25
    2a24:	f005 fab5 	bl	7f92 <printk>
    2a28:	481c      	ldr	r0, [pc, #112]	; (2a9c <gpio_nrfx_manage_callback+0xa8>)
    2a2a:	f005 fab2 	bl	7f92 <printk>
    2a2e:	4817      	ldr	r0, [pc, #92]	; (2a8c <gpio_nrfx_manage_callback+0x98>)
    2a30:	2125      	movs	r1, #37	; 0x25
    2a32:	f005 f9d7 	bl	7de4 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2a36:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2a38:	b15b      	cbz	r3, 2a52 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a3a:	2200      	movs	r2, #0
    2a3c:	429c      	cmp	r4, r3
    2a3e:	d113      	bne.n	2a68 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2a40:	6823      	ldr	r3, [r4, #0]
    2a42:	b95a      	cbnz	r2, 2a5c <gpio_nrfx_manage_callback+0x68>
    2a44:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2a46:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2a48:	4294      	cmp	r4, r2
    2a4a:	d100      	bne.n	2a4e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2a4c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2a4e:	2300      	movs	r3, #0
    2a50:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2a52:	b976      	cbnz	r6, 2a72 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2a54:	2000      	movs	r0, #0
				     callback, set);
}
    2a56:	bd70      	pop	{r4, r5, r6, pc}
    2a58:	460b      	mov	r3, r1
    2a5a:	e7ef      	b.n	2a3c <gpio_nrfx_manage_callback+0x48>
    2a5c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2a5e:	68ab      	ldr	r3, [r5, #8]
    2a60:	429c      	cmp	r4, r3
	list->tail = node;
    2a62:	bf08      	it	eq
    2a64:	60aa      	streq	r2, [r5, #8]
}
    2a66:	e7f2      	b.n	2a4e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2a68:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2a6a:	461a      	mov	r2, r3
    2a6c:	2900      	cmp	r1, #0
    2a6e:	d1f3      	bne.n	2a58 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2a70:	b13e      	cbz	r6, 2a82 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2a72:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2a74:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2a76:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2a78:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1ea      	bne.n	2a54 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2a7e:	60ac      	str	r4, [r5, #8]
}
    2a80:	e7e9      	b.n	2a56 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2a82:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2a86:	e7e6      	b.n	2a56 <gpio_nrfx_manage_callback+0x62>
    2a88:	000093a6 	.word	0x000093a6
    2a8c:	00009379 	.word	0x00009379
    2a90:	00008e27 	.word	0x00008e27
    2a94:	000093af 	.word	0x000093af
    2a98:	000093be 	.word	0x000093be
    2a9c:	000093d0 	.word	0x000093d0

00002aa0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2aa0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2aa6:	d003      	beq.n	2ab0 <nrfx_gpio_handler+0x10>
    2aa8:	2b01      	cmp	r3, #1
    2aaa:	d036      	beq.n	2b1a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2ab0:	4f1b      	ldr	r7, [pc, #108]	; (2b20 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2ab2:	693b      	ldr	r3, [r7, #16]
    2ab4:	685c      	ldr	r4, [r3, #4]
    2ab6:	2c00      	cmp	r4, #0
    2ab8:	d0f8      	beq.n	2aac <nrfx_gpio_handler+0xc>
    2aba:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2abc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2b2c <nrfx_gpio_handler+0x8c>
    2ac0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2b30 <nrfx_gpio_handler+0x90>
    2ac4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2b34 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2ac8:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2acc:	2601      	movs	r6, #1
    2ace:	2d00      	cmp	r5, #0
    2ad0:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2ad4:	bf38      	it	cc
    2ad6:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2ad8:	68a3      	ldr	r3, [r4, #8]
    2ada:	421e      	tst	r6, r3
    2adc:	d014      	beq.n	2b08 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2ade:	6863      	ldr	r3, [r4, #4]
    2ae0:	b963      	cbnz	r3, 2afc <nrfx_gpio_handler+0x5c>
    2ae2:	4649      	mov	r1, r9
    2ae4:	2345      	movs	r3, #69	; 0x45
    2ae6:	4642      	mov	r2, r8
    2ae8:	4650      	mov	r0, sl
    2aea:	f005 fa52 	bl	7f92 <printk>
    2aee:	480d      	ldr	r0, [pc, #52]	; (2b24 <nrfx_gpio_handler+0x84>)
    2af0:	f005 fa4f 	bl	7f92 <printk>
    2af4:	2145      	movs	r1, #69	; 0x45
    2af6:	4640      	mov	r0, r8
    2af8:	f005 f974 	bl	7de4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2afc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2b00:	4621      	mov	r1, r4
    2b02:	4032      	ands	r2, r6
    2b04:	4638      	mov	r0, r7
    2b06:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b08:	2d00      	cmp	r5, #0
    2b0a:	d0cf      	beq.n	2aac <nrfx_gpio_handler+0xc>
    2b0c:	682b      	ldr	r3, [r5, #0]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	bf38      	it	cc
    2b12:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b14:	462c      	mov	r4, r5
    2b16:	461d      	mov	r5, r3
    2b18:	e7de      	b.n	2ad8 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2b1a:	4f03      	ldr	r7, [pc, #12]	; (2b28 <nrfx_gpio_handler+0x88>)
    2b1c:	e7c9      	b.n	2ab2 <nrfx_gpio_handler+0x12>
    2b1e:	bf00      	nop
    2b20:	00008788 	.word	0x00008788
    2b24:	000093d0 	.word	0x000093d0
    2b28:	000087a0 	.word	0x000087a0
    2b2c:	00009379 	.word	0x00009379
    2b30:	000093e7 	.word	0x000093e7
    2b34:	00008e27 	.word	0x00008e27

00002b38 <gpio_nrfx_pin_interrupt_configure>:
{
    2b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b3a:	6840      	ldr	r0, [r0, #4]
    2b3c:	7b05      	ldrb	r5, [r0, #12]
    2b3e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b42:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b46:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2b4a:	f04f 0500 	mov.w	r5, #0
    2b4e:	d104      	bne.n	2b5a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2b50:	4620      	mov	r0, r4
    2b52:	f001 fa97 	bl	4084 <nrfx_gpiote_trigger_disable>
	return 0;
    2b56:	2000      	movs	r0, #0
    2b58:	e054      	b.n	2c04 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b5a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b5e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2b62:	d151      	bne.n	2c08 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2b68:	bf0c      	ite	eq
    2b6a:	2304      	moveq	r3, #4
    2b6c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b6e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2b72:	6883      	ldr	r3, [r0, #8]
    2b74:	fa23 f101 	lsr.w	r1, r3, r1
    2b78:	f011 0101 	ands.w	r1, r1, #1
    2b7c:	d155      	bne.n	2c2a <gpio_nrfx_pin_interrupt_configure+0xf2>
    2b7e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2b82:	d152      	bne.n	2c2a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    2b84:	0966      	lsrs	r6, r4, #5
    2b86:	d04a      	beq.n	2c1e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    2b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b8c:	2e01      	cmp	r6, #1
    2b8e:	bf08      	it	eq
    2b90:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    2b92:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2b96:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2b98:	07ca      	lsls	r2, r1, #31
    2b9a:	d40b      	bmi.n	2bb4 <gpio_nrfx_pin_interrupt_configure+0x7c>
    2b9c:	492b      	ldr	r1, [pc, #172]	; (2c4c <gpio_nrfx_pin_interrupt_configure+0x114>)
    2b9e:	482c      	ldr	r0, [pc, #176]	; (2c50 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2ba0:	4a2c      	ldr	r2, [pc, #176]	; (2c54 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2ba2:	f240 2329 	movw	r3, #553	; 0x229
    2ba6:	f005 f9f4 	bl	7f92 <printk>
    2baa:	482a      	ldr	r0, [pc, #168]	; (2c54 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bac:	f240 2129 	movw	r1, #553	; 0x229
    2bb0:	f005 f918 	bl	7de4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bb4:	b16e      	cbz	r6, 2bd2 <gpio_nrfx_pin_interrupt_configure+0x9a>
    2bb6:	2e01      	cmp	r6, #1
    2bb8:	d034      	beq.n	2c24 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    2bba:	4927      	ldr	r1, [pc, #156]	; (2c58 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2bbc:	4824      	ldr	r0, [pc, #144]	; (2c50 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2bbe:	4a25      	ldr	r2, [pc, #148]	; (2c54 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bc0:	f240 232e 	movw	r3, #558	; 0x22e
    2bc4:	f005 f9e5 	bl	7f92 <printk>
    2bc8:	4822      	ldr	r0, [pc, #136]	; (2c54 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2bca:	f240 212e 	movw	r1, #558	; 0x22e
    2bce:	f005 f909 	bl	7de4 <assert_post_action>
        case 0: return NRF_P0;
    2bd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2bd6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2bda:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2bde:	07db      	lsls	r3, r3, #31
    2be0:	d423      	bmi.n	2c2a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2be2:	f10d 0507 	add.w	r5, sp, #7
    2be6:	4629      	mov	r1, r5
    2be8:	4620      	mov	r0, r4
    2bea:	f001 f975 	bl	3ed8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2bee:	4b1b      	ldr	r3, [pc, #108]	; (2c5c <gpio_nrfx_pin_interrupt_configure+0x124>)
    2bf0:	4298      	cmp	r0, r3
    2bf2:	d119      	bne.n	2c28 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    2bf4:	4628      	mov	r0, r5
    2bf6:	f001 f9cf 	bl	3f98 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2bfa:	4b19      	ldr	r3, [pc, #100]	; (2c60 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2bfc:	4298      	cmp	r0, r3
    2bfe:	d013      	beq.n	2c28 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    2c00:	f06f 000b 	mvn.w	r0, #11
}
    2c04:	b004      	add	sp, #16
    2c06:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2c08:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2c0c:	d005      	beq.n	2c1a <gpio_nrfx_pin_interrupt_configure+0xe2>
    2c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2c12:	bf0c      	ite	eq
    2c14:	2302      	moveq	r3, #2
    2c16:	2301      	movne	r3, #1
    2c18:	e7a9      	b.n	2b6e <gpio_nrfx_pin_interrupt_configure+0x36>
    2c1a:	2303      	movs	r3, #3
    2c1c:	e7a7      	b.n	2b6e <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    2c1e:	f04f 31ff 	mov.w	r1, #4294967295
    2c22:	e7b6      	b.n	2b92 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c24:	4b0f      	ldr	r3, [pc, #60]	; (2c64 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    2c26:	e7d6      	b.n	2bd6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2c28:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2c2a:	2300      	movs	r3, #0
    2c2c:	4619      	mov	r1, r3
    2c2e:	aa02      	add	r2, sp, #8
    2c30:	4620      	mov	r0, r4
    2c32:	f001 f833 	bl	3c9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2c36:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <gpio_nrfx_pin_interrupt_configure+0x128>)
    2c38:	4298      	cmp	r0, r3
    2c3a:	d104      	bne.n	2c46 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2c3c:	2101      	movs	r1, #1
    2c3e:	4620      	mov	r0, r4
    2c40:	f001 f9b0 	bl	3fa4 <nrfx_gpiote_trigger_enable>
    2c44:	e787      	b.n	2b56 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2c46:	f06f 0004 	mvn.w	r0, #4
    2c4a:	e7db      	b.n	2c04 <gpio_nrfx_pin_interrupt_configure+0xcc>
    2c4c:	00009426 	.word	0x00009426
    2c50:	00008e27 	.word	0x00008e27
    2c54:	000093f3 	.word	0x000093f3
    2c58:	00009606 	.word	0x00009606
    2c5c:	0bad0004 	.word	0x0bad0004
    2c60:	0bad0000 	.word	0x0bad0000
    2c64:	50000300 	.word	0x50000300

00002c68 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2c68:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2c6a:	f001 f985 	bl	3f78 <nrfx_gpiote_is_init>
    2c6e:	4604      	mov	r4, r0
    2c70:	b968      	cbnz	r0, 2c8e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2c72:	f001 f959 	bl	3f28 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2c76:	4b08      	ldr	r3, [pc, #32]	; (2c98 <gpio_nrfx_init+0x30>)
    2c78:	4298      	cmp	r0, r3
    2c7a:	d10a      	bne.n	2c92 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2c7c:	4807      	ldr	r0, [pc, #28]	; (2c9c <gpio_nrfx_init+0x34>)
    2c7e:	4621      	mov	r1, r4
    2c80:	f001 f924 	bl	3ecc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2c84:	4622      	mov	r2, r4
    2c86:	2105      	movs	r1, #5
    2c88:	2006      	movs	r0, #6
    2c8a:	f7fe fe25 	bl	18d8 <z_arm_irq_priority_set>
		return 0;
    2c8e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2c90:	bd10      	pop	{r4, pc}
		return -EIO;
    2c92:	f06f 0004 	mvn.w	r0, #4
    2c96:	e7fb      	b.n	2c90 <gpio_nrfx_init+0x28>
    2c98:	0bad0000 	.word	0x0bad0000
    2c9c:	00002aa1 	.word	0x00002aa1

00002ca0 <gpio_nrfx_pin_configure>:
{
    2ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2ca4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ca6:	7b3b      	ldrb	r3, [r7, #12]
    2ca8:	f001 051f 	and.w	r5, r1, #31
{
    2cac:	b085      	sub	sp, #20
    2cae:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2cb0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2cb4:	4614      	mov	r4, r2
    2cb6:	b9ca      	cbnz	r2, 2cec <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cb8:	a902      	add	r1, sp, #8
    2cba:	4628      	mov	r0, r5
    2cbc:	f001 f90c 	bl	3ed8 <nrfx_gpiote_channel_get>
    2cc0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2cc2:	4628      	mov	r0, r5
    2cc4:	f001 fa00 	bl	40c8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2cc8:	4b48      	ldr	r3, [pc, #288]	; (2dec <gpio_nrfx_pin_configure+0x14c>)
    2cca:	4298      	cmp	r0, r3
    2ccc:	d004      	beq.n	2cd8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2cce:	f06f 0004 	mvn.w	r0, #4
}
    2cd2:	b005      	add	sp, #20
    2cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2cd8:	4284      	cmp	r4, r0
    2cda:	d105      	bne.n	2ce8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2cdc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ce0:	f001 f954 	bl	3f8c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ce4:	42a0      	cmp	r0, r4
    2ce6:	d1f2      	bne.n	2cce <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ce8:	2000      	movs	r0, #0
    2cea:	e7f2      	b.n	2cd2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cec:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cf0:	f10d 0103 	add.w	r1, sp, #3
    2cf4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cf6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2cfa:	f001 f8ed 	bl	3ed8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2cfe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2d00:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d02:	aa02      	add	r2, sp, #8
    2d04:	4649      	mov	r1, r9
    2d06:	4628      	mov	r0, r5
    2d08:	f000 ffc8 	bl	3c9c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d0c:	4b37      	ldr	r3, [pc, #220]	; (2dec <gpio_nrfx_pin_configure+0x14c>)
    2d0e:	4298      	cmp	r0, r3
    2d10:	d002      	beq.n	2d18 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d12:	f06f 0015 	mvn.w	r0, #21
    2d16:	e7dc      	b.n	2cd2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2d18:	4580      	cmp	r8, r0
    2d1a:	d103      	bne.n	2d24 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2d1c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2d20:	f001 f934 	bl	3f8c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2d24:	05a3      	lsls	r3, r4, #22
    2d26:	d54e      	bpl.n	2dc6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d28:	4b31      	ldr	r3, [pc, #196]	; (2df0 <gpio_nrfx_pin_configure+0x150>)
    2d2a:	4a32      	ldr	r2, [pc, #200]	; (2df4 <gpio_nrfx_pin_configure+0x154>)
    2d2c:	4023      	ands	r3, r4
    2d2e:	4293      	cmp	r3, r2
    2d30:	d03a      	beq.n	2da8 <gpio_nrfx_pin_configure+0x108>
    2d32:	d80c      	bhi.n	2d4e <gpio_nrfx_pin_configure+0xae>
    2d34:	2b06      	cmp	r3, #6
    2d36:	d014      	beq.n	2d62 <gpio_nrfx_pin_configure+0xc2>
    2d38:	d804      	bhi.n	2d44 <gpio_nrfx_pin_configure+0xa4>
    2d3a:	b193      	cbz	r3, 2d62 <gpio_nrfx_pin_configure+0xc2>
    2d3c:	2b02      	cmp	r3, #2
    2d3e:	d1e8      	bne.n	2d12 <gpio_nrfx_pin_configure+0x72>
    2d40:	2304      	movs	r3, #4
    2d42:	e00e      	b.n	2d62 <gpio_nrfx_pin_configure+0xc2>
    2d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d48:	d1e3      	bne.n	2d12 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2d4a:	2301      	movs	r3, #1
    2d4c:	e009      	b.n	2d62 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2d4e:	4a2a      	ldr	r2, [pc, #168]	; (2df8 <gpio_nrfx_pin_configure+0x158>)
    2d50:	4293      	cmp	r3, r2
    2d52:	d02b      	beq.n	2dac <gpio_nrfx_pin_configure+0x10c>
    2d54:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2d58:	d02a      	beq.n	2db0 <gpio_nrfx_pin_configure+0x110>
    2d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2d5e:	d1d8      	bne.n	2d12 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2d60:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2d62:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2d66:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2d6a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2d6e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2d70:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2d74:	bf54      	ite	pl
    2d76:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2d7a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d7c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2d7e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2d82:	d517      	bpl.n	2db4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2d84:	687b      	ldr	r3, [r7, #4]
    2d86:	2101      	movs	r1, #1
    2d88:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2d8c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2d90:	2200      	movs	r2, #0
    2d92:	a901      	add	r1, sp, #4
    2d94:	4628      	mov	r0, r5
    2d96:	f001 f829 	bl	3dec <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2d9a:	4b14      	ldr	r3, [pc, #80]	; (2dec <gpio_nrfx_pin_configure+0x14c>)
    2d9c:	4298      	cmp	r0, r3
    2d9e:	bf14      	ite	ne
    2da0:	f06f 0015 	mvnne.w	r0, #21
    2da4:	2000      	moveq	r0, #0
    2da6:	e794      	b.n	2cd2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2da8:	2307      	movs	r3, #7
    2daa:	e7da      	b.n	2d62 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2dac:	2305      	movs	r3, #5
    2dae:	e7d8      	b.n	2d62 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2db0:	2303      	movs	r3, #3
    2db2:	e7d6      	b.n	2d62 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2db4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2db6:	bf41      	itttt	mi
    2db8:	687b      	ldrmi	r3, [r7, #4]
    2dba:	2101      	movmi	r1, #1
    2dbc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2dc0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2dc4:	e7e4      	b.n	2d90 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2dc6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2dc8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2dcc:	bf54      	ite	pl
    2dce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2dd2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2dd4:	461a      	mov	r2, r3
    2dd6:	a901      	add	r1, sp, #4
    2dd8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2dda:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2dde:	f000 ff5d 	bl	3c9c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2de2:	4b02      	ldr	r3, [pc, #8]	; (2dec <gpio_nrfx_pin_configure+0x14c>)
    2de4:	4298      	cmp	r0, r3
    2de6:	f43f af7f 	beq.w	2ce8 <gpio_nrfx_pin_configure+0x48>
    2dea:	e792      	b.n	2d12 <gpio_nrfx_pin_configure+0x72>
    2dec:	0bad0000 	.word	0x0bad0000
    2df0:	00f00006 	.word	0x00f00006
    2df4:	00100006 	.word	0x00100006
    2df8:	00400002 	.word	0x00400002

00002dfc <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2dfc:	4802      	ldr	r0, [pc, #8]	; (2e08 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2dfe:	2100      	movs	r1, #0
    2e00:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2e04:	2000      	movs	r0, #0
    2e06:	4770      	bx	lr
    2e08:	00f42400 	.word	0x00f42400

00002e0c <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    2e0c:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    2e0e:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2e10:	6912      	ldr	r2, [r2, #16]
{
    2e12:	b538      	push	{r3, r4, r5, lr}
    2e14:	f100 0308 	add.w	r3, r0, #8
    2e18:	3204      	adds	r2, #4
    2e1a:	f100 040c 	add.w	r4, r0, #12
    2e1e:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    2e20:	f913 5b01 	ldrsb.w	r5, [r3], #1
    2e24:	2d00      	cmp	r5, #0
    2e26:	bfb4      	ite	lt
    2e28:	2500      	movlt	r5, #0
    2e2a:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2e2e:	42a3      	cmp	r3, r4

		data->current[i] = value;
    2e30:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2e34:	d1f4      	bne.n	2e20 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2e36:	2300      	movs	r3, #0
    2e38:	461a      	mov	r2, r3
    2e3a:	f001 fb07 	bl	444c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2e3e:	4b03      	ldr	r3, [pc, #12]	; (2e4c <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    2e40:	4298      	cmp	r0, r3
	}

	return 0;
}
    2e42:	bf14      	ite	ne
    2e44:	f06f 000f 	mvnne.w	r0, #15
    2e48:	2000      	moveq	r0, #0
    2e4a:	bd38      	pop	{r3, r4, r5, pc}
    2e4c:	0bad0000 	.word	0x0bad0000

00002e50 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2e50:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2e52:	0953      	lsrs	r3, r2, #5
{
    2e54:	b510      	push	{r4, lr}
    2e56:	4604      	mov	r4, r0
    switch (port)
    2e58:	d02c      	beq.n	2eb4 <nrf_gpio_pin_port_decode+0x64>
    2e5a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e60:	bf18      	it	ne
    2e62:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2e64:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2e68:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2e6a:	07db      	lsls	r3, r3, #31
    2e6c:	d40b      	bmi.n	2e86 <nrf_gpio_pin_port_decode+0x36>
    2e6e:	4914      	ldr	r1, [pc, #80]	; (2ec0 <nrf_gpio_pin_port_decode+0x70>)
    2e70:	4814      	ldr	r0, [pc, #80]	; (2ec4 <nrf_gpio_pin_port_decode+0x74>)
    2e72:	4a15      	ldr	r2, [pc, #84]	; (2ec8 <nrf_gpio_pin_port_decode+0x78>)
    2e74:	f240 2329 	movw	r3, #553	; 0x229
    2e78:	f005 f88b 	bl	7f92 <printk>
    2e7c:	4812      	ldr	r0, [pc, #72]	; (2ec8 <nrf_gpio_pin_port_decode+0x78>)
    2e7e:	f240 2129 	movw	r1, #553	; 0x229
    2e82:	f004 ffaf 	bl	7de4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    2e86:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2e88:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e8c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2e8e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e90:	d00d      	beq.n	2eae <nrf_gpio_pin_port_decode+0x5e>
    2e92:	2b01      	cmp	r3, #1
    2e94:	d011      	beq.n	2eba <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2e96:	490d      	ldr	r1, [pc, #52]	; (2ecc <nrf_gpio_pin_port_decode+0x7c>)
    2e98:	480a      	ldr	r0, [pc, #40]	; (2ec4 <nrf_gpio_pin_port_decode+0x74>)
    2e9a:	4a0b      	ldr	r2, [pc, #44]	; (2ec8 <nrf_gpio_pin_port_decode+0x78>)
    2e9c:	f240 232e 	movw	r3, #558	; 0x22e
    2ea0:	f005 f877 	bl	7f92 <printk>
    2ea4:	4808      	ldr	r0, [pc, #32]	; (2ec8 <nrf_gpio_pin_port_decode+0x78>)
    2ea6:	f240 212e 	movw	r1, #558	; 0x22e
    2eaa:	f004 ff9b 	bl	7de4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2eae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2eb2:	bd10      	pop	{r4, pc}
    switch (port)
    2eb4:	f04f 33ff 	mov.w	r3, #4294967295
    2eb8:	e7d4      	b.n	2e64 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    2eba:	4805      	ldr	r0, [pc, #20]	; (2ed0 <nrf_gpio_pin_port_decode+0x80>)
    2ebc:	e7f9      	b.n	2eb2 <nrf_gpio_pin_port_decode+0x62>
    2ebe:	bf00      	nop
    2ec0:	00009426 	.word	0x00009426
    2ec4:	00008e27 	.word	0x00008e27
    2ec8:	000093f3 	.word	0x000093f3
    2ecc:	00009606 	.word	0x00009606
    2ed0:	50000300 	.word	0x50000300

00002ed4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2ed6:	794b      	ldrb	r3, [r1, #5]
    2ed8:	2b01      	cmp	r3, #1
    2eda:	d026      	beq.n	2f2a <uarte_nrfx_configure+0x56>
    2edc:	2b03      	cmp	r3, #3
    2ede:	d121      	bne.n	2f24 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2ee0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2ee2:	798b      	ldrb	r3, [r1, #6]
    2ee4:	2b03      	cmp	r3, #3
    2ee6:	d11d      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2ee8:	79cc      	ldrb	r4, [r1, #7]
    2eea:	b10c      	cbz	r4, 2ef0 <uarte_nrfx_configure+0x1c>
    2eec:	2c01      	cmp	r4, #1
    2eee:	d119      	bne.n	2f24 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2ef0:	790a      	ldrb	r2, [r1, #4]
    2ef2:	b112      	cbz	r2, 2efa <uarte_nrfx_configure+0x26>
    2ef4:	2a02      	cmp	r2, #2
    2ef6:	d115      	bne.n	2f24 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2ef8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2efa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2efc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2efe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2f02:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2f04:	d065      	beq.n	2fd2 <uarte_nrfx_configure+0xfe>
    2f06:	d82d      	bhi.n	2f64 <uarte_nrfx_configure+0x90>
    2f08:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2f0c:	d064      	beq.n	2fd8 <uarte_nrfx_configure+0x104>
    2f0e:	d816      	bhi.n	2f3e <uarte_nrfx_configure+0x6a>
    2f10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2f14:	d062      	beq.n	2fdc <uarte_nrfx_configure+0x108>
    2f16:	d80a      	bhi.n	2f2e <uarte_nrfx_configure+0x5a>
    2f18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2f1c:	d061      	beq.n	2fe2 <uarte_nrfx_configure+0x10e>
    2f1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2f22:	d061      	beq.n	2fe8 <uarte_nrfx_configure+0x114>
    2f24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2f28:	e052      	b.n	2fd0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2f2a:	2600      	movs	r6, #0
    2f2c:	e7d9      	b.n	2ee2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2f2e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f32:	d05c      	beq.n	2fee <uarte_nrfx_configure+0x11a>
    2f34:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2f38:	d1f4      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2f3a:	4b37      	ldr	r3, [pc, #220]	; (3018 <uarte_nrfx_configure+0x144>)
    2f3c:	e03c      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f3e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2f42:	d057      	beq.n	2ff4 <uarte_nrfx_configure+0x120>
    2f44:	d807      	bhi.n	2f56 <uarte_nrfx_configure+0x82>
    2f46:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2f4a:	d055      	beq.n	2ff8 <uarte_nrfx_configure+0x124>
    2f4c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f50:	d1e8      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2f52:	4b32      	ldr	r3, [pc, #200]	; (301c <uarte_nrfx_configure+0x148>)
    2f54:	e030      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f56:	f647 2712 	movw	r7, #31250	; 0x7a12
    2f5a:	42bb      	cmp	r3, r7
    2f5c:	d1e2      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f62:	e029      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f64:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f68:	d048      	beq.n	2ffc <uarte_nrfx_configure+0x128>
    2f6a:	d813      	bhi.n	2f94 <uarte_nrfx_configure+0xc0>
    2f6c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f70:	d047      	beq.n	3002 <uarte_nrfx_configure+0x12e>
    2f72:	d809      	bhi.n	2f88 <uarte_nrfx_configure+0xb4>
    2f74:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2f78:	42bb      	cmp	r3, r7
    2f7a:	d044      	beq.n	3006 <uarte_nrfx_configure+0x132>
    2f7c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f80:	d1d0      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f82:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f86:	e017      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f88:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f8c:	d1ca      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f8e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f92:	e011      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f94:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f98:	d038      	beq.n	300c <uarte_nrfx_configure+0x138>
    2f9a:	d808      	bhi.n	2fae <uarte_nrfx_configure+0xda>
    2f9c:	4f20      	ldr	r7, [pc, #128]	; (3020 <uarte_nrfx_configure+0x14c>)
    2f9e:	42bb      	cmp	r3, r7
    2fa0:	d037      	beq.n	3012 <uarte_nrfx_configure+0x13e>
    2fa2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2fa6:	d1bd      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2fa8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2fac:	e004      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fae:	4f1d      	ldr	r7, [pc, #116]	; (3024 <uarte_nrfx_configure+0x150>)
    2fb0:	42bb      	cmp	r3, r7
    2fb2:	d1b7      	bne.n	2f24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2fb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2fb8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2fbc:	6903      	ldr	r3, [r0, #16]
    2fbe:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2fc0:	4334      	orrs	r4, r6
    2fc2:	4322      	orrs	r2, r4
    2fc4:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2fc6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2fca:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2fce:	2000      	movs	r0, #0
}
    2fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2fd2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2fd6:	e7ef      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2fd8:	4b13      	ldr	r3, [pc, #76]	; (3028 <uarte_nrfx_configure+0x154>)
    2fda:	e7ed      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2fdc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2fe0:	e7ea      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2fe2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2fe6:	e7e7      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2fe8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2fec:	e7e4      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2fee:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2ff2:	e7e1      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2ff4:	4b0d      	ldr	r3, [pc, #52]	; (302c <uarte_nrfx_configure+0x158>)
    2ff6:	e7df      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2ff8:	4b0d      	ldr	r3, [pc, #52]	; (3030 <uarte_nrfx_configure+0x15c>)
    2ffa:	e7dd      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2ffc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3000:	e7da      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3002:	4b0c      	ldr	r3, [pc, #48]	; (3034 <uarte_nrfx_configure+0x160>)
    3004:	e7d8      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3006:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    300a:	e7d5      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    300c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3010:	e7d2      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3016:	e7cf      	b.n	2fb8 <uarte_nrfx_configure+0xe4>
    3018:	0013b000 	.word	0x0013b000
    301c:	004ea000 	.word	0x004ea000
    3020:	0003d090 	.word	0x0003d090
    3024:	000f4240 	.word	0x000f4240
    3028:	00275000 	.word	0x00275000
    302c:	0075c000 	.word	0x0075c000
    3030:	003af000 	.word	0x003af000
    3034:	013a9000 	.word	0x013a9000

00003038 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3038:	6802      	ldr	r2, [r0, #0]
    switch (port)
    303a:	0953      	lsrs	r3, r2, #5
{
    303c:	b510      	push	{r4, lr}
    303e:	4604      	mov	r4, r0
    switch (port)
    3040:	d02c      	beq.n	309c <nrf_gpio_pin_port_decode+0x64>
    3042:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3044:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3048:	bf18      	it	ne
    304a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    304c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3050:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3052:	07db      	lsls	r3, r3, #31
    3054:	d40b      	bmi.n	306e <nrf_gpio_pin_port_decode+0x36>
    3056:	4914      	ldr	r1, [pc, #80]	; (30a8 <nrf_gpio_pin_port_decode+0x70>)
    3058:	4814      	ldr	r0, [pc, #80]	; (30ac <nrf_gpio_pin_port_decode+0x74>)
    305a:	4a15      	ldr	r2, [pc, #84]	; (30b0 <nrf_gpio_pin_port_decode+0x78>)
    305c:	f240 2329 	movw	r3, #553	; 0x229
    3060:	f004 ff97 	bl	7f92 <printk>
    3064:	4812      	ldr	r0, [pc, #72]	; (30b0 <nrf_gpio_pin_port_decode+0x78>)
    3066:	f240 2129 	movw	r1, #553	; 0x229
    306a:	f004 febb 	bl	7de4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    306e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3070:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3074:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3076:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3078:	d00d      	beq.n	3096 <nrf_gpio_pin_port_decode+0x5e>
    307a:	2b01      	cmp	r3, #1
    307c:	d011      	beq.n	30a2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    307e:	490d      	ldr	r1, [pc, #52]	; (30b4 <nrf_gpio_pin_port_decode+0x7c>)
    3080:	480a      	ldr	r0, [pc, #40]	; (30ac <nrf_gpio_pin_port_decode+0x74>)
    3082:	4a0b      	ldr	r2, [pc, #44]	; (30b0 <nrf_gpio_pin_port_decode+0x78>)
    3084:	f240 232e 	movw	r3, #558	; 0x22e
    3088:	f004 ff83 	bl	7f92 <printk>
    308c:	4808      	ldr	r0, [pc, #32]	; (30b0 <nrf_gpio_pin_port_decode+0x78>)
    308e:	f240 212e 	movw	r1, #558	; 0x22e
    3092:	f004 fea7 	bl	7de4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3096:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    309a:	bd10      	pop	{r4, pc}
    switch (port)
    309c:	f04f 33ff 	mov.w	r3, #4294967295
    30a0:	e7d4      	b.n	304c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    30a2:	4805      	ldr	r0, [pc, #20]	; (30b8 <nrf_gpio_pin_port_decode+0x80>)
    30a4:	e7f9      	b.n	309a <nrf_gpio_pin_port_decode+0x62>
    30a6:	bf00      	nop
    30a8:	00009426 	.word	0x00009426
    30ac:	00008e27 	.word	0x00008e27
    30b0:	000093f3 	.word	0x000093f3
    30b4:	00009606 	.word	0x00009606
    30b8:	50000300 	.word	0x50000300

000030bc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    30bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    30be:	6906      	ldr	r6, [r0, #16]
{
    30c0:	4605      	mov	r5, r0
    30c2:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30c4:	f005 fade 	bl	8684 <k_is_in_isr>
    30c8:	b910      	cbnz	r0, 30d0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    30ca:	4b2c      	ldr	r3, [pc, #176]	; (317c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	b983      	cbnz	r3, 30f2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    30d0:	f04f 0320 	mov.w	r3, #32
    30d4:	f3ef 8411 	mrs	r4, BASEPRI
    30d8:	f383 8812 	msr	BASEPRI_MAX, r3
    30dc:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    30e0:	4628      	mov	r0, r5
    30e2:	f005 f986 	bl	83f2 <is_tx_ready>
    30e6:	bb28      	cbnz	r0, 3134 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    30e8:	f384 8811 	msr	BASEPRI, r4
    30ec:	f3bf 8f6f 	isb	sy
}
    30f0:	e7ee      	b.n	30d0 <uarte_nrfx_poll_out+0x14>
{
    30f2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    30f4:	4628      	mov	r0, r5
    30f6:	f005 f97c 	bl	83f2 <is_tx_ready>
    30fa:	b970      	cbnz	r0, 311a <uarte_nrfx_poll_out+0x5e>
    30fc:	2001      	movs	r0, #1
    30fe:	f005 f9ca 	bl	8496 <nrfx_busy_wait>
    3102:	3c01      	subs	r4, #1
    3104:	d1f6      	bne.n	30f4 <uarte_nrfx_poll_out+0x38>
    3106:	2100      	movs	r1, #0
    3108:	2021      	movs	r0, #33	; 0x21
    310a:	f003 fa21 	bl	6550 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    310e:	e7f0      	b.n	30f2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3110:	f384 8811 	msr	BASEPRI, r4
    3114:	f3bf 8f6f 	isb	sy
}
    3118:	e7f5      	b.n	3106 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    311a:	f04f 0320 	mov.w	r3, #32
    311e:	f3ef 8411 	mrs	r4, BASEPRI
    3122:	f383 8812 	msr	BASEPRI_MAX, r3
    3126:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    312a:	4628      	mov	r0, r5
    312c:	f005 f961 	bl	83f2 <is_tx_ready>
    3130:	2800      	cmp	r0, #0
    3132:	d0ed      	beq.n	3110 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3134:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3138:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    313a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    313c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    313e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3142:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3146:	2200      	movs	r2, #0
    3148:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    314c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3150:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3154:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3158:	684a      	ldr	r2, [r1, #4]
    315a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    315c:	bf41      	itttt	mi
    315e:	2208      	movmi	r2, #8
    3160:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3164:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3168:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    316c:	2201      	movs	r2, #1
    316e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3170:	f384 8811 	msr	BASEPRI, r4
    3174:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    317a:	bf00      	nop
    317c:	20000aa3 	.word	0x20000aa3

00003180 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3184:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3188:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    318a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    318e:	2300      	movs	r3, #0
    3190:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3194:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3196:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3198:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    319a:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    319c:	1c58      	adds	r0, r3, #1
    319e:	d013      	beq.n	31c8 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31a0:	a801      	add	r0, sp, #4
    31a2:	9301      	str	r3, [sp, #4]
    31a4:	f7ff ff48 	bl	3038 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    31a8:	9a01      	ldr	r2, [sp, #4]
    31aa:	2301      	movs	r3, #1
    31ac:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    31ae:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    31b2:	68eb      	ldr	r3, [r5, #12]
    31b4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31b6:	a801      	add	r0, sp, #4
    31b8:	f7ff ff3e 	bl	3038 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    31bc:	9b01      	ldr	r3, [sp, #4]
    31be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    31c2:	2203      	movs	r2, #3
    31c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31c8:	692b      	ldr	r3, [r5, #16]
    31ca:	1c59      	adds	r1, r3, #1
    31cc:	d011      	beq.n	31f2 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    31ce:	7f2a      	ldrb	r2, [r5, #28]
    31d0:	9301      	str	r3, [sp, #4]
    31d2:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31d4:	a801      	add	r0, sp, #4
    31d6:	bf14      	ite	ne
    31d8:	f04f 0903 	movne.w	r9, #3
    31dc:	f04f 0900 	moveq.w	r9, #0
    31e0:	f7ff ff2a 	bl	3038 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    31e4:	9b01      	ldr	r3, [sp, #4]
    31e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    31ea:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    31ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    31f2:	696b      	ldr	r3, [r5, #20]
    31f4:	1c5a      	adds	r2, r3, #1
    31f6:	d013      	beq.n	3220 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31f8:	a801      	add	r0, sp, #4
    31fa:	9301      	str	r3, [sp, #4]
    31fc:	f7ff ff1c 	bl	3038 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3200:	9a01      	ldr	r2, [sp, #4]
    3202:	2301      	movs	r3, #1
    3204:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3206:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    320a:	696b      	ldr	r3, [r5, #20]
    320c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    320e:	a801      	add	r0, sp, #4
    3210:	f7ff ff12 	bl	3038 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3214:	9b01      	ldr	r3, [sp, #4]
    3216:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    321a:	2203      	movs	r2, #3
    321c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3220:	69ab      	ldr	r3, [r5, #24]
    3222:	1c58      	adds	r0, r3, #1
    3224:	d011      	beq.n	324a <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3226:	7f6a      	ldrb	r2, [r5, #29]
    3228:	9301      	str	r3, [sp, #4]
    322a:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    322c:	a801      	add	r0, sp, #4
    322e:	bf14      	ite	ne
    3230:	f04f 0903 	movne.w	r9, #3
    3234:	f04f 0900 	moveq.w	r9, #0
    3238:	f7ff fefe 	bl	3038 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    323c:	9b01      	ldr	r3, [sp, #4]
    323e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3242:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3246:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    324a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    324e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3250:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3254:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3258:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    325c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3260:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3262:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3266:	3104      	adds	r1, #4
    3268:	4630      	mov	r0, r6
    326a:	f7ff fe33 	bl	2ed4 <uarte_nrfx_configure>
	if (err) {
    326e:	4605      	mov	r5, r0
    3270:	2800      	cmp	r0, #0
    3272:	d146      	bne.n	3302 <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3274:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3278:	0799      	lsls	r1, r3, #30
    327a:	d519      	bpl.n	32b0 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    327c:	f107 0012 	add.w	r0, r7, #18
    3280:	f001 f820 	bl	42c4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3284:	4b22      	ldr	r3, [pc, #136]	; (3310 <uarte_instance_init.isra.0+0x190>)
    3286:	4298      	cmp	r0, r3
    3288:	d13f      	bne.n	330a <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    328a:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    328c:	00c3      	lsls	r3, r0, #3
    328e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3292:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3296:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    329a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    329e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    32a2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    32a6:	4a1b      	ldr	r2, [pc, #108]	; (3314 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32a8:	2301      	movs	r3, #1
    32aa:	4083      	lsls	r3, r0
    32ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    32b0:	2308      	movs	r3, #8
    32b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    32b6:	f898 3008 	ldrb.w	r3, [r8, #8]
    32ba:	b95b      	cbnz	r3, 32d4 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32bc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    32c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    32c4:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    32c8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    32cc:	2301      	movs	r3, #1
    32ce:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32d2:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    32d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    32d8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    32da:	bf5c      	itt	pl
    32dc:	f44f 7280 	movpl.w	r2, #256	; 0x100
    32e0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    32e4:	06db      	lsls	r3, r3, #27
    32e6:	bf44      	itt	mi
    32e8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    32ec:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    32f0:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    32f2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    32f4:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    32f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32fc:	2301      	movs	r3, #1
    32fe:	60a3      	str	r3, [r4, #8]
    3300:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3302:	4628      	mov	r0, r5
    3304:	b003      	add	sp, #12
    3306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    330a:	f06f 0504 	mvn.w	r5, #4
    330e:	e7f8      	b.n	3302 <uarte_instance_init.isra.0+0x182>
    3310:	0bad0000 	.word	0x0bad0000
    3314:	4001f000 	.word	0x4001f000

00003318 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3318:	4919      	ldr	r1, [pc, #100]	; (3380 <sys_clock_timeout_handler+0x68>)
{
    331a:	b570      	push	{r4, r5, r6, lr}
    331c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    331e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3322:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3324:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3328:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    332c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    332e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3332:	f04f 0500 	mov.w	r5, #0
    3336:	d20a      	bcs.n	334e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3338:	4b12      	ldr	r3, [pc, #72]	; (3384 <sys_clock_timeout_handler+0x6c>)
    333a:	6819      	ldr	r1, [r3, #0]
    333c:	060a      	lsls	r2, r1, #24
    333e:	0a0b      	lsrs	r3, r1, #8
    3340:	1992      	adds	r2, r2, r6
    3342:	4911      	ldr	r1, [pc, #68]	; (3388 <sys_clock_timeout_handler+0x70>)
    3344:	f143 0300 	adc.w	r3, r3, #0
    3348:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    334c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    334e:	f003 fec5 	bl	70dc <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3352:	00a3      	lsls	r3, r4, #2
    3354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3358:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    335c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3360:	42b2      	cmp	r2, r6
    3362:	d10b      	bne.n	337c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3364:	b91d      	cbnz	r5, 336e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3366:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    336a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    336e:	4b07      	ldr	r3, [pc, #28]	; (338c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3370:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3374:	fa00 f404 	lsl.w	r4, r0, r4
    3378:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    337c:	bd70      	pop	{r4, r5, r6, pc}
    337e:	bf00      	nop
    3380:	20000270 	.word	0x20000270
    3384:	20000a14 	.word	0x20000a14
    3388:	20000258 	.word	0x20000258
    338c:	40011000 	.word	0x40011000

00003390 <compare_int_lock>:
{
    3390:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3392:	2301      	movs	r3, #1
    3394:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3396:	4a11      	ldr	r2, [pc, #68]	; (33dc <compare_int_lock+0x4c>)
    3398:	f3bf 8f5b 	dmb	ish
    339c:	43dc      	mvns	r4, r3
    339e:	e852 1f00 	ldrex	r1, [r2]
    33a2:	ea01 0c04 	and.w	ip, r1, r4
    33a6:	e842 ce00 	strex	lr, ip, [r2]
    33aa:	f1be 0f00 	cmp.w	lr, #0
    33ae:	d1f6      	bne.n	339e <compare_int_lock+0xe>
    33b0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    33b8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    33bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    33c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    33c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    33c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33cc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    33d0:	420b      	tst	r3, r1
}
    33d2:	bf14      	ite	ne
    33d4:	2001      	movne	r0, #1
    33d6:	2000      	moveq	r0, #0
    33d8:	bd10      	pop	{r4, pc}
    33da:	bf00      	nop
    33dc:	20000a10 	.word	0x20000a10

000033e0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    33e0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    33e2:	4a12      	ldr	r2, [pc, #72]	; (342c <compare_int_unlock.part.0+0x4c>)
    33e4:	f3bf 8f5b 	dmb	ish
    33e8:	4083      	lsls	r3, r0
    33ea:	e852 1f00 	ldrex	r1, [r2]
    33ee:	4319      	orrs	r1, r3
    33f0:	e842 1c00 	strex	ip, r1, [r2]
    33f4:	f1bc 0f00 	cmp.w	ip, #0
    33f8:	d1f7      	bne.n	33ea <compare_int_unlock.part.0+0xa>
    33fa:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    33fe:	4a0c      	ldr	r2, [pc, #48]	; (3430 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3404:	4083      	lsls	r3, r0
    3406:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    340a:	4b0a      	ldr	r3, [pc, #40]	; (3434 <compare_int_unlock.part.0+0x54>)
    340c:	f3bf 8f5b 	dmb	ish
    3410:	681b      	ldr	r3, [r3, #0]
    3412:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3416:	fa23 f000 	lsr.w	r0, r3, r0
    341a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    341c:	bf42      	ittt	mi
    341e:	4b06      	ldrmi	r3, [pc, #24]	; (3438 <compare_int_unlock.part.0+0x58>)
    3420:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3424:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3428:	4770      	bx	lr
    342a:	bf00      	nop
    342c:	20000a10 	.word	0x20000a10
    3430:	40011000 	.word	0x40011000
    3434:	20000a0c 	.word	0x20000a0c
    3438:	e000e100 	.word	0xe000e100

0000343c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    343c:	4b0d      	ldr	r3, [pc, #52]	; (3474 <z_nrf_rtc_timer_read+0x38>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	0a19      	lsrs	r1, r3, #8
    3442:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3444:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3448:	4b0b      	ldr	r3, [pc, #44]	; (3478 <z_nrf_rtc_timer_read+0x3c>)
    344a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    344e:	18c0      	adds	r0, r0, r3
    3450:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3458:	d20a      	bcs.n	3470 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    345a:	4b08      	ldr	r3, [pc, #32]	; (347c <z_nrf_rtc_timer_read+0x40>)
    345c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3460:	4299      	cmp	r1, r3
    3462:	bf08      	it	eq
    3464:	4290      	cmpeq	r0, r2
    3466:	d203      	bcs.n	3470 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3468:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    346c:	f141 0100 	adc.w	r1, r1, #0
}
    3470:	4770      	bx	lr
    3472:	bf00      	nop
    3474:	20000a14 	.word	0x20000a14
    3478:	40011000 	.word	0x40011000
    347c:	20000258 	.word	0x20000258

00003480 <compare_set>:
{
    3480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3484:	b085      	sub	sp, #20
    3486:	4616      	mov	r6, r2
    3488:	461f      	mov	r7, r3
    348a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    348c:	f7ff ff80 	bl	3390 <compare_int_lock>
    3490:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3492:	f7ff ffd3 	bl	343c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3496:	42b9      	cmp	r1, r7
    3498:	bf08      	it	eq
    349a:	42b0      	cmpeq	r0, r6
    349c:	d27f      	bcs.n	359e <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    349e:	ebb6 0800 	subs.w	r8, r6, r0
    34a2:	eb67 0901 	sbc.w	r9, r7, r1
    34a6:	2300      	movs	r3, #0
    34a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    34ac:	454b      	cmp	r3, r9
    34ae:	bf08      	it	eq
    34b0:	4542      	cmpeq	r2, r8
    34b2:	f0c0 8085 	bcc.w	35c0 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    34b6:	4b44      	ldr	r3, [pc, #272]	; (35c8 <compare_set+0x148>)
    34b8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    34bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    34c0:	429f      	cmp	r7, r3
    34c2:	bf08      	it	eq
    34c4:	4296      	cmpeq	r6, r2
    34c6:	d054      	beq.n	3572 <compare_set+0xf2>
    34c8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34cc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    34d0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    34d4:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34d8:	fa0b f205 	lsl.w	r2, fp, r5
    34dc:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    34e0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34e4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    34e8:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    34ea:	4a38      	ldr	r2, [pc, #224]	; (35cc <compare_set+0x14c>)
    return p_reg->CC[ch];
    34ec:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    34f0:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    34f8:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    34fc:	461c      	mov	r4, r3
    34fe:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3500:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3504:	eba0 000a 	sub.w	r0, r0, sl
    3508:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    350c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3510:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3512:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3516:	d105      	bne.n	3524 <compare_set+0xa4>
    3518:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    351a:	2013      	movs	r0, #19
    351c:	f005 f8c1 	bl	86a2 <z_impl_k_busy_wait>
    3520:	4a2a      	ldr	r2, [pc, #168]	; (35cc <compare_set+0x14c>)
    3522:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3524:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3526:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    352a:	eba4 000c 	sub.w	r0, r4, ip
    352e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3532:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3536:	bf88      	it	hi
    3538:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    353a:	2000      	movs	r0, #0
    353c:	f8c8 0000 	str.w	r0, [r8]
    3540:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3544:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3548:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    354c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3550:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3554:	4582      	cmp	sl, r0
    3556:	d006      	beq.n	3566 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3558:	1a20      	subs	r0, r4, r0
    355a:	3802      	subs	r0, #2
    355c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3560:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3564:	d819      	bhi.n	359a <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3566:	1ae4      	subs	r4, r4, r3
    3568:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    356c:	1932      	adds	r2, r6, r4
    356e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3572:	4c15      	ldr	r4, [pc, #84]	; (35c8 <compare_set+0x148>)
    3574:	0129      	lsls	r1, r5, #4
    3576:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    357a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    357e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3582:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3584:	6043      	str	r3, [r0, #4]
	return ret;
    3586:	2400      	movs	r4, #0
	if (key) {
    3588:	9b01      	ldr	r3, [sp, #4]
    358a:	b113      	cbz	r3, 3592 <compare_set+0x112>
    358c:	4628      	mov	r0, r5
    358e:	f7ff ff27 	bl	33e0 <compare_int_unlock.part.0>
}
    3592:	4620      	mov	r0, r4
    3594:	b005      	add	sp, #20
    3596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    359a:	4620      	mov	r0, r4
    359c:	e7b0      	b.n	3500 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    359e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    35a0:	4a0b      	ldr	r2, [pc, #44]	; (35d0 <compare_set+0x150>)
    35a2:	f3bf 8f5b 	dmb	ish
    35a6:	40ab      	lsls	r3, r5
    35a8:	e852 1f00 	ldrex	r1, [r2]
    35ac:	4319      	orrs	r1, r3
    35ae:	e842 1000 	strex	r0, r1, [r2]
    35b2:	2800      	cmp	r0, #0
    35b4:	d1f8      	bne.n	35a8 <compare_set+0x128>
    35b6:	f3bf 8f5b 	dmb	ish
    35ba:	4632      	mov	r2, r6
    35bc:	463b      	mov	r3, r7
    35be:	e7d8      	b.n	3572 <compare_set+0xf2>
			return -EINVAL;
    35c0:	f06f 0415 	mvn.w	r4, #21
    35c4:	e7e0      	b.n	3588 <compare_set+0x108>
    35c6:	bf00      	nop
    35c8:	20000260 	.word	0x20000260
    35cc:	40011000 	.word	0x40011000
    35d0:	20000a0c 	.word	0x20000a0c

000035d4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    35d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    35d6:	4b19      	ldr	r3, [pc, #100]	; (363c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    35d8:	4d19      	ldr	r5, [pc, #100]	; (3640 <sys_clock_driver_init+0x6c>)
    35da:	2400      	movs	r4, #0
    35dc:	f04f 30ff 	mov.w	r0, #4294967295
    35e0:	f04f 31ff 	mov.w	r1, #4294967295
    35e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    35e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    35ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    35f0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35f4:	4b13      	ldr	r3, [pc, #76]	; (3644 <sys_clock_driver_init+0x70>)
    35f6:	2602      	movs	r6, #2
    35f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    35fc:	2101      	movs	r1, #1
    35fe:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3602:	2011      	movs	r0, #17
    3604:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3608:	4622      	mov	r2, r4
    360a:	f7fe f965 	bl	18d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    360e:	2011      	movs	r0, #17
    3610:	f7fe f944 	bl	189c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3614:	4a0c      	ldr	r2, [pc, #48]	; (3648 <sys_clock_driver_init+0x74>)
    3616:	2301      	movs	r3, #1
    3618:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    361a:	4a0c      	ldr	r2, [pc, #48]	; (364c <sys_clock_driver_init+0x78>)
    361c:	602b      	str	r3, [r5, #0]
    361e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3620:	4b0b      	ldr	r3, [pc, #44]	; (3650 <sys_clock_driver_init+0x7c>)
    3622:	4a0c      	ldr	r2, [pc, #48]	; (3654 <sys_clock_driver_init+0x80>)
    3624:	9300      	str	r3, [sp, #0]
    3626:	9401      	str	r4, [sp, #4]
    3628:	2300      	movs	r3, #0
    362a:	4620      	mov	r0, r4
    362c:	f7ff ff28 	bl	3480 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3630:	4630      	mov	r0, r6
    3632:	f7ff f907 	bl	2844 <z_nrf_clock_control_lf_on>

	return 0;
}
    3636:	4620      	mov	r0, r4
    3638:	b002      	add	sp, #8
    363a:	bd70      	pop	{r4, r5, r6, pc}
    363c:	20000260 	.word	0x20000260
    3640:	40011000 	.word	0x40011000
    3644:	e000e100 	.word	0xe000e100
    3648:	40011008 	.word	0x40011008
    364c:	20000a10 	.word	0x20000a10
    3650:	00003319 	.word	0x00003319
    3654:	007fffff 	.word	0x007fffff

00003658 <rtc_nrf_isr>:
{
    3658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    365c:	4c34      	ldr	r4, [pc, #208]	; (3730 <rtc_nrf_isr+0xd8>)
    365e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3662:	079a      	lsls	r2, r3, #30
    3664:	d509      	bpl.n	367a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3666:	4b33      	ldr	r3, [pc, #204]	; (3734 <rtc_nrf_isr+0xdc>)
    3668:	681a      	ldr	r2, [r3, #0]
    366a:	b132      	cbz	r2, 367a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    366c:	2200      	movs	r2, #0
    366e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3670:	4a31      	ldr	r2, [pc, #196]	; (3738 <rtc_nrf_isr+0xe0>)
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	6813      	ldr	r3, [r2, #0]
    3676:	3301      	adds	r3, #1
    3678:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    367a:	f04f 0320 	mov.w	r3, #32
    367e:	f3ef 8211 	mrs	r2, BASEPRI
    3682:	f383 8812 	msr	BASEPRI_MAX, r3
    3686:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    368a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    368e:	03db      	lsls	r3, r3, #15
    3690:	d512      	bpl.n	36b8 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3692:	f3bf 8f5b 	dmb	ish
    3696:	4b29      	ldr	r3, [pc, #164]	; (373c <rtc_nrf_isr+0xe4>)
    3698:	e853 1f00 	ldrex	r1, [r3]
    369c:	f021 0001 	bic.w	r0, r1, #1
    36a0:	e843 0600 	strex	r6, r0, [r3]
    36a4:	2e00      	cmp	r6, #0
    36a6:	d1f7      	bne.n	3698 <rtc_nrf_isr+0x40>
    36a8:	f3bf 8f5b 	dmb	ish
    36ac:	4b24      	ldr	r3, [pc, #144]	; (3740 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    36ae:	2900      	cmp	r1, #0
    36b0:	d136      	bne.n	3720 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36b2:	6819      	ldr	r1, [r3, #0]
		if (result) {
    36b4:	2900      	cmp	r1, #0
    36b6:	d133      	bne.n	3720 <rtc_nrf_isr+0xc8>
{
    36b8:	2300      	movs	r3, #0
	__asm__ volatile(
    36ba:	f382 8811 	msr	BASEPRI, r2
    36be:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    36c2:	b353      	cbz	r3, 371a <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    36c4:	f7ff feba 	bl	343c <z_nrf_rtc_timer_read>
    36c8:	4606      	mov	r6, r0
	__asm__ volatile(
    36ca:	f04f 0320 	mov.w	r3, #32
    36ce:	f3ef 8011 	mrs	r0, BASEPRI
    36d2:	f383 8812 	msr	BASEPRI_MAX, r3
    36d6:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    36da:	4b1a      	ldr	r3, [pc, #104]	; (3744 <rtc_nrf_isr+0xec>)
    36dc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    36e0:	4549      	cmp	r1, r9
    36e2:	bf08      	it	eq
    36e4:	4546      	cmpeq	r6, r8
    36e6:	f04f 0200 	mov.w	r2, #0
    36ea:	d31e      	bcc.n	372a <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    36ec:	f04f 36ff 	mov.w	r6, #4294967295
    36f0:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    36f4:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    36f8:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    36fc:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    36fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3702:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3706:	f380 8811 	msr	BASEPRI, r0
    370a:	f3bf 8f6f 	isb	sy
		if (handler) {
    370e:	b121      	cbz	r1, 371a <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3710:	9500      	str	r5, [sp, #0]
    3712:	4642      	mov	r2, r8
    3714:	464b      	mov	r3, r9
    3716:	2000      	movs	r0, #0
    3718:	4788      	blx	r1
}
    371a:	b003      	add	sp, #12
    371c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3720:	2100      	movs	r1, #0
    3722:	6019      	str	r1, [r3, #0]
    3724:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3726:	2301      	movs	r3, #1
}
    3728:	e7c7      	b.n	36ba <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    372a:	4611      	mov	r1, r2
    372c:	e7eb      	b.n	3706 <rtc_nrf_isr+0xae>
    372e:	bf00      	nop
    3730:	40011000 	.word	0x40011000
    3734:	40011104 	.word	0x40011104
    3738:	20000a14 	.word	0x20000a14
    373c:	20000a0c 	.word	0x20000a0c
    3740:	40011140 	.word	0x40011140
    3744:	20000260 	.word	0x20000260

00003748 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3748:	4b14      	ldr	r3, [pc, #80]	; (379c <sys_clock_set_timeout+0x54>)
{
    374a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    374c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3750:	bf08      	it	eq
    3752:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3754:	1e44      	subs	r4, r0, #1
    3756:	2c00      	cmp	r4, #0
    3758:	dd1e      	ble.n	3798 <sys_clock_set_timeout+0x50>
    375a:	429c      	cmp	r4, r3
    375c:	bfa8      	it	ge
    375e:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3760:	f7ff fe6c 	bl	343c <z_nrf_rtc_timer_read>
    3764:	4b0e      	ldr	r3, [pc, #56]	; (37a0 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3766:	490f      	ldr	r1, [pc, #60]	; (37a4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3768:	e9d3 2300 	ldrd	r2, r3, [r3]
    376c:	1a80      	subs	r0, r0, r2
		ticks = 0;
    376e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3772:	bf28      	it	cs
    3774:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3776:	3001      	adds	r0, #1
    3778:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    377a:	4808      	ldr	r0, [pc, #32]	; (379c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    377c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    377e:	4284      	cmp	r4, r0
    3780:	bf28      	it	cs
    3782:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3784:	1912      	adds	r2, r2, r4
    3786:	f04f 0000 	mov.w	r0, #0
    378a:	9001      	str	r0, [sp, #4]
    378c:	f143 0300 	adc.w	r3, r3, #0
    3790:	f7ff fe76 	bl	3480 <compare_set>
}
    3794:	b002      	add	sp, #8
    3796:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3798:	2400      	movs	r4, #0
    379a:	e7e1      	b.n	3760 <sys_clock_set_timeout+0x18>
    379c:	007fffff 	.word	0x007fffff
    37a0:	20000270 	.word	0x20000270
    37a4:	00003319 	.word	0x00003319

000037a8 <sys_clock_elapsed>:
{
    37a8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    37aa:	f7ff fe47 	bl	343c <z_nrf_rtc_timer_read>
    37ae:	4b02      	ldr	r3, [pc, #8]	; (37b8 <sys_clock_elapsed+0x10>)
    37b0:	681b      	ldr	r3, [r3, #0]
}
    37b2:	1ac0      	subs	r0, r0, r3
    37b4:	bd08      	pop	{r3, pc}
    37b6:	bf00      	nop
    37b8:	20000270 	.word	0x20000270

000037bc <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    37bc:	b508      	push	{r3, lr}
    switch (domain)
    37be:	b178      	cbz	r0, 37e0 <nrf_clock_is_running.constprop.0+0x24>
    37c0:	2801      	cmp	r0, #1
    37c2:	d01c      	beq.n	37fe <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    37c4:	4a14      	ldr	r2, [pc, #80]	; (3818 <nrf_clock_is_running.constprop.0+0x5c>)
    37c6:	4915      	ldr	r1, [pc, #84]	; (381c <nrf_clock_is_running.constprop.0+0x60>)
    37c8:	4815      	ldr	r0, [pc, #84]	; (3820 <nrf_clock_is_running.constprop.0+0x64>)
    37ca:	f44f 734f 	mov.w	r3, #828	; 0x33c
    37ce:	f004 fbe0 	bl	7f92 <printk>
    37d2:	4811      	ldr	r0, [pc, #68]	; (3818 <nrf_clock_is_running.constprop.0+0x5c>)
    37d4:	f44f 714f 	mov.w	r1, #828	; 0x33c
    37d8:	f004 fb04 	bl	7de4 <assert_post_action>
            return false;
    37dc:	2000      	movs	r0, #0
    37de:	e00d      	b.n	37fc <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    37e0:	b131      	cbz	r1, 37f0 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    37ea:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    37ee:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    37f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37f4:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37f8:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    37fc:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    37fe:	b131      	cbz	r1, 380e <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3804:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3808:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    380c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    380e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3812:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3816:	e7ef      	b.n	37f8 <nrf_clock_is_running.constprop.0+0x3c>
    3818:	0000945e 	.word	0x0000945e
    381c:	00009606 	.word	0x00009606
    3820:	00008e27 	.word	0x00008e27

00003824 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3824:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3826:	4604      	mov	r4, r0
    3828:	b948      	cbnz	r0, 383e <nrfx_clock_init+0x1a>
    382a:	490a      	ldr	r1, [pc, #40]	; (3854 <nrfx_clock_init+0x30>)
    382c:	480a      	ldr	r0, [pc, #40]	; (3858 <nrfx_clock_init+0x34>)
    382e:	4a0b      	ldr	r2, [pc, #44]	; (385c <nrfx_clock_init+0x38>)
    3830:	23bd      	movs	r3, #189	; 0xbd
    3832:	f004 fbae 	bl	7f92 <printk>
    3836:	4809      	ldr	r0, [pc, #36]	; (385c <nrfx_clock_init+0x38>)
    3838:	21bd      	movs	r1, #189	; 0xbd
    383a:	f004 fad3 	bl	7de4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    383e:	4b08      	ldr	r3, [pc, #32]	; (3860 <nrfx_clock_init+0x3c>)
    3840:	791a      	ldrb	r2, [r3, #4]
    3842:	b922      	cbnz	r2, 384e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3844:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3846:	4807      	ldr	r0, [pc, #28]	; (3864 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3848:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    384a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    384c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    384e:	4806      	ldr	r0, [pc, #24]	; (3868 <nrfx_clock_init+0x44>)
    return err_code;
    3850:	e7fc      	b.n	384c <nrfx_clock_init+0x28>
    3852:	bf00      	nop
    3854:	000094cf 	.word	0x000094cf
    3858:	00008e27 	.word	0x00008e27
    385c:	00009492 	.word	0x00009492
    3860:	20000a18 	.word	0x20000a18
    3864:	0bad0000 	.word	0x0bad0000
    3868:	0bad000c 	.word	0x0bad000c

0000386c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    386c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    386e:	4b0b      	ldr	r3, [pc, #44]	; (389c <nrfx_clock_enable+0x30>)
    3870:	791b      	ldrb	r3, [r3, #4]
    3872:	b94b      	cbnz	r3, 3888 <nrfx_clock_enable+0x1c>
    3874:	490a      	ldr	r1, [pc, #40]	; (38a0 <nrfx_clock_enable+0x34>)
    3876:	480b      	ldr	r0, [pc, #44]	; (38a4 <nrfx_clock_enable+0x38>)
    3878:	4a0b      	ldr	r2, [pc, #44]	; (38a8 <nrfx_clock_enable+0x3c>)
    387a:	23d6      	movs	r3, #214	; 0xd6
    387c:	f004 fb89 	bl	7f92 <printk>
    3880:	4809      	ldr	r0, [pc, #36]	; (38a8 <nrfx_clock_enable+0x3c>)
    3882:	21d6      	movs	r1, #214	; 0xd6
    3884:	f004 faae 	bl	7de4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3888:	2000      	movs	r0, #0
    388a:	f7fe f817 	bl	18bc <arch_irq_is_enabled>
    388e:	b918      	cbnz	r0, 3898 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3894:	f7fe b802 	b.w	189c <arch_irq_enable>
    3898:	bd08      	pop	{r3, pc}
    389a:	bf00      	nop
    389c:	20000a18 	.word	0x20000a18
    38a0:	000094dd 	.word	0x000094dd
    38a4:	00008e27 	.word	0x00008e27
    38a8:	00009492 	.word	0x00009492

000038ac <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38ac:	4b22      	ldr	r3, [pc, #136]	; (3938 <nrfx_clock_start+0x8c>)
    38ae:	791b      	ldrb	r3, [r3, #4]
{
    38b0:	b513      	push	{r0, r1, r4, lr}
    38b2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    38b4:	b95b      	cbnz	r3, 38ce <nrfx_clock_start+0x22>
    38b6:	4921      	ldr	r1, [pc, #132]	; (393c <nrfx_clock_start+0x90>)
    38b8:	4821      	ldr	r0, [pc, #132]	; (3940 <nrfx_clock_start+0x94>)
    38ba:	4a22      	ldr	r2, [pc, #136]	; (3944 <nrfx_clock_start+0x98>)
    38bc:	f44f 7389 	mov.w	r3, #274	; 0x112
    38c0:	f004 fb67 	bl	7f92 <printk>
    38c4:	481f      	ldr	r0, [pc, #124]	; (3944 <nrfx_clock_start+0x98>)
    38c6:	f44f 7189 	mov.w	r1, #274	; 0x112
    38ca:	f004 fa8b 	bl	7de4 <assert_post_action>
    switch (domain)
    38ce:	b174      	cbz	r4, 38ee <nrfx_clock_start+0x42>
    38d0:	2c01      	cmp	r4, #1
    38d2:	d027      	beq.n	3924 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    38d4:	4a1b      	ldr	r2, [pc, #108]	; (3944 <nrfx_clock_start+0x98>)
    38d6:	491c      	ldr	r1, [pc, #112]	; (3948 <nrfx_clock_start+0x9c>)
    38d8:	4819      	ldr	r0, [pc, #100]	; (3940 <nrfx_clock_start+0x94>)
    38da:	f44f 73a2 	mov.w	r3, #324	; 0x144
    38de:	f004 fb58 	bl	7f92 <printk>
    38e2:	4818      	ldr	r0, [pc, #96]	; (3944 <nrfx_clock_start+0x98>)
    38e4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    38e8:	f004 fa7c 	bl	7de4 <assert_post_action>
            break;
    }
}
    38ec:	e016      	b.n	391c <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    38ee:	a901      	add	r1, sp, #4
    38f0:	4620      	mov	r0, r4
    38f2:	f7ff ff63 	bl	37bc <nrf_clock_is_running.constprop.0>
    38f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38fa:	b188      	cbz	r0, 3920 <nrfx_clock_start+0x74>
    38fc:	9a01      	ldr	r2, [sp, #4]
    38fe:	2a01      	cmp	r2, #1
    3900:	d10e      	bne.n	3920 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3902:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3906:	4b11      	ldr	r3, [pc, #68]	; (394c <nrfx_clock_start+0xa0>)
    3908:	2200      	movs	r2, #0
    390a:	601a      	str	r2, [r3, #0]
    390c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    390e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3912:	2202      	movs	r2, #2
    3914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3918:	2201      	movs	r2, #1
    391a:	609a      	str	r2, [r3, #8]
}
    391c:	b002      	add	sp, #8
    391e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3920:	2200      	movs	r2, #0
    3922:	e7ee      	b.n	3902 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3924:	4b0a      	ldr	r3, [pc, #40]	; (3950 <nrfx_clock_start+0xa4>)
    3926:	2200      	movs	r2, #0
    3928:	601a      	str	r2, [r3, #0]
    392a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    392c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3930:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3934:	601c      	str	r4, [r3, #0]
}
    3936:	e7f1      	b.n	391c <nrfx_clock_start+0x70>
    3938:	20000a18 	.word	0x20000a18
    393c:	000094dd 	.word	0x000094dd
    3940:	00008e27 	.word	0x00008e27
    3944:	00009492 	.word	0x00009492
    3948:	00009606 	.word	0x00009606
    394c:	40000104 	.word	0x40000104
    3950:	40000100 	.word	0x40000100

00003954 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3954:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3956:	4d2f      	ldr	r5, [pc, #188]	; (3a14 <nrfx_clock_stop+0xc0>)
    3958:	792a      	ldrb	r2, [r5, #4]
{
    395a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    395c:	b95a      	cbnz	r2, 3976 <nrfx_clock_stop+0x22>
    395e:	492e      	ldr	r1, [pc, #184]	; (3a18 <nrfx_clock_stop+0xc4>)
    3960:	482e      	ldr	r0, [pc, #184]	; (3a1c <nrfx_clock_stop+0xc8>)
    3962:	4a2f      	ldr	r2, [pc, #188]	; (3a20 <nrfx_clock_stop+0xcc>)
    3964:	f240 134b 	movw	r3, #331	; 0x14b
    3968:	f004 fb13 	bl	7f92 <printk>
    396c:	482c      	ldr	r0, [pc, #176]	; (3a20 <nrfx_clock_stop+0xcc>)
    396e:	f240 114b 	movw	r1, #331	; 0x14b
    3972:	f004 fa37 	bl	7de4 <assert_post_action>
    switch (domain)
    3976:	b17c      	cbz	r4, 3998 <nrfx_clock_stop+0x44>
    3978:	2c01      	cmp	r4, #1
    397a:	d028      	beq.n	39ce <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    397c:	4929      	ldr	r1, [pc, #164]	; (3a24 <nrfx_clock_stop+0xd0>)
    397e:	4827      	ldr	r0, [pc, #156]	; (3a1c <nrfx_clock_stop+0xc8>)
    3980:	4a27      	ldr	r2, [pc, #156]	; (3a20 <nrfx_clock_stop+0xcc>)
    3982:	f240 1367 	movw	r3, #359	; 0x167
    3986:	f004 fb04 	bl	7f92 <printk>
    398a:	4825      	ldr	r0, [pc, #148]	; (3a20 <nrfx_clock_stop+0xcc>)
    398c:	f240 1167 	movw	r1, #359	; 0x167
    3990:	f004 fa28 	bl	7de4 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3994:	b003      	add	sp, #12
    3996:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    399c:	2202      	movs	r2, #2
    399e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39a2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    39a6:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39aa:	2201      	movs	r2, #1
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	4b1e      	ldr	r3, [pc, #120]	; (3a28 <nrfx_clock_stop+0xd4>)
    39b0:	f242 7410 	movw	r4, #10000	; 0x2710
    39b4:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    39b6:	2100      	movs	r1, #0
    39b8:	4608      	mov	r0, r1
    39ba:	f7ff feff 	bl	37bc <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    39be:	2800      	cmp	r0, #0
    39c0:	d0e8      	beq.n	3994 <nrfx_clock_stop+0x40>
    39c2:	2001      	movs	r0, #1
    39c4:	f004 fd67 	bl	8496 <nrfx_busy_wait>
    39c8:	3c01      	subs	r4, #1
    39ca:	d1f4      	bne.n	39b6 <nrfx_clock_stop+0x62>
    39cc:	e7e2      	b.n	3994 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    39ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39d2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    39d4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    39dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    39e0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39e2:	4b12      	ldr	r3, [pc, #72]	; (3a2c <nrfx_clock_stop+0xd8>)
    39e4:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    39e6:	f88d 4007 	strb.w	r4, [sp, #7]
    39ea:	f242 7410 	movw	r4, #10000	; 0x2710
    39ee:	f10d 0107 	add.w	r1, sp, #7
    39f2:	2001      	movs	r0, #1
    39f4:	f7ff fee2 	bl	37bc <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    39f8:	b910      	cbnz	r0, 3a00 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    39fa:	2300      	movs	r3, #0
    39fc:	716b      	strb	r3, [r5, #5]
    39fe:	e7c9      	b.n	3994 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3a00:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3a04:	2801      	cmp	r0, #1
    3a06:	d1f8      	bne.n	39fa <nrfx_clock_stop+0xa6>
    3a08:	f004 fd45 	bl	8496 <nrfx_busy_wait>
    3a0c:	3c01      	subs	r4, #1
    3a0e:	d1ee      	bne.n	39ee <nrfx_clock_stop+0x9a>
    3a10:	e7f3      	b.n	39fa <nrfx_clock_stop+0xa6>
    3a12:	bf00      	nop
    3a14:	20000a18 	.word	0x20000a18
    3a18:	000094dd 	.word	0x000094dd
    3a1c:	00008e27 	.word	0x00008e27
    3a20:	00009492 	.word	0x00009492
    3a24:	00009606 	.word	0x00009606
    3a28:	4000000c 	.word	0x4000000c
    3a2c:	40000004 	.word	0x40000004

00003a30 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a30:	4b16      	ldr	r3, [pc, #88]	; (3a8c <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3a32:	b507      	push	{r0, r1, r2, lr}
    3a34:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3a36:	b16a      	cbz	r2, 3a54 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a38:	2200      	movs	r2, #0
    3a3a:	601a      	str	r2, [r3, #0]
    3a3c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a42:	2201      	movs	r2, #1
    3a44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3a48:	4b11      	ldr	r3, [pc, #68]	; (3a90 <nrfx_power_clock_irq_handler+0x60>)
    3a4a:	7958      	ldrb	r0, [r3, #5]
    3a4c:	b910      	cbnz	r0, 3a54 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3a4e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3a50:	681b      	ldr	r3, [r3, #0]
    3a52:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a54:	4b0f      	ldr	r3, [pc, #60]	; (3a94 <nrfx_power_clock_irq_handler+0x64>)
    3a56:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a58:	b16a      	cbz	r2, 3a76 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a5a:	2000      	movs	r0, #0
    3a5c:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3a5e:	a901      	add	r1, sp, #4
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	f7ff feab 	bl	37bc <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a66:	9a01      	ldr	r2, [sp, #4]
    3a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a6c:	b932      	cbnz	r2, 3a7c <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a6e:	2201      	movs	r2, #1
    3a70:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a74:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a76:	b003      	add	sp, #12
    3a78:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3a7c:	2202      	movs	r2, #2
    3a7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a82:	4b03      	ldr	r3, [pc, #12]	; (3a90 <nrfx_power_clock_irq_handler+0x60>)
    3a84:	2001      	movs	r0, #1
    3a86:	681b      	ldr	r3, [r3, #0]
    3a88:	4798      	blx	r3
}
    3a8a:	e7f4      	b.n	3a76 <nrfx_power_clock_irq_handler+0x46>
    3a8c:	40000100 	.word	0x40000100
    3a90:	20000a18 	.word	0x20000a18
    3a94:	40000104 	.word	0x40000104

00003a98 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3a98:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3a9a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3a9c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3a9e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3aa2:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3aa4:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3aa8:	d014      	beq.n	3ad4 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3aaa:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3aae:	fa05 f204 	lsl.w	r2, r5, r4
    3ab2:	ea23 0202 	bic.w	r2, r3, r2
    3ab6:	e850 6f00 	ldrex	r6, [r0]
    3aba:	429e      	cmp	r6, r3
    3abc:	d104      	bne.n	3ac8 <nrfx_flag32_alloc+0x30>
    3abe:	e840 2c00 	strex	ip, r2, [r0]
    3ac2:	f1bc 0f00 	cmp.w	ip, #0
    3ac6:	d1f6      	bne.n	3ab6 <nrfx_flag32_alloc+0x1e>
    3ac8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3acc:	d1e6      	bne.n	3a9c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3ace:	4802      	ldr	r0, [pc, #8]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    *p_flag = idx;
    3ad0:	700c      	strb	r4, [r1, #0]
}
    3ad2:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3ad4:	4801      	ldr	r0, [pc, #4]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3ad6:	e7fc      	b.n	3ad2 <nrfx_flag32_alloc+0x3a>
    3ad8:	0bad0000 	.word	0x0bad0000
    3adc:	0bad0002 	.word	0x0bad0002

00003ae0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3ae0:	6803      	ldr	r3, [r0, #0]
    3ae2:	40cb      	lsrs	r3, r1
    3ae4:	07db      	lsls	r3, r3, #31
{
    3ae6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3ae8:	d415      	bmi.n	3b16 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3aea:	2301      	movs	r3, #1
    3aec:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3af0:	6803      	ldr	r3, [r0, #0]
    3af2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3af6:	ea41 0203 	orr.w	r2, r1, r3
    3afa:	e850 4f00 	ldrex	r4, [r0]
    3afe:	429c      	cmp	r4, r3
    3b00:	d104      	bne.n	3b0c <nrfx_flag32_free+0x2c>
    3b02:	e840 2c00 	strex	ip, r2, [r0]
    3b06:	f1bc 0f00 	cmp.w	ip, #0
    3b0a:	d1f6      	bne.n	3afa <nrfx_flag32_free+0x1a>
    3b0c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3b10:	d1ee      	bne.n	3af0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3b12:	4802      	ldr	r0, [pc, #8]	; (3b1c <nrfx_flag32_free+0x3c>)
}
    3b14:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3b16:	4802      	ldr	r0, [pc, #8]	; (3b20 <nrfx_flag32_free+0x40>)
    3b18:	e7fc      	b.n	3b14 <nrfx_flag32_free+0x34>
    3b1a:	bf00      	nop
    3b1c:	0bad0000 	.word	0x0bad0000
    3b20:	0bad0004 	.word	0x0bad0004

00003b24 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b24:	4b05      	ldr	r3, [pc, #20]	; (3b3c <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b26:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3b2c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3b30:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3b34:	4258      	negs	r0, r3
    3b36:	4158      	adcs	r0, r3
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	20000100 	.word	0x20000100

00003b40 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3b40:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b42:	f100 0308 	add.w	r3, r0, #8
    3b46:	4c0c      	ldr	r4, [pc, #48]	; (3b78 <call_handler+0x38>)
    3b48:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3b4c:	05da      	lsls	r2, r3, #23
{
    3b4e:	4605      	mov	r5, r0
    3b50:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b52:	d507      	bpl.n	3b64 <call_handler+0x24>
    3b54:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3b58:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3b5c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3b60:	6852      	ldr	r2, [r2, #4]
    3b62:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3b64:	68a3      	ldr	r3, [r4, #8]
    3b66:	b12b      	cbz	r3, 3b74 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3b68:	68e2      	ldr	r2, [r4, #12]
    3b6a:	4631      	mov	r1, r6
    3b6c:	4628      	mov	r0, r5
    }
}
    3b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3b72:	4718      	bx	r3
}
    3b74:	bd70      	pop	{r4, r5, r6, pc}
    3b76:	bf00      	nop
    3b78:	20000100 	.word	0x20000100

00003b7c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b7c:	4b19      	ldr	r3, [pc, #100]	; (3be4 <release_handler+0x68>)
    3b7e:	3008      	adds	r0, #8
{
    3b80:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3b82:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3b86:	05d1      	lsls	r1, r2, #23
    3b88:	d51d      	bpl.n	3bc6 <release_handler+0x4a>
    3b8a:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3b8e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3b92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3b96:	f103 0410 	add.w	r4, r3, #16
    3b9a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3b9c:	f834 2b02 	ldrh.w	r2, [r4], #2
    3ba0:	f412 7f80 	tst.w	r2, #256	; 0x100
    3ba4:	d003      	beq.n	3bae <release_handler+0x32>
    3ba6:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3baa:	4291      	cmp	r1, r2
    3bac:	d00b      	beq.n	3bc6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3bae:	3001      	adds	r0, #1
    3bb0:	2830      	cmp	r0, #48	; 0x30
    3bb2:	d1f3      	bne.n	3b9c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3bb4:	2200      	movs	r2, #0
    3bb6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3bba:	480b      	ldr	r0, [pc, #44]	; (3be8 <release_handler+0x6c>)
    3bbc:	f7ff ff90 	bl	3ae0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3bc0:	4b0a      	ldr	r3, [pc, #40]	; (3bec <release_handler+0x70>)
    3bc2:	4298      	cmp	r0, r3
    3bc4:	d100      	bne.n	3bc8 <release_handler+0x4c>
}
    3bc6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3bc8:	4909      	ldr	r1, [pc, #36]	; (3bf0 <release_handler+0x74>)
    3bca:	480a      	ldr	r0, [pc, #40]	; (3bf4 <release_handler+0x78>)
    3bcc:	4a0a      	ldr	r2, [pc, #40]	; (3bf8 <release_handler+0x7c>)
    3bce:	f44f 7399 	mov.w	r3, #306	; 0x132
    3bd2:	f004 f9de 	bl	7f92 <printk>
}
    3bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3bda:	4807      	ldr	r0, [pc, #28]	; (3bf8 <release_handler+0x7c>)
    3bdc:	f44f 7199 	mov.w	r1, #306	; 0x132
    3be0:	f004 b900 	b.w	7de4 <assert_post_action>
    3be4:	20000100 	.word	0x20000100
    3be8:	20000174 	.word	0x20000174
    3bec:	0bad0000 	.word	0x0bad0000
    3bf0:	0000955f 	.word	0x0000955f
    3bf4:	00008e27 	.word	0x00008e27
    3bf8:	000094fb 	.word	0x000094fb

00003bfc <pin_handler_trigger_uninit>:
{
    3bfc:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3bfe:	4c0a      	ldr	r4, [pc, #40]	; (3c28 <pin_handler_trigger_uninit+0x2c>)
    3c00:	f100 0508 	add.w	r5, r0, #8
    3c04:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3c08:	069a      	lsls	r2, r3, #26
    3c0a:	d506      	bpl.n	3c1a <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3c0c:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3c0e:	4a07      	ldr	r2, [pc, #28]	; (3c2c <pin_handler_trigger_uninit+0x30>)
    3c10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3c14:	2100      	movs	r1, #0
    3c16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3c1a:	f7ff ffaf 	bl	3b7c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3c1e:	2300      	movs	r3, #0
    3c20:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3c24:	bd38      	pop	{r3, r4, r5, pc}
    3c26:	bf00      	nop
    3c28:	20000100 	.word	0x20000100
    3c2c:	40006000 	.word	0x40006000

00003c30 <nrf_gpio_pin_port_decode>:
{
    3c30:	b510      	push	{r4, lr}
    3c32:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3c34:	6800      	ldr	r0, [r0, #0]
    3c36:	f004 fc30 	bl	849a <nrf_gpio_pin_present_check>
    3c3a:	b958      	cbnz	r0, 3c54 <nrf_gpio_pin_port_decode+0x24>
    3c3c:	4912      	ldr	r1, [pc, #72]	; (3c88 <nrf_gpio_pin_port_decode+0x58>)
    3c3e:	4813      	ldr	r0, [pc, #76]	; (3c8c <nrf_gpio_pin_port_decode+0x5c>)
    3c40:	4a13      	ldr	r2, [pc, #76]	; (3c90 <nrf_gpio_pin_port_decode+0x60>)
    3c42:	f240 2329 	movw	r3, #553	; 0x229
    3c46:	f004 f9a4 	bl	7f92 <printk>
    3c4a:	4811      	ldr	r0, [pc, #68]	; (3c90 <nrf_gpio_pin_port_decode+0x60>)
    3c4c:	f240 2129 	movw	r1, #553	; 0x229
    3c50:	f004 f8c8 	bl	7de4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3c54:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3c56:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c5a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3c5c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c5e:	d00d      	beq.n	3c7c <nrf_gpio_pin_port_decode+0x4c>
    3c60:	2b01      	cmp	r3, #1
    3c62:	d00e      	beq.n	3c82 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    3c64:	490b      	ldr	r1, [pc, #44]	; (3c94 <nrf_gpio_pin_port_decode+0x64>)
    3c66:	4809      	ldr	r0, [pc, #36]	; (3c8c <nrf_gpio_pin_port_decode+0x5c>)
    3c68:	4a09      	ldr	r2, [pc, #36]	; (3c90 <nrf_gpio_pin_port_decode+0x60>)
    3c6a:	f240 232e 	movw	r3, #558	; 0x22e
    3c6e:	f004 f990 	bl	7f92 <printk>
    3c72:	4807      	ldr	r0, [pc, #28]	; (3c90 <nrf_gpio_pin_port_decode+0x60>)
    3c74:	f240 212e 	movw	r1, #558	; 0x22e
    3c78:	f004 f8b4 	bl	7de4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3c80:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3c82:	4805      	ldr	r0, [pc, #20]	; (3c98 <nrf_gpio_pin_port_decode+0x68>)
    3c84:	e7fc      	b.n	3c80 <nrf_gpio_pin_port_decode+0x50>
    3c86:	bf00      	nop
    3c88:	00009426 	.word	0x00009426
    3c8c:	00008e27 	.word	0x00008e27
    3c90:	000093f3 	.word	0x000093f3
    3c94:	00009606 	.word	0x00009606
    3c98:	50000300 	.word	0x50000300

00003c9c <nrfx_gpiote_input_configure>:
{
    3c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9e:	4604      	mov	r4, r0
    3ca0:	b085      	sub	sp, #20
    3ca2:	4617      	mov	r7, r2
    3ca4:	461d      	mov	r5, r3
    if (p_input_config)
    3ca6:	b1f1      	cbz	r1, 3ce6 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3ca8:	f7ff ff3c 	bl	3b24 <pin_is_task_output>
    3cac:	b110      	cbz	r0, 3cb4 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3cae:	484a      	ldr	r0, [pc, #296]	; (3dd8 <nrfx_gpiote_input_configure+0x13c>)
}
    3cb0:	b005      	add	sp, #20
    3cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3cb4:	460b      	mov	r3, r1
    3cb6:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3cba:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3cbe:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3cc2:	f10d 020f 	add.w	r2, sp, #15
    3cc6:	f10d 010e 	add.w	r1, sp, #14
    3cca:	4620      	mov	r0, r4
    3ccc:	f004 fbfa 	bl	84c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3cd0:	4a42      	ldr	r2, [pc, #264]	; (3ddc <nrfx_gpiote_input_configure+0x140>)
    3cd2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3cd6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3cda:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3cde:	f043 0301 	orr.w	r3, r3, #1
    3ce2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3ce6:	b197      	cbz	r7, 3d0e <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ce8:	4b3c      	ldr	r3, [pc, #240]	; (3ddc <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3cea:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3cec:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cee:	f104 0008 	add.w	r0, r4, #8
    3cf2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3cf6:	078f      	lsls	r7, r1, #30
    3cf8:	d50c      	bpl.n	3d14 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    3cfa:	2a00      	cmp	r2, #0
    3cfc:	d1d7      	bne.n	3cae <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3cfe:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3d02:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3d06:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3d0a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3d0e:	bbcd      	cbnz	r5, 3d84 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    3d10:	4833      	ldr	r0, [pc, #204]	; (3de0 <nrfx_gpiote_input_configure+0x144>)
    3d12:	e7cd      	b.n	3cb0 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3d14:	f021 0120 	bic.w	r1, r1, #32
    3d18:	04c9      	lsls	r1, r1, #19
    3d1a:	0cc9      	lsrs	r1, r1, #19
    3d1c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3d20:	2a00      	cmp	r2, #0
    3d22:	d0ec      	beq.n	3cfe <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    3d24:	2e03      	cmp	r6, #3
    3d26:	d8c2      	bhi.n	3cae <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3d28:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3d2a:	b92e      	cbnz	r6, 3d38 <nrfx_gpiote_input_configure+0x9c>
    3d2c:	4a2d      	ldr	r2, [pc, #180]	; (3de4 <nrfx_gpiote_input_configure+0x148>)
    3d2e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3d32:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3d36:	e7e2      	b.n	3cfe <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d38:	00ba      	lsls	r2, r7, #2
    3d3a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3d3e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d42:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3d46:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d4a:	f02c 0c03 	bic.w	ip, ip, #3
    3d4e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3d52:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3d56:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3d5a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3d5e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d62:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3d66:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3d6a:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3d6e:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3d72:	ea4c 0c0e 	orr.w	ip, ip, lr
    3d76:	f041 0120 	orr.w	r1, r1, #32
    3d7a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3d7e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3d82:	e7bc      	b.n	3cfe <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3d84:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3d88:	4620      	mov	r0, r4
    3d8a:	f7ff fef7 	bl	3b7c <release_handler>
    if (!handler)
    3d8e:	2e00      	cmp	r6, #0
    3d90:	d0be      	beq.n	3d10 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3d92:	4d12      	ldr	r5, [pc, #72]	; (3ddc <nrfx_gpiote_input_configure+0x140>)
    3d94:	682b      	ldr	r3, [r5, #0]
    3d96:	429e      	cmp	r6, r3
    3d98:	d104      	bne.n	3da4 <nrfx_gpiote_input_configure+0x108>
    3d9a:	686b      	ldr	r3, [r5, #4]
    3d9c:	429f      	cmp	r7, r3
    3d9e:	d101      	bne.n	3da4 <nrfx_gpiote_input_configure+0x108>
    3da0:	2200      	movs	r2, #0
    3da2:	e00a      	b.n	3dba <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3da4:	4810      	ldr	r0, [pc, #64]	; (3de8 <nrfx_gpiote_input_configure+0x14c>)
    3da6:	f10d 010f 	add.w	r1, sp, #15
    3daa:	f7ff fe75 	bl	3a98 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3dae:	4b0c      	ldr	r3, [pc, #48]	; (3de0 <nrfx_gpiote_input_configure+0x144>)
    3db0:	4298      	cmp	r0, r3
    3db2:	f47f af7d 	bne.w	3cb0 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    3db6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3dba:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3dbe:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3dc2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3dc4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3dc6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3dca:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3dd2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3dd6:	e79b      	b.n	3d10 <nrfx_gpiote_input_configure+0x74>
    3dd8:	0bad0004 	.word	0x0bad0004
    3ddc:	20000100 	.word	0x20000100
    3de0:	0bad0000 	.word	0x0bad0000
    3de4:	40006000 	.word	0x40006000
    3de8:	20000174 	.word	0x20000174

00003dec <nrfx_gpiote_output_configure>:
{
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	4604      	mov	r4, r0
    3df0:	b085      	sub	sp, #20
    3df2:	4615      	mov	r5, r2
    if (p_config)
    3df4:	b309      	cbz	r1, 3e3a <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3df6:	f100 0708 	add.w	r7, r0, #8
    3dfa:	4e31      	ldr	r6, [pc, #196]	; (3ec0 <nrfx_gpiote_output_configure+0xd4>)
    3dfc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3e00:	0798      	lsls	r0, r3, #30
    3e02:	d401      	bmi.n	3e08 <nrfx_gpiote_output_configure+0x1c>
    3e04:	069a      	lsls	r2, r3, #26
    3e06:	d458      	bmi.n	3eba <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3e08:	f013 0f1c 	tst.w	r3, #28
    3e0c:	d002      	beq.n	3e14 <nrfx_gpiote_output_configure+0x28>
    3e0e:	784b      	ldrb	r3, [r1, #1]
    3e10:	2b01      	cmp	r3, #1
    3e12:	d052      	beq.n	3eba <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3e14:	2301      	movs	r3, #1
    3e16:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3e1a:	2300      	movs	r3, #0
    3e1c:	e9cd 1300 	strd	r1, r3, [sp]
    3e20:	1c4a      	adds	r2, r1, #1
    3e22:	1c8b      	adds	r3, r1, #2
    3e24:	4620      	mov	r0, r4
    3e26:	f10d 010f 	add.w	r1, sp, #15
    3e2a:	f004 fb4b 	bl	84c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3e2e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3e32:	f043 0303 	orr.w	r3, r3, #3
    3e36:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3e3a:	b915      	cbnz	r5, 3e42 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3e3c:	4821      	ldr	r0, [pc, #132]	; (3ec4 <nrfx_gpiote_output_configure+0xd8>)
}
    3e3e:	b005      	add	sp, #20
    3e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e42:	4e1f      	ldr	r6, [pc, #124]	; (3ec0 <nrfx_gpiote_output_configure+0xd4>)
    3e44:	f104 0708 	add.w	r7, r4, #8
    3e48:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3e4c:	0783      	lsls	r3, r0, #30
    3e4e:	d534      	bpl.n	3eba <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3e50:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3e54:	4661      	mov	r1, ip
    3e56:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3e58:	f020 0020 	bic.w	r0, r0, #32
    3e5c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3e60:	04c0      	lsls	r0, r0, #19
    3e62:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3e66:	0cc0      	lsrs	r0, r0, #19
    3e68:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3e6c:	2300      	movs	r3, #0
    3e6e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3e72:	786a      	ldrb	r2, [r5, #1]
    3e74:	2a00      	cmp	r2, #0
    3e76:	d0e1      	beq.n	3e3c <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3e78:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3e7c:	78ad      	ldrb	r5, [r5, #2]
    3e7e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3e82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3e86:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e8a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3e8e:	0223      	lsls	r3, r4, #8
    3e90:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e94:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3e96:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3e9a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3e9e:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3ea0:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3ea2:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3ea6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3eaa:	432b      	orrs	r3, r5
    3eac:	f040 0020 	orr.w	r0, r0, #32
    3eb0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3eb4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3eb8:	e7c0      	b.n	3e3c <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3eba:	4803      	ldr	r0, [pc, #12]	; (3ec8 <nrfx_gpiote_output_configure+0xdc>)
    3ebc:	e7bf      	b.n	3e3e <nrfx_gpiote_output_configure+0x52>
    3ebe:	bf00      	nop
    3ec0:	20000100 	.word	0x20000100
    3ec4:	0bad0000 	.word	0x0bad0000
    3ec8:	0bad0004 	.word	0x0bad0004

00003ecc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3ecc:	4b01      	ldr	r3, [pc, #4]	; (3ed4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3ece:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3ed2:	4770      	bx	lr
    3ed4:	20000100 	.word	0x20000100

00003ed8 <nrfx_gpiote_channel_get>:
{
    3ed8:	b538      	push	{r3, r4, r5, lr}
    3eda:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    3edc:	460d      	mov	r5, r1
    3ede:	b959      	cbnz	r1, 3ef8 <nrfx_gpiote_channel_get+0x20>
    3ee0:	490b      	ldr	r1, [pc, #44]	; (3f10 <nrfx_gpiote_channel_get+0x38>)
    3ee2:	480c      	ldr	r0, [pc, #48]	; (3f14 <nrfx_gpiote_channel_get+0x3c>)
    3ee4:	4a0c      	ldr	r2, [pc, #48]	; (3f18 <nrfx_gpiote_channel_get+0x40>)
    3ee6:	f240 2335 	movw	r3, #565	; 0x235
    3eea:	f004 f852 	bl	7f92 <printk>
    3eee:	480a      	ldr	r0, [pc, #40]	; (3f18 <nrfx_gpiote_channel_get+0x40>)
    3ef0:	f240 2135 	movw	r1, #565	; 0x235
    3ef4:	f003 ff76 	bl	7de4 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ef8:	3408      	adds	r4, #8
    3efa:	4b08      	ldr	r3, [pc, #32]	; (3f1c <nrfx_gpiote_channel_get+0x44>)
    3efc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    3f00:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3f02:	bf43      	ittte	mi
    3f04:	0b5b      	lsrmi	r3, r3, #13
    3f06:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    3f08:	4805      	ldrmi	r0, [pc, #20]	; (3f20 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    3f0a:	4806      	ldrpl	r0, [pc, #24]	; (3f24 <nrfx_gpiote_channel_get+0x4c>)
}
    3f0c:	bd38      	pop	{r3, r4, r5, pc}
    3f0e:	bf00      	nop
    3f10:	00009573 	.word	0x00009573
    3f14:	00008e27 	.word	0x00008e27
    3f18:	000094fb 	.word	0x000094fb
    3f1c:	20000100 	.word	0x20000100
    3f20:	0bad0000 	.word	0x0bad0000
    3f24:	0bad0004 	.word	0x0bad0004

00003f28 <nrfx_gpiote_init>:
{
    3f28:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3f2a:	4c0e      	ldr	r4, [pc, #56]	; (3f64 <nrfx_gpiote_init+0x3c>)
    3f2c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3f30:	b9b5      	cbnz	r5, 3f60 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3f32:	2260      	movs	r2, #96	; 0x60
    3f34:	4629      	mov	r1, r5
    3f36:	f104 0010 	add.w	r0, r4, #16
    3f3a:	f004 f881 	bl	8040 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3f3e:	2006      	movs	r0, #6
    3f40:	f7fd fcac 	bl	189c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f44:	4b08      	ldr	r3, [pc, #32]	; (3f68 <nrfx_gpiote_init+0x40>)
    return err_code;
    3f46:	4809      	ldr	r0, [pc, #36]	; (3f6c <nrfx_gpiote_init+0x44>)
    3f48:	601d      	str	r5, [r3, #0]
    3f4a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3f4c:	4b08      	ldr	r3, [pc, #32]	; (3f70 <nrfx_gpiote_init+0x48>)
    3f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3f52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3f56:	2301      	movs	r3, #1
    3f58:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3f5c:	6763      	str	r3, [r4, #116]	; 0x74
}
    3f5e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3f60:	4804      	ldr	r0, [pc, #16]	; (3f74 <nrfx_gpiote_init+0x4c>)
    3f62:	e7fc      	b.n	3f5e <nrfx_gpiote_init+0x36>
    3f64:	20000100 	.word	0x20000100
    3f68:	4000617c 	.word	0x4000617c
    3f6c:	0bad0000 	.word	0x0bad0000
    3f70:	40006000 	.word	0x40006000
    3f74:	0bad0005 	.word	0x0bad0005

00003f78 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3f78:	4b03      	ldr	r3, [pc, #12]	; (3f88 <nrfx_gpiote_is_init+0x10>)
    3f7a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3f7e:	3800      	subs	r0, #0
    3f80:	bf18      	it	ne
    3f82:	2001      	movne	r0, #1
    3f84:	4770      	bx	lr
    3f86:	bf00      	nop
    3f88:	20000100 	.word	0x20000100

00003f8c <nrfx_gpiote_channel_free>:
{
    3f8c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3f8e:	4801      	ldr	r0, [pc, #4]	; (3f94 <nrfx_gpiote_channel_free+0x8>)
    3f90:	f7ff bda6 	b.w	3ae0 <nrfx_flag32_free>
    3f94:	20000170 	.word	0x20000170

00003f98 <nrfx_gpiote_channel_alloc>:
{
    3f98:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3f9a:	4801      	ldr	r0, [pc, #4]	; (3fa0 <nrfx_gpiote_channel_alloc+0x8>)
    3f9c:	f7ff bd7c 	b.w	3a98 <nrfx_flag32_alloc>
    3fa0:	20000170 	.word	0x20000170

00003fa4 <nrfx_gpiote_trigger_enable>:
{
    3fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3fa6:	4d31      	ldr	r5, [pc, #196]	; (406c <nrfx_gpiote_trigger_enable+0xc8>)
    3fa8:	f100 0708 	add.w	r7, r0, #8
{
    3fac:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3fae:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    3fb2:	f013 0f1c 	tst.w	r3, #28
{
    3fb6:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3fb8:	d10b      	bne.n	3fd2 <nrfx_gpiote_trigger_enable+0x2e>
    3fba:	492d      	ldr	r1, [pc, #180]	; (4070 <nrfx_gpiote_trigger_enable+0xcc>)
    3fbc:	482d      	ldr	r0, [pc, #180]	; (4074 <nrfx_gpiote_trigger_enable+0xd0>)
    3fbe:	4a2e      	ldr	r2, [pc, #184]	; (4078 <nrfx_gpiote_trigger_enable+0xd4>)
    3fc0:	f240 33df 	movw	r3, #991	; 0x3df
    3fc4:	f003 ffe5 	bl	7f92 <printk>
    3fc8:	482b      	ldr	r0, [pc, #172]	; (4078 <nrfx_gpiote_trigger_enable+0xd4>)
    3fca:	f240 31df 	movw	r1, #991	; 0x3df
    3fce:	f003 ff09 	bl	7de4 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3fd2:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3fd6:	0683      	lsls	r3, r0, #26
    3fd8:	d51f      	bpl.n	401a <nrfx_gpiote_trigger_enable+0x76>
    3fda:	f010 0302 	ands.w	r3, r0, #2
    3fde:	d11c      	bne.n	401a <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3fe0:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3fe2:	4608      	mov	r0, r1
    3fe4:	f004 fa6a 	bl	84bc <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3fe8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3fec:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ff0:	6003      	str	r3, [r0, #0]
    3ff2:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3ff4:	008b      	lsls	r3, r1, #2
    3ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ffa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3ffe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4002:	f042 0201 	orr.w	r2, r2, #1
    4006:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    400a:	b126      	cbz	r6, 4016 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    400c:	4a1b      	ldr	r2, [pc, #108]	; (407c <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    400e:	2301      	movs	r3, #1
    4010:	408b      	lsls	r3, r1
    4012:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4016:	b003      	add	sp, #12
    4018:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    401a:	b95e      	cbnz	r6, 4034 <nrfx_gpiote_trigger_enable+0x90>
    401c:	4918      	ldr	r1, [pc, #96]	; (4080 <nrfx_gpiote_trigger_enable+0xdc>)
    401e:	4815      	ldr	r0, [pc, #84]	; (4074 <nrfx_gpiote_trigger_enable+0xd0>)
    4020:	4a15      	ldr	r2, [pc, #84]	; (4078 <nrfx_gpiote_trigger_enable+0xd4>)
    4022:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4026:	f003 ffb4 	bl	7f92 <printk>
    402a:	4813      	ldr	r0, [pc, #76]	; (4078 <nrfx_gpiote_trigger_enable+0xd4>)
    402c:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4030:	f003 fed8 	bl	7de4 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4034:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4038:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    403c:	2b04      	cmp	r3, #4
    403e:	d010      	beq.n	4062 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4040:	2b05      	cmp	r3, #5
    4042:	d010      	beq.n	4066 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4044:	a801      	add	r0, sp, #4
    4046:	9401      	str	r4, [sp, #4]
    4048:	f7ff fdf2 	bl	3c30 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    404c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    404e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4052:	40d9      	lsrs	r1, r3
    4054:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4058:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    405a:	4620      	mov	r0, r4
    405c:	f004 fa7d 	bl	855a <nrf_gpio_cfg_sense_set>
}
    4060:	e7d9      	b.n	4016 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4062:	2103      	movs	r1, #3
    4064:	e7f9      	b.n	405a <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4066:	2102      	movs	r1, #2
    4068:	e7f7      	b.n	405a <nrfx_gpiote_trigger_enable+0xb6>
    406a:	bf00      	nop
    406c:	20000100 	.word	0x20000100
    4070:	0000957d 	.word	0x0000957d
    4074:	00008e27 	.word	0x00008e27
    4078:	000094fb 	.word	0x000094fb
    407c:	40006000 	.word	0x40006000
    4080:	00009592 	.word	0x00009592

00004084 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4084:	4b0e      	ldr	r3, [pc, #56]	; (40c0 <nrfx_gpiote_trigger_disable+0x3c>)
    4086:	f100 0208 	add.w	r2, r0, #8
    408a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    408e:	0699      	lsls	r1, r3, #26
    4090:	d513      	bpl.n	40ba <nrfx_gpiote_trigger_disable+0x36>
    4092:	079a      	lsls	r2, r3, #30
    4094:	d411      	bmi.n	40ba <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4096:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4098:	2201      	movs	r2, #1
    409a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    409c:	009b      	lsls	r3, r3, #2
    409e:	4909      	ldr	r1, [pc, #36]	; (40c4 <nrfx_gpiote_trigger_disable+0x40>)
    40a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    40a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    40a8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    40ac:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    40b0:	f022 0203 	bic.w	r2, r2, #3
    40b4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    40b8:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    40ba:	2100      	movs	r1, #0
    40bc:	f004 ba4d 	b.w	855a <nrf_gpio_cfg_sense_set>
    40c0:	20000100 	.word	0x20000100
    40c4:	40006000 	.word	0x40006000

000040c8 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    40c8:	4b0e      	ldr	r3, [pc, #56]	; (4104 <nrfx_gpiote_pin_uninit+0x3c>)
    40ca:	f100 0208 	add.w	r2, r0, #8
{
    40ce:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    40d0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    40d4:	07db      	lsls	r3, r3, #31
{
    40d6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    40d8:	d511      	bpl.n	40fe <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    40da:	f7ff ffd3 	bl	4084 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    40de:	4620      	mov	r0, r4
    40e0:	f7ff fd8c 	bl	3bfc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    40e4:	a801      	add	r0, sp, #4
    40e6:	9401      	str	r4, [sp, #4]
    40e8:	f7ff fda2 	bl	3c30 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    40ec:	9b01      	ldr	r3, [sp, #4]
    40ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    40f2:	2202      	movs	r2, #2
    40f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    40f8:	4803      	ldr	r0, [pc, #12]	; (4108 <nrfx_gpiote_pin_uninit+0x40>)
}
    40fa:	b002      	add	sp, #8
    40fc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    40fe:	4803      	ldr	r0, [pc, #12]	; (410c <nrfx_gpiote_pin_uninit+0x44>)
    4100:	e7fb      	b.n	40fa <nrfx_gpiote_pin_uninit+0x32>
    4102:	bf00      	nop
    4104:	20000100 	.word	0x20000100
    4108:	0bad0000 	.word	0x0bad0000
    410c:	0bad0004 	.word	0x0bad0004

00004110 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4114:	4b65      	ldr	r3, [pc, #404]	; (42ac <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4116:	4866      	ldr	r0, [pc, #408]	; (42b0 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4118:	4966      	ldr	r1, [pc, #408]	; (42b4 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    411a:	2500      	movs	r5, #0
{
    411c:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    411e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4120:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4122:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4124:	b136      	cbz	r6, 4134 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4126:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    412a:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    412c:	bf1e      	ittt	ne
    412e:	601c      	strne	r4, [r3, #0]
    4130:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4132:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4134:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4136:	428b      	cmp	r3, r1
        mask <<= 1;
    4138:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    413c:	d1f1      	bne.n	4122 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    413e:	4f5e      	ldr	r7, [pc, #376]	; (42b8 <nrfx_gpiote_irq_handler+0x1a8>)
    4140:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4142:	b37b      	cbz	r3, 41a4 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4148:	4e5c      	ldr	r6, [pc, #368]	; (42bc <nrfx_gpiote_irq_handler+0x1ac>)
    414a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    414e:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4150:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4154:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4158:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    415a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    415e:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4160:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4164:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4168:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    416c:	f8d9 3000 	ldr.w	r3, [r9]
    4170:	b9f3      	cbnz	r3, 41b0 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4172:	f108 0820 	add.w	r8, r8, #32
    4176:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    417a:	f109 0904 	add.w	r9, r9, #4
    417e:	d1f5      	bne.n	416c <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4180:	603b      	str	r3, [r7, #0]
    4182:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4184:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    418a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    418e:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4190:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4194:	9b01      	ldr	r3, [sp, #4]
    4196:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    419a:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    419c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    41a0:	4313      	orrs	r3, r2
    41a2:	d1dd      	bne.n	4160 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    41a4:	2401      	movs	r4, #1
    while (mask)
    41a6:	2d00      	cmp	r5, #0
    41a8:	d168      	bne.n	427c <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    41aa:	b009      	add	sp, #36	; 0x24
    41ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    41b0:	fa93 f3a3 	rbit	r3, r3
    41b4:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    41b8:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    41bc:	f106 0208 	add.w	r2, r6, #8
    41c0:	4b3f      	ldr	r3, [pc, #252]	; (42c0 <nrfx_gpiote_irq_handler+0x1b0>)
    41c2:	9605      	str	r6, [sp, #20]
    41c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    41c8:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    41cc:	08f4      	lsrs	r4, r6, #3
    41ce:	9302      	str	r3, [sp, #8]
    41d0:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    41d2:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    41d4:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    41d8:	fa0b fc00 	lsl.w	ip, fp, r0
    41dc:	5d18      	ldrb	r0, [r3, r4]
    41de:	ea20 000c 	bic.w	r0, r0, ip
    41e2:	5518      	strb	r0, [r3, r4]
    41e4:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41e6:	a805      	add	r0, sp, #20
    41e8:	9103      	str	r1, [sp, #12]
    41ea:	f7ff fd21 	bl	3c30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    41ee:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    41f0:	9903      	ldr	r1, [sp, #12]
    41f2:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    41f6:	074b      	lsls	r3, r1, #29
    41f8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    41fc:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4200:	d523      	bpl.n	424a <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    4202:	4651      	mov	r1, sl
    4204:	4630      	mov	r0, r6
    4206:	f7ff fc9b 	bl	3b40 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    420a:	a805      	add	r0, sp, #20
    420c:	9605      	str	r6, [sp, #20]
    420e:	f7ff fd0f 	bl	3c30 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4212:	9a05      	ldr	r2, [sp, #20]
    4214:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4218:	b2e4      	uxtb	r4, r4
    421a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    421e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4222:	4294      	cmp	r4, r2
    4224:	d107      	bne.n	4236 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4226:	2100      	movs	r1, #0
    4228:	4630      	mov	r0, r6
    422a:	f004 f996 	bl	855a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    422e:	4621      	mov	r1, r4
    4230:	4630      	mov	r0, r6
    4232:	f004 f992 	bl	855a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4236:	a805      	add	r0, sp, #20
    4238:	9605      	str	r6, [sp, #20]
    423a:	f7ff fcf9 	bl	3c30 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    423e:	9b05      	ldr	r3, [sp, #20]
    4240:	fa0b f303 	lsl.w	r3, fp, r3
    4244:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4248:	e790      	b.n	416c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    424a:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    424c:	bf0c      	ite	eq
    424e:	2103      	moveq	r1, #3
    4250:	2102      	movne	r1, #2
    4252:	4630      	mov	r0, r6
    4254:	f004 f981 	bl	855a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4258:	9b02      	ldr	r3, [sp, #8]
    425a:	2b03      	cmp	r3, #3
    425c:	d004      	beq.n	4268 <nrfx_gpiote_irq_handler+0x158>
    425e:	2c02      	cmp	r4, #2
    4260:	d107      	bne.n	4272 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4262:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4266:	d1e6      	bne.n	4236 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4268:	4651      	mov	r1, sl
    426a:	4630      	mov	r0, r6
    426c:	f7ff fc68 	bl	3b40 <call_handler>
    4270:	e7e1      	b.n	4236 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4272:	2c03      	cmp	r4, #3
    4274:	d1df      	bne.n	4236 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4276:	f1ba 0f02 	cmp.w	sl, #2
    427a:	e7f4      	b.n	4266 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    427c:	fa95 f3a5 	rbit	r3, r5
    4280:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4284:	fa04 f203 	lsl.w	r2, r4, r3
    4288:	009b      	lsls	r3, r3, #2
    428a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    428e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4292:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4296:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    429a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    429e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    42a2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    42a6:	f7ff fc4b 	bl	3b40 <call_handler>
    42aa:	e77c      	b.n	41a6 <nrfx_gpiote_irq_handler+0x96>
    42ac:	40006100 	.word	0x40006100
    42b0:	40006000 	.word	0x40006000
    42b4:	40006120 	.word	0x40006120
    42b8:	4000617c 	.word	0x4000617c
    42bc:	50000300 	.word	0x50000300
    42c0:	20000100 	.word	0x20000100

000042c4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    42c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    42c6:	4801      	ldr	r0, [pc, #4]	; (42cc <nrfx_ppi_channel_alloc+0x8>)
    42c8:	f7ff bbe6 	b.w	3a98 <nrfx_flag32_alloc>
    42cc:	2000017c 	.word	0x2000017c

000042d0 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    42d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42d4:	4604      	mov	r4, r0
    42d6:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    42d8:	4615      	mov	r5, r2
    42da:	b95a      	cbnz	r2, 42f4 <nrf_pwm_sequence_set+0x24>
    42dc:	4932      	ldr	r1, [pc, #200]	; (43a8 <nrf_pwm_sequence_set+0xd8>)
    42de:	4833      	ldr	r0, [pc, #204]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    42e0:	4a33      	ldr	r2, [pc, #204]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    42e2:	f240 23a7 	movw	r3, #679	; 0x2a7
    42e6:	f003 fe54 	bl	7f92 <printk>
    42ea:	4831      	ldr	r0, [pc, #196]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    42ec:	f240 21a7 	movw	r1, #679	; 0x2a7
    42f0:	f003 fd78 	bl	7de4 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    42f4:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    42f6:	b95f      	cbnz	r7, 4310 <nrf_pwm_sequence_set+0x40>
    42f8:	492e      	ldr	r1, [pc, #184]	; (43b4 <nrf_pwm_sequence_set+0xe4>)
    42fa:	482c      	ldr	r0, [pc, #176]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    42fc:	4a2c      	ldr	r2, [pc, #176]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    42fe:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    4302:	f003 fe46 	bl	7f92 <printk>
    4306:	482a      	ldr	r0, [pc, #168]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4308:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    430c:	f003 fd6a 	bl	7de4 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    4310:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    4314:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    4318:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    431a:	2f00      	cmp	r7, #0
    431c:	d138      	bne.n	4390 <nrf_pwm_sequence_set+0xc0>
    431e:	4926      	ldr	r1, [pc, #152]	; (43b8 <nrf_pwm_sequence_set+0xe8>)
    4320:	4a23      	ldr	r2, [pc, #140]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4322:	4822      	ldr	r0, [pc, #136]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    4324:	f240 23bd 	movw	r3, #701	; 0x2bd
    4328:	f003 fe33 	bl	7f92 <printk>
    432c:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    4330:	481f      	ldr	r0, [pc, #124]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4332:	f003 fd57 	bl	7de4 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    4336:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    433a:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    433c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    4340:	d30b      	bcc.n	435a <nrf_pwm_sequence_set+0x8a>
    4342:	491e      	ldr	r1, [pc, #120]	; (43bc <nrf_pwm_sequence_set+0xec>)
    4344:	4819      	ldr	r0, [pc, #100]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    4346:	4a1a      	ldr	r2, [pc, #104]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4348:	f240 23c7 	movw	r3, #711	; 0x2c7
    434c:	f003 fe21 	bl	7f92 <printk>
    4350:	4817      	ldr	r0, [pc, #92]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4352:	f240 21c7 	movw	r1, #711	; 0x2c7
    4356:	f003 fd45 	bl	7de4 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    435a:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    435c:	ea4f 1846 	mov.w	r8, r6, lsl #5
    4360:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4364:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4368:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    436c:	d30b      	bcc.n	4386 <nrf_pwm_sequence_set+0xb6>
    436e:	4914      	ldr	r1, [pc, #80]	; (43c0 <nrf_pwm_sequence_set+0xf0>)
    4370:	480e      	ldr	r0, [pc, #56]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    4372:	4a0f      	ldr	r2, [pc, #60]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4374:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    4378:	f003 fe0b 	bl	7f92 <printk>
    437c:	480c      	ldr	r0, [pc, #48]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    437e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    4382:	f003 fd2f 	bl	7de4 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    4386:	4444      	add	r4, r8
    4388:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    4390:	043b      	lsls	r3, r7, #16
    4392:	d5d0      	bpl.n	4336 <nrf_pwm_sequence_set+0x66>
    4394:	490b      	ldr	r1, [pc, #44]	; (43c4 <nrf_pwm_sequence_set+0xf4>)
    4396:	4a06      	ldr	r2, [pc, #24]	; (43b0 <nrf_pwm_sequence_set+0xe0>)
    4398:	4804      	ldr	r0, [pc, #16]	; (43ac <nrf_pwm_sequence_set+0xdc>)
    439a:	f240 23be 	movw	r3, #702	; 0x2be
    439e:	f003 fdf8 	bl	7f92 <printk>
    43a2:	f240 21be 	movw	r1, #702	; 0x2be
    43a6:	e7c3      	b.n	4330 <nrf_pwm_sequence_set+0x60>
    43a8:	000095cf 	.word	0x000095cf
    43ac:	00008e27 	.word	0x00008e27
    43b0:	0000959d 	.word	0x0000959d
    43b4:	000095e4 	.word	0x000095e4
    43b8:	000095fc 	.word	0x000095fc
    43bc:	00009626 	.word	0x00009626
    43c0:	00009647 	.word	0x00009647
    43c4:	00009608 	.word	0x00009608

000043c8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    43c8:	6802      	ldr	r2, [r0, #0]
    switch (port)
    43ca:	0953      	lsrs	r3, r2, #5
{
    43cc:	b510      	push	{r4, lr}
    43ce:	4604      	mov	r4, r0
    switch (port)
    43d0:	d02c      	beq.n	442c <nrf_gpio_pin_port_decode+0x64>
    43d2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    43d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    43d8:	bf18      	it	ne
    43da:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    43dc:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    43e0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    43e2:	07db      	lsls	r3, r3, #31
    43e4:	d40b      	bmi.n	43fe <nrf_gpio_pin_port_decode+0x36>
    43e6:	4914      	ldr	r1, [pc, #80]	; (4438 <nrf_gpio_pin_port_decode+0x70>)
    43e8:	4814      	ldr	r0, [pc, #80]	; (443c <nrf_gpio_pin_port_decode+0x74>)
    43ea:	4a15      	ldr	r2, [pc, #84]	; (4440 <nrf_gpio_pin_port_decode+0x78>)
    43ec:	f240 2329 	movw	r3, #553	; 0x229
    43f0:	f003 fdcf 	bl	7f92 <printk>
    43f4:	4812      	ldr	r0, [pc, #72]	; (4440 <nrf_gpio_pin_port_decode+0x78>)
    43f6:	f240 2129 	movw	r1, #553	; 0x229
    43fa:	f003 fcf3 	bl	7de4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    43fe:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4400:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4404:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4406:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4408:	d00d      	beq.n	4426 <nrf_gpio_pin_port_decode+0x5e>
    440a:	2b01      	cmp	r3, #1
    440c:	d011      	beq.n	4432 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    440e:	490d      	ldr	r1, [pc, #52]	; (4444 <nrf_gpio_pin_port_decode+0x7c>)
    4410:	480a      	ldr	r0, [pc, #40]	; (443c <nrf_gpio_pin_port_decode+0x74>)
    4412:	4a0b      	ldr	r2, [pc, #44]	; (4440 <nrf_gpio_pin_port_decode+0x78>)
    4414:	f240 232e 	movw	r3, #558	; 0x22e
    4418:	f003 fdbb 	bl	7f92 <printk>
    441c:	4808      	ldr	r0, [pc, #32]	; (4440 <nrf_gpio_pin_port_decode+0x78>)
    441e:	f240 212e 	movw	r1, #558	; 0x22e
    4422:	f003 fcdf 	bl	7de4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4426:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    442a:	bd10      	pop	{r4, pc}
    switch (port)
    442c:	f04f 33ff 	mov.w	r3, #4294967295
    4430:	e7d4      	b.n	43dc <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4432:	4805      	ldr	r0, [pc, #20]	; (4448 <nrf_gpio_pin_port_decode+0x80>)
    4434:	e7f9      	b.n	442a <nrf_gpio_pin_port_decode+0x62>
    4436:	bf00      	nop
    4438:	00009426 	.word	0x00009426
    443c:	00008e27 	.word	0x00008e27
    4440:	000093f3 	.word	0x000093f3
    4444:	00009606 	.word	0x00009606
    4448:	50000300 	.word	0x50000300

0000444c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4450:	4606      	mov	r6, r0
    4452:	b087      	sub	sp, #28
    4454:	4691      	mov	r9, r2
    4456:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    4458:	460c      	mov	r4, r1
    445a:	b949      	cbnz	r1, 4470 <nrfx_pwm_init+0x24>
    445c:	4959      	ldr	r1, [pc, #356]	; (45c4 <nrfx_pwm_init+0x178>)
    445e:	485a      	ldr	r0, [pc, #360]	; (45c8 <nrfx_pwm_init+0x17c>)
    4460:	4a5a      	ldr	r2, [pc, #360]	; (45cc <nrfx_pwm_init+0x180>)
    4462:	238c      	movs	r3, #140	; 0x8c
    4464:	f003 fd95 	bl	7f92 <printk>
    4468:	4858      	ldr	r0, [pc, #352]	; (45cc <nrfx_pwm_init+0x180>)
    446a:	218c      	movs	r1, #140	; 0x8c
    446c:	f003 fcba 	bl	7de4 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4470:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4472:	4d57      	ldr	r5, [pc, #348]	; (45d0 <nrfx_pwm_init+0x184>)
    4474:	210c      	movs	r1, #12
    4476:	4379      	muls	r1, r7
    4478:	186b      	adds	r3, r5, r1
    447a:	7a1a      	ldrb	r2, [r3, #8]
    447c:	2a00      	cmp	r2, #0
    447e:	f040 809f 	bne.w	45c0 <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4482:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    4484:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    4488:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    448c:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    448e:	2a00      	cmp	r2, #0
    4490:	d04d      	beq.n	452e <nrfx_pwm_init+0xe2>
    4492:	7b63      	ldrb	r3, [r4, #13]
    4494:	2b00      	cmp	r3, #0
    4496:	d04a      	beq.n	452e <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    4498:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    449c:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    44a0:	2301      	movs	r3, #1
    44a2:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    44a6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    44aa:	f894 b005 	ldrb.w	fp, [r4, #5]
    44ae:	f894 a006 	ldrb.w	sl, [r4, #6]
    44b2:	2b00      	cmp	r3, #0
    44b4:	da0b      	bge.n	44ce <nrfx_pwm_init+0x82>
    44b6:	4947      	ldr	r1, [pc, #284]	; (45d4 <nrfx_pwm_init+0x188>)
    44b8:	4843      	ldr	r0, [pc, #268]	; (45c8 <nrfx_pwm_init+0x17c>)
    44ba:	4a47      	ldr	r2, [pc, #284]	; (45d8 <nrfx_pwm_init+0x18c>)
    44bc:	f44f 7327 	mov.w	r3, #668	; 0x29c
    44c0:	f003 fd67 	bl	7f92 <printk>
    44c4:	4844      	ldr	r0, [pc, #272]	; (45d8 <nrfx_pwm_init+0x18c>)
    44c6:	f44f 7127 	mov.w	r1, #668	; 0x29c
    44ca:	f003 fc8b 	bl	7de4 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    44ce:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    44d2:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    44d4:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    44d8:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    44dc:	8963      	ldrh	r3, [r4, #10]
    44de:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    44e2:	2300      	movs	r3, #0
    44e4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    44e8:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44ec:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    44f0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    44f4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    44f8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    44fc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    4500:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4504:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4508:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    450c:	230c      	movs	r3, #12
    450e:	437b      	muls	r3, r7
    4510:	58eb      	ldr	r3, [r5, r3]
    4512:	b11b      	cbz	r3, 451c <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4514:	f340 3007 	sbfx	r0, r0, #12, #8
    4518:	f7fd f9c0 	bl	189c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    451c:	230c      	movs	r3, #12
    451e:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4522:	482e      	ldr	r0, [pc, #184]	; (45dc <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4524:	2301      	movs	r3, #1
    4526:	722b      	strb	r3, [r5, #8]
}
    4528:	b007      	add	sp, #28
    452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    452e:	f104 39ff 	add.w	r9, r4, #4294967295
    4532:	f10d 0808 	add.w	r8, sp, #8
    4536:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    453a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    453e:	2aff      	cmp	r2, #255	; 0xff
    4540:	d039      	beq.n	45b6 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    4542:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    4544:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    4548:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    454c:	b9b1      	cbnz	r1, 457c <nrfx_pwm_init+0x130>
    if (value == 0)
    454e:	0613      	lsls	r3, r2, #24
    4550:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4554:	a801      	add	r0, sp, #4
    if (value == 0)
    4556:	d426      	bmi.n	45a6 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4558:	f7ff ff36 	bl	43c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    455c:	9901      	ldr	r1, [sp, #4]
    455e:	2201      	movs	r2, #1
    4560:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4562:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4566:	a801      	add	r0, sp, #4
    4568:	f8cd b004 	str.w	fp, [sp, #4]
    456c:	f7ff ff2c 	bl	43c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4570:	9b01      	ldr	r3, [sp, #4]
    4572:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4576:	2203      	movs	r2, #3
    4578:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    457c:	45d1      	cmp	r9, sl
    457e:	f108 0804 	add.w	r8, r8, #4
    4582:	d1da      	bne.n	453a <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    4584:	7b63      	ldrb	r3, [r4, #13]
    4586:	2b00      	cmp	r3, #0
    4588:	d186      	bne.n	4498 <nrfx_pwm_init+0x4c>
    458a:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    458c:	9a02      	ldr	r2, [sp, #8]
    458e:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    4592:	9a03      	ldr	r2, [sp, #12]
    4594:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    4598:	9a04      	ldr	r2, [sp, #16]
    459a:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    459e:	9a05      	ldr	r2, [sp, #20]
    45a0:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    45a4:	e778      	b.n	4498 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45a6:	f7ff ff0f 	bl	43c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    45aa:	9901      	ldr	r1, [sp, #4]
    45ac:	2201      	movs	r2, #1
    45ae:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    45b0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    45b4:	e7d7      	b.n	4566 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    45b6:	f04f 33ff 	mov.w	r3, #4294967295
    45ba:	f8c8 3000 	str.w	r3, [r8]
    45be:	e7dd      	b.n	457c <nrfx_pwm_init+0x130>
        return err_code;
    45c0:	4807      	ldr	r0, [pc, #28]	; (45e0 <nrfx_pwm_init+0x194>)
    45c2:	e7b1      	b.n	4528 <nrfx_pwm_init+0xdc>
    45c4:	000096a5 	.word	0x000096a5
    45c8:	00008e27 	.word	0x00008e27
    45cc:	0000966a 	.word	0x0000966a
    45d0:	20000a20 	.word	0x20000a20
    45d4:	000096ae 	.word	0x000096ae
    45d8:	0000959d 	.word	0x0000959d
    45dc:	0bad0000 	.word	0x0bad0000
    45e0:	0bad0005 	.word	0x0bad0005

000045e4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    45e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45e8:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    45ea:	7903      	ldrb	r3, [r0, #4]
{
    45ec:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    45ee:	4a31      	ldr	r2, [pc, #196]	; (46b4 <nrfx_pwm_simple_playback+0xd0>)
{
    45f0:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    45f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    45f6:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    45fa:	210c      	movs	r1, #12
    45fc:	fb01 2303 	mla	r3, r1, r3, r2
{
    4600:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4602:	7a1b      	ldrb	r3, [r3, #8]
    4604:	b95b      	cbnz	r3, 461e <nrfx_pwm_simple_playback+0x3a>
    4606:	492c      	ldr	r1, [pc, #176]	; (46b8 <nrfx_pwm_simple_playback+0xd4>)
    4608:	482c      	ldr	r0, [pc, #176]	; (46bc <nrfx_pwm_simple_playback+0xd8>)
    460a:	4a2d      	ldr	r2, [pc, #180]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    460c:	f44f 7396 	mov.w	r3, #300	; 0x12c
    4610:	f003 fcbf 	bl	7f92 <printk>
    4614:	482a      	ldr	r0, [pc, #168]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    4616:	f44f 7196 	mov.w	r1, #300	; 0x12c
    461a:	f003 fbe3 	bl	7de4 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    461e:	b95c      	cbnz	r4, 4638 <nrfx_pwm_simple_playback+0x54>
    4620:	4928      	ldr	r1, [pc, #160]	; (46c4 <nrfx_pwm_simple_playback+0xe0>)
    4622:	4826      	ldr	r0, [pc, #152]	; (46bc <nrfx_pwm_simple_playback+0xd8>)
    4624:	4a26      	ldr	r2, [pc, #152]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    4626:	f240 132d 	movw	r3, #301	; 0x12d
    462a:	f003 fcb2 	bl	7f92 <printk>
    462e:	4824      	ldr	r0, [pc, #144]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    4630:	f240 112d 	movw	r1, #301	; 0x12d
    4634:	f003 fbd6 	bl	7de4 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4638:	6833      	ldr	r3, [r6, #0]
    463a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    463e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4642:	d00b      	beq.n	465c <nrfx_pwm_simple_playback+0x78>
    4644:	4920      	ldr	r1, [pc, #128]	; (46c8 <nrfx_pwm_simple_playback+0xe4>)
    4646:	481d      	ldr	r0, [pc, #116]	; (46bc <nrfx_pwm_simple_playback+0xd8>)
    4648:	4a1d      	ldr	r2, [pc, #116]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    464a:	f44f 7397 	mov.w	r3, #302	; 0x12e
    464e:	f003 fca0 	bl	7f92 <printk>
    4652:	481b      	ldr	r0, [pc, #108]	; (46c0 <nrfx_pwm_simple_playback+0xdc>)
    4654:	f44f 7197 	mov.w	r1, #302	; 0x12e
    4658:	f003 fbc4 	bl	7de4 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    465c:	6828      	ldr	r0, [r5, #0]
    465e:	4632      	mov	r2, r6
    4660:	2100      	movs	r1, #0
    4662:	f7ff fe35 	bl	42d0 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    4666:	6828      	ldr	r0, [r5, #0]
    4668:	4632      	mov	r2, r6
    466a:	2101      	movs	r1, #1
    466c:	f7ff fe30 	bl	42d0 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    4670:	6828      	ldr	r0, [r5, #0]
    4672:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    4676:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    467a:	f018 0f01 	tst.w	r8, #1
    467e:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    4682:	d114      	bne.n	46ae <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    4684:	f018 0202 	ands.w	r2, r8, #2
    4688:	d003      	beq.n	4692 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    468a:	2b00      	cmp	r3, #0
    468c:	bf14      	ite	ne
    468e:	2208      	movne	r2, #8
    4690:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4692:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    4694:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    4698:	4639      	mov	r1, r7
    469a:	fa5f f288 	uxtb.w	r2, r8
    469e:	bf18      	it	ne
    46a0:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    46a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    46a6:	bf08      	it	eq
    46a8:	2308      	moveq	r3, #8
    46aa:	f003 bf65 	b.w	8578 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    46ae:	2210      	movs	r2, #16
    46b0:	e7ef      	b.n	4692 <nrfx_pwm_simple_playback+0xae>
    46b2:	bf00      	nop
    46b4:	20000a20 	.word	0x20000a20
    46b8:	000096cf 	.word	0x000096cf
    46bc:	00008e27 	.word	0x00008e27
    46c0:	0000966a 	.word	0x0000966a
    46c4:	000096fb 	.word	0x000096fb
    46c8:	0000970e 	.word	0x0000970e

000046cc <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    46cc:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    46ce:	4e12      	ldr	r6, [pc, #72]	; (4718 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    46d0:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    46d2:	220c      	movs	r2, #12
    46d4:	fb02 6204 	mla	r2, r2, r4, r6
{
    46d8:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    46da:	7a12      	ldrb	r2, [r2, #8]
    46dc:	b95a      	cbnz	r2, 46f6 <nrfx_pwm_is_stopped+0x2a>
    46de:	490f      	ldr	r1, [pc, #60]	; (471c <nrfx_pwm_is_stopped+0x50>)
    46e0:	480f      	ldr	r0, [pc, #60]	; (4720 <nrfx_pwm_is_stopped+0x54>)
    46e2:	4a10      	ldr	r2, [pc, #64]	; (4724 <nrfx_pwm_is_stopped+0x58>)
    46e4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    46e8:	f003 fc53 	bl	7f92 <printk>
    46ec:	480d      	ldr	r0, [pc, #52]	; (4724 <nrfx_pwm_is_stopped+0x58>)
    46ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    46f2:	f003 fb77 	bl	7de4 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    46f6:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    46f8:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    46fa:	fb03 6404 	mla	r4, r3, r4, r6
    46fe:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4700:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    4704:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4706:	b91a      	cbnz	r2, 4710 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4708:	1e98      	subs	r0, r3, #2
    470a:	bf18      	it	ne
    470c:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    470e:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4710:	2001      	movs	r0, #1
    4712:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    4714:	e7fb      	b.n	470e <nrfx_pwm_is_stopped+0x42>
    4716:	bf00      	nop
    4718:	20000a20 	.word	0x20000a20
    471c:	000096cf 	.word	0x000096cf
    4720:	00008e27 	.word	0x00008e27
    4724:	0000966a 	.word	0x0000966a

00004728 <nrfx_pwm_stop>:
{
    4728:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    472a:	4a14      	ldr	r2, [pc, #80]	; (477c <nrfx_pwm_stop+0x54>)
    472c:	7903      	ldrb	r3, [r0, #4]
{
    472e:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4730:	210c      	movs	r1, #12
    4732:	fb01 2303 	mla	r3, r1, r3, r2
{
    4736:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4738:	7a1b      	ldrb	r3, [r3, #8]
    473a:	b95b      	cbnz	r3, 4754 <nrfx_pwm_stop+0x2c>
    473c:	4910      	ldr	r1, [pc, #64]	; (4780 <nrfx_pwm_stop+0x58>)
    473e:	4811      	ldr	r0, [pc, #68]	; (4784 <nrfx_pwm_stop+0x5c>)
    4740:	4a11      	ldr	r2, [pc, #68]	; (4788 <nrfx_pwm_stop+0x60>)
    4742:	f240 1385 	movw	r3, #389	; 0x185
    4746:	f003 fc24 	bl	7f92 <printk>
    474a:	480f      	ldr	r0, [pc, #60]	; (4788 <nrfx_pwm_stop+0x60>)
    474c:	f240 1185 	movw	r1, #389	; 0x185
    4750:	f003 fb48 	bl	7de4 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    4754:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    4756:	2200      	movs	r2, #0
    4758:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    475c:	2201      	movs	r2, #1
    475e:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    4760:	4620      	mov	r0, r4
    4762:	f7ff ffb3 	bl	46cc <nrfx_pwm_is_stopped>
    4766:	b938      	cbnz	r0, 4778 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    4768:	4620      	mov	r0, r4
    476a:	f7ff ffaf 	bl	46cc <nrfx_pwm_is_stopped>
    476e:	b918      	cbnz	r0, 4778 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    4770:	2d00      	cmp	r5, #0
    4772:	d1f9      	bne.n	4768 <nrfx_pwm_stop+0x40>
}
    4774:	4628      	mov	r0, r5
    4776:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    4778:	2501      	movs	r5, #1
    477a:	e7fb      	b.n	4774 <nrfx_pwm_stop+0x4c>
    477c:	20000a20 	.word	0x20000a20
    4780:	00009737 	.word	0x00009737
    4784:	00008e27 	.word	0x00008e27
    4788:	0000966a 	.word	0x0000966a

0000478c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    478c:	4b03      	ldr	r3, [pc, #12]	; (479c <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    478e:	6818      	ldr	r0, [r3, #0]
}
    4790:	f1a0 0308 	sub.w	r3, r0, #8
    4794:	4258      	negs	r0, r3
    4796:	4158      	adcs	r0, r3
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	10000130 	.word	0x10000130

000047a0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    47a0:	4b06      	ldr	r3, [pc, #24]	; (47bc <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    47a2:	681b      	ldr	r3, [r3, #0]
    47a4:	2b08      	cmp	r3, #8
    47a6:	d106      	bne.n	47b6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    47a8:	4b05      	ldr	r3, [pc, #20]	; (47c0 <nrf52_errata_103+0x20>)
    47aa:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    47ac:	2b05      	cmp	r3, #5
    47ae:	d802      	bhi.n	47b6 <nrf52_errata_103+0x16>
    47b0:	4a04      	ldr	r2, [pc, #16]	; (47c4 <nrf52_errata_103+0x24>)
    47b2:	5cd0      	ldrb	r0, [r2, r3]
    47b4:	4770      	bx	lr
        return false;
    47b6:	2000      	movs	r0, #0
}
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop
    47bc:	10000130 	.word	0x10000130
    47c0:	10000134 	.word	0x10000134
    47c4:	00009782 	.word	0x00009782

000047c8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47c8:	4a02      	ldr	r2, [pc, #8]	; (47d4 <nvmc_wait+0xc>)
    47ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    47ce:	2b00      	cmp	r3, #0
    47d0:	d0fb      	beq.n	47ca <nvmc_wait+0x2>
}
    47d2:	4770      	bx	lr
    47d4:	4001e000 	.word	0x4001e000

000047d8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    47d8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    47da:	f7ff ffd7 	bl	478c <nrf52_errata_136>
    47de:	b140      	cbz	r0, 47f2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    47e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47e4:	2200      	movs	r2, #0
    47e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    47ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    47ee:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    47f2:	f7ff ffcb 	bl	478c <nrf52_errata_136>
    47f6:	2800      	cmp	r0, #0
    47f8:	d046      	beq.n	4888 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    47fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    47fe:	4b5b      	ldr	r3, [pc, #364]	; (496c <SystemInit+0x194>)
    4800:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4804:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4808:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    480c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4810:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4814:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4818:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    481c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4820:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4824:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4828:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    482c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4830:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4834:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4838:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    483c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4840:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4844:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4848:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    484c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4850:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4854:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4858:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    485c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4860:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4864:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4868:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    486c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4870:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4874:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4878:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    487c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4880:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4884:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4888:	f7ff ff8a 	bl	47a0 <nrf52_errata_103>
    488c:	b110      	cbz	r0, 4894 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    488e:	4b38      	ldr	r3, [pc, #224]	; (4970 <SystemInit+0x198>)
    4890:	4a38      	ldr	r2, [pc, #224]	; (4974 <SystemInit+0x19c>)
    4892:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4894:	f7ff ff84 	bl	47a0 <nrf52_errata_103>
    4898:	b118      	cbz	r0, 48a2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    489a:	4b37      	ldr	r3, [pc, #220]	; (4978 <SystemInit+0x1a0>)
    489c:	22fb      	movs	r2, #251	; 0xfb
    489e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    48a2:	f7ff ff7d 	bl	47a0 <nrf52_errata_103>
    48a6:	b148      	cbz	r0, 48bc <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    48a8:	4934      	ldr	r1, [pc, #208]	; (497c <SystemInit+0x1a4>)
    48aa:	4b35      	ldr	r3, [pc, #212]	; (4980 <SystemInit+0x1a8>)
    48ac:	680a      	ldr	r2, [r1, #0]
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	f022 020f 	bic.w	r2, r2, #15
    48b4:	f003 030f 	and.w	r3, r3, #15
    48b8:	4313      	orrs	r3, r2
    48ba:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    48bc:	f7ff ff70 	bl	47a0 <nrf52_errata_103>
    48c0:	b118      	cbz	r0, 48ca <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    48c2:	4b30      	ldr	r3, [pc, #192]	; (4984 <SystemInit+0x1ac>)
    48c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    48c8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    48ca:	f7ff ff5f 	bl	478c <nrf52_errata_136>
    48ce:	b148      	cbz	r0, 48e4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    48d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48d8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    48da:	bf44      	itt	mi
    48dc:	f06f 0201 	mvnmi.w	r2, #1
    48e0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    48e4:	4b28      	ldr	r3, [pc, #160]	; (4988 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    48e6:	681b      	ldr	r3, [r3, #0]
    48e8:	2b08      	cmp	r3, #8
    48ea:	d10e      	bne.n	490a <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    48ec:	4b27      	ldr	r3, [pc, #156]	; (498c <SystemInit+0x1b4>)
    48ee:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    48f0:	2b05      	cmp	r3, #5
    48f2:	d802      	bhi.n	48fa <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    48f4:	4a26      	ldr	r2, [pc, #152]	; (4990 <SystemInit+0x1b8>)
    48f6:	5cd3      	ldrb	r3, [r2, r3]
    48f8:	b13b      	cbz	r3, 490a <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    48fa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    48fe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4906:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    490a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    490e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4912:	2a00      	cmp	r2, #0
    4914:	db03      	blt.n	491e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4916:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    491a:	2b00      	cmp	r3, #0
    491c:	da22      	bge.n	4964 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    491e:	491d      	ldr	r1, [pc, #116]	; (4994 <SystemInit+0x1bc>)
    4920:	2301      	movs	r3, #1
    4922:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4926:	f7ff ff4f 	bl	47c8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    492a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    492e:	2412      	movs	r4, #18
    4930:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4934:	f7ff ff48 	bl	47c8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4938:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    493c:	f7ff ff44 	bl	47c8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4940:	2300      	movs	r3, #0
    4942:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4946:	f7ff ff3f 	bl	47c8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    494a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    494e:	4912      	ldr	r1, [pc, #72]	; (4998 <SystemInit+0x1c0>)
    4950:	4b12      	ldr	r3, [pc, #72]	; (499c <SystemInit+0x1c4>)
    4952:	68ca      	ldr	r2, [r1, #12]
    4954:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4958:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    495a:	60cb      	str	r3, [r1, #12]
    495c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4960:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4962:	e7fd      	b.n	4960 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4964:	4b0e      	ldr	r3, [pc, #56]	; (49a0 <SystemInit+0x1c8>)
    4966:	4a0f      	ldr	r2, [pc, #60]	; (49a4 <SystemInit+0x1cc>)
    4968:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    496a:	bd10      	pop	{r4, pc}
    496c:	4000c000 	.word	0x4000c000
    4970:	4000568c 	.word	0x4000568c
    4974:	00038148 	.word	0x00038148
    4978:	4000f000 	.word	0x4000f000
    497c:	40000ee4 	.word	0x40000ee4
    4980:	10000258 	.word	0x10000258
    4984:	40029640 	.word	0x40029640
    4988:	10000130 	.word	0x10000130
    498c:	10000134 	.word	0x10000134
    4990:	0000977c 	.word	0x0000977c
    4994:	4001e000 	.word	0x4001e000
    4998:	e000ed00 	.word	0xe000ed00
    499c:	05fa0004 	.word	0x05fa0004
    49a0:	20000180 	.word	0x20000180
    49a4:	03d09000 	.word	0x03d09000

000049a8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    49a8:	4b0e      	ldr	r3, [pc, #56]	; (49e4 <z_sys_init_run_level+0x3c>)
{
    49aa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    49ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    49b0:	3001      	adds	r0, #1
    49b2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    49b6:	42a6      	cmp	r6, r4
    49b8:	d800      	bhi.n	49bc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    49ba:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    49bc:	e9d4 3500 	ldrd	r3, r5, [r4]
    49c0:	4628      	mov	r0, r5
    49c2:	4798      	blx	r3
		if (dev != NULL) {
    49c4:	b165      	cbz	r5, 49e0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    49c6:	68eb      	ldr	r3, [r5, #12]
    49c8:	b130      	cbz	r0, 49d8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    49ca:	2800      	cmp	r0, #0
    49cc:	bfb8      	it	lt
    49ce:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    49d0:	28ff      	cmp	r0, #255	; 0xff
    49d2:	bfa8      	it	ge
    49d4:	20ff      	movge	r0, #255	; 0xff
    49d6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    49d8:	785a      	ldrb	r2, [r3, #1]
    49da:	f042 0201 	orr.w	r2, r2, #1
    49de:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    49e0:	3408      	adds	r4, #8
    49e2:	e7e8      	b.n	49b6 <z_sys_init_run_level+0xe>
    49e4:	00008b3c 	.word	0x00008b3c

000049e8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    49e8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    49ea:	4605      	mov	r5, r0
    49ec:	b910      	cbnz	r0, 49f4 <z_impl_device_get_binding+0xc>
		return NULL;
    49ee:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    49f0:	4620      	mov	r0, r4
    49f2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    49f4:	7803      	ldrb	r3, [r0, #0]
    49f6:	2b00      	cmp	r3, #0
    49f8:	d0f9      	beq.n	49ee <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    49fa:	4a0f      	ldr	r2, [pc, #60]	; (4a38 <z_impl_device_get_binding+0x50>)
    49fc:	4c0f      	ldr	r4, [pc, #60]	; (4a3c <z_impl_device_get_binding+0x54>)
    49fe:	4616      	mov	r6, r2
    4a00:	4294      	cmp	r4, r2
    4a02:	d108      	bne.n	4a16 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a04:	4c0d      	ldr	r4, [pc, #52]	; (4a3c <z_impl_device_get_binding+0x54>)
    4a06:	42b4      	cmp	r4, r6
    4a08:	d0f1      	beq.n	49ee <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a0a:	4620      	mov	r0, r4
    4a0c:	f003 fdd8 	bl	85c0 <z_device_ready>
    4a10:	b950      	cbnz	r0, 4a28 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a12:	3418      	adds	r4, #24
    4a14:	e7f7      	b.n	4a06 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4a16:	4620      	mov	r0, r4
    4a18:	f003 fdd2 	bl	85c0 <z_device_ready>
    4a1c:	b110      	cbz	r0, 4a24 <z_impl_device_get_binding+0x3c>
    4a1e:	6823      	ldr	r3, [r4, #0]
    4a20:	42ab      	cmp	r3, r5
    4a22:	d0e5      	beq.n	49f0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a24:	3418      	adds	r4, #24
    4a26:	e7eb      	b.n	4a00 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a28:	6821      	ldr	r1, [r4, #0]
    4a2a:	4628      	mov	r0, r5
    4a2c:	f003 faf1 	bl	8012 <strcmp>
    4a30:	2800      	cmp	r0, #0
    4a32:	d1ee      	bne.n	4a12 <z_impl_device_get_binding+0x2a>
    4a34:	e7dc      	b.n	49f0 <z_impl_device_get_binding+0x8>
    4a36:	bf00      	nop
    4a38:	00008818 	.word	0x00008818
    4a3c:	00008770 	.word	0x00008770

00004a40 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a42:	4604      	mov	r4, r0
    4a44:	460e      	mov	r6, r1
	__asm__ volatile(
    4a46:	f04f 0320 	mov.w	r3, #32
    4a4a:	f3ef 8711 	mrs	r7, BASEPRI
    4a4e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a52:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4a56:	f001 fdb3 	bl	65c0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4a5a:	4631      	mov	r1, r6
    4a5c:	4605      	mov	r5, r0
    4a5e:	4620      	mov	r0, r4
    4a60:	f003 fd09 	bl	8476 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4a64:	2c04      	cmp	r4, #4
    4a66:	d10c      	bne.n	4a82 <z_fatal_error+0x42>
    4a68:	490a      	ldr	r1, [pc, #40]	; (4a94 <z_fatal_error+0x54>)
    4a6a:	4a0b      	ldr	r2, [pc, #44]	; (4a98 <z_fatal_error+0x58>)
    4a6c:	480b      	ldr	r0, [pc, #44]	; (4a9c <z_fatal_error+0x5c>)
    4a6e:	238f      	movs	r3, #143	; 0x8f
    4a70:	f003 fa8f 	bl	7f92 <printk>
    4a74:	480a      	ldr	r0, [pc, #40]	; (4aa0 <z_fatal_error+0x60>)
    4a76:	f003 fa8c 	bl	7f92 <printk>
    4a7a:	4807      	ldr	r0, [pc, #28]	; (4a98 <z_fatal_error+0x58>)
    4a7c:	218f      	movs	r1, #143	; 0x8f
    4a7e:	f003 f9b1 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4a82:	f387 8811 	msr	BASEPRI, r7
    4a86:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4a8a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4a8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4a90:	f7fd b9b0 	b.w	1df4 <z_impl_k_thread_abort>
    4a94:	000097aa 	.word	0x000097aa
    4a98:	00009788 	.word	0x00009788
    4a9c:	00008e27 	.word	0x00008e27
    4aa0:	000097c7 	.word	0x000097c7

00004aa4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4aa4:	4c11      	ldr	r4, [pc, #68]	; (4aec <idle+0x48>)
    4aa6:	68a2      	ldr	r2, [r4, #8]
    4aa8:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4aac:	2a00      	cmp	r2, #0
{
    4aae:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4ab0:	da09      	bge.n	4ac6 <idle+0x22>
    4ab2:	490f      	ldr	r1, [pc, #60]	; (4af0 <idle+0x4c>)
    4ab4:	480f      	ldr	r0, [pc, #60]	; (4af4 <idle+0x50>)
    4ab6:	4a10      	ldr	r2, [pc, #64]	; (4af8 <idle+0x54>)
    4ab8:	2327      	movs	r3, #39	; 0x27
    4aba:	f003 fa6a 	bl	7f92 <printk>
    4abe:	480e      	ldr	r0, [pc, #56]	; (4af8 <idle+0x54>)
    4ac0:	2127      	movs	r1, #39	; 0x27
    4ac2:	f003 f98f 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4ac6:	f04f 0220 	mov.w	r2, #32
    4aca:	f3ef 8311 	mrs	r3, BASEPRI
    4ace:	f382 8812 	msr	BASEPRI_MAX, r2
    4ad2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4ad6:	f002 fa69 	bl	6fac <z_get_next_timeout_expiry>
    4ada:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4adc:	f7fc fdb2 	bl	1644 <pm_system_suspend>
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d1f0      	bne.n	4ac6 <idle+0x22>
	arch_cpu_idle();
    4ae4:	f7fc fe64 	bl	17b0 <arch_cpu_idle>
}
    4ae8:	e7ed      	b.n	4ac6 <idle+0x22>
    4aea:	bf00      	nop
    4aec:	20000a2c 	.word	0x20000a2c
    4af0:	0000981d 	.word	0x0000981d
    4af4:	00008e27 	.word	0x00008e27
    4af8:	000097fc 	.word	0x000097fc

00004afc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4afc:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4afe:	2300      	movs	r3, #0
{
    4b00:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4b02:	2201      	movs	r2, #1
    4b04:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4b08:	220f      	movs	r2, #15
    4b0a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4b0e:	4c0d      	ldr	r4, [pc, #52]	; (4b44 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b10:	4a0d      	ldr	r2, [pc, #52]	; (4b48 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4b12:	9301      	str	r3, [sp, #4]
    4b14:	490d      	ldr	r1, [pc, #52]	; (4b4c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b16:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4b18:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4b1c:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4b20:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4b24:	9300      	str	r3, [sp, #0]
    4b26:	fb05 1100 	mla	r1, r5, r0, r1
    4b2a:	4b09      	ldr	r3, [pc, #36]	; (4b50 <init_idle_thread+0x54>)
    4b2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4b30:	4620      	mov	r0, r4
    4b32:	f001 ff61 	bl	69f8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b36:	7b63      	ldrb	r3, [r4, #13]
    4b38:	f023 0304 	bic.w	r3, r3, #4
    4b3c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4b3e:	b007      	add	sp, #28
    4b40:	bd30      	pop	{r4, r5, pc}
    4b42:	bf00      	nop
    4b44:	20000278 	.word	0x20000278
    4b48:	20000a2c 	.word	0x20000a2c
    4b4c:	20001080 	.word	0x20001080
    4b50:	00004aa5 	.word	0x00004aa5

00004b54 <bg_thread_main>:
{
    4b54:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4b56:	4b0a      	ldr	r3, [pc, #40]	; (4b80 <bg_thread_main+0x2c>)
    4b58:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4b5a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4b5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4b5e:	f7ff ff23 	bl	49a8 <z_sys_init_run_level>
	boot_banner();
    4b62:	f002 ff53 	bl	7a0c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4b66:	2003      	movs	r0, #3
    4b68:	f7ff ff1e 	bl	49a8 <z_sys_init_run_level>
	z_init_static_threads();
    4b6c:	f001 fff6 	bl	6b5c <z_init_static_threads>
	main();
    4b70:	f7fb fc40 	bl	3f4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4b74:	4a03      	ldr	r2, [pc, #12]	; (4b84 <bg_thread_main+0x30>)
    4b76:	7b13      	ldrb	r3, [r2, #12]
    4b78:	f023 0301 	bic.w	r3, r3, #1
    4b7c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4b7e:	bd08      	pop	{r3, pc}
    4b80:	20000aa3 	.word	0x20000aa3
    4b84:	200002f8 	.word	0x200002f8

00004b88 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4b88:	4802      	ldr	r0, [pc, #8]	; (4b94 <z_bss_zero+0xc>)
    4b8a:	4a03      	ldr	r2, [pc, #12]	; (4b98 <z_bss_zero+0x10>)
    4b8c:	2100      	movs	r1, #0
    4b8e:	1a12      	subs	r2, r2, r0
    4b90:	f003 ba56 	b.w	8040 <memset>
    4b94:	20000258 	.word	0x20000258
    4b98:	20000c60 	.word	0x20000c60

00004b9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4b9c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4b9e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4c78 <z_cstart+0xdc>
    4ba2:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4ba4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4ba8:	4d2d      	ldr	r5, [pc, #180]	; (4c60 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4baa:	4e2e      	ldr	r6, [pc, #184]	; (4c64 <z_cstart+0xc8>)
    4bac:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bae:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4c7c <z_cstart+0xe0>
    4bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4bb6:	2400      	movs	r4, #0
    4bb8:	616b      	str	r3, [r5, #20]
    4bba:	23e0      	movs	r3, #224	; 0xe0
    4bbc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4bc0:	77ec      	strb	r4, [r5, #31]
    4bc2:	762c      	strb	r4, [r5, #24]
    4bc4:	766c      	strb	r4, [r5, #25]
    4bc6:	76ac      	strb	r4, [r5, #26]
    4bc8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4bcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4bce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4bd2:	626b      	str	r3, [r5, #36]	; 0x24
    4bd4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4bd8:	f7fd f8b6 	bl	1d48 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4bdc:	f7fc fde2 	bl	17a4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4be0:	f04f 33ff 	mov.w	r3, #4294967295
    4be4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4be6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4be8:	f7fd f9de 	bl	1fa8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4bec:	f7fd f914 	bl	1e18 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4bf0:	f240 1301 	movw	r3, #257	; 0x101
    4bf4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4bf8:	ab06      	add	r3, sp, #24
    4bfa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4bfc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4c00:	f003 fcdd 	bl	85be <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4c04:	4620      	mov	r0, r4
    4c06:	f7ff fecf 	bl	49a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4c0a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4c0c:	4d16      	ldr	r5, [pc, #88]	; (4c68 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4c0e:	f7ff fecb 	bl	49a8 <z_sys_init_run_level>
	z_sched_init();
    4c12:	f001 fb3f 	bl	6294 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4c16:	4b15      	ldr	r3, [pc, #84]	; (4c6c <z_cstart+0xd0>)
    4c18:	9305      	str	r3, [sp, #20]
    4c1a:	2301      	movs	r3, #1
    4c1c:	4914      	ldr	r1, [pc, #80]	; (4c70 <z_cstart+0xd4>)
    4c1e:	9400      	str	r4, [sp, #0]
    4c20:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4c28:	464b      	mov	r3, r9
    4c2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4c2e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    4c30:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4c32:	f001 fee1 	bl	69f8 <z_setup_new_thread>
    4c36:	7b6a      	ldrb	r2, [r5, #13]
    4c38:	f022 0204 	bic.w	r2, r2, #4
    4c3c:	736a      	strb	r2, [r5, #13]
    4c3e:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    4c40:	4628      	mov	r0, r5
    4c42:	f000 ff27 	bl	5a94 <z_ready_thread>
		init_idle_thread(i);
    4c46:	4620      	mov	r0, r4
    4c48:	f7ff ff58 	bl	4afc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4c4c:	4b09      	ldr	r3, [pc, #36]	; (4c74 <z_cstart+0xd8>)
    4c4e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c50:	464a      	mov	r2, r9
    4c52:	4639      	mov	r1, r7
    4c54:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4c56:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4c58:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c5c:	f7fc fedc 	bl	1a18 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4c60:	e000ed00 	.word	0xe000ed00
    4c64:	20000a2c 	.word	0x20000a2c
    4c68:	200002f8 	.word	0x200002f8
    4c6c:	00009845 	.word	0x00009845
    4c70:	20000c60 	.word	0x20000c60
    4c74:	20000278 	.word	0x20000278
    4c78:	20001a00 	.word	0x20001a00
    4c7c:	00004b55 	.word	0x00004b55

00004c80 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c84:	4d16      	ldr	r5, [pc, #88]	; (4ce0 <init_mem_slab_module+0x60>)
    4c86:	4c17      	ldr	r4, [pc, #92]	; (4ce4 <init_mem_slab_module+0x64>)
    4c88:	4e17      	ldr	r6, [pc, #92]	; (4ce8 <init_mem_slab_module+0x68>)
    4c8a:	46a8      	mov	r8, r5
    4c8c:	42ac      	cmp	r4, r5
    4c8e:	d90c      	bls.n	4caa <init_mem_slab_module+0x2a>
    4c90:	4916      	ldr	r1, [pc, #88]	; (4cec <init_mem_slab_module+0x6c>)
    4c92:	4817      	ldr	r0, [pc, #92]	; (4cf0 <init_mem_slab_module+0x70>)
    4c94:	233c      	movs	r3, #60	; 0x3c
    4c96:	4632      	mov	r2, r6
    4c98:	f003 f97b 	bl	7f92 <printk>
    4c9c:	4815      	ldr	r0, [pc, #84]	; (4cf4 <init_mem_slab_module+0x74>)
    4c9e:	f003 f978 	bl	7f92 <printk>
    4ca2:	213c      	movs	r1, #60	; 0x3c
    4ca4:	4630      	mov	r0, r6
    4ca6:	f003 f89d 	bl	7de4 <assert_post_action>
    4caa:	4544      	cmp	r4, r8
    4cac:	d302      	bcc.n	4cb4 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4cae:	2000      	movs	r0, #0
	return rc;
}
    4cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4cb4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4cb8:	ea41 0302 	orr.w	r3, r1, r2
    4cbc:	f013 0303 	ands.w	r3, r3, #3
    4cc0:	d10b      	bne.n	4cda <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4cc2:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4cc4:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4cc6:	4283      	cmp	r3, r0
    4cc8:	d101      	bne.n	4cce <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4cca:	3420      	adds	r4, #32
    4ccc:	e7de      	b.n	4c8c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4cce:	69a7      	ldr	r7, [r4, #24]
    4cd0:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4cd2:	3301      	adds	r3, #1
		slab->free_list = p;
    4cd4:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4cd6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4cd8:	e7f5      	b.n	4cc6 <init_mem_slab_module+0x46>
		return -EINVAL;
    4cda:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4cde:	e7e7      	b.n	4cb0 <init_mem_slab_module+0x30>
    4ce0:	20000208 	.word	0x20000208
    4ce4:	20000208 	.word	0x20000208
    4ce8:	0000984a 	.word	0x0000984a
    4cec:	0000986f 	.word	0x0000986f
    4cf0:	00008e27 	.word	0x00008e27
    4cf4:	0000988c 	.word	0x0000988c

00004cf8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4cfc:	4604      	mov	r4, r0
    4cfe:	460e      	mov	r6, r1
    4d00:	4690      	mov	r8, r2
    4d02:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4d04:	f100 0508 	add.w	r5, r0, #8
    4d08:	f04f 0320 	mov.w	r3, #32
    4d0c:	f3ef 8711 	mrs	r7, BASEPRI
    4d10:	f383 8812 	msr	BASEPRI_MAX, r3
    4d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d18:	4628      	mov	r0, r5
    4d1a:	f001 ffaf 	bl	6c7c <z_spin_lock_valid>
    4d1e:	b968      	cbnz	r0, 4d3c <k_mem_slab_alloc+0x44>
    4d20:	4a24      	ldr	r2, [pc, #144]	; (4db4 <k_mem_slab_alloc+0xbc>)
    4d22:	4925      	ldr	r1, [pc, #148]	; (4db8 <k_mem_slab_alloc+0xc0>)
    4d24:	4825      	ldr	r0, [pc, #148]	; (4dbc <k_mem_slab_alloc+0xc4>)
    4d26:	2381      	movs	r3, #129	; 0x81
    4d28:	f003 f933 	bl	7f92 <printk>
    4d2c:	4824      	ldr	r0, [pc, #144]	; (4dc0 <k_mem_slab_alloc+0xc8>)
    4d2e:	4629      	mov	r1, r5
    4d30:	f003 f92f 	bl	7f92 <printk>
    4d34:	481f      	ldr	r0, [pc, #124]	; (4db4 <k_mem_slab_alloc+0xbc>)
    4d36:	2181      	movs	r1, #129	; 0x81
    4d38:	f003 f854 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4d3c:	4628      	mov	r0, r5
    4d3e:	f001 ffbb 	bl	6cb8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4d42:	69a3      	ldr	r3, [r4, #24]
    4d44:	b1eb      	cbz	r3, 4d82 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    4d46:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4d4c:	69e3      	ldr	r3, [r4, #28]
    4d4e:	3301      	adds	r3, #1
    4d50:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4d52:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d54:	4628      	mov	r0, r5
    4d56:	f001 ff9f 	bl	6c98 <z_spin_unlock_valid>
    4d5a:	b968      	cbnz	r0, 4d78 <k_mem_slab_alloc+0x80>
    4d5c:	4a15      	ldr	r2, [pc, #84]	; (4db4 <k_mem_slab_alloc+0xbc>)
    4d5e:	4919      	ldr	r1, [pc, #100]	; (4dc4 <k_mem_slab_alloc+0xcc>)
    4d60:	4816      	ldr	r0, [pc, #88]	; (4dbc <k_mem_slab_alloc+0xc4>)
    4d62:	23ac      	movs	r3, #172	; 0xac
    4d64:	f003 f915 	bl	7f92 <printk>
    4d68:	4817      	ldr	r0, [pc, #92]	; (4dc8 <k_mem_slab_alloc+0xd0>)
    4d6a:	4629      	mov	r1, r5
    4d6c:	f003 f911 	bl	7f92 <printk>
    4d70:	4810      	ldr	r0, [pc, #64]	; (4db4 <k_mem_slab_alloc+0xbc>)
    4d72:	21ac      	movs	r1, #172	; 0xac
    4d74:	f003 f836 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4d78:	f387 8811 	msr	BASEPRI, r7
    4d7c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4d80:	e013      	b.n	4daa <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4d82:	ea58 0209 	orrs.w	r2, r8, r9
    4d86:	d103      	bne.n	4d90 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4d88:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4d8a:	f06f 040b 	mvn.w	r4, #11
    4d8e:	e7e1      	b.n	4d54 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4d90:	4622      	mov	r2, r4
    4d92:	e9cd 8900 	strd	r8, r9, [sp]
    4d96:	4639      	mov	r1, r7
    4d98:	4628      	mov	r0, r5
    4d9a:	f001 f82d 	bl	5df8 <z_pend_curr>
		if (result == 0) {
    4d9e:	4604      	mov	r4, r0
    4da0:	b918      	cbnz	r0, 4daa <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4da2:	4b0a      	ldr	r3, [pc, #40]	; (4dcc <k_mem_slab_alloc+0xd4>)
    4da4:	689b      	ldr	r3, [r3, #8]
    4da6:	695b      	ldr	r3, [r3, #20]
    4da8:	6033      	str	r3, [r6, #0]
}
    4daa:	4620      	mov	r0, r4
    4dac:	b003      	add	sp, #12
    4dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4db2:	bf00      	nop
    4db4:	00008f3a 	.word	0x00008f3a
    4db8:	00008f8c 	.word	0x00008f8c
    4dbc:	00008e27 	.word	0x00008e27
    4dc0:	00008fa1 	.word	0x00008fa1
    4dc4:	00008f60 	.word	0x00008f60
    4dc8:	00008f77 	.word	0x00008f77
    4dcc:	20000a2c 	.word	0x20000a2c

00004dd0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dd4:	4604      	mov	r4, r0
    4dd6:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4dd8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4ddc:	f04f 0320 	mov.w	r3, #32
    4de0:	f3ef 8711 	mrs	r7, BASEPRI
    4de4:	f383 8812 	msr	BASEPRI_MAX, r3
    4de8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4dec:	4628      	mov	r0, r5
    4dee:	f001 ff45 	bl	6c7c <z_spin_lock_valid>
    4df2:	b968      	cbnz	r0, 4e10 <k_mem_slab_free+0x40>
    4df4:	4a22      	ldr	r2, [pc, #136]	; (4e80 <k_mem_slab_free+0xb0>)
    4df6:	4923      	ldr	r1, [pc, #140]	; (4e84 <k_mem_slab_free+0xb4>)
    4df8:	4823      	ldr	r0, [pc, #140]	; (4e88 <k_mem_slab_free+0xb8>)
    4dfa:	2381      	movs	r3, #129	; 0x81
    4dfc:	f003 f8c9 	bl	7f92 <printk>
    4e00:	4822      	ldr	r0, [pc, #136]	; (4e8c <k_mem_slab_free+0xbc>)
    4e02:	4629      	mov	r1, r5
    4e04:	f003 f8c5 	bl	7f92 <printk>
    4e08:	481d      	ldr	r0, [pc, #116]	; (4e80 <k_mem_slab_free+0xb0>)
    4e0a:	2181      	movs	r1, #129	; 0x81
    4e0c:	f002 ffea 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e10:	4628      	mov	r0, r5
    4e12:	f001 ff51 	bl	6cb8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4e16:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4e1a:	f1b8 0f00 	cmp.w	r8, #0
    4e1e:	d10f      	bne.n	4e40 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4e20:	4620      	mov	r0, r4
    4e22:	f001 f9e7 	bl	61f4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4e26:	b158      	cbz	r0, 4e40 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4e28:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4e2a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4e2c:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    4e30:	f000 fe30 	bl	5a94 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4e34:	4639      	mov	r1, r7
    4e36:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4e3c:	f000 bb8a 	b.w	5554 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4e40:	6833      	ldr	r3, [r6, #0]
    4e42:	69a2      	ldr	r2, [r4, #24]
    4e44:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4e46:	6833      	ldr	r3, [r6, #0]
    4e48:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4e4a:	69e3      	ldr	r3, [r4, #28]
    4e4c:	3b01      	subs	r3, #1
    4e4e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e50:	4628      	mov	r0, r5
    4e52:	f001 ff21 	bl	6c98 <z_spin_unlock_valid>
    4e56:	b968      	cbnz	r0, 4e74 <k_mem_slab_free+0xa4>
    4e58:	4a09      	ldr	r2, [pc, #36]	; (4e80 <k_mem_slab_free+0xb0>)
    4e5a:	490d      	ldr	r1, [pc, #52]	; (4e90 <k_mem_slab_free+0xc0>)
    4e5c:	480a      	ldr	r0, [pc, #40]	; (4e88 <k_mem_slab_free+0xb8>)
    4e5e:	23ac      	movs	r3, #172	; 0xac
    4e60:	f003 f897 	bl	7f92 <printk>
    4e64:	480b      	ldr	r0, [pc, #44]	; (4e94 <k_mem_slab_free+0xc4>)
    4e66:	4629      	mov	r1, r5
    4e68:	f003 f893 	bl	7f92 <printk>
    4e6c:	4804      	ldr	r0, [pc, #16]	; (4e80 <k_mem_slab_free+0xb0>)
    4e6e:	21ac      	movs	r1, #172	; 0xac
    4e70:	f002 ffb8 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4e74:	f387 8811 	msr	BASEPRI, r7
    4e78:	f3bf 8f6f 	isb	sy
}
    4e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e80:	00008f3a 	.word	0x00008f3a
    4e84:	00008f8c 	.word	0x00008f8c
    4e88:	00008e27 	.word	0x00008e27
    4e8c:	00008fa1 	.word	0x00008fa1
    4e90:	00008f60 	.word	0x00008f60
    4e94:	00008f77 	.word	0x00008f77

00004e98 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4e9c:	4604      	mov	r4, r0
    4e9e:	4616      	mov	r6, r2
    4ea0:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4ea2:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4ea6:	b163      	cbz	r3, 4ec2 <z_impl_k_mutex_lock+0x2a>
    4ea8:	4970      	ldr	r1, [pc, #448]	; (506c <z_impl_k_mutex_lock+0x1d4>)
    4eaa:	4a71      	ldr	r2, [pc, #452]	; (5070 <z_impl_k_mutex_lock+0x1d8>)
    4eac:	4871      	ldr	r0, [pc, #452]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    4eae:	2365      	movs	r3, #101	; 0x65
    4eb0:	f003 f86f 	bl	7f92 <printk>
    4eb4:	4870      	ldr	r0, [pc, #448]	; (5078 <z_impl_k_mutex_lock+0x1e0>)
    4eb6:	f003 f86c 	bl	7f92 <printk>
    4eba:	486d      	ldr	r0, [pc, #436]	; (5070 <z_impl_k_mutex_lock+0x1d8>)
    4ebc:	2165      	movs	r1, #101	; 0x65
    4ebe:	f002 ff91 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4ec2:	f04f 0320 	mov.w	r3, #32
    4ec6:	f3ef 8811 	mrs	r8, BASEPRI
    4eca:	f383 8812 	msr	BASEPRI_MAX, r3
    4ece:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ed2:	486a      	ldr	r0, [pc, #424]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4ed4:	f001 fed2 	bl	6c7c <z_spin_lock_valid>
    4ed8:	b968      	cbnz	r0, 4ef6 <z_impl_k_mutex_lock+0x5e>
    4eda:	4a69      	ldr	r2, [pc, #420]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4edc:	4969      	ldr	r1, [pc, #420]	; (5084 <z_impl_k_mutex_lock+0x1ec>)
    4ede:	4865      	ldr	r0, [pc, #404]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    4ee0:	2381      	movs	r3, #129	; 0x81
    4ee2:	f003 f856 	bl	7f92 <printk>
    4ee6:	4965      	ldr	r1, [pc, #404]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4ee8:	4867      	ldr	r0, [pc, #412]	; (5088 <z_impl_k_mutex_lock+0x1f0>)
    4eea:	f003 f852 	bl	7f92 <printk>
    4eee:	4864      	ldr	r0, [pc, #400]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4ef0:	2181      	movs	r1, #129	; 0x81
    4ef2:	f002 ff77 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ef6:	4861      	ldr	r0, [pc, #388]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4ef8:	f001 fede 	bl	6cb8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4efc:	68e3      	ldr	r3, [r4, #12]
    4efe:	4a63      	ldr	r2, [pc, #396]	; (508c <z_impl_k_mutex_lock+0x1f4>)
    4f00:	b1fb      	cbz	r3, 4f42 <z_impl_k_mutex_lock+0xaa>
    4f02:	68a0      	ldr	r0, [r4, #8]
    4f04:	6891      	ldr	r1, [r2, #8]
    4f06:	4288      	cmp	r0, r1
    4f08:	d03d      	beq.n	4f86 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4f0a:	ea56 0307 	orrs.w	r3, r6, r7
    4f0e:	d13c      	bne.n	4f8a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f10:	485a      	ldr	r0, [pc, #360]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4f12:	f001 fec1 	bl	6c98 <z_spin_unlock_valid>
    4f16:	b968      	cbnz	r0, 4f34 <z_impl_k_mutex_lock+0x9c>
    4f18:	4a59      	ldr	r2, [pc, #356]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4f1a:	495d      	ldr	r1, [pc, #372]	; (5090 <z_impl_k_mutex_lock+0x1f8>)
    4f1c:	4855      	ldr	r0, [pc, #340]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    4f1e:	23ac      	movs	r3, #172	; 0xac
    4f20:	f003 f837 	bl	7f92 <printk>
    4f24:	4955      	ldr	r1, [pc, #340]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4f26:	485b      	ldr	r0, [pc, #364]	; (5094 <z_impl_k_mutex_lock+0x1fc>)
    4f28:	f003 f833 	bl	7f92 <printk>
    4f2c:	4854      	ldr	r0, [pc, #336]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4f2e:	21ac      	movs	r1, #172	; 0xac
    4f30:	f002 ff58 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    4f34:	f388 8811 	msr	BASEPRI, r8
    4f38:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4f3c:	f06f 000f 	mvn.w	r0, #15
    4f40:	e01e      	b.n	4f80 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4f42:	6891      	ldr	r1, [r2, #8]
    4f44:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f48:	484c      	ldr	r0, [pc, #304]	; (507c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4f4a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4f4c:	3301      	adds	r3, #1
    4f4e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4f50:	6893      	ldr	r3, [r2, #8]
    4f52:	60a3      	str	r3, [r4, #8]
    4f54:	f001 fea0 	bl	6c98 <z_spin_unlock_valid>
    4f58:	b968      	cbnz	r0, 4f76 <z_impl_k_mutex_lock+0xde>
    4f5a:	4a49      	ldr	r2, [pc, #292]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4f5c:	494c      	ldr	r1, [pc, #304]	; (5090 <z_impl_k_mutex_lock+0x1f8>)
    4f5e:	4845      	ldr	r0, [pc, #276]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    4f60:	23ac      	movs	r3, #172	; 0xac
    4f62:	f003 f816 	bl	7f92 <printk>
    4f66:	4945      	ldr	r1, [pc, #276]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4f68:	484a      	ldr	r0, [pc, #296]	; (5094 <z_impl_k_mutex_lock+0x1fc>)
    4f6a:	f003 f812 	bl	7f92 <printk>
    4f6e:	4844      	ldr	r0, [pc, #272]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4f70:	21ac      	movs	r1, #172	; 0xac
    4f72:	f002 ff37 	bl	7de4 <assert_post_action>
    4f76:	f388 8811 	msr	BASEPRI, r8
    4f7a:	f3bf 8f6f 	isb	sy
		return 0;
    4f7e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4f80:	b002      	add	sp, #8
    4f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4f86:	6921      	ldr	r1, [r4, #16]
    4f88:	e7de      	b.n	4f48 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4f8a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f8e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4f92:	4299      	cmp	r1, r3
    4f94:	bfa8      	it	ge
    4f96:	4619      	movge	r1, r3
    4f98:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4f9c:	4291      	cmp	r1, r2
    4f9e:	bfb8      	it	lt
    4fa0:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4fa2:	428b      	cmp	r3, r1
    4fa4:	dd44      	ble.n	5030 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    4fa6:	f000 ff57 	bl	5e58 <z_set_prio>
    4faa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4fac:	e9cd 6700 	strd	r6, r7, [sp]
    4fb0:	4832      	ldr	r0, [pc, #200]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4fb2:	4622      	mov	r2, r4
    4fb4:	4641      	mov	r1, r8
    4fb6:	f000 ff1f 	bl	5df8 <z_pend_curr>
	if (got_mutex == 0) {
    4fba:	2800      	cmp	r0, #0
    4fbc:	d0e0      	beq.n	4f80 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4fbe:	f04f 0320 	mov.w	r3, #32
    4fc2:	f3ef 8611 	mrs	r6, BASEPRI
    4fc6:	f383 8812 	msr	BASEPRI_MAX, r3
    4fca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fce:	482b      	ldr	r0, [pc, #172]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4fd0:	f001 fe54 	bl	6c7c <z_spin_lock_valid>
    4fd4:	b968      	cbnz	r0, 4ff2 <z_impl_k_mutex_lock+0x15a>
    4fd6:	4a2a      	ldr	r2, [pc, #168]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4fd8:	492a      	ldr	r1, [pc, #168]	; (5084 <z_impl_k_mutex_lock+0x1ec>)
    4fda:	4826      	ldr	r0, [pc, #152]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    4fdc:	2381      	movs	r3, #129	; 0x81
    4fde:	f002 ffd8 	bl	7f92 <printk>
    4fe2:	4926      	ldr	r1, [pc, #152]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4fe4:	4828      	ldr	r0, [pc, #160]	; (5088 <z_impl_k_mutex_lock+0x1f0>)
    4fe6:	f002 ffd4 	bl	7f92 <printk>
    4fea:	4825      	ldr	r0, [pc, #148]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    4fec:	2181      	movs	r1, #129	; 0x81
    4fee:	f002 fef9 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ff2:	4822      	ldr	r0, [pc, #136]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    4ff4:	f001 fe60 	bl	6cb8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4ff8:	6823      	ldr	r3, [r4, #0]
    4ffa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ffc:	429c      	cmp	r4, r3
    4ffe:	d00a      	beq.n	5016 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5000:	b14b      	cbz	r3, 5016 <z_impl_k_mutex_lock+0x17e>
    5002:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5006:	4299      	cmp	r1, r3
    5008:	bfa8      	it	ge
    500a:	4619      	movge	r1, r3
    500c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5010:	4299      	cmp	r1, r3
    5012:	bfb8      	it	lt
    5014:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5016:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5018:	f990 300e 	ldrsb.w	r3, [r0, #14]
    501c:	4299      	cmp	r1, r3
    501e:	d109      	bne.n	5034 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    5020:	b16d      	cbz	r5, 503e <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    5022:	4816      	ldr	r0, [pc, #88]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    5024:	4631      	mov	r1, r6
    5026:	f000 fa95 	bl	5554 <z_reschedule>
	return -EAGAIN;
    502a:	f06f 000a 	mvn.w	r0, #10
    502e:	e7a7      	b.n	4f80 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    5030:	2500      	movs	r5, #0
    5032:	e7bb      	b.n	4fac <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5034:	f000 ff10 	bl	5e58 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5038:	2800      	cmp	r0, #0
    503a:	d1f2      	bne.n	5022 <z_impl_k_mutex_lock+0x18a>
    503c:	e7f0      	b.n	5020 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    503e:	480f      	ldr	r0, [pc, #60]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    5040:	f001 fe2a 	bl	6c98 <z_spin_unlock_valid>
    5044:	b968      	cbnz	r0, 5062 <z_impl_k_mutex_lock+0x1ca>
    5046:	4a0e      	ldr	r2, [pc, #56]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    5048:	4911      	ldr	r1, [pc, #68]	; (5090 <z_impl_k_mutex_lock+0x1f8>)
    504a:	480a      	ldr	r0, [pc, #40]	; (5074 <z_impl_k_mutex_lock+0x1dc>)
    504c:	23ac      	movs	r3, #172	; 0xac
    504e:	f002 ffa0 	bl	7f92 <printk>
    5052:	490a      	ldr	r1, [pc, #40]	; (507c <z_impl_k_mutex_lock+0x1e4>)
    5054:	480f      	ldr	r0, [pc, #60]	; (5094 <z_impl_k_mutex_lock+0x1fc>)
    5056:	f002 ff9c 	bl	7f92 <printk>
    505a:	4809      	ldr	r0, [pc, #36]	; (5080 <z_impl_k_mutex_lock+0x1e8>)
    505c:	21ac      	movs	r1, #172	; 0xac
    505e:	f002 fec1 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5062:	f386 8811 	msr	BASEPRI, r6
    5066:	f3bf 8f6f 	isb	sy
    506a:	e7de      	b.n	502a <z_impl_k_mutex_lock+0x192>
    506c:	000098cd 	.word	0x000098cd
    5070:	000098ab 	.word	0x000098ab
    5074:	00008e27 	.word	0x00008e27
    5078:	000098df 	.word	0x000098df
    507c:	20000a54 	.word	0x20000a54
    5080:	00008f3a 	.word	0x00008f3a
    5084:	00008f8c 	.word	0x00008f8c
    5088:	00008fa1 	.word	0x00008fa1
    508c:	20000a2c 	.word	0x20000a2c
    5090:	00008f60 	.word	0x00008f60
    5094:	00008f77 	.word	0x00008f77

00005098 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5098:	b538      	push	{r3, r4, r5, lr}
    509a:	4604      	mov	r4, r0
    509c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    50a0:	b163      	cbz	r3, 50bc <z_impl_k_mutex_unlock+0x24>
    50a2:	4952      	ldr	r1, [pc, #328]	; (51ec <z_impl_k_mutex_unlock+0x154>)
    50a4:	4a52      	ldr	r2, [pc, #328]	; (51f0 <z_impl_k_mutex_unlock+0x158>)
    50a6:	4853      	ldr	r0, [pc, #332]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    50a8:	23c7      	movs	r3, #199	; 0xc7
    50aa:	f002 ff72 	bl	7f92 <printk>
    50ae:	4852      	ldr	r0, [pc, #328]	; (51f8 <z_impl_k_mutex_unlock+0x160>)
    50b0:	f002 ff6f 	bl	7f92 <printk>
    50b4:	484e      	ldr	r0, [pc, #312]	; (51f0 <z_impl_k_mutex_unlock+0x158>)
    50b6:	21c7      	movs	r1, #199	; 0xc7
    50b8:	f002 fe94 	bl	7de4 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    50bc:	68a3      	ldr	r3, [r4, #8]
    50be:	2b00      	cmp	r3, #0
    50c0:	f000 808d 	beq.w	51de <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    50c4:	4d4d      	ldr	r5, [pc, #308]	; (51fc <z_impl_k_mutex_unlock+0x164>)
    50c6:	68aa      	ldr	r2, [r5, #8]
    50c8:	4293      	cmp	r3, r2
    50ca:	f040 808b 	bne.w	51e4 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    50ce:	68e3      	ldr	r3, [r4, #12]
    50d0:	b94b      	cbnz	r3, 50e6 <z_impl_k_mutex_unlock+0x4e>
    50d2:	494b      	ldr	r1, [pc, #300]	; (5200 <z_impl_k_mutex_unlock+0x168>)
    50d4:	4847      	ldr	r0, [pc, #284]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    50d6:	4a46      	ldr	r2, [pc, #280]	; (51f0 <z_impl_k_mutex_unlock+0x158>)
    50d8:	23df      	movs	r3, #223	; 0xdf
    50da:	f002 ff5a 	bl	7f92 <printk>
    50de:	4844      	ldr	r0, [pc, #272]	; (51f0 <z_impl_k_mutex_unlock+0x158>)
    50e0:	21df      	movs	r1, #223	; 0xdf
    50e2:	f002 fe7f 	bl	7de4 <assert_post_action>
    50e6:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    50ea:	b163      	cbz	r3, 5106 <z_impl_k_mutex_unlock+0x6e>
    50ec:	493f      	ldr	r1, [pc, #252]	; (51ec <z_impl_k_mutex_unlock+0x154>)
    50ee:	4a45      	ldr	r2, [pc, #276]	; (5204 <z_impl_k_mutex_unlock+0x16c>)
    50f0:	4840      	ldr	r0, [pc, #256]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    50f2:	23fd      	movs	r3, #253	; 0xfd
    50f4:	f002 ff4d 	bl	7f92 <printk>
    50f8:	4843      	ldr	r0, [pc, #268]	; (5208 <z_impl_k_mutex_unlock+0x170>)
    50fa:	f002 ff4a 	bl	7f92 <printk>
    50fe:	4841      	ldr	r0, [pc, #260]	; (5204 <z_impl_k_mutex_unlock+0x16c>)
    5100:	21fd      	movs	r1, #253	; 0xfd
    5102:	f002 fe6f 	bl	7de4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5106:	68ab      	ldr	r3, [r5, #8]
    5108:	7bdb      	ldrb	r3, [r3, #15]
    510a:	2b01      	cmp	r3, #1
    510c:	d10c      	bne.n	5128 <z_impl_k_mutex_unlock+0x90>
    510e:	493f      	ldr	r1, [pc, #252]	; (520c <z_impl_k_mutex_unlock+0x174>)
    5110:	4a3c      	ldr	r2, [pc, #240]	; (5204 <z_impl_k_mutex_unlock+0x16c>)
    5112:	4838      	ldr	r0, [pc, #224]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    5114:	23fe      	movs	r3, #254	; 0xfe
    5116:	f002 ff3c 	bl	7f92 <printk>
    511a:	483b      	ldr	r0, [pc, #236]	; (5208 <z_impl_k_mutex_unlock+0x170>)
    511c:	f002 ff39 	bl	7f92 <printk>
    5120:	4838      	ldr	r0, [pc, #224]	; (5204 <z_impl_k_mutex_unlock+0x16c>)
    5122:	21fe      	movs	r1, #254	; 0xfe
    5124:	f002 fe5e 	bl	7de4 <assert_post_action>

	--_current->base.sched_locked;
    5128:	68aa      	ldr	r2, [r5, #8]
    512a:	7bd3      	ldrb	r3, [r2, #15]
    512c:	3b01      	subs	r3, #1
    512e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5130:	68e3      	ldr	r3, [r4, #12]
    5132:	2b01      	cmp	r3, #1
    5134:	d905      	bls.n	5142 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5136:	3b01      	subs	r3, #1
    5138:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    513a:	f000 ff93 	bl	6064 <k_sched_unlock>

	return 0;
    513e:	2000      	movs	r0, #0
}
    5140:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5142:	f04f 0320 	mov.w	r3, #32
    5146:	f3ef 8511 	mrs	r5, BASEPRI
    514a:	f383 8812 	msr	BASEPRI_MAX, r3
    514e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5152:	482f      	ldr	r0, [pc, #188]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    5154:	f001 fd92 	bl	6c7c <z_spin_lock_valid>
    5158:	b968      	cbnz	r0, 5176 <z_impl_k_mutex_unlock+0xde>
    515a:	4a2e      	ldr	r2, [pc, #184]	; (5214 <z_impl_k_mutex_unlock+0x17c>)
    515c:	492e      	ldr	r1, [pc, #184]	; (5218 <z_impl_k_mutex_unlock+0x180>)
    515e:	4825      	ldr	r0, [pc, #148]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    5160:	2381      	movs	r3, #129	; 0x81
    5162:	f002 ff16 	bl	7f92 <printk>
    5166:	492a      	ldr	r1, [pc, #168]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    5168:	482c      	ldr	r0, [pc, #176]	; (521c <z_impl_k_mutex_unlock+0x184>)
    516a:	f002 ff12 	bl	7f92 <printk>
    516e:	4829      	ldr	r0, [pc, #164]	; (5214 <z_impl_k_mutex_unlock+0x17c>)
    5170:	2181      	movs	r1, #129	; 0x81
    5172:	f002 fe37 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5176:	4826      	ldr	r0, [pc, #152]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    5178:	f001 fd9e 	bl	6cb8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    517c:	68a0      	ldr	r0, [r4, #8]
    517e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    5180:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5184:	4299      	cmp	r1, r3
    5186:	d001      	beq.n	518c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5188:	f000 fe66 	bl	5e58 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    518c:	4620      	mov	r0, r4
    518e:	f001 f831 	bl	61f4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5192:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5194:	b158      	cbz	r0, 51ae <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    5196:	f990 200e 	ldrsb.w	r2, [r0, #14]
    519a:	6122      	str	r2, [r4, #16]
    519c:	2200      	movs	r2, #0
    519e:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    51a0:	f000 fc78 	bl	5a94 <z_ready_thread>
		z_reschedule(&lock, key);
    51a4:	481a      	ldr	r0, [pc, #104]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    51a6:	4629      	mov	r1, r5
    51a8:	f000 f9d4 	bl	5554 <z_reschedule>
    51ac:	e7c5      	b.n	513a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    51ae:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51b0:	4817      	ldr	r0, [pc, #92]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    51b2:	f001 fd71 	bl	6c98 <z_spin_unlock_valid>
    51b6:	b968      	cbnz	r0, 51d4 <z_impl_k_mutex_unlock+0x13c>
    51b8:	4a16      	ldr	r2, [pc, #88]	; (5214 <z_impl_k_mutex_unlock+0x17c>)
    51ba:	4919      	ldr	r1, [pc, #100]	; (5220 <z_impl_k_mutex_unlock+0x188>)
    51bc:	480d      	ldr	r0, [pc, #52]	; (51f4 <z_impl_k_mutex_unlock+0x15c>)
    51be:	23ac      	movs	r3, #172	; 0xac
    51c0:	f002 fee7 	bl	7f92 <printk>
    51c4:	4912      	ldr	r1, [pc, #72]	; (5210 <z_impl_k_mutex_unlock+0x178>)
    51c6:	4817      	ldr	r0, [pc, #92]	; (5224 <z_impl_k_mutex_unlock+0x18c>)
    51c8:	f002 fee3 	bl	7f92 <printk>
    51cc:	4811      	ldr	r0, [pc, #68]	; (5214 <z_impl_k_mutex_unlock+0x17c>)
    51ce:	21ac      	movs	r1, #172	; 0xac
    51d0:	f002 fe08 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    51d4:	f385 8811 	msr	BASEPRI, r5
    51d8:	f3bf 8f6f 	isb	sy
    51dc:	e7ad      	b.n	513a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    51de:	f06f 0015 	mvn.w	r0, #21
    51e2:	e7ad      	b.n	5140 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    51e4:	f04f 30ff 	mov.w	r0, #4294967295
    51e8:	e7aa      	b.n	5140 <z_impl_k_mutex_unlock+0xa8>
    51ea:	bf00      	nop
    51ec:	000098cd 	.word	0x000098cd
    51f0:	000098ab 	.word	0x000098ab
    51f4:	00008e27 	.word	0x00008e27
    51f8:	000098df 	.word	0x000098df
    51fc:	20000a2c 	.word	0x20000a2c
    5200:	00009904 	.word	0x00009904
    5204:	0000991b 	.word	0x0000991b
    5208:	00009946 	.word	0x00009946
    520c:	00009949 	.word	0x00009949
    5210:	20000a54 	.word	0x20000a54
    5214:	00008f3a 	.word	0x00008f3a
    5218:	00008f8c 	.word	0x00008f8c
    521c:	00008fa1 	.word	0x00008fa1
    5220:	00008f60 	.word	0x00008f60
    5224:	00008f77 	.word	0x00008f77

00005228 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    5228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    522c:	6884      	ldr	r4, [r0, #8]
{
    522e:	4605      	mov	r5, r0
    5230:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    5232:	b1d4      	cbz	r4, 526a <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    5234:	7863      	ldrb	r3, [r4, #1]
    5236:	2b01      	cmp	r3, #1
    5238:	d14b      	bne.n	52d2 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    523a:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    523e:	d10e      	bne.n	525e <signal_poll_event+0x36>
    5240:	4a30      	ldr	r2, [pc, #192]	; (5304 <signal_poll_event+0xdc>)
    5242:	4931      	ldr	r1, [pc, #196]	; (5308 <signal_poll_event+0xe0>)
    5244:	4831      	ldr	r0, [pc, #196]	; (530c <signal_poll_event+0xe4>)
    5246:	23f9      	movs	r3, #249	; 0xf9
    5248:	f002 fea3 	bl	7f92 <printk>
    524c:	4830      	ldr	r0, [pc, #192]	; (5310 <signal_poll_event+0xe8>)
    524e:	f002 fea0 	bl	7f92 <printk>
    5252:	482c      	ldr	r0, [pc, #176]	; (5304 <signal_poll_event+0xdc>)
    5254:	21f9      	movs	r1, #249	; 0xf9
    5256:	f002 fdc5 	bl	7de4 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    525a:	7b7b      	ldrb	r3, [r7, #13]
    525c:	deff      	udf	#255	; 0xff
    525e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5262:	f013 0302 	ands.w	r3, r3, #2
    5266:	d10a      	bne.n	527e <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    5268:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    526a:	68eb      	ldr	r3, [r5, #12]
    526c:	f3c3 3145 	ubfx	r1, r3, #13, #6
    5270:	430e      	orrs	r6, r1
	event->poller = NULL;
    5272:	2000      	movs	r0, #0
	event->state |= state;
    5274:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    5278:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    527a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    527c:	e00d      	b.n	529a <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    527e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    5282:	f04f 31ff 	mov.w	r1, #4294967295
    5286:	f06f 0001 	mvn.w	r0, #1
    528a:	428b      	cmp	r3, r1
    528c:	bf08      	it	eq
    528e:	4282      	cmpeq	r2, r0
    5290:	d105      	bne.n	529e <signal_poll_event+0x76>
		poller->is_polling = false;
    5292:	2300      	movs	r3, #0
    5294:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    5296:	f06f 000a 	mvn.w	r0, #10
}
    529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    529e:	4638      	mov	r0, r7
    52a0:	f000 fa54 	bl	574c <z_unpend_thread>
	arch_thread_return_value_set(thread,
    52a4:	2e08      	cmp	r6, #8
    52a6:	bf0c      	ite	eq
    52a8:	f06f 0303 	mvneq.w	r3, #3
    52ac:	2300      	movne	r3, #0
    52ae:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    52b0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    52b4:	06db      	lsls	r3, r3, #27
    52b6:	d104      	bne.n	52c2 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    52b8:	f854 8c48 	ldr.w	r8, [r4, #-72]
    52bc:	f1b8 0f00 	cmp.w	r8, #0
    52c0:	d001      	beq.n	52c6 <signal_poll_event+0x9e>
		poller->is_polling = false;
    52c2:	2300      	movs	r3, #0
    52c4:	e7d0      	b.n	5268 <signal_poll_event+0x40>
	z_ready_thread(thread);
    52c6:	4638      	mov	r0, r7
    52c8:	f000 fbe4 	bl	5a94 <z_ready_thread>
		poller->is_polling = false;
    52cc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    52d0:	e7cb      	b.n	526a <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    52d2:	2b02      	cmp	r3, #2
    52d4:	d1f5      	bne.n	52c2 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    52d6:	7823      	ldrb	r3, [r4, #0]
    52d8:	2b00      	cmp	r3, #0
    52da:	d0c6      	beq.n	526a <signal_poll_event+0x42>
    52dc:	f854 7c04 	ldr.w	r7, [r4, #-4]
    52e0:	b177      	cbz	r7, 5300 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    52e2:	f1a4 0914 	sub.w	r9, r4, #20
    52e6:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    52ea:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    52ee:	f001 fe0f 	bl	6f10 <z_abort_timeout>
		twork->poll_result = 0;
    52f2:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    52f6:	4649      	mov	r1, r9
    52f8:	4638      	mov	r0, r7
    52fa:	f002 fa97 	bl	782c <k_work_submit_to_queue>
    52fe:	e7e5      	b.n	52cc <signal_poll_event+0xa4>
		poller->is_polling = false;
    5300:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    5302:	e7b2      	b.n	526a <signal_poll_event+0x42>
    5304:	0000997a 	.word	0x0000997a
    5308:	00009a75 	.word	0x00009a75
    530c:	00008e27 	.word	0x00008e27
    5310:	00009a8b 	.word	0x00009a8b

00005314 <z_impl_k_poll_signal_raise>:
{
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	4604      	mov	r4, r0
    5318:	460d      	mov	r5, r1
	__asm__ volatile(
    531a:	f04f 0320 	mov.w	r3, #32
    531e:	f3ef 8611 	mrs	r6, BASEPRI
    5322:	f383 8812 	msr	BASEPRI_MAX, r3
    5326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    532a:	4821      	ldr	r0, [pc, #132]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    532c:	f001 fca6 	bl	6c7c <z_spin_lock_valid>
    5330:	b968      	cbnz	r0, 534e <z_impl_k_poll_signal_raise+0x3a>
    5332:	4a20      	ldr	r2, [pc, #128]	; (53b4 <z_impl_k_poll_signal_raise+0xa0>)
    5334:	4920      	ldr	r1, [pc, #128]	; (53b8 <z_impl_k_poll_signal_raise+0xa4>)
    5336:	4821      	ldr	r0, [pc, #132]	; (53bc <z_impl_k_poll_signal_raise+0xa8>)
    5338:	2381      	movs	r3, #129	; 0x81
    533a:	f002 fe2a 	bl	7f92 <printk>
    533e:	491c      	ldr	r1, [pc, #112]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    5340:	481f      	ldr	r0, [pc, #124]	; (53c0 <z_impl_k_poll_signal_raise+0xac>)
    5342:	f002 fe26 	bl	7f92 <printk>
    5346:	481b      	ldr	r0, [pc, #108]	; (53b4 <z_impl_k_poll_signal_raise+0xa0>)
    5348:	2181      	movs	r1, #129	; 0x81
    534a:	f002 fd4b 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    534e:	4818      	ldr	r0, [pc, #96]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    5350:	f001 fcb2 	bl	6cb8 <z_spin_lock_set_owner>
	return list->head == list;
    5354:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    5356:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    5358:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    535a:	4284      	cmp	r4, r0
    535c:	60a1      	str	r1, [r4, #8]
    535e:	d117      	bne.n	5390 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5360:	4813      	ldr	r0, [pc, #76]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    5362:	f001 fc99 	bl	6c98 <z_spin_unlock_valid>
    5366:	b968      	cbnz	r0, 5384 <z_impl_k_poll_signal_raise+0x70>
    5368:	4a12      	ldr	r2, [pc, #72]	; (53b4 <z_impl_k_poll_signal_raise+0xa0>)
    536a:	4916      	ldr	r1, [pc, #88]	; (53c4 <z_impl_k_poll_signal_raise+0xb0>)
    536c:	4813      	ldr	r0, [pc, #76]	; (53bc <z_impl_k_poll_signal_raise+0xa8>)
    536e:	23ac      	movs	r3, #172	; 0xac
    5370:	f002 fe0f 	bl	7f92 <printk>
    5374:	490e      	ldr	r1, [pc, #56]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    5376:	4814      	ldr	r0, [pc, #80]	; (53c8 <z_impl_k_poll_signal_raise+0xb4>)
    5378:	f002 fe0b 	bl	7f92 <printk>
    537c:	480d      	ldr	r0, [pc, #52]	; (53b4 <z_impl_k_poll_signal_raise+0xa0>)
    537e:	21ac      	movs	r1, #172	; 0xac
    5380:	f002 fd30 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5384:	f386 8811 	msr	BASEPRI, r6
    5388:	f3bf 8f6f 	isb	sy
		return 0;
    538c:	2400      	movs	r4, #0
    538e:	e00d      	b.n	53ac <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    5390:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    5394:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5396:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5398:	2300      	movs	r3, #0
	node->prev = NULL;
    539a:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    539e:	f7ff ff43 	bl	5228 <signal_poll_event>
	z_reschedule(&lock, key);
    53a2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    53a4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    53a6:	4802      	ldr	r0, [pc, #8]	; (53b0 <z_impl_k_poll_signal_raise+0x9c>)
    53a8:	f000 f8d4 	bl	5554 <z_reschedule>
}
    53ac:	4620      	mov	r0, r4
    53ae:	bd70      	pop	{r4, r5, r6, pc}
    53b0:	20000a58 	.word	0x20000a58
    53b4:	00008f3a 	.word	0x00008f3a
    53b8:	00008f8c 	.word	0x00008f8c
    53bc:	00008e27 	.word	0x00008e27
    53c0:	00008fa1 	.word	0x00008fa1
    53c4:	00008f60 	.word	0x00008f60
    53c8:	00008f77 	.word	0x00008f77

000053cc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    53cc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    53ce:	4c08      	ldr	r4, [pc, #32]	; (53f0 <z_reset_time_slice+0x24>)
    53d0:	6823      	ldr	r3, [r4, #0]
    53d2:	b15b      	cbz	r3, 53ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    53d4:	f7fe f9e8 	bl	37a8 <sys_clock_elapsed>
    53d8:	4603      	mov	r3, r0
    53da:	6820      	ldr	r0, [r4, #0]
    53dc:	4a05      	ldr	r2, [pc, #20]	; (53f4 <z_reset_time_slice+0x28>)
    53de:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    53e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    53e4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    53e6:	2100      	movs	r1, #0
    53e8:	f001 be28 	b.w	703c <z_set_timeout_expiry>
}
    53ec:	bd10      	pop	{r4, pc}
    53ee:	bf00      	nop
    53f0:	20000a68 	.word	0x20000a68
    53f4:	20000a2c 	.word	0x20000a2c

000053f8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    53f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53fa:	4604      	mov	r4, r0
    53fc:	460d      	mov	r5, r1
	__asm__ volatile(
    53fe:	f04f 0320 	mov.w	r3, #32
    5402:	f3ef 8611 	mrs	r6, BASEPRI
    5406:	f383 8812 	msr	BASEPRI_MAX, r3
    540a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    540e:	4823      	ldr	r0, [pc, #140]	; (549c <k_sched_time_slice_set+0xa4>)
    5410:	f001 fc34 	bl	6c7c <z_spin_lock_valid>
    5414:	b968      	cbnz	r0, 5432 <k_sched_time_slice_set+0x3a>
    5416:	4a22      	ldr	r2, [pc, #136]	; (54a0 <k_sched_time_slice_set+0xa8>)
    5418:	4922      	ldr	r1, [pc, #136]	; (54a4 <k_sched_time_slice_set+0xac>)
    541a:	4823      	ldr	r0, [pc, #140]	; (54a8 <k_sched_time_slice_set+0xb0>)
    541c:	2381      	movs	r3, #129	; 0x81
    541e:	f002 fdb8 	bl	7f92 <printk>
    5422:	491e      	ldr	r1, [pc, #120]	; (549c <k_sched_time_slice_set+0xa4>)
    5424:	4821      	ldr	r0, [pc, #132]	; (54ac <k_sched_time_slice_set+0xb4>)
    5426:	f002 fdb4 	bl	7f92 <printk>
    542a:	481d      	ldr	r0, [pc, #116]	; (54a0 <k_sched_time_slice_set+0xa8>)
    542c:	2181      	movs	r1, #129	; 0x81
    542e:	f002 fcd9 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5432:	481a      	ldr	r0, [pc, #104]	; (549c <k_sched_time_slice_set+0xa4>)
    5434:	f001 fc40 	bl	6cb8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5438:	4b1d      	ldr	r3, [pc, #116]	; (54b0 <k_sched_time_slice_set+0xb8>)
    543a:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    543c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5440:	f240 30e7 	movw	r0, #999	; 0x3e7
    5444:	2100      	movs	r1, #0
    5446:	611a      	str	r2, [r3, #16]
    5448:	fbe7 0104 	umlal	r0, r1, r7, r4
    544c:	2300      	movs	r3, #0
    544e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5452:	f7fa fe55 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5456:	2c00      	cmp	r4, #0
    5458:	4b16      	ldr	r3, [pc, #88]	; (54b4 <k_sched_time_slice_set+0xbc>)
    545a:	dc1b      	bgt.n	5494 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    545c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    545e:	4b16      	ldr	r3, [pc, #88]	; (54b8 <k_sched_time_slice_set+0xc0>)
    5460:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5462:	f7ff ffb3 	bl	53cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5466:	480d      	ldr	r0, [pc, #52]	; (549c <k_sched_time_slice_set+0xa4>)
    5468:	f001 fc16 	bl	6c98 <z_spin_unlock_valid>
    546c:	b968      	cbnz	r0, 548a <k_sched_time_slice_set+0x92>
    546e:	4a0c      	ldr	r2, [pc, #48]	; (54a0 <k_sched_time_slice_set+0xa8>)
    5470:	4912      	ldr	r1, [pc, #72]	; (54bc <k_sched_time_slice_set+0xc4>)
    5472:	480d      	ldr	r0, [pc, #52]	; (54a8 <k_sched_time_slice_set+0xb0>)
    5474:	23ac      	movs	r3, #172	; 0xac
    5476:	f002 fd8c 	bl	7f92 <printk>
    547a:	4908      	ldr	r1, [pc, #32]	; (549c <k_sched_time_slice_set+0xa4>)
    547c:	4810      	ldr	r0, [pc, #64]	; (54c0 <k_sched_time_slice_set+0xc8>)
    547e:	f002 fd88 	bl	7f92 <printk>
    5482:	4807      	ldr	r0, [pc, #28]	; (54a0 <k_sched_time_slice_set+0xa8>)
    5484:	21ac      	movs	r1, #172	; 0xac
    5486:	f002 fcad 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    548a:	f386 8811 	msr	BASEPRI, r6
    548e:	f3bf 8f6f 	isb	sy
	}
}
    5492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5494:	2802      	cmp	r0, #2
    5496:	bfb8      	it	lt
    5498:	2002      	movlt	r0, #2
    549a:	e7df      	b.n	545c <k_sched_time_slice_set+0x64>
    549c:	20000a60 	.word	0x20000a60
    54a0:	00008f3a 	.word	0x00008f3a
    54a4:	00008f8c 	.word	0x00008f8c
    54a8:	00008e27 	.word	0x00008e27
    54ac:	00008fa1 	.word	0x00008fa1
    54b0:	20000a2c 	.word	0x20000a2c
    54b4:	20000a68 	.word	0x20000a68
    54b8:	20000a64 	.word	0x20000a64
    54bc:	00008f60 	.word	0x00008f60
    54c0:	00008f77 	.word	0x00008f77

000054c4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    54c4:	b538      	push	{r3, r4, r5, lr}
    54c6:	4604      	mov	r4, r0
	__asm__ volatile(
    54c8:	f04f 0320 	mov.w	r3, #32
    54cc:	f3ef 8511 	mrs	r5, BASEPRI
    54d0:	f383 8812 	msr	BASEPRI_MAX, r3
    54d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54d8:	4817      	ldr	r0, [pc, #92]	; (5538 <z_unpend_thread_no_timeout+0x74>)
    54da:	f001 fbcf 	bl	6c7c <z_spin_lock_valid>
    54de:	b968      	cbnz	r0, 54fc <z_unpend_thread_no_timeout+0x38>
    54e0:	4a16      	ldr	r2, [pc, #88]	; (553c <z_unpend_thread_no_timeout+0x78>)
    54e2:	4917      	ldr	r1, [pc, #92]	; (5540 <z_unpend_thread_no_timeout+0x7c>)
    54e4:	4817      	ldr	r0, [pc, #92]	; (5544 <z_unpend_thread_no_timeout+0x80>)
    54e6:	2381      	movs	r3, #129	; 0x81
    54e8:	f002 fd53 	bl	7f92 <printk>
    54ec:	4912      	ldr	r1, [pc, #72]	; (5538 <z_unpend_thread_no_timeout+0x74>)
    54ee:	4816      	ldr	r0, [pc, #88]	; (5548 <z_unpend_thread_no_timeout+0x84>)
    54f0:	f002 fd4f 	bl	7f92 <printk>
    54f4:	4811      	ldr	r0, [pc, #68]	; (553c <z_unpend_thread_no_timeout+0x78>)
    54f6:	2181      	movs	r1, #129	; 0x81
    54f8:	f002 fc74 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    54fc:	480e      	ldr	r0, [pc, #56]	; (5538 <z_unpend_thread_no_timeout+0x74>)
    54fe:	f001 fbdb 	bl	6cb8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    5502:	4620      	mov	r0, r4
    5504:	f000 f900 	bl	5708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5508:	480b      	ldr	r0, [pc, #44]	; (5538 <z_unpend_thread_no_timeout+0x74>)
    550a:	f001 fbc5 	bl	6c98 <z_spin_unlock_valid>
    550e:	b968      	cbnz	r0, 552c <z_unpend_thread_no_timeout+0x68>
    5510:	4a0a      	ldr	r2, [pc, #40]	; (553c <z_unpend_thread_no_timeout+0x78>)
    5512:	490e      	ldr	r1, [pc, #56]	; (554c <z_unpend_thread_no_timeout+0x88>)
    5514:	480b      	ldr	r0, [pc, #44]	; (5544 <z_unpend_thread_no_timeout+0x80>)
    5516:	23ac      	movs	r3, #172	; 0xac
    5518:	f002 fd3b 	bl	7f92 <printk>
    551c:	4906      	ldr	r1, [pc, #24]	; (5538 <z_unpend_thread_no_timeout+0x74>)
    551e:	480c      	ldr	r0, [pc, #48]	; (5550 <z_unpend_thread_no_timeout+0x8c>)
    5520:	f002 fd37 	bl	7f92 <printk>
    5524:	4805      	ldr	r0, [pc, #20]	; (553c <z_unpend_thread_no_timeout+0x78>)
    5526:	21ac      	movs	r1, #172	; 0xac
    5528:	f002 fc5c 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    552c:	f385 8811 	msr	BASEPRI, r5
    5530:	f3bf 8f6f 	isb	sy
	}
}
    5534:	bd38      	pop	{r3, r4, r5, pc}
    5536:	bf00      	nop
    5538:	20000a60 	.word	0x20000a60
    553c:	00008f3a 	.word	0x00008f3a
    5540:	00008f8c 	.word	0x00008f8c
    5544:	00008e27 	.word	0x00008e27
    5548:	00008fa1 	.word	0x00008fa1
    554c:	00008f60 	.word	0x00008f60
    5550:	00008f77 	.word	0x00008f77

00005554 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5554:	b538      	push	{r3, r4, r5, lr}
    5556:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5558:	460d      	mov	r5, r1
    555a:	b9e9      	cbnz	r1, 5598 <z_reschedule+0x44>
    555c:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    5560:	b9d3      	cbnz	r3, 5598 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    5562:	4b19      	ldr	r3, [pc, #100]	; (55c8 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    5564:	69da      	ldr	r2, [r3, #28]
    5566:	689b      	ldr	r3, [r3, #8]
    5568:	429a      	cmp	r2, r3
    556a:	d015      	beq.n	5598 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    556c:	f001 fb94 	bl	6c98 <z_spin_unlock_valid>
    5570:	b968      	cbnz	r0, 558e <z_reschedule+0x3a>
    5572:	4a16      	ldr	r2, [pc, #88]	; (55cc <z_reschedule+0x78>)
    5574:	4916      	ldr	r1, [pc, #88]	; (55d0 <z_reschedule+0x7c>)
    5576:	4817      	ldr	r0, [pc, #92]	; (55d4 <z_reschedule+0x80>)
    5578:	23c3      	movs	r3, #195	; 0xc3
    557a:	f002 fd0a 	bl	7f92 <printk>
    557e:	4816      	ldr	r0, [pc, #88]	; (55d8 <z_reschedule+0x84>)
    5580:	4621      	mov	r1, r4
    5582:	f002 fd06 	bl	7f92 <printk>
    5586:	4811      	ldr	r0, [pc, #68]	; (55cc <z_reschedule+0x78>)
    5588:	21c3      	movs	r1, #195	; 0xc3
    558a:	f002 fc2b 	bl	7de4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    558e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5592:	2000      	movs	r0, #0
    5594:	f7fc b9f0 	b.w	1978 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5598:	4620      	mov	r0, r4
    559a:	f001 fb7d 	bl	6c98 <z_spin_unlock_valid>
    559e:	b968      	cbnz	r0, 55bc <z_reschedule+0x68>
    55a0:	4a0a      	ldr	r2, [pc, #40]	; (55cc <z_reschedule+0x78>)
    55a2:	490b      	ldr	r1, [pc, #44]	; (55d0 <z_reschedule+0x7c>)
    55a4:	480b      	ldr	r0, [pc, #44]	; (55d4 <z_reschedule+0x80>)
    55a6:	23ac      	movs	r3, #172	; 0xac
    55a8:	f002 fcf3 	bl	7f92 <printk>
    55ac:	480a      	ldr	r0, [pc, #40]	; (55d8 <z_reschedule+0x84>)
    55ae:	4621      	mov	r1, r4
    55b0:	f002 fcef 	bl	7f92 <printk>
    55b4:	4805      	ldr	r0, [pc, #20]	; (55cc <z_reschedule+0x78>)
    55b6:	21ac      	movs	r1, #172	; 0xac
    55b8:	f002 fc14 	bl	7de4 <assert_post_action>
    55bc:	f385 8811 	msr	BASEPRI, r5
    55c0:	f3bf 8f6f 	isb	sy
    55c4:	bd38      	pop	{r3, r4, r5, pc}
    55c6:	bf00      	nop
    55c8:	20000a2c 	.word	0x20000a2c
    55cc:	00008f3a 	.word	0x00008f3a
    55d0:	00008f60 	.word	0x00008f60
    55d4:	00008e27 	.word	0x00008e27
    55d8:	00008f77 	.word	0x00008f77

000055dc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    55dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    55de:	f04f 0320 	mov.w	r3, #32
    55e2:	f3ef 8511 	mrs	r5, BASEPRI
    55e6:	f383 8812 	msr	BASEPRI_MAX, r3
    55ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55ee:	4829      	ldr	r0, [pc, #164]	; (5694 <k_sched_lock+0xb8>)
    55f0:	f001 fb44 	bl	6c7c <z_spin_lock_valid>
    55f4:	b968      	cbnz	r0, 5612 <k_sched_lock+0x36>
    55f6:	4a28      	ldr	r2, [pc, #160]	; (5698 <k_sched_lock+0xbc>)
    55f8:	4928      	ldr	r1, [pc, #160]	; (569c <k_sched_lock+0xc0>)
    55fa:	4829      	ldr	r0, [pc, #164]	; (56a0 <k_sched_lock+0xc4>)
    55fc:	2381      	movs	r3, #129	; 0x81
    55fe:	f002 fcc8 	bl	7f92 <printk>
    5602:	4924      	ldr	r1, [pc, #144]	; (5694 <k_sched_lock+0xb8>)
    5604:	4827      	ldr	r0, [pc, #156]	; (56a4 <k_sched_lock+0xc8>)
    5606:	f002 fcc4 	bl	7f92 <printk>
    560a:	4823      	ldr	r0, [pc, #140]	; (5698 <k_sched_lock+0xbc>)
    560c:	2181      	movs	r1, #129	; 0x81
    560e:	f002 fbe9 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5612:	4820      	ldr	r0, [pc, #128]	; (5694 <k_sched_lock+0xb8>)
    5614:	f001 fb50 	bl	6cb8 <z_spin_lock_set_owner>
    5618:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    561c:	b163      	cbz	r3, 5638 <k_sched_lock+0x5c>
    561e:	4922      	ldr	r1, [pc, #136]	; (56a8 <k_sched_lock+0xcc>)
    5620:	4a22      	ldr	r2, [pc, #136]	; (56ac <k_sched_lock+0xd0>)
    5622:	481f      	ldr	r0, [pc, #124]	; (56a0 <k_sched_lock+0xc4>)
    5624:	23fd      	movs	r3, #253	; 0xfd
    5626:	f002 fcb4 	bl	7f92 <printk>
    562a:	4821      	ldr	r0, [pc, #132]	; (56b0 <k_sched_lock+0xd4>)
    562c:	f002 fcb1 	bl	7f92 <printk>
    5630:	481e      	ldr	r0, [pc, #120]	; (56ac <k_sched_lock+0xd0>)
    5632:	21fd      	movs	r1, #253	; 0xfd
    5634:	f002 fbd6 	bl	7de4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5638:	4c1e      	ldr	r4, [pc, #120]	; (56b4 <k_sched_lock+0xd8>)
    563a:	68a2      	ldr	r2, [r4, #8]
    563c:	7bd2      	ldrb	r2, [r2, #15]
    563e:	2a01      	cmp	r2, #1
    5640:	d10c      	bne.n	565c <k_sched_lock+0x80>
    5642:	491d      	ldr	r1, [pc, #116]	; (56b8 <k_sched_lock+0xdc>)
    5644:	4a19      	ldr	r2, [pc, #100]	; (56ac <k_sched_lock+0xd0>)
    5646:	4816      	ldr	r0, [pc, #88]	; (56a0 <k_sched_lock+0xc4>)
    5648:	23fe      	movs	r3, #254	; 0xfe
    564a:	f002 fca2 	bl	7f92 <printk>
    564e:	4818      	ldr	r0, [pc, #96]	; (56b0 <k_sched_lock+0xd4>)
    5650:	f002 fc9f 	bl	7f92 <printk>
    5654:	4815      	ldr	r0, [pc, #84]	; (56ac <k_sched_lock+0xd0>)
    5656:	21fe      	movs	r1, #254	; 0xfe
    5658:	f002 fbc4 	bl	7de4 <assert_post_action>
	--_current->base.sched_locked;
    565c:	68a2      	ldr	r2, [r4, #8]
    565e:	7bd3      	ldrb	r3, [r2, #15]
    5660:	3b01      	subs	r3, #1
    5662:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5664:	480b      	ldr	r0, [pc, #44]	; (5694 <k_sched_lock+0xb8>)
    5666:	f001 fb17 	bl	6c98 <z_spin_unlock_valid>
    566a:	b968      	cbnz	r0, 5688 <k_sched_lock+0xac>
    566c:	4a0a      	ldr	r2, [pc, #40]	; (5698 <k_sched_lock+0xbc>)
    566e:	4913      	ldr	r1, [pc, #76]	; (56bc <k_sched_lock+0xe0>)
    5670:	480b      	ldr	r0, [pc, #44]	; (56a0 <k_sched_lock+0xc4>)
    5672:	23ac      	movs	r3, #172	; 0xac
    5674:	f002 fc8d 	bl	7f92 <printk>
    5678:	4906      	ldr	r1, [pc, #24]	; (5694 <k_sched_lock+0xb8>)
    567a:	4811      	ldr	r0, [pc, #68]	; (56c0 <k_sched_lock+0xe4>)
    567c:	f002 fc89 	bl	7f92 <printk>
    5680:	4805      	ldr	r0, [pc, #20]	; (5698 <k_sched_lock+0xbc>)
    5682:	21ac      	movs	r1, #172	; 0xac
    5684:	f002 fbae 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5688:	f385 8811 	msr	BASEPRI, r5
    568c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5690:	bd38      	pop	{r3, r4, r5, pc}
    5692:	bf00      	nop
    5694:	20000a60 	.word	0x20000a60
    5698:	00008f3a 	.word	0x00008f3a
    569c:	00008f8c 	.word	0x00008f8c
    56a0:	00008e27 	.word	0x00008e27
    56a4:	00008fa1 	.word	0x00008fa1
    56a8:	000098cd 	.word	0x000098cd
    56ac:	0000991b 	.word	0x0000991b
    56b0:	00009946 	.word	0x00009946
    56b4:	20000a2c 	.word	0x20000a2c
    56b8:	00009949 	.word	0x00009949
    56bc:	00008f60 	.word	0x00008f60
    56c0:	00008f77 	.word	0x00008f77

000056c4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    56c4:	4b0c      	ldr	r3, [pc, #48]	; (56f8 <z_priq_dumb_remove+0x34>)
    56c6:	4299      	cmp	r1, r3
{
    56c8:	b510      	push	{r4, lr}
    56ca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    56cc:	d10b      	bne.n	56e6 <z_priq_dumb_remove+0x22>
    56ce:	490b      	ldr	r1, [pc, #44]	; (56fc <z_priq_dumb_remove+0x38>)
    56d0:	480b      	ldr	r0, [pc, #44]	; (5700 <z_priq_dumb_remove+0x3c>)
    56d2:	4a0c      	ldr	r2, [pc, #48]	; (5704 <z_priq_dumb_remove+0x40>)
    56d4:	f240 33e7 	movw	r3, #999	; 0x3e7
    56d8:	f002 fc5b 	bl	7f92 <printk>
    56dc:	4809      	ldr	r0, [pc, #36]	; (5704 <z_priq_dumb_remove+0x40>)
    56de:	f240 31e7 	movw	r1, #999	; 0x3e7
    56e2:	f002 fb7f 	bl	7de4 <assert_post_action>
	sys_dnode_t *const next = node->next;
    56e6:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    56ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    56ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    56ee:	2300      	movs	r3, #0
	node->prev = NULL;
    56f0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    56f4:	bd10      	pop	{r4, pc}
    56f6:	bf00      	nop
    56f8:	20000278 	.word	0x20000278
    56fc:	00009acc 	.word	0x00009acc
    5700:	00008e27 	.word	0x00008e27
    5704:	00009aaa 	.word	0x00009aaa

00005708 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5708:	6883      	ldr	r3, [r0, #8]
{
    570a:	b510      	push	{r4, lr}
    570c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    570e:	b95b      	cbnz	r3, 5728 <unpend_thread_no_timeout+0x20>
    5710:	490b      	ldr	r1, [pc, #44]	; (5740 <unpend_thread_no_timeout+0x38>)
    5712:	480c      	ldr	r0, [pc, #48]	; (5744 <unpend_thread_no_timeout+0x3c>)
    5714:	4a0c      	ldr	r2, [pc, #48]	; (5748 <unpend_thread_no_timeout+0x40>)
    5716:	f240 2383 	movw	r3, #643	; 0x283
    571a:	f002 fc3a 	bl	7f92 <printk>
    571e:	480a      	ldr	r0, [pc, #40]	; (5748 <unpend_thread_no_timeout+0x40>)
    5720:	f240 2183 	movw	r1, #643	; 0x283
    5724:	f002 fb5e 	bl	7de4 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5728:	68a0      	ldr	r0, [r4, #8]
    572a:	4621      	mov	r1, r4
    572c:	f7ff ffca 	bl	56c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5730:	7b63      	ldrb	r3, [r4, #13]
    5732:	f023 0302 	bic.w	r3, r3, #2
    5736:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5738:	2300      	movs	r3, #0
    573a:	60a3      	str	r3, [r4, #8]
}
    573c:	bd10      	pop	{r4, pc}
    573e:	bf00      	nop
    5740:	00009aed 	.word	0x00009aed
    5744:	00008e27 	.word	0x00008e27
    5748:	00009aaa 	.word	0x00009aaa

0000574c <z_unpend_thread>:
{
    574c:	b538      	push	{r3, r4, r5, lr}
    574e:	4604      	mov	r4, r0
	__asm__ volatile(
    5750:	f04f 0320 	mov.w	r3, #32
    5754:	f3ef 8511 	mrs	r5, BASEPRI
    5758:	f383 8812 	msr	BASEPRI_MAX, r3
    575c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5760:	4819      	ldr	r0, [pc, #100]	; (57c8 <z_unpend_thread+0x7c>)
    5762:	f001 fa8b 	bl	6c7c <z_spin_lock_valid>
    5766:	b968      	cbnz	r0, 5784 <z_unpend_thread+0x38>
    5768:	4a18      	ldr	r2, [pc, #96]	; (57cc <z_unpend_thread+0x80>)
    576a:	4919      	ldr	r1, [pc, #100]	; (57d0 <z_unpend_thread+0x84>)
    576c:	4819      	ldr	r0, [pc, #100]	; (57d4 <z_unpend_thread+0x88>)
    576e:	2381      	movs	r3, #129	; 0x81
    5770:	f002 fc0f 	bl	7f92 <printk>
    5774:	4914      	ldr	r1, [pc, #80]	; (57c8 <z_unpend_thread+0x7c>)
    5776:	4818      	ldr	r0, [pc, #96]	; (57d8 <z_unpend_thread+0x8c>)
    5778:	f002 fc0b 	bl	7f92 <printk>
    577c:	4813      	ldr	r0, [pc, #76]	; (57cc <z_unpend_thread+0x80>)
    577e:	2181      	movs	r1, #129	; 0x81
    5780:	f002 fb30 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5784:	4810      	ldr	r0, [pc, #64]	; (57c8 <z_unpend_thread+0x7c>)
    5786:	f001 fa97 	bl	6cb8 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    578a:	4620      	mov	r0, r4
    578c:	f7ff ffbc 	bl	5708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5790:	480d      	ldr	r0, [pc, #52]	; (57c8 <z_unpend_thread+0x7c>)
    5792:	f001 fa81 	bl	6c98 <z_spin_unlock_valid>
    5796:	b968      	cbnz	r0, 57b4 <z_unpend_thread+0x68>
    5798:	4a0c      	ldr	r2, [pc, #48]	; (57cc <z_unpend_thread+0x80>)
    579a:	4910      	ldr	r1, [pc, #64]	; (57dc <z_unpend_thread+0x90>)
    579c:	480d      	ldr	r0, [pc, #52]	; (57d4 <z_unpend_thread+0x88>)
    579e:	23ac      	movs	r3, #172	; 0xac
    57a0:	f002 fbf7 	bl	7f92 <printk>
    57a4:	4908      	ldr	r1, [pc, #32]	; (57c8 <z_unpend_thread+0x7c>)
    57a6:	480e      	ldr	r0, [pc, #56]	; (57e0 <z_unpend_thread+0x94>)
    57a8:	f002 fbf3 	bl	7f92 <printk>
    57ac:	4807      	ldr	r0, [pc, #28]	; (57cc <z_unpend_thread+0x80>)
    57ae:	21ac      	movs	r1, #172	; 0xac
    57b0:	f002 fb18 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    57b4:	f385 8811 	msr	BASEPRI, r5
    57b8:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    57bc:	f104 0018 	add.w	r0, r4, #24
}
    57c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    57c4:	f001 bba4 	b.w	6f10 <z_abort_timeout>
    57c8:	20000a60 	.word	0x20000a60
    57cc:	00008f3a 	.word	0x00008f3a
    57d0:	00008f8c 	.word	0x00008f8c
    57d4:	00008e27 	.word	0x00008e27
    57d8:	00008fa1 	.word	0x00008fa1
    57dc:	00008f60 	.word	0x00008f60
    57e0:	00008f77 	.word	0x00008f77

000057e4 <update_cache>:
{
    57e4:	b538      	push	{r3, r4, r5, lr}
    57e6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    57e8:	4814      	ldr	r0, [pc, #80]	; (583c <update_cache+0x58>)
    57ea:	4d15      	ldr	r5, [pc, #84]	; (5840 <update_cache+0x5c>)
    57ec:	f002 ff40 	bl	8670 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    57f0:	4604      	mov	r4, r0
    57f2:	b900      	cbnz	r0, 57f6 <update_cache+0x12>
    57f4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    57f6:	b9ca      	cbnz	r2, 582c <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    57f8:	68ab      	ldr	r3, [r5, #8]
    57fa:	b963      	cbnz	r3, 5816 <update_cache+0x32>
    57fc:	4911      	ldr	r1, [pc, #68]	; (5844 <update_cache+0x60>)
    57fe:	4a12      	ldr	r2, [pc, #72]	; (5848 <update_cache+0x64>)
    5800:	4812      	ldr	r0, [pc, #72]	; (584c <update_cache+0x68>)
    5802:	2389      	movs	r3, #137	; 0x89
    5804:	f002 fbc5 	bl	7f92 <printk>
    5808:	4811      	ldr	r0, [pc, #68]	; (5850 <update_cache+0x6c>)
    580a:	f002 fbc2 	bl	7f92 <printk>
    580e:	480e      	ldr	r0, [pc, #56]	; (5848 <update_cache+0x64>)
    5810:	2189      	movs	r1, #137	; 0x89
    5812:	f002 fae7 	bl	7de4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5816:	68ab      	ldr	r3, [r5, #8]
    5818:	7b5a      	ldrb	r2, [r3, #13]
    581a:	06d2      	lsls	r2, r2, #27
    581c:	d106      	bne.n	582c <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    581e:	69a2      	ldr	r2, [r4, #24]
    5820:	b922      	cbnz	r2, 582c <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5822:	89da      	ldrh	r2, [r3, #14]
    5824:	2a7f      	cmp	r2, #127	; 0x7f
    5826:	d901      	bls.n	582c <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5828:	61eb      	str	r3, [r5, #28]
}
    582a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    582c:	68ab      	ldr	r3, [r5, #8]
    582e:	42a3      	cmp	r3, r4
    5830:	d001      	beq.n	5836 <update_cache+0x52>
			z_reset_time_slice();
    5832:	f7ff fdcb 	bl	53cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5836:	61ec      	str	r4, [r5, #28]
}
    5838:	e7f7      	b.n	582a <update_cache+0x46>
    583a:	bf00      	nop
    583c:	20000a4c 	.word	0x20000a4c
    5840:	20000a2c 	.word	0x20000a2c
    5844:	00009b04 	.word	0x00009b04
    5848:	00009aaa 	.word	0x00009aaa
    584c:	00008e27 	.word	0x00008e27
    5850:	00009946 	.word	0x00009946

00005854 <move_thread_to_end_of_prio_q>:
{
    5854:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5856:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    585a:	7b43      	ldrb	r3, [r0, #13]
    585c:	2a00      	cmp	r2, #0
{
    585e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5860:	da06      	bge.n	5870 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5866:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5868:	4601      	mov	r1, r0
    586a:	481f      	ldr	r0, [pc, #124]	; (58e8 <move_thread_to_end_of_prio_q+0x94>)
    586c:	f7ff ff2a 	bl	56c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5870:	7b63      	ldrb	r3, [r4, #13]
    5872:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5876:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5878:	4b1c      	ldr	r3, [pc, #112]	; (58ec <move_thread_to_end_of_prio_q+0x98>)
    587a:	429c      	cmp	r4, r3
    587c:	d109      	bne.n	5892 <move_thread_to_end_of_prio_q+0x3e>
    587e:	491c      	ldr	r1, [pc, #112]	; (58f0 <move_thread_to_end_of_prio_q+0x9c>)
    5880:	481c      	ldr	r0, [pc, #112]	; (58f4 <move_thread_to_end_of_prio_q+0xa0>)
    5882:	4a1d      	ldr	r2, [pc, #116]	; (58f8 <move_thread_to_end_of_prio_q+0xa4>)
    5884:	23ba      	movs	r3, #186	; 0xba
    5886:	f002 fb84 	bl	7f92 <printk>
    588a:	481b      	ldr	r0, [pc, #108]	; (58f8 <move_thread_to_end_of_prio_q+0xa4>)
    588c:	21ba      	movs	r1, #186	; 0xba
    588e:	f002 faa9 	bl	7de4 <assert_post_action>
	return list->head == list;
    5892:	4a1a      	ldr	r2, [pc, #104]	; (58fc <move_thread_to_end_of_prio_q+0xa8>)
    5894:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5896:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5898:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    589c:	428b      	cmp	r3, r1
    589e:	bf08      	it	eq
    58a0:	2300      	moveq	r3, #0
    58a2:	2b00      	cmp	r3, #0
    58a4:	bf38      	it	cc
    58a6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    58a8:	b1cb      	cbz	r3, 58de <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    58aa:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    58ae:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    58b2:	4286      	cmp	r6, r0
    58b4:	d00f      	beq.n	58d6 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    58b6:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    58b8:	2800      	cmp	r0, #0
    58ba:	dd0c      	ble.n	58d6 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    58bc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    58be:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    58c2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    58c4:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    58c6:	6890      	ldr	r0, [r2, #8]
    58c8:	1b03      	subs	r3, r0, r4
    58ca:	4258      	negs	r0, r3
}
    58cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    58d0:	4158      	adcs	r0, r3
    58d2:	f7ff bf87 	b.w	57e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    58d6:	42ab      	cmp	r3, r5
    58d8:	d001      	beq.n	58de <move_thread_to_end_of_prio_q+0x8a>
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	e7e4      	b.n	58a8 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    58de:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    58e2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    58e4:	6254      	str	r4, [r2, #36]	; 0x24
}
    58e6:	e7ee      	b.n	58c6 <move_thread_to_end_of_prio_q+0x72>
    58e8:	20000a4c 	.word	0x20000a4c
    58ec:	20000278 	.word	0x20000278
    58f0:	00009acc 	.word	0x00009acc
    58f4:	00008e27 	.word	0x00008e27
    58f8:	00009aaa 	.word	0x00009aaa
    58fc:	20000a2c 	.word	0x20000a2c

00005900 <z_time_slice>:
{
    5900:	b570      	push	{r4, r5, r6, lr}
    5902:	4604      	mov	r4, r0
	__asm__ volatile(
    5904:	f04f 0320 	mov.w	r3, #32
    5908:	f3ef 8511 	mrs	r5, BASEPRI
    590c:	f383 8812 	msr	BASEPRI_MAX, r3
    5910:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5914:	482a      	ldr	r0, [pc, #168]	; (59c0 <z_time_slice+0xc0>)
    5916:	f001 f9b1 	bl	6c7c <z_spin_lock_valid>
    591a:	b968      	cbnz	r0, 5938 <z_time_slice+0x38>
    591c:	4a29      	ldr	r2, [pc, #164]	; (59c4 <z_time_slice+0xc4>)
    591e:	492a      	ldr	r1, [pc, #168]	; (59c8 <z_time_slice+0xc8>)
    5920:	482a      	ldr	r0, [pc, #168]	; (59cc <z_time_slice+0xcc>)
    5922:	2381      	movs	r3, #129	; 0x81
    5924:	f002 fb35 	bl	7f92 <printk>
    5928:	4925      	ldr	r1, [pc, #148]	; (59c0 <z_time_slice+0xc0>)
    592a:	4829      	ldr	r0, [pc, #164]	; (59d0 <z_time_slice+0xd0>)
    592c:	f002 fb31 	bl	7f92 <printk>
    5930:	4824      	ldr	r0, [pc, #144]	; (59c4 <z_time_slice+0xc4>)
    5932:	2181      	movs	r1, #129	; 0x81
    5934:	f002 fa56 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5938:	4821      	ldr	r0, [pc, #132]	; (59c0 <z_time_slice+0xc0>)
    593a:	f001 f9bd 	bl	6cb8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    593e:	4b25      	ldr	r3, [pc, #148]	; (59d4 <z_time_slice+0xd4>)
    5940:	4a25      	ldr	r2, [pc, #148]	; (59d8 <z_time_slice+0xd8>)
    5942:	6898      	ldr	r0, [r3, #8]
    5944:	6811      	ldr	r1, [r2, #0]
    5946:	4288      	cmp	r0, r1
    5948:	4619      	mov	r1, r3
    594a:	d118      	bne.n	597e <z_time_slice+0x7e>
			z_reset_time_slice();
    594c:	f7ff fd3e 	bl	53cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5950:	481b      	ldr	r0, [pc, #108]	; (59c0 <z_time_slice+0xc0>)
    5952:	f001 f9a1 	bl	6c98 <z_spin_unlock_valid>
    5956:	b968      	cbnz	r0, 5974 <z_time_slice+0x74>
    5958:	4a1a      	ldr	r2, [pc, #104]	; (59c4 <z_time_slice+0xc4>)
    595a:	4920      	ldr	r1, [pc, #128]	; (59dc <z_time_slice+0xdc>)
    595c:	481b      	ldr	r0, [pc, #108]	; (59cc <z_time_slice+0xcc>)
    595e:	23ac      	movs	r3, #172	; 0xac
    5960:	f002 fb17 	bl	7f92 <printk>
    5964:	4916      	ldr	r1, [pc, #88]	; (59c0 <z_time_slice+0xc0>)
    5966:	481e      	ldr	r0, [pc, #120]	; (59e0 <z_time_slice+0xe0>)
    5968:	f002 fb13 	bl	7f92 <printk>
    596c:	4815      	ldr	r0, [pc, #84]	; (59c4 <z_time_slice+0xc4>)
    596e:	21ac      	movs	r1, #172	; 0xac
    5970:	f002 fa38 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5974:	f385 8811 	msr	BASEPRI, r5
    5978:	f3bf 8f6f 	isb	sy
}
    597c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    597e:	2600      	movs	r6, #0
    5980:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5982:	4a18      	ldr	r2, [pc, #96]	; (59e4 <z_time_slice+0xe4>)
    5984:	6812      	ldr	r2, [r2, #0]
    5986:	b1ba      	cbz	r2, 59b8 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5988:	89c2      	ldrh	r2, [r0, #14]
    598a:	2a7f      	cmp	r2, #127	; 0x7f
    598c:	d814      	bhi.n	59b8 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    598e:	7b42      	ldrb	r2, [r0, #13]
    5990:	06d2      	lsls	r2, r2, #27
    5992:	d111      	bne.n	59b8 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5994:	4a14      	ldr	r2, [pc, #80]	; (59e8 <z_time_slice+0xe8>)
    5996:	f990 600e 	ldrsb.w	r6, [r0, #14]
    599a:	6812      	ldr	r2, [r2, #0]
    599c:	4296      	cmp	r6, r2
    599e:	db0b      	blt.n	59b8 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    59a0:	4a12      	ldr	r2, [pc, #72]	; (59ec <z_time_slice+0xec>)
    59a2:	4290      	cmp	r0, r2
    59a4:	d008      	beq.n	59b8 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    59a6:	691a      	ldr	r2, [r3, #16]
    59a8:	42a2      	cmp	r2, r4
    59aa:	dc02      	bgt.n	59b2 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    59ac:	f7ff ff52 	bl	5854 <move_thread_to_end_of_prio_q>
    59b0:	e7cc      	b.n	594c <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    59b2:	1b12      	subs	r2, r2, r4
    59b4:	611a      	str	r2, [r3, #16]
    59b6:	e7cb      	b.n	5950 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    59b8:	2300      	movs	r3, #0
    59ba:	610b      	str	r3, [r1, #16]
    59bc:	e7c8      	b.n	5950 <z_time_slice+0x50>
    59be:	bf00      	nop
    59c0:	20000a60 	.word	0x20000a60
    59c4:	00008f3a 	.word	0x00008f3a
    59c8:	00008f8c 	.word	0x00008f8c
    59cc:	00008e27 	.word	0x00008e27
    59d0:	00008fa1 	.word	0x00008fa1
    59d4:	20000a2c 	.word	0x20000a2c
    59d8:	20000a5c 	.word	0x20000a5c
    59dc:	00008f60 	.word	0x00008f60
    59e0:	00008f77 	.word	0x00008f77
    59e4:	20000a68 	.word	0x20000a68
    59e8:	20000a64 	.word	0x20000a64
    59ec:	20000278 	.word	0x20000278

000059f0 <ready_thread>:
{
    59f0:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    59f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    59f6:	7b43      	ldrb	r3, [r0, #13]
    59f8:	2a00      	cmp	r2, #0
{
    59fa:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    59fc:	db3e      	blt.n	5a7c <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    59fe:	06da      	lsls	r2, r3, #27
    5a00:	d13c      	bne.n	5a7c <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    5a02:	6985      	ldr	r5, [r0, #24]
    5a04:	2d00      	cmp	r5, #0
    5a06:	d139      	bne.n	5a7c <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    5a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a0c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a0e:	4b1c      	ldr	r3, [pc, #112]	; (5a80 <ready_thread+0x90>)
    5a10:	4298      	cmp	r0, r3
    5a12:	d109      	bne.n	5a28 <ready_thread+0x38>
    5a14:	491b      	ldr	r1, [pc, #108]	; (5a84 <ready_thread+0x94>)
    5a16:	481c      	ldr	r0, [pc, #112]	; (5a88 <ready_thread+0x98>)
    5a18:	4a1c      	ldr	r2, [pc, #112]	; (5a8c <ready_thread+0x9c>)
    5a1a:	23ba      	movs	r3, #186	; 0xba
    5a1c:	f002 fab9 	bl	7f92 <printk>
    5a20:	481a      	ldr	r0, [pc, #104]	; (5a8c <ready_thread+0x9c>)
    5a22:	21ba      	movs	r1, #186	; 0xba
    5a24:	f002 f9de 	bl	7de4 <assert_post_action>
	return list->head == list;
    5a28:	4919      	ldr	r1, [pc, #100]	; (5a90 <ready_thread+0xa0>)
    5a2a:	460b      	mov	r3, r1
    5a2c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a30:	4298      	cmp	r0, r3
    5a32:	bf18      	it	ne
    5a34:	4605      	movne	r5, r0
    5a36:	2d00      	cmp	r5, #0
    5a38:	461a      	mov	r2, r3
    5a3a:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5a3c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5a3e:	bf38      	it	cc
    5a40:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5a42:	b1b3      	cbz	r3, 5a72 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    5a44:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5a48:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5a4c:	4286      	cmp	r6, r0
    5a4e:	d00c      	beq.n	5a6a <ready_thread+0x7a>
		return b2 - b1;
    5a50:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5a52:	2800      	cmp	r0, #0
    5a54:	dd09      	ble.n	5a6a <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    5a56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5a58:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5a5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5a5e:	605c      	str	r4, [r3, #4]
}
    5a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5a64:	2000      	movs	r0, #0
    5a66:	f7ff bebd 	b.w	57e4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5a6a:	42ab      	cmp	r3, r5
    5a6c:	d001      	beq.n	5a72 <ready_thread+0x82>
    5a6e:	681b      	ldr	r3, [r3, #0]
    5a70:	e7e7      	b.n	5a42 <ready_thread+0x52>
	node->prev = tail;
    5a72:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5a76:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5a78:	624c      	str	r4, [r1, #36]	; 0x24
}
    5a7a:	e7f1      	b.n	5a60 <ready_thread+0x70>
}
    5a7c:	bd70      	pop	{r4, r5, r6, pc}
    5a7e:	bf00      	nop
    5a80:	20000278 	.word	0x20000278
    5a84:	00009acc 	.word	0x00009acc
    5a88:	00008e27 	.word	0x00008e27
    5a8c:	00009aaa 	.word	0x00009aaa
    5a90:	20000a2c 	.word	0x20000a2c

00005a94 <z_ready_thread>:
{
    5a94:	b538      	push	{r3, r4, r5, lr}
    5a96:	4604      	mov	r4, r0
	__asm__ volatile(
    5a98:	f04f 0320 	mov.w	r3, #32
    5a9c:	f3ef 8511 	mrs	r5, BASEPRI
    5aa0:	f383 8812 	msr	BASEPRI_MAX, r3
    5aa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5aa8:	4817      	ldr	r0, [pc, #92]	; (5b08 <z_ready_thread+0x74>)
    5aaa:	f001 f8e7 	bl	6c7c <z_spin_lock_valid>
    5aae:	b968      	cbnz	r0, 5acc <z_ready_thread+0x38>
    5ab0:	4a16      	ldr	r2, [pc, #88]	; (5b0c <z_ready_thread+0x78>)
    5ab2:	4917      	ldr	r1, [pc, #92]	; (5b10 <z_ready_thread+0x7c>)
    5ab4:	4817      	ldr	r0, [pc, #92]	; (5b14 <z_ready_thread+0x80>)
    5ab6:	2381      	movs	r3, #129	; 0x81
    5ab8:	f002 fa6b 	bl	7f92 <printk>
    5abc:	4912      	ldr	r1, [pc, #72]	; (5b08 <z_ready_thread+0x74>)
    5abe:	4816      	ldr	r0, [pc, #88]	; (5b18 <z_ready_thread+0x84>)
    5ac0:	f002 fa67 	bl	7f92 <printk>
    5ac4:	4811      	ldr	r0, [pc, #68]	; (5b0c <z_ready_thread+0x78>)
    5ac6:	2181      	movs	r1, #129	; 0x81
    5ac8:	f002 f98c 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5acc:	480e      	ldr	r0, [pc, #56]	; (5b08 <z_ready_thread+0x74>)
    5ace:	f001 f8f3 	bl	6cb8 <z_spin_lock_set_owner>
			ready_thread(thread);
    5ad2:	4620      	mov	r0, r4
    5ad4:	f7ff ff8c 	bl	59f0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ad8:	480b      	ldr	r0, [pc, #44]	; (5b08 <z_ready_thread+0x74>)
    5ada:	f001 f8dd 	bl	6c98 <z_spin_unlock_valid>
    5ade:	b968      	cbnz	r0, 5afc <z_ready_thread+0x68>
    5ae0:	4a0a      	ldr	r2, [pc, #40]	; (5b0c <z_ready_thread+0x78>)
    5ae2:	490e      	ldr	r1, [pc, #56]	; (5b1c <z_ready_thread+0x88>)
    5ae4:	480b      	ldr	r0, [pc, #44]	; (5b14 <z_ready_thread+0x80>)
    5ae6:	23ac      	movs	r3, #172	; 0xac
    5ae8:	f002 fa53 	bl	7f92 <printk>
    5aec:	4906      	ldr	r1, [pc, #24]	; (5b08 <z_ready_thread+0x74>)
    5aee:	480c      	ldr	r0, [pc, #48]	; (5b20 <z_ready_thread+0x8c>)
    5af0:	f002 fa4f 	bl	7f92 <printk>
    5af4:	4805      	ldr	r0, [pc, #20]	; (5b0c <z_ready_thread+0x78>)
    5af6:	21ac      	movs	r1, #172	; 0xac
    5af8:	f002 f974 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5afc:	f385 8811 	msr	BASEPRI, r5
    5b00:	f3bf 8f6f 	isb	sy
}
    5b04:	bd38      	pop	{r3, r4, r5, pc}
    5b06:	bf00      	nop
    5b08:	20000a60 	.word	0x20000a60
    5b0c:	00008f3a 	.word	0x00008f3a
    5b10:	00008f8c 	.word	0x00008f8c
    5b14:	00008e27 	.word	0x00008e27
    5b18:	00008fa1 	.word	0x00008fa1
    5b1c:	00008f60 	.word	0x00008f60
    5b20:	00008f77 	.word	0x00008f77

00005b24 <z_sched_start>:
{
    5b24:	b538      	push	{r3, r4, r5, lr}
    5b26:	4604      	mov	r4, r0
	__asm__ volatile(
    5b28:	f04f 0320 	mov.w	r3, #32
    5b2c:	f3ef 8511 	mrs	r5, BASEPRI
    5b30:	f383 8812 	msr	BASEPRI_MAX, r3
    5b34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b38:	481d      	ldr	r0, [pc, #116]	; (5bb0 <z_sched_start+0x8c>)
    5b3a:	f001 f89f 	bl	6c7c <z_spin_lock_valid>
    5b3e:	b968      	cbnz	r0, 5b5c <z_sched_start+0x38>
    5b40:	4a1c      	ldr	r2, [pc, #112]	; (5bb4 <z_sched_start+0x90>)
    5b42:	491d      	ldr	r1, [pc, #116]	; (5bb8 <z_sched_start+0x94>)
    5b44:	481d      	ldr	r0, [pc, #116]	; (5bbc <z_sched_start+0x98>)
    5b46:	2381      	movs	r3, #129	; 0x81
    5b48:	f002 fa23 	bl	7f92 <printk>
    5b4c:	4918      	ldr	r1, [pc, #96]	; (5bb0 <z_sched_start+0x8c>)
    5b4e:	481c      	ldr	r0, [pc, #112]	; (5bc0 <z_sched_start+0x9c>)
    5b50:	f002 fa1f 	bl	7f92 <printk>
    5b54:	4817      	ldr	r0, [pc, #92]	; (5bb4 <z_sched_start+0x90>)
    5b56:	2181      	movs	r1, #129	; 0x81
    5b58:	f002 f944 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b5c:	4814      	ldr	r0, [pc, #80]	; (5bb0 <z_sched_start+0x8c>)
    5b5e:	f001 f8ab 	bl	6cb8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5b62:	7b63      	ldrb	r3, [r4, #13]
    5b64:	075a      	lsls	r2, r3, #29
    5b66:	d416      	bmi.n	5b96 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b68:	4811      	ldr	r0, [pc, #68]	; (5bb0 <z_sched_start+0x8c>)
    5b6a:	f001 f895 	bl	6c98 <z_spin_unlock_valid>
    5b6e:	b968      	cbnz	r0, 5b8c <z_sched_start+0x68>
    5b70:	4a10      	ldr	r2, [pc, #64]	; (5bb4 <z_sched_start+0x90>)
    5b72:	4914      	ldr	r1, [pc, #80]	; (5bc4 <z_sched_start+0xa0>)
    5b74:	4811      	ldr	r0, [pc, #68]	; (5bbc <z_sched_start+0x98>)
    5b76:	23ac      	movs	r3, #172	; 0xac
    5b78:	f002 fa0b 	bl	7f92 <printk>
    5b7c:	490c      	ldr	r1, [pc, #48]	; (5bb0 <z_sched_start+0x8c>)
    5b7e:	4812      	ldr	r0, [pc, #72]	; (5bc8 <z_sched_start+0xa4>)
    5b80:	f002 fa07 	bl	7f92 <printk>
    5b84:	480b      	ldr	r0, [pc, #44]	; (5bb4 <z_sched_start+0x90>)
    5b86:	21ac      	movs	r1, #172	; 0xac
    5b88:	f002 f92c 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5b8c:	f385 8811 	msr	BASEPRI, r5
    5b90:	f3bf 8f6f 	isb	sy
}
    5b94:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5b96:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5b9a:	4620      	mov	r0, r4
    5b9c:	7363      	strb	r3, [r4, #13]
    5b9e:	f7ff ff27 	bl	59f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5ba2:	4629      	mov	r1, r5
    5ba4:	4802      	ldr	r0, [pc, #8]	; (5bb0 <z_sched_start+0x8c>)
}
    5ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5baa:	f7ff bcd3 	b.w	5554 <z_reschedule>
    5bae:	bf00      	nop
    5bb0:	20000a60 	.word	0x20000a60
    5bb4:	00008f3a 	.word	0x00008f3a
    5bb8:	00008f8c 	.word	0x00008f8c
    5bbc:	00008e27 	.word	0x00008e27
    5bc0:	00008fa1 	.word	0x00008fa1
    5bc4:	00008f60 	.word	0x00008f60
    5bc8:	00008f77 	.word	0x00008f77

00005bcc <z_thread_timeout>:
{
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	4604      	mov	r4, r0
	__asm__ volatile(
    5bd0:	f04f 0320 	mov.w	r3, #32
    5bd4:	f3ef 8611 	mrs	r6, BASEPRI
    5bd8:	f383 8812 	msr	BASEPRI_MAX, r3
    5bdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5be0:	4820      	ldr	r0, [pc, #128]	; (5c64 <z_thread_timeout+0x98>)
    5be2:	f001 f84b 	bl	6c7c <z_spin_lock_valid>
    5be6:	b968      	cbnz	r0, 5c04 <z_thread_timeout+0x38>
    5be8:	4a1f      	ldr	r2, [pc, #124]	; (5c68 <z_thread_timeout+0x9c>)
    5bea:	4920      	ldr	r1, [pc, #128]	; (5c6c <z_thread_timeout+0xa0>)
    5bec:	4820      	ldr	r0, [pc, #128]	; (5c70 <z_thread_timeout+0xa4>)
    5bee:	2381      	movs	r3, #129	; 0x81
    5bf0:	f002 f9cf 	bl	7f92 <printk>
    5bf4:	491b      	ldr	r1, [pc, #108]	; (5c64 <z_thread_timeout+0x98>)
    5bf6:	481f      	ldr	r0, [pc, #124]	; (5c74 <z_thread_timeout+0xa8>)
    5bf8:	f002 f9cb 	bl	7f92 <printk>
    5bfc:	481a      	ldr	r0, [pc, #104]	; (5c68 <z_thread_timeout+0x9c>)
    5bfe:	2181      	movs	r1, #129	; 0x81
    5c00:	f002 f8f0 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5c04:	4817      	ldr	r0, [pc, #92]	; (5c64 <z_thread_timeout+0x98>)
    5c06:	f001 f857 	bl	6cb8 <z_spin_lock_set_owner>
		if (!killed) {
    5c0a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5c0e:	f013 0f28 	tst.w	r3, #40	; 0x28
    5c12:	d110      	bne.n	5c36 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5c14:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5c18:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5c1c:	b113      	cbz	r3, 5c24 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5c1e:	4628      	mov	r0, r5
    5c20:	f7ff fd72 	bl	5708 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5c24:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5c28:	f023 0314 	bic.w	r3, r3, #20
    5c2c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5c30:	4628      	mov	r0, r5
    5c32:	f7ff fedd 	bl	59f0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c36:	480b      	ldr	r0, [pc, #44]	; (5c64 <z_thread_timeout+0x98>)
    5c38:	f001 f82e 	bl	6c98 <z_spin_unlock_valid>
    5c3c:	b968      	cbnz	r0, 5c5a <z_thread_timeout+0x8e>
    5c3e:	4a0a      	ldr	r2, [pc, #40]	; (5c68 <z_thread_timeout+0x9c>)
    5c40:	490d      	ldr	r1, [pc, #52]	; (5c78 <z_thread_timeout+0xac>)
    5c42:	480b      	ldr	r0, [pc, #44]	; (5c70 <z_thread_timeout+0xa4>)
    5c44:	23ac      	movs	r3, #172	; 0xac
    5c46:	f002 f9a4 	bl	7f92 <printk>
    5c4a:	4906      	ldr	r1, [pc, #24]	; (5c64 <z_thread_timeout+0x98>)
    5c4c:	480b      	ldr	r0, [pc, #44]	; (5c7c <z_thread_timeout+0xb0>)
    5c4e:	f002 f9a0 	bl	7f92 <printk>
    5c52:	4805      	ldr	r0, [pc, #20]	; (5c68 <z_thread_timeout+0x9c>)
    5c54:	21ac      	movs	r1, #172	; 0xac
    5c56:	f002 f8c5 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5c5a:	f386 8811 	msr	BASEPRI, r6
    5c5e:	f3bf 8f6f 	isb	sy
}
    5c62:	bd70      	pop	{r4, r5, r6, pc}
    5c64:	20000a60 	.word	0x20000a60
    5c68:	00008f3a 	.word	0x00008f3a
    5c6c:	00008f8c 	.word	0x00008f8c
    5c70:	00008e27 	.word	0x00008e27
    5c74:	00008fa1 	.word	0x00008fa1
    5c78:	00008f60 	.word	0x00008f60
    5c7c:	00008f77 	.word	0x00008f77

00005c80 <unready_thread>:
{
    5c80:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5c82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5c86:	7b43      	ldrb	r3, [r0, #13]
    5c88:	2a00      	cmp	r2, #0
{
    5c8a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5c8c:	da06      	bge.n	5c9c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c92:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5c94:	4601      	mov	r1, r0
    5c96:	4806      	ldr	r0, [pc, #24]	; (5cb0 <unready_thread+0x30>)
    5c98:	f7ff fd14 	bl	56c4 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5c9c:	4b05      	ldr	r3, [pc, #20]	; (5cb4 <unready_thread+0x34>)
    5c9e:	6898      	ldr	r0, [r3, #8]
    5ca0:	1b03      	subs	r3, r0, r4
    5ca2:	4258      	negs	r0, r3
}
    5ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5ca8:	4158      	adcs	r0, r3
    5caa:	f7ff bd9b 	b.w	57e4 <update_cache>
    5cae:	bf00      	nop
    5cb0:	20000a4c 	.word	0x20000a4c
    5cb4:	20000a2c 	.word	0x20000a2c

00005cb8 <add_to_waitq_locked>:
{
    5cb8:	b538      	push	{r3, r4, r5, lr}
    5cba:	4604      	mov	r4, r0
    5cbc:	460d      	mov	r5, r1
	unready_thread(thread);
    5cbe:	f7ff ffdf 	bl	5c80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5cc2:	7b63      	ldrb	r3, [r4, #13]
    5cc4:	f043 0302 	orr.w	r3, r3, #2
    5cc8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5cca:	b31d      	cbz	r5, 5d14 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5ccc:	4b17      	ldr	r3, [pc, #92]	; (5d2c <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    5cce:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5cd0:	429c      	cmp	r4, r3
    5cd2:	d109      	bne.n	5ce8 <add_to_waitq_locked+0x30>
    5cd4:	4916      	ldr	r1, [pc, #88]	; (5d30 <add_to_waitq_locked+0x78>)
    5cd6:	4817      	ldr	r0, [pc, #92]	; (5d34 <add_to_waitq_locked+0x7c>)
    5cd8:	4a17      	ldr	r2, [pc, #92]	; (5d38 <add_to_waitq_locked+0x80>)
    5cda:	23ba      	movs	r3, #186	; 0xba
    5cdc:	f002 f959 	bl	7f92 <printk>
    5ce0:	4815      	ldr	r0, [pc, #84]	; (5d38 <add_to_waitq_locked+0x80>)
    5ce2:	21ba      	movs	r1, #186	; 0xba
    5ce4:	f002 f87e 	bl	7de4 <assert_post_action>
	return list->head == list;
    5ce8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cea:	429d      	cmp	r5, r3
    5cec:	bf08      	it	eq
    5cee:	2300      	moveq	r3, #0
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	bf38      	it	cc
    5cf4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cf6:	b19b      	cbz	r3, 5d20 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    5cf8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5cfc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5d00:	4291      	cmp	r1, r2
    5d02:	d008      	beq.n	5d16 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    5d04:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5d06:	2a00      	cmp	r2, #0
    5d08:	dd05      	ble.n	5d16 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    5d0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5d0c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5d10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5d12:	605c      	str	r4, [r3, #4]
}
    5d14:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5d16:	686a      	ldr	r2, [r5, #4]
    5d18:	4293      	cmp	r3, r2
    5d1a:	d001      	beq.n	5d20 <add_to_waitq_locked+0x68>
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	e7ea      	b.n	5cf6 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    5d20:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5d22:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5d26:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5d28:	606c      	str	r4, [r5, #4]
    5d2a:	e7f3      	b.n	5d14 <add_to_waitq_locked+0x5c>
    5d2c:	20000278 	.word	0x20000278
    5d30:	00009acc 	.word	0x00009acc
    5d34:	00008e27 	.word	0x00008e27
    5d38:	00009aaa 	.word	0x00009aaa

00005d3c <pend>:
{
    5d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d40:	4604      	mov	r4, r0
    5d42:	460d      	mov	r5, r1
    5d44:	4616      	mov	r6, r2
    5d46:	461f      	mov	r7, r3
	__asm__ volatile(
    5d48:	f04f 0320 	mov.w	r3, #32
    5d4c:	f3ef 8811 	mrs	r8, BASEPRI
    5d50:	f383 8812 	msr	BASEPRI_MAX, r3
    5d54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d58:	481f      	ldr	r0, [pc, #124]	; (5dd8 <pend+0x9c>)
    5d5a:	f000 ff8f 	bl	6c7c <z_spin_lock_valid>
    5d5e:	b968      	cbnz	r0, 5d7c <pend+0x40>
    5d60:	4a1e      	ldr	r2, [pc, #120]	; (5ddc <pend+0xa0>)
    5d62:	491f      	ldr	r1, [pc, #124]	; (5de0 <pend+0xa4>)
    5d64:	481f      	ldr	r0, [pc, #124]	; (5de4 <pend+0xa8>)
    5d66:	2381      	movs	r3, #129	; 0x81
    5d68:	f002 f913 	bl	7f92 <printk>
    5d6c:	491a      	ldr	r1, [pc, #104]	; (5dd8 <pend+0x9c>)
    5d6e:	481e      	ldr	r0, [pc, #120]	; (5de8 <pend+0xac>)
    5d70:	f002 f90f 	bl	7f92 <printk>
    5d74:	4819      	ldr	r0, [pc, #100]	; (5ddc <pend+0xa0>)
    5d76:	2181      	movs	r1, #129	; 0x81
    5d78:	f002 f834 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d7c:	4816      	ldr	r0, [pc, #88]	; (5dd8 <pend+0x9c>)
    5d7e:	f000 ff9b 	bl	6cb8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5d82:	4620      	mov	r0, r4
    5d84:	4629      	mov	r1, r5
    5d86:	f7ff ff97 	bl	5cb8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d8a:	4813      	ldr	r0, [pc, #76]	; (5dd8 <pend+0x9c>)
    5d8c:	f000 ff84 	bl	6c98 <z_spin_unlock_valid>
    5d90:	b968      	cbnz	r0, 5dae <pend+0x72>
    5d92:	4a12      	ldr	r2, [pc, #72]	; (5ddc <pend+0xa0>)
    5d94:	4915      	ldr	r1, [pc, #84]	; (5dec <pend+0xb0>)
    5d96:	4813      	ldr	r0, [pc, #76]	; (5de4 <pend+0xa8>)
    5d98:	23ac      	movs	r3, #172	; 0xac
    5d9a:	f002 f8fa 	bl	7f92 <printk>
    5d9e:	490e      	ldr	r1, [pc, #56]	; (5dd8 <pend+0x9c>)
    5da0:	4813      	ldr	r0, [pc, #76]	; (5df0 <pend+0xb4>)
    5da2:	f002 f8f6 	bl	7f92 <printk>
    5da6:	480d      	ldr	r0, [pc, #52]	; (5ddc <pend+0xa0>)
    5da8:	21ac      	movs	r1, #172	; 0xac
    5daa:	f002 f81b 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5dae:	f388 8811 	msr	BASEPRI, r8
    5db2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5db6:	1c7b      	adds	r3, r7, #1
    5db8:	bf08      	it	eq
    5dba:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5dbe:	d008      	beq.n	5dd2 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5dc0:	4632      	mov	r2, r6
    5dc2:	463b      	mov	r3, r7
    5dc4:	f104 0018 	add.w	r0, r4, #24
    5dc8:	490a      	ldr	r1, [pc, #40]	; (5df4 <pend+0xb8>)
}
    5dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5dce:	f000 bfcb 	b.w	6d68 <z_add_timeout>
    5dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dd6:	bf00      	nop
    5dd8:	20000a60 	.word	0x20000a60
    5ddc:	00008f3a 	.word	0x00008f3a
    5de0:	00008f8c 	.word	0x00008f8c
    5de4:	00008e27 	.word	0x00008e27
    5de8:	00008fa1 	.word	0x00008fa1
    5dec:	00008f60 	.word	0x00008f60
    5df0:	00008f77 	.word	0x00008f77
    5df4:	00005bcd 	.word	0x00005bcd

00005df8 <z_pend_curr>:
{
    5df8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5dfa:	4b11      	ldr	r3, [pc, #68]	; (5e40 <z_pend_curr+0x48>)
{
    5dfc:	4604      	mov	r4, r0
	pending_current = _current;
    5dfe:	6898      	ldr	r0, [r3, #8]
    5e00:	4b10      	ldr	r3, [pc, #64]	; (5e44 <z_pend_curr+0x4c>)
{
    5e02:	460d      	mov	r5, r1
	pending_current = _current;
    5e04:	6018      	str	r0, [r3, #0]
{
    5e06:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5e0c:	f7ff ff96 	bl	5d3c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e10:	4620      	mov	r0, r4
    5e12:	f000 ff41 	bl	6c98 <z_spin_unlock_valid>
    5e16:	b968      	cbnz	r0, 5e34 <z_pend_curr+0x3c>
    5e18:	4a0b      	ldr	r2, [pc, #44]	; (5e48 <z_pend_curr+0x50>)
    5e1a:	490c      	ldr	r1, [pc, #48]	; (5e4c <z_pend_curr+0x54>)
    5e1c:	480c      	ldr	r0, [pc, #48]	; (5e50 <z_pend_curr+0x58>)
    5e1e:	23c3      	movs	r3, #195	; 0xc3
    5e20:	f002 f8b7 	bl	7f92 <printk>
    5e24:	480b      	ldr	r0, [pc, #44]	; (5e54 <z_pend_curr+0x5c>)
    5e26:	4621      	mov	r1, r4
    5e28:	f002 f8b3 	bl	7f92 <printk>
    5e2c:	4806      	ldr	r0, [pc, #24]	; (5e48 <z_pend_curr+0x50>)
    5e2e:	21c3      	movs	r1, #195	; 0xc3
    5e30:	f001 ffd8 	bl	7de4 <assert_post_action>
    5e34:	4628      	mov	r0, r5
}
    5e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5e3a:	f7fb bd9d 	b.w	1978 <arch_swap>
    5e3e:	bf00      	nop
    5e40:	20000a2c 	.word	0x20000a2c
    5e44:	20000a5c 	.word	0x20000a5c
    5e48:	00008f3a 	.word	0x00008f3a
    5e4c:	00008f60 	.word	0x00008f60
    5e50:	00008e27 	.word	0x00008e27
    5e54:	00008f77 	.word	0x00008f77

00005e58 <z_set_prio>:
{
    5e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e5a:	4604      	mov	r4, r0
    5e5c:	460e      	mov	r6, r1
	__asm__ volatile(
    5e5e:	f04f 0320 	mov.w	r3, #32
    5e62:	f3ef 8711 	mrs	r7, BASEPRI
    5e66:	f383 8812 	msr	BASEPRI_MAX, r3
    5e6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e6e:	483c      	ldr	r0, [pc, #240]	; (5f60 <z_set_prio+0x108>)
    5e70:	f000 ff04 	bl	6c7c <z_spin_lock_valid>
    5e74:	b968      	cbnz	r0, 5e92 <z_set_prio+0x3a>
    5e76:	4a3b      	ldr	r2, [pc, #236]	; (5f64 <z_set_prio+0x10c>)
    5e78:	493b      	ldr	r1, [pc, #236]	; (5f68 <z_set_prio+0x110>)
    5e7a:	483c      	ldr	r0, [pc, #240]	; (5f6c <z_set_prio+0x114>)
    5e7c:	2381      	movs	r3, #129	; 0x81
    5e7e:	f002 f888 	bl	7f92 <printk>
    5e82:	4937      	ldr	r1, [pc, #220]	; (5f60 <z_set_prio+0x108>)
    5e84:	483a      	ldr	r0, [pc, #232]	; (5f70 <z_set_prio+0x118>)
    5e86:	f002 f884 	bl	7f92 <printk>
    5e8a:	4836      	ldr	r0, [pc, #216]	; (5f64 <z_set_prio+0x10c>)
    5e8c:	2181      	movs	r1, #129	; 0x81
    5e8e:	f001 ffa9 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e92:	4833      	ldr	r0, [pc, #204]	; (5f60 <z_set_prio+0x108>)
    5e94:	f000 ff10 	bl	6cb8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5e98:	7b63      	ldrb	r3, [r4, #13]
    5e9a:	06da      	lsls	r2, r3, #27
    5e9c:	b276      	sxtb	r6, r6
    5e9e:	d15c      	bne.n	5f5a <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    5ea0:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    5ea2:	2d00      	cmp	r5, #0
    5ea4:	d159      	bne.n	5f5a <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5eaa:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5eac:	4831      	ldr	r0, [pc, #196]	; (5f74 <z_set_prio+0x11c>)
    5eae:	4621      	mov	r1, r4
    5eb0:	f7ff fc08 	bl	56c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5eb4:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5eb6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ebc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5ebe:	4b2e      	ldr	r3, [pc, #184]	; (5f78 <z_set_prio+0x120>)
    5ec0:	429c      	cmp	r4, r3
    5ec2:	d109      	bne.n	5ed8 <z_set_prio+0x80>
    5ec4:	492d      	ldr	r1, [pc, #180]	; (5f7c <z_set_prio+0x124>)
    5ec6:	4829      	ldr	r0, [pc, #164]	; (5f6c <z_set_prio+0x114>)
    5ec8:	4a2d      	ldr	r2, [pc, #180]	; (5f80 <z_set_prio+0x128>)
    5eca:	23ba      	movs	r3, #186	; 0xba
    5ecc:	f002 f861 	bl	7f92 <printk>
    5ed0:	482b      	ldr	r0, [pc, #172]	; (5f80 <z_set_prio+0x128>)
    5ed2:	21ba      	movs	r1, #186	; 0xba
    5ed4:	f001 ff86 	bl	7de4 <assert_post_action>
	return list->head == list;
    5ed8:	492a      	ldr	r1, [pc, #168]	; (5f84 <z_set_prio+0x12c>)
    5eda:	460b      	mov	r3, r1
    5edc:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ee0:	4298      	cmp	r0, r3
    5ee2:	bf18      	it	ne
    5ee4:	4605      	movne	r5, r0
    5ee6:	2d00      	cmp	r5, #0
    5ee8:	461a      	mov	r2, r3
    5eea:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5eec:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5eee:	bf38      	it	cc
    5ef0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ef2:	b36b      	cbz	r3, 5f50 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    5ef4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5ef8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5efc:	4286      	cmp	r6, r0
    5efe:	d023      	beq.n	5f48 <z_set_prio+0xf0>
		return b2 - b1;
    5f00:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f02:	2800      	cmp	r0, #0
    5f04:	dd20      	ble.n	5f48 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    5f06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f08:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5f0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5f0e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5f10:	2001      	movs	r0, #1
    5f12:	f7ff fc67 	bl	57e4 <update_cache>
    5f16:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f18:	4811      	ldr	r0, [pc, #68]	; (5f60 <z_set_prio+0x108>)
    5f1a:	f000 febd 	bl	6c98 <z_spin_unlock_valid>
    5f1e:	b968      	cbnz	r0, 5f3c <z_set_prio+0xe4>
    5f20:	4a10      	ldr	r2, [pc, #64]	; (5f64 <z_set_prio+0x10c>)
    5f22:	4919      	ldr	r1, [pc, #100]	; (5f88 <z_set_prio+0x130>)
    5f24:	4811      	ldr	r0, [pc, #68]	; (5f6c <z_set_prio+0x114>)
    5f26:	23ac      	movs	r3, #172	; 0xac
    5f28:	f002 f833 	bl	7f92 <printk>
    5f2c:	490c      	ldr	r1, [pc, #48]	; (5f60 <z_set_prio+0x108>)
    5f2e:	4817      	ldr	r0, [pc, #92]	; (5f8c <z_set_prio+0x134>)
    5f30:	f002 f82f 	bl	7f92 <printk>
    5f34:	480b      	ldr	r0, [pc, #44]	; (5f64 <z_set_prio+0x10c>)
    5f36:	21ac      	movs	r1, #172	; 0xac
    5f38:	f001 ff54 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    5f3c:	f387 8811 	msr	BASEPRI, r7
    5f40:	f3bf 8f6f 	isb	sy
}
    5f44:	4620      	mov	r0, r4
    5f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5f48:	42ab      	cmp	r3, r5
    5f4a:	d001      	beq.n	5f50 <z_set_prio+0xf8>
    5f4c:	681b      	ldr	r3, [r3, #0]
    5f4e:	e7d0      	b.n	5ef2 <z_set_prio+0x9a>
	node->prev = tail;
    5f50:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5f54:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5f56:	624c      	str	r4, [r1, #36]	; 0x24
}
    5f58:	e7da      	b.n	5f10 <z_set_prio+0xb8>
			thread->base.prio = prio;
    5f5a:	73a6      	strb	r6, [r4, #14]
    5f5c:	2400      	movs	r4, #0
    5f5e:	e7db      	b.n	5f18 <z_set_prio+0xc0>
    5f60:	20000a60 	.word	0x20000a60
    5f64:	00008f3a 	.word	0x00008f3a
    5f68:	00008f8c 	.word	0x00008f8c
    5f6c:	00008e27 	.word	0x00008e27
    5f70:	00008fa1 	.word	0x00008fa1
    5f74:	20000a4c 	.word	0x20000a4c
    5f78:	20000278 	.word	0x20000278
    5f7c:	00009acc 	.word	0x00009acc
    5f80:	00009aaa 	.word	0x00009aaa
    5f84:	20000a2c 	.word	0x20000a2c
    5f88:	00008f60 	.word	0x00008f60
    5f8c:	00008f77 	.word	0x00008f77

00005f90 <z_impl_k_thread_suspend>:
{
    5f90:	b570      	push	{r4, r5, r6, lr}
    5f92:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    5f94:	3018      	adds	r0, #24
    5f96:	f000 ffbb 	bl	6f10 <z_abort_timeout>
	__asm__ volatile(
    5f9a:	f04f 0320 	mov.w	r3, #32
    5f9e:	f3ef 8611 	mrs	r6, BASEPRI
    5fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    5fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5faa:	4825      	ldr	r0, [pc, #148]	; (6040 <z_impl_k_thread_suspend+0xb0>)
    5fac:	f000 fe66 	bl	6c7c <z_spin_lock_valid>
    5fb0:	b968      	cbnz	r0, 5fce <z_impl_k_thread_suspend+0x3e>
    5fb2:	4a24      	ldr	r2, [pc, #144]	; (6044 <z_impl_k_thread_suspend+0xb4>)
    5fb4:	4924      	ldr	r1, [pc, #144]	; (6048 <z_impl_k_thread_suspend+0xb8>)
    5fb6:	4825      	ldr	r0, [pc, #148]	; (604c <z_impl_k_thread_suspend+0xbc>)
    5fb8:	2381      	movs	r3, #129	; 0x81
    5fba:	f001 ffea 	bl	7f92 <printk>
    5fbe:	4920      	ldr	r1, [pc, #128]	; (6040 <z_impl_k_thread_suspend+0xb0>)
    5fc0:	4823      	ldr	r0, [pc, #140]	; (6050 <z_impl_k_thread_suspend+0xc0>)
    5fc2:	f001 ffe6 	bl	7f92 <printk>
    5fc6:	481f      	ldr	r0, [pc, #124]	; (6044 <z_impl_k_thread_suspend+0xb4>)
    5fc8:	2181      	movs	r1, #129	; 0x81
    5fca:	f001 ff0b 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5fce:	481c      	ldr	r0, [pc, #112]	; (6040 <z_impl_k_thread_suspend+0xb0>)
    5fd0:	f000 fe72 	bl	6cb8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5fd4:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5fd8:	7b63      	ldrb	r3, [r4, #13]
    5fda:	2a00      	cmp	r2, #0
    5fdc:	da06      	bge.n	5fec <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5fe2:	481c      	ldr	r0, [pc, #112]	; (6054 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5fe4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5fe6:	4621      	mov	r1, r4
    5fe8:	f7ff fb6c 	bl	56c4 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5fec:	4d1a      	ldr	r5, [pc, #104]	; (6058 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5fee:	7b63      	ldrb	r3, [r4, #13]
    5ff0:	68a8      	ldr	r0, [r5, #8]
    5ff2:	f043 0310 	orr.w	r3, r3, #16
    5ff6:	7363      	strb	r3, [r4, #13]
    5ff8:	1b03      	subs	r3, r0, r4
    5ffa:	4258      	negs	r0, r3
    5ffc:	4158      	adcs	r0, r3
    5ffe:	f7ff fbf1 	bl	57e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6002:	480f      	ldr	r0, [pc, #60]	; (6040 <z_impl_k_thread_suspend+0xb0>)
    6004:	f000 fe48 	bl	6c98 <z_spin_unlock_valid>
    6008:	b968      	cbnz	r0, 6026 <z_impl_k_thread_suspend+0x96>
    600a:	4a0e      	ldr	r2, [pc, #56]	; (6044 <z_impl_k_thread_suspend+0xb4>)
    600c:	4913      	ldr	r1, [pc, #76]	; (605c <z_impl_k_thread_suspend+0xcc>)
    600e:	480f      	ldr	r0, [pc, #60]	; (604c <z_impl_k_thread_suspend+0xbc>)
    6010:	23ac      	movs	r3, #172	; 0xac
    6012:	f001 ffbe 	bl	7f92 <printk>
    6016:	490a      	ldr	r1, [pc, #40]	; (6040 <z_impl_k_thread_suspend+0xb0>)
    6018:	4811      	ldr	r0, [pc, #68]	; (6060 <z_impl_k_thread_suspend+0xd0>)
    601a:	f001 ffba 	bl	7f92 <printk>
    601e:	4809      	ldr	r0, [pc, #36]	; (6044 <z_impl_k_thread_suspend+0xb4>)
    6020:	21ac      	movs	r1, #172	; 0xac
    6022:	f001 fedf 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    6026:	f386 8811 	msr	BASEPRI, r6
    602a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    602e:	68ab      	ldr	r3, [r5, #8]
    6030:	42a3      	cmp	r3, r4
    6032:	d103      	bne.n	603c <z_impl_k_thread_suspend+0xac>
}
    6034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6038:	f002 bb10 	b.w	865c <z_reschedule_unlocked>
}
    603c:	bd70      	pop	{r4, r5, r6, pc}
    603e:	bf00      	nop
    6040:	20000a60 	.word	0x20000a60
    6044:	00008f3a 	.word	0x00008f3a
    6048:	00008f8c 	.word	0x00008f8c
    604c:	00008e27 	.word	0x00008e27
    6050:	00008fa1 	.word	0x00008fa1
    6054:	20000a4c 	.word	0x20000a4c
    6058:	20000a2c 	.word	0x20000a2c
    605c:	00008f60 	.word	0x00008f60
    6060:	00008f77 	.word	0x00008f77

00006064 <k_sched_unlock>:
{
    6064:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6066:	f04f 0320 	mov.w	r3, #32
    606a:	f3ef 8511 	mrs	r5, BASEPRI
    606e:	f383 8812 	msr	BASEPRI_MAX, r3
    6072:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6076:	482d      	ldr	r0, [pc, #180]	; (612c <k_sched_unlock+0xc8>)
    6078:	f000 fe00 	bl	6c7c <z_spin_lock_valid>
    607c:	b968      	cbnz	r0, 609a <k_sched_unlock+0x36>
    607e:	4a2c      	ldr	r2, [pc, #176]	; (6130 <k_sched_unlock+0xcc>)
    6080:	492c      	ldr	r1, [pc, #176]	; (6134 <k_sched_unlock+0xd0>)
    6082:	482d      	ldr	r0, [pc, #180]	; (6138 <k_sched_unlock+0xd4>)
    6084:	2381      	movs	r3, #129	; 0x81
    6086:	f001 ff84 	bl	7f92 <printk>
    608a:	4928      	ldr	r1, [pc, #160]	; (612c <k_sched_unlock+0xc8>)
    608c:	482b      	ldr	r0, [pc, #172]	; (613c <k_sched_unlock+0xd8>)
    608e:	f001 ff80 	bl	7f92 <printk>
    6092:	4827      	ldr	r0, [pc, #156]	; (6130 <k_sched_unlock+0xcc>)
    6094:	2181      	movs	r1, #129	; 0x81
    6096:	f001 fea5 	bl	7de4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    609a:	4c29      	ldr	r4, [pc, #164]	; (6140 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    609c:	4823      	ldr	r0, [pc, #140]	; (612c <k_sched_unlock+0xc8>)
    609e:	f000 fe0b 	bl	6cb8 <z_spin_lock_set_owner>
    60a2:	68a2      	ldr	r2, [r4, #8]
    60a4:	7bd2      	ldrb	r2, [r2, #15]
    60a6:	b972      	cbnz	r2, 60c6 <k_sched_unlock+0x62>
    60a8:	4926      	ldr	r1, [pc, #152]	; (6144 <k_sched_unlock+0xe0>)
    60aa:	4a27      	ldr	r2, [pc, #156]	; (6148 <k_sched_unlock+0xe4>)
    60ac:	4822      	ldr	r0, [pc, #136]	; (6138 <k_sched_unlock+0xd4>)
    60ae:	f240 3385 	movw	r3, #901	; 0x385
    60b2:	f001 ff6e 	bl	7f92 <printk>
    60b6:	4825      	ldr	r0, [pc, #148]	; (614c <k_sched_unlock+0xe8>)
    60b8:	f001 ff6b 	bl	7f92 <printk>
    60bc:	4822      	ldr	r0, [pc, #136]	; (6148 <k_sched_unlock+0xe4>)
    60be:	f240 3185 	movw	r1, #901	; 0x385
    60c2:	f001 fe8f 	bl	7de4 <assert_post_action>
    60c6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    60ca:	b173      	cbz	r3, 60ea <k_sched_unlock+0x86>
    60cc:	4920      	ldr	r1, [pc, #128]	; (6150 <k_sched_unlock+0xec>)
    60ce:	4a1e      	ldr	r2, [pc, #120]	; (6148 <k_sched_unlock+0xe4>)
    60d0:	4819      	ldr	r0, [pc, #100]	; (6138 <k_sched_unlock+0xd4>)
    60d2:	f240 3386 	movw	r3, #902	; 0x386
    60d6:	f001 ff5c 	bl	7f92 <printk>
    60da:	481c      	ldr	r0, [pc, #112]	; (614c <k_sched_unlock+0xe8>)
    60dc:	f001 ff59 	bl	7f92 <printk>
    60e0:	4819      	ldr	r0, [pc, #100]	; (6148 <k_sched_unlock+0xe4>)
    60e2:	f240 3186 	movw	r1, #902	; 0x386
    60e6:	f001 fe7d 	bl	7de4 <assert_post_action>
		++_current->base.sched_locked;
    60ea:	68a2      	ldr	r2, [r4, #8]
    60ec:	7bd3      	ldrb	r3, [r2, #15]
    60ee:	3301      	adds	r3, #1
		update_cache(0);
    60f0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    60f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    60f4:	f7ff fb76 	bl	57e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60f8:	480c      	ldr	r0, [pc, #48]	; (612c <k_sched_unlock+0xc8>)
    60fa:	f000 fdcd 	bl	6c98 <z_spin_unlock_valid>
    60fe:	b968      	cbnz	r0, 611c <k_sched_unlock+0xb8>
    6100:	4a0b      	ldr	r2, [pc, #44]	; (6130 <k_sched_unlock+0xcc>)
    6102:	4914      	ldr	r1, [pc, #80]	; (6154 <k_sched_unlock+0xf0>)
    6104:	480c      	ldr	r0, [pc, #48]	; (6138 <k_sched_unlock+0xd4>)
    6106:	23ac      	movs	r3, #172	; 0xac
    6108:	f001 ff43 	bl	7f92 <printk>
    610c:	4907      	ldr	r1, [pc, #28]	; (612c <k_sched_unlock+0xc8>)
    610e:	4812      	ldr	r0, [pc, #72]	; (6158 <k_sched_unlock+0xf4>)
    6110:	f001 ff3f 	bl	7f92 <printk>
    6114:	4806      	ldr	r0, [pc, #24]	; (6130 <k_sched_unlock+0xcc>)
    6116:	21ac      	movs	r1, #172	; 0xac
    6118:	f001 fe64 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    611c:	f385 8811 	msr	BASEPRI, r5
    6120:	f3bf 8f6f 	isb	sy
}
    6124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    6128:	f002 ba98 	b.w	865c <z_reschedule_unlocked>
    612c:	20000a60 	.word	0x20000a60
    6130:	00008f3a 	.word	0x00008f3a
    6134:	00008f8c 	.word	0x00008f8c
    6138:	00008e27 	.word	0x00008e27
    613c:	00008fa1 	.word	0x00008fa1
    6140:	20000a2c 	.word	0x20000a2c
    6144:	00009b2b 	.word	0x00009b2b
    6148:	00009aaa 	.word	0x00009aaa
    614c:	00009946 	.word	0x00009946
    6150:	000098cd 	.word	0x000098cd
    6154:	00008f60 	.word	0x00008f60
    6158:	00008f77 	.word	0x00008f77

0000615c <z_unpend1_no_timeout>:
{
    615c:	b538      	push	{r3, r4, r5, lr}
    615e:	4604      	mov	r4, r0
	__asm__ volatile(
    6160:	f04f 0320 	mov.w	r3, #32
    6164:	f3ef 8511 	mrs	r5, BASEPRI
    6168:	f383 8812 	msr	BASEPRI_MAX, r3
    616c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6170:	4819      	ldr	r0, [pc, #100]	; (61d8 <z_unpend1_no_timeout+0x7c>)
    6172:	f000 fd83 	bl	6c7c <z_spin_lock_valid>
    6176:	b968      	cbnz	r0, 6194 <z_unpend1_no_timeout+0x38>
    6178:	4a18      	ldr	r2, [pc, #96]	; (61dc <z_unpend1_no_timeout+0x80>)
    617a:	4919      	ldr	r1, [pc, #100]	; (61e0 <z_unpend1_no_timeout+0x84>)
    617c:	4819      	ldr	r0, [pc, #100]	; (61e4 <z_unpend1_no_timeout+0x88>)
    617e:	2381      	movs	r3, #129	; 0x81
    6180:	f001 ff07 	bl	7f92 <printk>
    6184:	4914      	ldr	r1, [pc, #80]	; (61d8 <z_unpend1_no_timeout+0x7c>)
    6186:	4818      	ldr	r0, [pc, #96]	; (61e8 <z_unpend1_no_timeout+0x8c>)
    6188:	f001 ff03 	bl	7f92 <printk>
    618c:	4813      	ldr	r0, [pc, #76]	; (61dc <z_unpend1_no_timeout+0x80>)
    618e:	2181      	movs	r1, #129	; 0x81
    6190:	f001 fe28 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6194:	4810      	ldr	r0, [pc, #64]	; (61d8 <z_unpend1_no_timeout+0x7c>)
    6196:	f000 fd8f 	bl	6cb8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    619a:	4620      	mov	r0, r4
    619c:	f002 fa68 	bl	8670 <z_priq_dumb_best>
		if (thread != NULL) {
    61a0:	4604      	mov	r4, r0
    61a2:	b108      	cbz	r0, 61a8 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    61a4:	f7ff fab0 	bl	5708 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61a8:	480b      	ldr	r0, [pc, #44]	; (61d8 <z_unpend1_no_timeout+0x7c>)
    61aa:	f000 fd75 	bl	6c98 <z_spin_unlock_valid>
    61ae:	b968      	cbnz	r0, 61cc <z_unpend1_no_timeout+0x70>
    61b0:	4a0a      	ldr	r2, [pc, #40]	; (61dc <z_unpend1_no_timeout+0x80>)
    61b2:	490e      	ldr	r1, [pc, #56]	; (61ec <z_unpend1_no_timeout+0x90>)
    61b4:	480b      	ldr	r0, [pc, #44]	; (61e4 <z_unpend1_no_timeout+0x88>)
    61b6:	23ac      	movs	r3, #172	; 0xac
    61b8:	f001 feeb 	bl	7f92 <printk>
    61bc:	4906      	ldr	r1, [pc, #24]	; (61d8 <z_unpend1_no_timeout+0x7c>)
    61be:	480c      	ldr	r0, [pc, #48]	; (61f0 <z_unpend1_no_timeout+0x94>)
    61c0:	f001 fee7 	bl	7f92 <printk>
    61c4:	4805      	ldr	r0, [pc, #20]	; (61dc <z_unpend1_no_timeout+0x80>)
    61c6:	21ac      	movs	r1, #172	; 0xac
    61c8:	f001 fe0c 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    61cc:	f385 8811 	msr	BASEPRI, r5
    61d0:	f3bf 8f6f 	isb	sy
}
    61d4:	4620      	mov	r0, r4
    61d6:	bd38      	pop	{r3, r4, r5, pc}
    61d8:	20000a60 	.word	0x20000a60
    61dc:	00008f3a 	.word	0x00008f3a
    61e0:	00008f8c 	.word	0x00008f8c
    61e4:	00008e27 	.word	0x00008e27
    61e8:	00008fa1 	.word	0x00008fa1
    61ec:	00008f60 	.word	0x00008f60
    61f0:	00008f77 	.word	0x00008f77

000061f4 <z_unpend_first_thread>:
{
    61f4:	b538      	push	{r3, r4, r5, lr}
    61f6:	4604      	mov	r4, r0
	__asm__ volatile(
    61f8:	f04f 0320 	mov.w	r3, #32
    61fc:	f3ef 8511 	mrs	r5, BASEPRI
    6200:	f383 8812 	msr	BASEPRI_MAX, r3
    6204:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6208:	481b      	ldr	r0, [pc, #108]	; (6278 <z_unpend_first_thread+0x84>)
    620a:	f000 fd37 	bl	6c7c <z_spin_lock_valid>
    620e:	b968      	cbnz	r0, 622c <z_unpend_first_thread+0x38>
    6210:	4a1a      	ldr	r2, [pc, #104]	; (627c <z_unpend_first_thread+0x88>)
    6212:	491b      	ldr	r1, [pc, #108]	; (6280 <z_unpend_first_thread+0x8c>)
    6214:	481b      	ldr	r0, [pc, #108]	; (6284 <z_unpend_first_thread+0x90>)
    6216:	2381      	movs	r3, #129	; 0x81
    6218:	f001 febb 	bl	7f92 <printk>
    621c:	4916      	ldr	r1, [pc, #88]	; (6278 <z_unpend_first_thread+0x84>)
    621e:	481a      	ldr	r0, [pc, #104]	; (6288 <z_unpend_first_thread+0x94>)
    6220:	f001 feb7 	bl	7f92 <printk>
    6224:	4815      	ldr	r0, [pc, #84]	; (627c <z_unpend_first_thread+0x88>)
    6226:	2181      	movs	r1, #129	; 0x81
    6228:	f001 fddc 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    622c:	4812      	ldr	r0, [pc, #72]	; (6278 <z_unpend_first_thread+0x84>)
    622e:	f000 fd43 	bl	6cb8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    6232:	4620      	mov	r0, r4
    6234:	f002 fa1c 	bl	8670 <z_priq_dumb_best>
		if (thread != NULL) {
    6238:	4604      	mov	r4, r0
    623a:	b128      	cbz	r0, 6248 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    623c:	f7ff fa64 	bl	5708 <unpend_thread_no_timeout>
    6240:	f104 0018 	add.w	r0, r4, #24
    6244:	f000 fe64 	bl	6f10 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6248:	480b      	ldr	r0, [pc, #44]	; (6278 <z_unpend_first_thread+0x84>)
    624a:	f000 fd25 	bl	6c98 <z_spin_unlock_valid>
    624e:	b968      	cbnz	r0, 626c <z_unpend_first_thread+0x78>
    6250:	4a0a      	ldr	r2, [pc, #40]	; (627c <z_unpend_first_thread+0x88>)
    6252:	490e      	ldr	r1, [pc, #56]	; (628c <z_unpend_first_thread+0x98>)
    6254:	480b      	ldr	r0, [pc, #44]	; (6284 <z_unpend_first_thread+0x90>)
    6256:	23ac      	movs	r3, #172	; 0xac
    6258:	f001 fe9b 	bl	7f92 <printk>
    625c:	4906      	ldr	r1, [pc, #24]	; (6278 <z_unpend_first_thread+0x84>)
    625e:	480c      	ldr	r0, [pc, #48]	; (6290 <z_unpend_first_thread+0x9c>)
    6260:	f001 fe97 	bl	7f92 <printk>
    6264:	4805      	ldr	r0, [pc, #20]	; (627c <z_unpend_first_thread+0x88>)
    6266:	21ac      	movs	r1, #172	; 0xac
    6268:	f001 fdbc 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    626c:	f385 8811 	msr	BASEPRI, r5
    6270:	f3bf 8f6f 	isb	sy
}
    6274:	4620      	mov	r0, r4
    6276:	bd38      	pop	{r3, r4, r5, pc}
    6278:	20000a60 	.word	0x20000a60
    627c:	00008f3a 	.word	0x00008f3a
    6280:	00008f8c 	.word	0x00008f8c
    6284:	00008e27 	.word	0x00008e27
    6288:	00008fa1 	.word	0x00008fa1
    628c:	00008f60 	.word	0x00008f60
    6290:	00008f77 	.word	0x00008f77

00006294 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6294:	4b04      	ldr	r3, [pc, #16]	; (62a8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6296:	2100      	movs	r1, #0
    6298:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    629c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    62a0:	4608      	mov	r0, r1
    62a2:	f7ff b8a9 	b.w	53f8 <k_sched_time_slice_set>
    62a6:	bf00      	nop
    62a8:	20000a2c 	.word	0x20000a2c

000062ac <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    62ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    62b2:	b173      	cbz	r3, 62d2 <z_impl_k_yield+0x26>
    62b4:	4941      	ldr	r1, [pc, #260]	; (63bc <z_impl_k_yield+0x110>)
    62b6:	4a42      	ldr	r2, [pc, #264]	; (63c0 <z_impl_k_yield+0x114>)
    62b8:	4842      	ldr	r0, [pc, #264]	; (63c4 <z_impl_k_yield+0x118>)
    62ba:	f240 43dc 	movw	r3, #1244	; 0x4dc
    62be:	f001 fe68 	bl	7f92 <printk>
    62c2:	4841      	ldr	r0, [pc, #260]	; (63c8 <z_impl_k_yield+0x11c>)
    62c4:	f001 fe65 	bl	7f92 <printk>
    62c8:	483d      	ldr	r0, [pc, #244]	; (63c0 <z_impl_k_yield+0x114>)
    62ca:	f240 41dc 	movw	r1, #1244	; 0x4dc
    62ce:	f001 fd89 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    62d2:	f04f 0320 	mov.w	r3, #32
    62d6:	f3ef 8611 	mrs	r6, BASEPRI
    62da:	f383 8812 	msr	BASEPRI_MAX, r3
    62de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62e2:	483a      	ldr	r0, [pc, #232]	; (63cc <z_impl_k_yield+0x120>)
    62e4:	f000 fcca 	bl	6c7c <z_spin_lock_valid>
    62e8:	b968      	cbnz	r0, 6306 <z_impl_k_yield+0x5a>
    62ea:	4a39      	ldr	r2, [pc, #228]	; (63d0 <z_impl_k_yield+0x124>)
    62ec:	4939      	ldr	r1, [pc, #228]	; (63d4 <z_impl_k_yield+0x128>)
    62ee:	4835      	ldr	r0, [pc, #212]	; (63c4 <z_impl_k_yield+0x118>)
    62f0:	2381      	movs	r3, #129	; 0x81
    62f2:	f001 fe4e 	bl	7f92 <printk>
    62f6:	4935      	ldr	r1, [pc, #212]	; (63cc <z_impl_k_yield+0x120>)
    62f8:	4837      	ldr	r0, [pc, #220]	; (63d8 <z_impl_k_yield+0x12c>)
    62fa:	f001 fe4a 	bl	7f92 <printk>
    62fe:	4834      	ldr	r0, [pc, #208]	; (63d0 <z_impl_k_yield+0x124>)
    6300:	2181      	movs	r1, #129	; 0x81
    6302:	f001 fd6f 	bl	7de4 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6306:	4d35      	ldr	r5, [pc, #212]	; (63dc <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6308:	4830      	ldr	r0, [pc, #192]	; (63cc <z_impl_k_yield+0x120>)
    630a:	f000 fcd5 	bl	6cb8 <z_spin_lock_set_owner>
    630e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6310:	7b4b      	ldrb	r3, [r1, #13]
    6312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6316:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6318:	f105 0020 	add.w	r0, r5, #32
    631c:	f7ff f9d2 	bl	56c4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6320:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6322:	7b63      	ldrb	r3, [r4, #13]
    6324:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6328:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    632a:	4b2d      	ldr	r3, [pc, #180]	; (63e0 <z_impl_k_yield+0x134>)
    632c:	429c      	cmp	r4, r3
    632e:	d109      	bne.n	6344 <z_impl_k_yield+0x98>
    6330:	492c      	ldr	r1, [pc, #176]	; (63e4 <z_impl_k_yield+0x138>)
    6332:	4824      	ldr	r0, [pc, #144]	; (63c4 <z_impl_k_yield+0x118>)
    6334:	4a22      	ldr	r2, [pc, #136]	; (63c0 <z_impl_k_yield+0x114>)
    6336:	23ba      	movs	r3, #186	; 0xba
    6338:	f001 fe2b 	bl	7f92 <printk>
    633c:	4820      	ldr	r0, [pc, #128]	; (63c0 <z_impl_k_yield+0x114>)
    633e:	21ba      	movs	r1, #186	; 0xba
    6340:	f001 fd50 	bl	7de4 <assert_post_action>
	return list->head == list;
    6344:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6346:	4828      	ldr	r0, [pc, #160]	; (63e8 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6348:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    634a:	4283      	cmp	r3, r0
    634c:	bf08      	it	eq
    634e:	2300      	moveq	r3, #0
    6350:	2b00      	cmp	r3, #0
    6352:	bf38      	it	cc
    6354:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6356:	b35b      	cbz	r3, 63b0 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6358:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    635c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6360:	4297      	cmp	r7, r2
    6362:	d021      	beq.n	63a8 <z_impl_k_yield+0xfc>
		return b2 - b1;
    6364:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6366:	2a00      	cmp	r2, #0
    6368:	dd1e      	ble.n	63a8 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    636a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    636c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6370:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6372:	605c      	str	r4, [r3, #4]
	update_cache(1);
    6374:	2001      	movs	r0, #1
    6376:	f7ff fa35 	bl	57e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    637a:	4814      	ldr	r0, [pc, #80]	; (63cc <z_impl_k_yield+0x120>)
    637c:	f000 fc8c 	bl	6c98 <z_spin_unlock_valid>
    6380:	b968      	cbnz	r0, 639e <z_impl_k_yield+0xf2>
    6382:	4a13      	ldr	r2, [pc, #76]	; (63d0 <z_impl_k_yield+0x124>)
    6384:	4919      	ldr	r1, [pc, #100]	; (63ec <z_impl_k_yield+0x140>)
    6386:	480f      	ldr	r0, [pc, #60]	; (63c4 <z_impl_k_yield+0x118>)
    6388:	23c3      	movs	r3, #195	; 0xc3
    638a:	f001 fe02 	bl	7f92 <printk>
    638e:	490f      	ldr	r1, [pc, #60]	; (63cc <z_impl_k_yield+0x120>)
    6390:	4817      	ldr	r0, [pc, #92]	; (63f0 <z_impl_k_yield+0x144>)
    6392:	f001 fdfe 	bl	7f92 <printk>
    6396:	480e      	ldr	r0, [pc, #56]	; (63d0 <z_impl_k_yield+0x124>)
    6398:	21c3      	movs	r1, #195	; 0xc3
    639a:	f001 fd23 	bl	7de4 <assert_post_action>
    639e:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    63a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    63a4:	f7fb bae8 	b.w	1978 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    63a8:	428b      	cmp	r3, r1
    63aa:	d001      	beq.n	63b0 <z_impl_k_yield+0x104>
    63ac:	681b      	ldr	r3, [r3, #0]
    63ae:	e7d2      	b.n	6356 <z_impl_k_yield+0xaa>
	node->prev = tail;
    63b0:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    63b4:	600c      	str	r4, [r1, #0]
	list->tail = node;
    63b6:	626c      	str	r4, [r5, #36]	; 0x24
}
    63b8:	e7dc      	b.n	6374 <z_impl_k_yield+0xc8>
    63ba:	bf00      	nop
    63bc:	000098cd 	.word	0x000098cd
    63c0:	00009aaa 	.word	0x00009aaa
    63c4:	00008e27 	.word	0x00008e27
    63c8:	00009946 	.word	0x00009946
    63cc:	20000a60 	.word	0x20000a60
    63d0:	00008f3a 	.word	0x00008f3a
    63d4:	00008f8c 	.word	0x00008f8c
    63d8:	00008fa1 	.word	0x00008fa1
    63dc:	20000a2c 	.word	0x20000a2c
    63e0:	20000278 	.word	0x20000278
    63e4:	00009acc 	.word	0x00009acc
    63e8:	20000a4c 	.word	0x20000a4c
    63ec:	00008f60 	.word	0x00008f60
    63f0:	00008f77 	.word	0x00008f77

000063f4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    63f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63f8:	4604      	mov	r4, r0
    63fa:	460d      	mov	r5, r1
    63fc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6400:	b173      	cbz	r3, 6420 <z_tick_sleep+0x2c>
    6402:	4945      	ldr	r1, [pc, #276]	; (6518 <z_tick_sleep+0x124>)
    6404:	4a45      	ldr	r2, [pc, #276]	; (651c <z_tick_sleep+0x128>)
    6406:	4846      	ldr	r0, [pc, #280]	; (6520 <z_tick_sleep+0x12c>)
    6408:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    640c:	f001 fdc1 	bl	7f92 <printk>
    6410:	4844      	ldr	r0, [pc, #272]	; (6524 <z_tick_sleep+0x130>)
    6412:	f001 fdbe 	bl	7f92 <printk>
    6416:	4841      	ldr	r0, [pc, #260]	; (651c <z_tick_sleep+0x128>)
    6418:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    641c:	f001 fce2 	bl	7de4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6420:	ea54 0305 	orrs.w	r3, r4, r5
    6424:	d104      	bne.n	6430 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    6426:	f7ff ff41 	bl	62ac <z_impl_k_yield>
		k_yield();
		return 0;
    642a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    6430:	f06f 0301 	mvn.w	r3, #1
    6434:	1b1e      	subs	r6, r3, r4
    6436:	f04f 33ff 	mov.w	r3, #4294967295
    643a:	eb63 0705 	sbc.w	r7, r3, r5
    643e:	2e01      	cmp	r6, #1
    6440:	f177 0300 	sbcs.w	r3, r7, #0
    6444:	da64      	bge.n	6510 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6446:	f002 f928 	bl	869a <sys_clock_tick_get_32>
    644a:	1906      	adds	r6, r0, r4
    644c:	f04f 0320 	mov.w	r3, #32
    6450:	f3ef 8811 	mrs	r8, BASEPRI
    6454:	f383 8812 	msr	BASEPRI_MAX, r3
    6458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    645c:	4832      	ldr	r0, [pc, #200]	; (6528 <z_tick_sleep+0x134>)
    645e:	f000 fc0d 	bl	6c7c <z_spin_lock_valid>
    6462:	b968      	cbnz	r0, 6480 <z_tick_sleep+0x8c>
    6464:	4a31      	ldr	r2, [pc, #196]	; (652c <z_tick_sleep+0x138>)
    6466:	4932      	ldr	r1, [pc, #200]	; (6530 <z_tick_sleep+0x13c>)
    6468:	482d      	ldr	r0, [pc, #180]	; (6520 <z_tick_sleep+0x12c>)
    646a:	2381      	movs	r3, #129	; 0x81
    646c:	f001 fd91 	bl	7f92 <printk>
    6470:	492d      	ldr	r1, [pc, #180]	; (6528 <z_tick_sleep+0x134>)
    6472:	4830      	ldr	r0, [pc, #192]	; (6534 <z_tick_sleep+0x140>)
    6474:	f001 fd8d 	bl	7f92 <printk>
    6478:	482c      	ldr	r0, [pc, #176]	; (652c <z_tick_sleep+0x138>)
    647a:	2181      	movs	r1, #129	; 0x81
    647c:	f001 fcb2 	bl	7de4 <assert_post_action>
	pending_current = _current;
    6480:	4f2d      	ldr	r7, [pc, #180]	; (6538 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    6482:	4829      	ldr	r0, [pc, #164]	; (6528 <z_tick_sleep+0x134>)
    6484:	f000 fc18 	bl	6cb8 <z_spin_lock_set_owner>
    6488:	4b2c      	ldr	r3, [pc, #176]	; (653c <z_tick_sleep+0x148>)
    648a:	68b8      	ldr	r0, [r7, #8]
    648c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    648e:	f7ff fbf7 	bl	5c80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6492:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6494:	492a      	ldr	r1, [pc, #168]	; (6540 <z_tick_sleep+0x14c>)
    6496:	4622      	mov	r2, r4
    6498:	462b      	mov	r3, r5
    649a:	3018      	adds	r0, #24
    649c:	f000 fc64 	bl	6d68 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    64a0:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64a2:	4821      	ldr	r0, [pc, #132]	; (6528 <z_tick_sleep+0x134>)
    64a4:	7b53      	ldrb	r3, [r2, #13]
    64a6:	f043 0310 	orr.w	r3, r3, #16
    64aa:	7353      	strb	r3, [r2, #13]
    64ac:	f000 fbf4 	bl	6c98 <z_spin_unlock_valid>
    64b0:	b968      	cbnz	r0, 64ce <z_tick_sleep+0xda>
    64b2:	4a1e      	ldr	r2, [pc, #120]	; (652c <z_tick_sleep+0x138>)
    64b4:	4923      	ldr	r1, [pc, #140]	; (6544 <z_tick_sleep+0x150>)
    64b6:	481a      	ldr	r0, [pc, #104]	; (6520 <z_tick_sleep+0x12c>)
    64b8:	23c3      	movs	r3, #195	; 0xc3
    64ba:	f001 fd6a 	bl	7f92 <printk>
    64be:	491a      	ldr	r1, [pc, #104]	; (6528 <z_tick_sleep+0x134>)
    64c0:	4821      	ldr	r0, [pc, #132]	; (6548 <z_tick_sleep+0x154>)
    64c2:	f001 fd66 	bl	7f92 <printk>
    64c6:	4819      	ldr	r0, [pc, #100]	; (652c <z_tick_sleep+0x138>)
    64c8:	21c3      	movs	r1, #195	; 0xc3
    64ca:	f001 fc8b 	bl	7de4 <assert_post_action>
    64ce:	4640      	mov	r0, r8
    64d0:	f7fb fa52 	bl	1978 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    64d4:	68bb      	ldr	r3, [r7, #8]
    64d6:	7b5b      	ldrb	r3, [r3, #13]
    64d8:	06db      	lsls	r3, r3, #27
    64da:	d50e      	bpl.n	64fa <z_tick_sleep+0x106>
    64dc:	491b      	ldr	r1, [pc, #108]	; (654c <z_tick_sleep+0x158>)
    64de:	4a0f      	ldr	r2, [pc, #60]	; (651c <z_tick_sleep+0x128>)
    64e0:	480f      	ldr	r0, [pc, #60]	; (6520 <z_tick_sleep+0x12c>)
    64e2:	f240 5319 	movw	r3, #1305	; 0x519
    64e6:	f001 fd54 	bl	7f92 <printk>
    64ea:	480e      	ldr	r0, [pc, #56]	; (6524 <z_tick_sleep+0x130>)
    64ec:	f001 fd51 	bl	7f92 <printk>
    64f0:	480a      	ldr	r0, [pc, #40]	; (651c <z_tick_sleep+0x128>)
    64f2:	f240 5119 	movw	r1, #1305	; 0x519
    64f6:	f001 fc75 	bl	7de4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    64fa:	f002 f8ce 	bl	869a <sys_clock_tick_get_32>
    64fe:	1a30      	subs	r0, r6, r0
    6500:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    6504:	2801      	cmp	r0, #1
    6506:	f171 0300 	sbcs.w	r3, r1, #0
    650a:	bfb8      	it	lt
    650c:	2000      	movlt	r0, #0
    650e:	e78d      	b.n	642c <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6510:	f06f 0601 	mvn.w	r6, #1
    6514:	1b36      	subs	r6, r6, r4
    6516:	e799      	b.n	644c <z_tick_sleep+0x58>
    6518:	000098cd 	.word	0x000098cd
    651c:	00009aaa 	.word	0x00009aaa
    6520:	00008e27 	.word	0x00008e27
    6524:	00009946 	.word	0x00009946
    6528:	20000a60 	.word	0x20000a60
    652c:	00008f3a 	.word	0x00008f3a
    6530:	00008f8c 	.word	0x00008f8c
    6534:	00008fa1 	.word	0x00008fa1
    6538:	20000a2c 	.word	0x20000a2c
    653c:	20000a5c 	.word	0x20000a5c
    6540:	00005bcd 	.word	0x00005bcd
    6544:	00008f60 	.word	0x00008f60
    6548:	00008f77 	.word	0x00008f77
    654c:	00009b5c 	.word	0x00009b5c

00006550 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6550:	b538      	push	{r3, r4, r5, lr}
    6552:	4604      	mov	r4, r0
    6554:	460d      	mov	r5, r1
    6556:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    655a:	b173      	cbz	r3, 657a <z_impl_k_sleep+0x2a>
    655c:	4913      	ldr	r1, [pc, #76]	; (65ac <z_impl_k_sleep+0x5c>)
    655e:	4a14      	ldr	r2, [pc, #80]	; (65b0 <z_impl_k_sleep+0x60>)
    6560:	4814      	ldr	r0, [pc, #80]	; (65b4 <z_impl_k_sleep+0x64>)
    6562:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    6566:	f001 fd14 	bl	7f92 <printk>
    656a:	4813      	ldr	r0, [pc, #76]	; (65b8 <z_impl_k_sleep+0x68>)
    656c:	f001 fd11 	bl	7f92 <printk>
    6570:	480f      	ldr	r0, [pc, #60]	; (65b0 <z_impl_k_sleep+0x60>)
    6572:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    6576:	f001 fc35 	bl	7de4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    657a:	1c6b      	adds	r3, r5, #1
    657c:	bf08      	it	eq
    657e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    6582:	d106      	bne.n	6592 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    6584:	4b0d      	ldr	r3, [pc, #52]	; (65bc <z_impl_k_sleep+0x6c>)
    6586:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6588:	f7ff fd02 	bl	5f90 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    658c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6590:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6592:	4620      	mov	r0, r4
    6594:	4629      	mov	r1, r5
    6596:	f7ff ff2d 	bl	63f4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    659a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    659e:	fb80 3403 	smull	r3, r4, r0, r3
    65a2:	0bd8      	lsrs	r0, r3, #15
    65a4:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    65a8:	e7f2      	b.n	6590 <z_impl_k_sleep+0x40>
    65aa:	bf00      	nop
    65ac:	000098cd 	.word	0x000098cd
    65b0:	00009aaa 	.word	0x00009aaa
    65b4:	00008e27 	.word	0x00008e27
    65b8:	00009946 	.word	0x00009946
    65bc:	20000a2c 	.word	0x20000a2c

000065c0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    65c0:	4b01      	ldr	r3, [pc, #4]	; (65c8 <z_impl_z_current_get+0x8>)
    65c2:	6898      	ldr	r0, [r3, #8]
    65c4:	4770      	bx	lr
    65c6:	bf00      	nop
    65c8:	20000a2c 	.word	0x20000a2c

000065cc <z_impl_k_is_preempt_thread>:
    65cc:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    65d0:	b93b      	cbnz	r3, 65e2 <z_impl_k_is_preempt_thread+0x16>
    65d2:	4b05      	ldr	r3, [pc, #20]	; (65e8 <z_impl_k_is_preempt_thread+0x1c>)
    65d4:	689b      	ldr	r3, [r3, #8]
    65d6:	89d8      	ldrh	r0, [r3, #14]
    65d8:	287f      	cmp	r0, #127	; 0x7f
    65da:	bf8c      	ite	hi
    65dc:	2000      	movhi	r0, #0
    65de:	2001      	movls	r0, #1
    65e0:	4770      	bx	lr
    65e2:	2000      	movs	r0, #0
}
    65e4:	4770      	bx	lr
    65e6:	bf00      	nop
    65e8:	20000a2c 	.word	0x20000a2c

000065ec <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    65ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65f0:	4604      	mov	r4, r0
    65f2:	f04f 0320 	mov.w	r3, #32
    65f6:	f3ef 8611 	mrs	r6, BASEPRI
    65fa:	f383 8812 	msr	BASEPRI_MAX, r3
    65fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6602:	4848      	ldr	r0, [pc, #288]	; (6724 <z_thread_abort+0x138>)
    6604:	f000 fb3a 	bl	6c7c <z_spin_lock_valid>
    6608:	b968      	cbnz	r0, 6626 <z_thread_abort+0x3a>
    660a:	4a47      	ldr	r2, [pc, #284]	; (6728 <z_thread_abort+0x13c>)
    660c:	4947      	ldr	r1, [pc, #284]	; (672c <z_thread_abort+0x140>)
    660e:	4848      	ldr	r0, [pc, #288]	; (6730 <z_thread_abort+0x144>)
    6610:	2381      	movs	r3, #129	; 0x81
    6612:	f001 fcbe 	bl	7f92 <printk>
    6616:	4943      	ldr	r1, [pc, #268]	; (6724 <z_thread_abort+0x138>)
    6618:	4846      	ldr	r0, [pc, #280]	; (6734 <z_thread_abort+0x148>)
    661a:	f001 fcba 	bl	7f92 <printk>
    661e:	4842      	ldr	r0, [pc, #264]	; (6728 <z_thread_abort+0x13c>)
    6620:	2181      	movs	r1, #129	; 0x81
    6622:	f001 fbdf 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6626:	483f      	ldr	r0, [pc, #252]	; (6724 <z_thread_abort+0x138>)
    6628:	f000 fb46 	bl	6cb8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    662c:	7b63      	ldrb	r3, [r4, #13]
    662e:	071a      	lsls	r2, r3, #28
    6630:	d517      	bpl.n	6662 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6632:	483c      	ldr	r0, [pc, #240]	; (6724 <z_thread_abort+0x138>)
    6634:	f000 fb30 	bl	6c98 <z_spin_unlock_valid>
    6638:	b968      	cbnz	r0, 6656 <z_thread_abort+0x6a>
    663a:	4a3b      	ldr	r2, [pc, #236]	; (6728 <z_thread_abort+0x13c>)
    663c:	493e      	ldr	r1, [pc, #248]	; (6738 <z_thread_abort+0x14c>)
    663e:	483c      	ldr	r0, [pc, #240]	; (6730 <z_thread_abort+0x144>)
    6640:	23ac      	movs	r3, #172	; 0xac
    6642:	f001 fca6 	bl	7f92 <printk>
    6646:	4937      	ldr	r1, [pc, #220]	; (6724 <z_thread_abort+0x138>)
    6648:	483c      	ldr	r0, [pc, #240]	; (673c <z_thread_abort+0x150>)
    664a:	f001 fca2 	bl	7f92 <printk>
    664e:	4836      	ldr	r0, [pc, #216]	; (6728 <z_thread_abort+0x13c>)
    6650:	21ac      	movs	r1, #172	; 0xac
    6652:	f001 fbc7 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    6656:	f386 8811 	msr	BASEPRI, r6
    665a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6662:	f023 0220 	bic.w	r2, r3, #32
    6666:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    666a:	09d2      	lsrs	r2, r2, #7
    666c:	d142      	bne.n	66f4 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    666e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6670:	68a3      	ldr	r3, [r4, #8]
    6672:	b113      	cbz	r3, 667a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6674:	4620      	mov	r0, r4
    6676:	f7ff f847 	bl	5708 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    667a:	f104 0018 	add.w	r0, r4, #24
    667e:	f000 fc47 	bl	6f10 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6682:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6686:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    668a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    668c:	42bd      	cmp	r5, r7
    668e:	d001      	beq.n	6694 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6690:	2d00      	cmp	r5, #0
    6692:	d139      	bne.n	6708 <z_thread_abort+0x11c>
		update_cache(1);
    6694:	2001      	movs	r0, #1
    6696:	f7ff f8a5 	bl	57e4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    669a:	4b29      	ldr	r3, [pc, #164]	; (6740 <z_thread_abort+0x154>)
    669c:	689b      	ldr	r3, [r3, #8]
    669e:	42a3      	cmp	r3, r4
    66a0:	d1c7      	bne.n	6632 <z_thread_abort+0x46>
    66a2:	f3ef 8305 	mrs	r3, IPSR
    66a6:	2b00      	cmp	r3, #0
    66a8:	d1c3      	bne.n	6632 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66aa:	481e      	ldr	r0, [pc, #120]	; (6724 <z_thread_abort+0x138>)
    66ac:	f000 faf4 	bl	6c98 <z_spin_unlock_valid>
    66b0:	b968      	cbnz	r0, 66ce <z_thread_abort+0xe2>
    66b2:	4a1d      	ldr	r2, [pc, #116]	; (6728 <z_thread_abort+0x13c>)
    66b4:	4920      	ldr	r1, [pc, #128]	; (6738 <z_thread_abort+0x14c>)
    66b6:	481e      	ldr	r0, [pc, #120]	; (6730 <z_thread_abort+0x144>)
    66b8:	23c3      	movs	r3, #195	; 0xc3
    66ba:	f001 fc6a 	bl	7f92 <printk>
    66be:	4919      	ldr	r1, [pc, #100]	; (6724 <z_thread_abort+0x138>)
    66c0:	481e      	ldr	r0, [pc, #120]	; (673c <z_thread_abort+0x150>)
    66c2:	f001 fc66 	bl	7f92 <printk>
    66c6:	4818      	ldr	r0, [pc, #96]	; (6728 <z_thread_abort+0x13c>)
    66c8:	21c3      	movs	r1, #195	; 0xc3
    66ca:	f001 fb8b 	bl	7de4 <assert_post_action>
    66ce:	4630      	mov	r0, r6
    66d0:	f7fb f952 	bl	1978 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    66d4:	4a1b      	ldr	r2, [pc, #108]	; (6744 <z_thread_abort+0x158>)
    66d6:	491c      	ldr	r1, [pc, #112]	; (6748 <z_thread_abort+0x15c>)
    66d8:	4815      	ldr	r0, [pc, #84]	; (6730 <z_thread_abort+0x144>)
    66da:	f240 634b 	movw	r3, #1611	; 0x64b
    66de:	f001 fc58 	bl	7f92 <printk>
    66e2:	481a      	ldr	r0, [pc, #104]	; (674c <z_thread_abort+0x160>)
    66e4:	f001 fc55 	bl	7f92 <printk>
    66e8:	4816      	ldr	r0, [pc, #88]	; (6744 <z_thread_abort+0x158>)
    66ea:	f240 614b 	movw	r1, #1611	; 0x64b
    66ee:	f001 fb79 	bl	7de4 <assert_post_action>
    66f2:	e79e      	b.n	6632 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    66f4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    66f8:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    66fc:	4814      	ldr	r0, [pc, #80]	; (6750 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    66fe:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6700:	4621      	mov	r1, r4
    6702:	f7fe ffdf 	bl	56c4 <z_priq_dumb_remove>
}
    6706:	e7b3      	b.n	6670 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6708:	4628      	mov	r0, r5
    670a:	f7fe fffd 	bl	5708 <unpend_thread_no_timeout>
    670e:	f105 0018 	add.w	r0, r5, #24
    6712:	f000 fbfd 	bl	6f10 <z_abort_timeout>
    6716:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    671a:	4628      	mov	r0, r5
    671c:	f7ff f968 	bl	59f0 <ready_thread>
    6720:	e7b3      	b.n	668a <z_thread_abort+0x9e>
    6722:	bf00      	nop
    6724:	20000a60 	.word	0x20000a60
    6728:	00008f3a 	.word	0x00008f3a
    672c:	00008f8c 	.word	0x00008f8c
    6730:	00008e27 	.word	0x00008e27
    6734:	00008fa1 	.word	0x00008fa1
    6738:	00008f60 	.word	0x00008f60
    673c:	00008f77 	.word	0x00008f77
    6740:	20000a2c 	.word	0x20000a2c
    6744:	00009aaa 	.word	0x00009aaa
    6748:	00009606 	.word	0x00009606
    674c:	00009b9c 	.word	0x00009b9c
    6750:	20000a4c 	.word	0x20000a4c

00006754 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    6754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6756:	4604      	mov	r4, r0
    6758:	460e      	mov	r6, r1
    675a:	4615      	mov	r5, r2
	__asm__ volatile(
    675c:	f04f 0320 	mov.w	r3, #32
    6760:	f3ef 8711 	mrs	r7, BASEPRI
    6764:	f383 8812 	msr	BASEPRI_MAX, r3
    6768:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    676c:	481e      	ldr	r0, [pc, #120]	; (67e8 <z_sched_wake+0x94>)
    676e:	f000 fa85 	bl	6c7c <z_spin_lock_valid>
    6772:	b968      	cbnz	r0, 6790 <z_sched_wake+0x3c>
    6774:	4a1d      	ldr	r2, [pc, #116]	; (67ec <z_sched_wake+0x98>)
    6776:	491e      	ldr	r1, [pc, #120]	; (67f0 <z_sched_wake+0x9c>)
    6778:	481e      	ldr	r0, [pc, #120]	; (67f4 <z_sched_wake+0xa0>)
    677a:	2381      	movs	r3, #129	; 0x81
    677c:	f001 fc09 	bl	7f92 <printk>
    6780:	4919      	ldr	r1, [pc, #100]	; (67e8 <z_sched_wake+0x94>)
    6782:	481d      	ldr	r0, [pc, #116]	; (67f8 <z_sched_wake+0xa4>)
    6784:	f001 fc05 	bl	7f92 <printk>
    6788:	4818      	ldr	r0, [pc, #96]	; (67ec <z_sched_wake+0x98>)
    678a:	2181      	movs	r1, #129	; 0x81
    678c:	f001 fb2a 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6790:	4815      	ldr	r0, [pc, #84]	; (67e8 <z_sched_wake+0x94>)
    6792:	f000 fa91 	bl	6cb8 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    6796:	4620      	mov	r0, r4
    6798:	f001 ff6a 	bl	8670 <z_priq_dumb_best>

		if (thread != NULL) {
    679c:	4604      	mov	r4, r0
    679e:	b158      	cbz	r0, 67b8 <z_sched_wake+0x64>
    67a0:	67c6      	str	r6, [r0, #124]	; 0x7c
    67a2:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    67a4:	f7fe ffb0 	bl	5708 <unpend_thread_no_timeout>
    67a8:	f104 0018 	add.w	r0, r4, #24
    67ac:	f000 fbb0 	bl	6f10 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    67b0:	4620      	mov	r0, r4
    67b2:	f7ff f91d 	bl	59f0 <ready_thread>
			ret = true;
    67b6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67b8:	480b      	ldr	r0, [pc, #44]	; (67e8 <z_sched_wake+0x94>)
    67ba:	f000 fa6d 	bl	6c98 <z_spin_unlock_valid>
    67be:	b968      	cbnz	r0, 67dc <z_sched_wake+0x88>
    67c0:	4a0a      	ldr	r2, [pc, #40]	; (67ec <z_sched_wake+0x98>)
    67c2:	490e      	ldr	r1, [pc, #56]	; (67fc <z_sched_wake+0xa8>)
    67c4:	480b      	ldr	r0, [pc, #44]	; (67f4 <z_sched_wake+0xa0>)
    67c6:	23ac      	movs	r3, #172	; 0xac
    67c8:	f001 fbe3 	bl	7f92 <printk>
    67cc:	4906      	ldr	r1, [pc, #24]	; (67e8 <z_sched_wake+0x94>)
    67ce:	480c      	ldr	r0, [pc, #48]	; (6800 <z_sched_wake+0xac>)
    67d0:	f001 fbdf 	bl	7f92 <printk>
    67d4:	4805      	ldr	r0, [pc, #20]	; (67ec <z_sched_wake+0x98>)
    67d6:	21ac      	movs	r1, #172	; 0xac
    67d8:	f001 fb04 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    67dc:	f387 8811 	msr	BASEPRI, r7
    67e0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    67e4:	4620      	mov	r0, r4
    67e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67e8:	20000a60 	.word	0x20000a60
    67ec:	00008f3a 	.word	0x00008f3a
    67f0:	00008f8c 	.word	0x00008f8c
    67f4:	00008e27 	.word	0x00008e27
    67f8:	00008fa1 	.word	0x00008fa1
    67fc:	00008f60 	.word	0x00008f60
    6800:	00008f77 	.word	0x00008f77

00006804 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6804:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6806:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    680a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    680c:	e9cd 6700 	strd	r6, r7, [sp]
    6810:	f7ff faf2 	bl	5df8 <z_pend_curr>

	if (data != NULL) {
    6814:	b11c      	cbz	r4, 681e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6816:	4b03      	ldr	r3, [pc, #12]	; (6824 <z_sched_wait+0x20>)
    6818:	689b      	ldr	r3, [r3, #8]
    681a:	695b      	ldr	r3, [r3, #20]
    681c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    681e:	b002      	add	sp, #8
    6820:	bdd0      	pop	{r4, r6, r7, pc}
    6822:	bf00      	nop
    6824:	20000a2c 	.word	0x20000a2c

00006828 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6828:	b538      	push	{r3, r4, r5, lr}
    682a:	4604      	mov	r4, r0
	__asm__ volatile(
    682c:	f04f 0320 	mov.w	r3, #32
    6830:	f3ef 8511 	mrs	r5, BASEPRI
    6834:	f383 8812 	msr	BASEPRI_MAX, r3
    6838:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    683c:	4817      	ldr	r0, [pc, #92]	; (689c <z_impl_k_sem_give+0x74>)
    683e:	f000 fa1d 	bl	6c7c <z_spin_lock_valid>
    6842:	b968      	cbnz	r0, 6860 <z_impl_k_sem_give+0x38>
    6844:	4a16      	ldr	r2, [pc, #88]	; (68a0 <z_impl_k_sem_give+0x78>)
    6846:	4917      	ldr	r1, [pc, #92]	; (68a4 <z_impl_k_sem_give+0x7c>)
    6848:	4817      	ldr	r0, [pc, #92]	; (68a8 <z_impl_k_sem_give+0x80>)
    684a:	2381      	movs	r3, #129	; 0x81
    684c:	f001 fba1 	bl	7f92 <printk>
    6850:	4912      	ldr	r1, [pc, #72]	; (689c <z_impl_k_sem_give+0x74>)
    6852:	4816      	ldr	r0, [pc, #88]	; (68ac <z_impl_k_sem_give+0x84>)
    6854:	f001 fb9d 	bl	7f92 <printk>
    6858:	4811      	ldr	r0, [pc, #68]	; (68a0 <z_impl_k_sem_give+0x78>)
    685a:	2181      	movs	r1, #129	; 0x81
    685c:	f001 fac2 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6860:	480e      	ldr	r0, [pc, #56]	; (689c <z_impl_k_sem_give+0x74>)
    6862:	f000 fa29 	bl	6cb8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6866:	4620      	mov	r0, r4
    6868:	f7ff fcc4 	bl	61f4 <z_unpend_first_thread>

	if (thread != NULL) {
    686c:	b148      	cbz	r0, 6882 <z_impl_k_sem_give+0x5a>
    686e:	2200      	movs	r2, #0
    6870:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6872:	f7ff f90f 	bl	5a94 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6876:	4629      	mov	r1, r5
    6878:	4808      	ldr	r0, [pc, #32]	; (689c <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    687a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    687e:	f7fe be69 	b.w	5554 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6882:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6886:	429a      	cmp	r2, r3
    6888:	bf18      	it	ne
    688a:	3301      	addne	r3, #1
    688c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    688e:	2102      	movs	r1, #2
    6890:	f104 0010 	add.w	r0, r4, #16
    6894:	f001 fec8 	bl	8628 <z_handle_obj_poll_events>
}
    6898:	e7ed      	b.n	6876 <z_impl_k_sem_give+0x4e>
    689a:	bf00      	nop
    689c:	20000a6c 	.word	0x20000a6c
    68a0:	00008f3a 	.word	0x00008f3a
    68a4:	00008f8c 	.word	0x00008f8c
    68a8:	00008e27 	.word	0x00008e27
    68ac:	00008fa1 	.word	0x00008fa1

000068b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    68b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68b2:	4604      	mov	r4, r0
    68b4:	4616      	mov	r6, r2
    68b6:	461f      	mov	r7, r3
    68b8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    68bc:	b17b      	cbz	r3, 68de <z_impl_k_sem_take+0x2e>
    68be:	ea56 0307 	orrs.w	r3, r6, r7
    68c2:	d00c      	beq.n	68de <z_impl_k_sem_take+0x2e>
    68c4:	4935      	ldr	r1, [pc, #212]	; (699c <z_impl_k_sem_take+0xec>)
    68c6:	4a36      	ldr	r2, [pc, #216]	; (69a0 <z_impl_k_sem_take+0xf0>)
    68c8:	4836      	ldr	r0, [pc, #216]	; (69a4 <z_impl_k_sem_take+0xf4>)
    68ca:	2379      	movs	r3, #121	; 0x79
    68cc:	f001 fb61 	bl	7f92 <printk>
    68d0:	4835      	ldr	r0, [pc, #212]	; (69a8 <z_impl_k_sem_take+0xf8>)
    68d2:	f001 fb5e 	bl	7f92 <printk>
    68d6:	4832      	ldr	r0, [pc, #200]	; (69a0 <z_impl_k_sem_take+0xf0>)
    68d8:	2179      	movs	r1, #121	; 0x79
    68da:	f001 fa83 	bl	7de4 <assert_post_action>
    68de:	f04f 0320 	mov.w	r3, #32
    68e2:	f3ef 8511 	mrs	r5, BASEPRI
    68e6:	f383 8812 	msr	BASEPRI_MAX, r3
    68ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    68ee:	482f      	ldr	r0, [pc, #188]	; (69ac <z_impl_k_sem_take+0xfc>)
    68f0:	f000 f9c4 	bl	6c7c <z_spin_lock_valid>
    68f4:	b968      	cbnz	r0, 6912 <z_impl_k_sem_take+0x62>
    68f6:	4a2e      	ldr	r2, [pc, #184]	; (69b0 <z_impl_k_sem_take+0x100>)
    68f8:	492e      	ldr	r1, [pc, #184]	; (69b4 <z_impl_k_sem_take+0x104>)
    68fa:	482a      	ldr	r0, [pc, #168]	; (69a4 <z_impl_k_sem_take+0xf4>)
    68fc:	2381      	movs	r3, #129	; 0x81
    68fe:	f001 fb48 	bl	7f92 <printk>
    6902:	492a      	ldr	r1, [pc, #168]	; (69ac <z_impl_k_sem_take+0xfc>)
    6904:	482c      	ldr	r0, [pc, #176]	; (69b8 <z_impl_k_sem_take+0x108>)
    6906:	f001 fb44 	bl	7f92 <printk>
    690a:	4829      	ldr	r0, [pc, #164]	; (69b0 <z_impl_k_sem_take+0x100>)
    690c:	2181      	movs	r1, #129	; 0x81
    690e:	f001 fa69 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6912:	4826      	ldr	r0, [pc, #152]	; (69ac <z_impl_k_sem_take+0xfc>)
    6914:	f000 f9d0 	bl	6cb8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6918:	68a3      	ldr	r3, [r4, #8]
    691a:	b1d3      	cbz	r3, 6952 <z_impl_k_sem_take+0xa2>
		sem->count--;
    691c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    691e:	4823      	ldr	r0, [pc, #140]	; (69ac <z_impl_k_sem_take+0xfc>)
    6920:	60a3      	str	r3, [r4, #8]
    6922:	f000 f9b9 	bl	6c98 <z_spin_unlock_valid>
    6926:	b968      	cbnz	r0, 6944 <z_impl_k_sem_take+0x94>
    6928:	4a21      	ldr	r2, [pc, #132]	; (69b0 <z_impl_k_sem_take+0x100>)
    692a:	4924      	ldr	r1, [pc, #144]	; (69bc <z_impl_k_sem_take+0x10c>)
    692c:	481d      	ldr	r0, [pc, #116]	; (69a4 <z_impl_k_sem_take+0xf4>)
    692e:	23ac      	movs	r3, #172	; 0xac
    6930:	f001 fb2f 	bl	7f92 <printk>
    6934:	491d      	ldr	r1, [pc, #116]	; (69ac <z_impl_k_sem_take+0xfc>)
    6936:	4822      	ldr	r0, [pc, #136]	; (69c0 <z_impl_k_sem_take+0x110>)
    6938:	f001 fb2b 	bl	7f92 <printk>
    693c:	481c      	ldr	r0, [pc, #112]	; (69b0 <z_impl_k_sem_take+0x100>)
    693e:	21ac      	movs	r1, #172	; 0xac
    6940:	f001 fa50 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    6944:	f385 8811 	msr	BASEPRI, r5
    6948:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    694c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    694e:	b003      	add	sp, #12
    6950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6952:	ea56 0307 	orrs.w	r3, r6, r7
    6956:	d118      	bne.n	698a <z_impl_k_sem_take+0xda>
    6958:	4814      	ldr	r0, [pc, #80]	; (69ac <z_impl_k_sem_take+0xfc>)
    695a:	f000 f99d 	bl	6c98 <z_spin_unlock_valid>
    695e:	b968      	cbnz	r0, 697c <z_impl_k_sem_take+0xcc>
    6960:	4a13      	ldr	r2, [pc, #76]	; (69b0 <z_impl_k_sem_take+0x100>)
    6962:	4916      	ldr	r1, [pc, #88]	; (69bc <z_impl_k_sem_take+0x10c>)
    6964:	480f      	ldr	r0, [pc, #60]	; (69a4 <z_impl_k_sem_take+0xf4>)
    6966:	23ac      	movs	r3, #172	; 0xac
    6968:	f001 fb13 	bl	7f92 <printk>
    696c:	490f      	ldr	r1, [pc, #60]	; (69ac <z_impl_k_sem_take+0xfc>)
    696e:	4814      	ldr	r0, [pc, #80]	; (69c0 <z_impl_k_sem_take+0x110>)
    6970:	f001 fb0f 	bl	7f92 <printk>
    6974:	480e      	ldr	r0, [pc, #56]	; (69b0 <z_impl_k_sem_take+0x100>)
    6976:	21ac      	movs	r1, #172	; 0xac
    6978:	f001 fa34 	bl	7de4 <assert_post_action>
    697c:	f385 8811 	msr	BASEPRI, r5
    6980:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6984:	f06f 000f 	mvn.w	r0, #15
    6988:	e7e1      	b.n	694e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    698a:	e9cd 6700 	strd	r6, r7, [sp]
    698e:	4622      	mov	r2, r4
    6990:	4629      	mov	r1, r5
    6992:	4806      	ldr	r0, [pc, #24]	; (69ac <z_impl_k_sem_take+0xfc>)
    6994:	f7ff fa30 	bl	5df8 <z_pend_curr>
	return ret;
    6998:	e7d9      	b.n	694e <z_impl_k_sem_take+0x9e>
    699a:	bf00      	nop
    699c:	00009bde 	.word	0x00009bde
    69a0:	00009bbe 	.word	0x00009bbe
    69a4:	00008e27 	.word	0x00008e27
    69a8:	00009946 	.word	0x00009946
    69ac:	20000a6c 	.word	0x20000a6c
    69b0:	00008f3a 	.word	0x00008f3a
    69b4:	00008f8c 	.word	0x00008f8c
    69b8:	00008fa1 	.word	0x00008fa1
    69bc:	00008f60 	.word	0x00008f60
    69c0:	00008f77 	.word	0x00008f77

000069c4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    69c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    69c6:	4b09      	ldr	r3, [pc, #36]	; (69ec <k_sys_work_q_init+0x28>)
    69c8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    69ca:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    69cc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    69ce:	9300      	str	r3, [sp, #0]
    69d0:	4907      	ldr	r1, [pc, #28]	; (69f0 <k_sys_work_q_init+0x2c>)
    69d2:	4808      	ldr	r0, [pc, #32]	; (69f4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    69d4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    69d8:	f04f 33ff 	mov.w	r3, #4294967295
    69dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    69e0:	f000 ff88 	bl	78f4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    69e4:	4620      	mov	r0, r4
    69e6:	b004      	add	sp, #16
    69e8:	bd10      	pop	{r4, pc}
    69ea:	bf00      	nop
    69ec:	00009c2b 	.word	0x00009c2b
    69f0:	20001a00 	.word	0x20001a00
    69f4:	20000378 	.word	0x20000378

000069f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    69f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69fc:	b085      	sub	sp, #20
    69fe:	4604      	mov	r4, r0
    6a00:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6a04:	f1b8 0f0f 	cmp.w	r8, #15
{
    6a08:	460f      	mov	r7, r1
    6a0a:	4615      	mov	r5, r2
    6a0c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6a0e:	d132      	bne.n	6a76 <z_setup_new_thread+0x7e>
    6a10:	4b25      	ldr	r3, [pc, #148]	; (6aa8 <z_setup_new_thread+0xb0>)
    6a12:	4599      	cmp	r9, r3
    6a14:	d133      	bne.n	6a7e <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    6a16:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6a1a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6a1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a20:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a22:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6a24:	2304      	movs	r3, #4
    6a26:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a28:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6a2c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6a30:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6a36:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a3a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a3c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6a42:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6a44:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a48:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6a4a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a4c:	464b      	mov	r3, r9
	node->prev = NULL;
    6a4e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6a52:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6a54:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6a56:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a58:	4642      	mov	r2, r8
    6a5a:	4639      	mov	r1, r7
    6a5c:	4620      	mov	r0, r4
    6a5e:	f7fa ffa5 	bl	19ac <arch_new_thread>
	if (!_current) {
    6a62:	4b12      	ldr	r3, [pc, #72]	; (6aac <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6a64:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6a66:	689b      	ldr	r3, [r3, #8]
    6a68:	b103      	cbz	r3, 6a6c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    6a6c:	6763      	str	r3, [r4, #116]	; 0x74
}
    6a6e:	4640      	mov	r0, r8
    6a70:	b005      	add	sp, #20
    6a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6a76:	f108 0310 	add.w	r3, r8, #16
    6a7a:	2b1e      	cmp	r3, #30
    6a7c:	d9cb      	bls.n	6a16 <z_setup_new_thread+0x1e>
    6a7e:	4a0c      	ldr	r2, [pc, #48]	; (6ab0 <z_setup_new_thread+0xb8>)
    6a80:	490c      	ldr	r1, [pc, #48]	; (6ab4 <z_setup_new_thread+0xbc>)
    6a82:	480d      	ldr	r0, [pc, #52]	; (6ab8 <z_setup_new_thread+0xc0>)
    6a84:	f240 13ff 	movw	r3, #511	; 0x1ff
    6a88:	f001 fa83 	bl	7f92 <printk>
    6a8c:	4641      	mov	r1, r8
    6a8e:	480b      	ldr	r0, [pc, #44]	; (6abc <z_setup_new_thread+0xc4>)
    6a90:	f06f 030f 	mvn.w	r3, #15
    6a94:	220e      	movs	r2, #14
    6a96:	f001 fa7c 	bl	7f92 <printk>
    6a9a:	4805      	ldr	r0, [pc, #20]	; (6ab0 <z_setup_new_thread+0xb8>)
    6a9c:	f240 11ff 	movw	r1, #511	; 0x1ff
    6aa0:	f001 f9a0 	bl	7de4 <assert_post_action>
    6aa4:	e7b7      	b.n	6a16 <z_setup_new_thread+0x1e>
    6aa6:	bf00      	nop
    6aa8:	00004aa5 	.word	0x00004aa5
    6aac:	20000a2c 	.word	0x20000a2c
    6ab0:	00009c34 	.word	0x00009c34
    6ab4:	00009c57 	.word	0x00009c57
    6ab8:	00008e27 	.word	0x00008e27
    6abc:	00009cd7 	.word	0x00009cd7

00006ac0 <z_impl_k_thread_create>:
{
    6ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ac4:	b087      	sub	sp, #28
    6ac6:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    6aca:	4604      	mov	r4, r0
    6acc:	460d      	mov	r5, r1
    6ace:	4690      	mov	r8, r2
    6ad0:	4699      	mov	r9, r3
    6ad2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6ad6:	b173      	cbz	r3, 6af6 <z_impl_k_thread_create+0x36>
    6ad8:	491b      	ldr	r1, [pc, #108]	; (6b48 <z_impl_k_thread_create+0x88>)
    6ada:	4a1c      	ldr	r2, [pc, #112]	; (6b4c <z_impl_k_thread_create+0x8c>)
    6adc:	481c      	ldr	r0, [pc, #112]	; (6b50 <z_impl_k_thread_create+0x90>)
    6ade:	f44f 731a 	mov.w	r3, #616	; 0x268
    6ae2:	f001 fa56 	bl	7f92 <printk>
    6ae6:	481b      	ldr	r0, [pc, #108]	; (6b54 <z_impl_k_thread_create+0x94>)
    6ae8:	f001 fa53 	bl	7f92 <printk>
    6aec:	4817      	ldr	r0, [pc, #92]	; (6b4c <z_impl_k_thread_create+0x8c>)
    6aee:	f44f 711a 	mov.w	r1, #616	; 0x268
    6af2:	f001 f977 	bl	7de4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6af6:	2300      	movs	r3, #0
    6af8:	9305      	str	r3, [sp, #20]
    6afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6afc:	9304      	str	r3, [sp, #16]
    6afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6b00:	9303      	str	r3, [sp, #12]
    6b02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6b04:	9302      	str	r3, [sp, #8]
    6b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b08:	9301      	str	r3, [sp, #4]
    6b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6b0c:	9300      	str	r3, [sp, #0]
    6b0e:	4642      	mov	r2, r8
    6b10:	464b      	mov	r3, r9
    6b12:	4629      	mov	r1, r5
    6b14:	4620      	mov	r0, r4
    6b16:	f7ff ff6f 	bl	69f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6b1a:	1c7b      	adds	r3, r7, #1
    6b1c:	bf08      	it	eq
    6b1e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6b22:	d005      	beq.n	6b30 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6b24:	ea56 0307 	orrs.w	r3, r6, r7
    6b28:	d106      	bne.n	6b38 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    6b2a:	4620      	mov	r0, r4
    6b2c:	f7fe fffa 	bl	5b24 <z_sched_start>
}
    6b30:	4620      	mov	r0, r4
    6b32:	b007      	add	sp, #28
    6b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6b38:	4907      	ldr	r1, [pc, #28]	; (6b58 <z_impl_k_thread_create+0x98>)
    6b3a:	4632      	mov	r2, r6
    6b3c:	463b      	mov	r3, r7
    6b3e:	f104 0018 	add.w	r0, r4, #24
    6b42:	f000 f911 	bl	6d68 <z_add_timeout>
    6b46:	e7f3      	b.n	6b30 <z_impl_k_thread_create+0x70>
    6b48:	000098cd 	.word	0x000098cd
    6b4c:	00009c34 	.word	0x00009c34
    6b50:	00008e27 	.word	0x00008e27
    6b54:	00009d08 	.word	0x00009d08
    6b58:	00005bcd 	.word	0x00005bcd

00006b5c <z_init_static_threads>:
{
    6b5c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    6b60:	4f3f      	ldr	r7, [pc, #252]	; (6c60 <z_init_static_threads+0x104>)
    6b62:	4d40      	ldr	r5, [pc, #256]	; (6c64 <z_init_static_threads+0x108>)
    6b64:	f8df 810c 	ldr.w	r8, [pc, #268]	; 6c74 <z_init_static_threads+0x118>
{
    6b68:	b086      	sub	sp, #24
    6b6a:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6b6c:	42bd      	cmp	r5, r7
    6b6e:	d90e      	bls.n	6b8e <z_init_static_threads+0x32>
    6b70:	493d      	ldr	r1, [pc, #244]	; (6c68 <z_init_static_threads+0x10c>)
    6b72:	483e      	ldr	r0, [pc, #248]	; (6c6c <z_init_static_threads+0x110>)
    6b74:	f240 23cf 	movw	r3, #719	; 0x2cf
    6b78:	4642      	mov	r2, r8
    6b7a:	f001 fa0a 	bl	7f92 <printk>
    6b7e:	483c      	ldr	r0, [pc, #240]	; (6c70 <z_init_static_threads+0x114>)
    6b80:	f001 fa07 	bl	7f92 <printk>
    6b84:	f240 21cf 	movw	r1, #719	; 0x2cf
    6b88:	4640      	mov	r0, r8
    6b8a:	f001 f92b 	bl	7de4 <assert_post_action>
    6b8e:	42b5      	cmp	r5, r6
    6b90:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6b94:	d31f      	bcc.n	6bd6 <z_init_static_threads+0x7a>
	k_sched_lock();
    6b96:	f7fe fd21 	bl	55dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6b9a:	4c32      	ldr	r4, [pc, #200]	; (6c64 <z_init_static_threads+0x108>)
    6b9c:	4d35      	ldr	r5, [pc, #212]	; (6c74 <z_init_static_threads+0x118>)
    6b9e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6c68 <z_init_static_threads+0x10c>
    6ba2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6c6c <z_init_static_threads+0x110>
    6ba6:	42b4      	cmp	r4, r6
    6ba8:	d90e      	bls.n	6bc8 <z_init_static_threads+0x6c>
    6baa:	4641      	mov	r1, r8
    6bac:	f240 23ee 	movw	r3, #750	; 0x2ee
    6bb0:	462a      	mov	r2, r5
    6bb2:	4648      	mov	r0, r9
    6bb4:	f001 f9ed 	bl	7f92 <printk>
    6bb8:	482d      	ldr	r0, [pc, #180]	; (6c70 <z_init_static_threads+0x114>)
    6bba:	f001 f9ea 	bl	7f92 <printk>
    6bbe:	f240 21ee 	movw	r1, #750	; 0x2ee
    6bc2:	4628      	mov	r0, r5
    6bc4:	f001 f90e 	bl	7de4 <assert_post_action>
    6bc8:	42b4      	cmp	r4, r6
    6bca:	d321      	bcc.n	6c10 <z_init_static_threads+0xb4>
}
    6bcc:	b006      	add	sp, #24
    6bce:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    6bd2:	f7ff ba47 	b.w	6064 <k_sched_unlock>
		z_setup_new_thread(
    6bd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6bda:	9305      	str	r3, [sp, #20]
    6bdc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6be0:	9304      	str	r3, [sp, #16]
    6be2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6be6:	9303      	str	r3, [sp, #12]
    6be8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6bec:	9302      	str	r3, [sp, #8]
    6bee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6bf2:	9301      	str	r3, [sp, #4]
    6bf4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6bf8:	9300      	str	r3, [sp, #0]
    6bfa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6bfe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6c02:	f7ff fef9 	bl	69f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6c06:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6c0a:	655d      	str	r5, [r3, #84]	; 0x54
    6c0c:	4625      	mov	r5, r4
    6c0e:	e7ad      	b.n	6b6c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6c10:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6c12:	1c4b      	adds	r3, r1, #1
    6c14:	d014      	beq.n	6c40 <z_init_static_threads+0xe4>
    6c16:	f240 32e7 	movw	r2, #999	; 0x3e7
    6c1a:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6c1c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6c20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6c24:	4693      	mov	fp, r2
    6c26:	469c      	mov	ip, r3
    6c28:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6c2c:	459c      	cmp	ip, r3
    6c2e:	bf08      	it	eq
    6c30:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    6c32:	6827      	ldr	r7, [r4, #0]
    6c34:	4658      	mov	r0, fp
    6c36:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6c38:	d104      	bne.n	6c44 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    6c3a:	4638      	mov	r0, r7
    6c3c:	f7fe ff72 	bl	5b24 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6c40:	3430      	adds	r4, #48	; 0x30
    6c42:	e7b0      	b.n	6ba6 <z_init_static_threads+0x4a>
    6c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c48:	2300      	movs	r3, #0
    6c4a:	f7f9 fa59 	bl	100 <__aeabi_uldivmod>
    6c4e:	4602      	mov	r2, r0
    6c50:	460b      	mov	r3, r1
    6c52:	f107 0018 	add.w	r0, r7, #24
    6c56:	4908      	ldr	r1, [pc, #32]	; (6c78 <z_init_static_threads+0x11c>)
    6c58:	f000 f886 	bl	6d68 <z_add_timeout>
    6c5c:	e7f0      	b.n	6c40 <z_init_static_threads+0xe4>
    6c5e:	bf00      	nop
    6c60:	20000208 	.word	0x20000208
    6c64:	20000208 	.word	0x20000208
    6c68:	00009d2d 	.word	0x00009d2d
    6c6c:	00008e27 	.word	0x00008e27
    6c70:	0000988c 	.word	0x0000988c
    6c74:	00009c34 	.word	0x00009c34
    6c78:	00005bcd 	.word	0x00005bcd

00006c7c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6c7c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6c7e:	b138      	cbz	r0, 6c90 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6c80:	4b04      	ldr	r3, [pc, #16]	; (6c94 <z_spin_lock_valid+0x18>)
    6c82:	7d1b      	ldrb	r3, [r3, #20]
    6c84:	f000 0003 	and.w	r0, r0, #3
    6c88:	1ac0      	subs	r0, r0, r3
    6c8a:	bf18      	it	ne
    6c8c:	2001      	movne	r0, #1
    6c8e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6c90:	2001      	movs	r0, #1
}
    6c92:	4770      	bx	lr
    6c94:	20000a2c 	.word	0x20000a2c

00006c98 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6c98:	4906      	ldr	r1, [pc, #24]	; (6cb4 <z_spin_unlock_valid+0x1c>)
{
    6c9a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6c9c:	688a      	ldr	r2, [r1, #8]
    6c9e:	7d08      	ldrb	r0, [r1, #20]
    6ca0:	6819      	ldr	r1, [r3, #0]
    6ca2:	4302      	orrs	r2, r0
    6ca4:	4291      	cmp	r1, r2
    6ca6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    6caa:	bf04      	itt	eq
    6cac:	6018      	streq	r0, [r3, #0]
	return true;
    6cae:	2001      	moveq	r0, #1
}
    6cb0:	4770      	bx	lr
    6cb2:	bf00      	nop
    6cb4:	20000a2c 	.word	0x20000a2c

00006cb8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6cb8:	4a02      	ldr	r2, [pc, #8]	; (6cc4 <z_spin_lock_set_owner+0xc>)
    6cba:	7d11      	ldrb	r1, [r2, #20]
    6cbc:	6893      	ldr	r3, [r2, #8]
    6cbe:	430b      	orrs	r3, r1
    6cc0:	6003      	str	r3, [r0, #0]
}
    6cc2:	4770      	bx	lr
    6cc4:	20000a2c 	.word	0x20000a2c

00006cc8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6cc8:	4b03      	ldr	r3, [pc, #12]	; (6cd8 <elapsed+0x10>)
    6cca:	681b      	ldr	r3, [r3, #0]
    6ccc:	b90b      	cbnz	r3, 6cd2 <elapsed+0xa>
    6cce:	f7fc bd6b 	b.w	37a8 <sys_clock_elapsed>
}
    6cd2:	2000      	movs	r0, #0
    6cd4:	4770      	bx	lr
    6cd6:	bf00      	nop
    6cd8:	20000a70 	.word	0x20000a70

00006cdc <next_timeout>:

static int32_t next_timeout(void)
{
    6cdc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6cde:	4b13      	ldr	r3, [pc, #76]	; (6d2c <next_timeout+0x50>)
    6ce0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ce2:	429c      	cmp	r4, r3
    6ce4:	bf08      	it	eq
    6ce6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6ce8:	f7ff ffee 	bl	6cc8 <elapsed>
    6cec:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    6cee:	b1bc      	cbz	r4, 6d20 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6cf0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6cf4:	1b40      	subs	r0, r0, r5
    6cf6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6cfa:	2801      	cmp	r0, #1
    6cfc:	f171 0300 	sbcs.w	r3, r1, #0
    6d00:	db11      	blt.n	6d26 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6d02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6d06:	2300      	movs	r3, #0
    6d08:	4282      	cmp	r2, r0
    6d0a:	eb73 0401 	sbcs.w	r4, r3, r1
    6d0e:	da00      	bge.n	6d12 <next_timeout+0x36>
    6d10:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6d12:	4b07      	ldr	r3, [pc, #28]	; (6d30 <next_timeout+0x54>)
    6d14:	691b      	ldr	r3, [r3, #16]
    6d16:	b113      	cbz	r3, 6d1e <next_timeout+0x42>
    6d18:	4298      	cmp	r0, r3
    6d1a:	bfa8      	it	ge
    6d1c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6d1e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6d20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6d24:	e7f5      	b.n	6d12 <next_timeout+0x36>
    6d26:	2000      	movs	r0, #0
    6d28:	e7f3      	b.n	6d12 <next_timeout+0x36>
    6d2a:	bf00      	nop
    6d2c:	20000184 	.word	0x20000184
    6d30:	20000a2c 	.word	0x20000a2c

00006d34 <remove_timeout>:
{
    6d34:	b530      	push	{r4, r5, lr}
    6d36:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6d38:	b168      	cbz	r0, 6d56 <remove_timeout+0x22>
    6d3a:	4a0a      	ldr	r2, [pc, #40]	; (6d64 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6d3c:	6852      	ldr	r2, [r2, #4]
    6d3e:	4290      	cmp	r0, r2
    6d40:	d009      	beq.n	6d56 <remove_timeout+0x22>
	if (next(t) != NULL) {
    6d42:	b143      	cbz	r3, 6d56 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6d44:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6d48:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6d4c:	1912      	adds	r2, r2, r4
    6d4e:	eb45 0101 	adc.w	r1, r5, r1
    6d52:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6d56:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6d58:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6d5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6d5c:	2300      	movs	r3, #0
	node->prev = NULL;
    6d5e:	e9c0 3300 	strd	r3, r3, [r0]
}
    6d62:	bd30      	pop	{r4, r5, pc}
    6d64:	20000184 	.word	0x20000184

00006d68 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d6c:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d6e:	1c6b      	adds	r3, r5, #1
    6d70:	bf08      	it	eq
    6d72:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6d76:	4682      	mov	sl, r0
    6d78:	468b      	mov	fp, r1
    6d7a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d7c:	f000 80aa 	beq.w	6ed4 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6d80:	6803      	ldr	r3, [r0, #0]
    6d82:	b163      	cbz	r3, 6d9e <z_add_timeout+0x36>
    6d84:	4955      	ldr	r1, [pc, #340]	; (6edc <z_add_timeout+0x174>)
    6d86:	4a56      	ldr	r2, [pc, #344]	; (6ee0 <z_add_timeout+0x178>)
    6d88:	4856      	ldr	r0, [pc, #344]	; (6ee4 <z_add_timeout+0x17c>)
    6d8a:	235d      	movs	r3, #93	; 0x5d
    6d8c:	f001 f901 	bl	7f92 <printk>
    6d90:	4855      	ldr	r0, [pc, #340]	; (6ee8 <z_add_timeout+0x180>)
    6d92:	f001 f8fe 	bl	7f92 <printk>
    6d96:	4852      	ldr	r0, [pc, #328]	; (6ee0 <z_add_timeout+0x178>)
    6d98:	215d      	movs	r1, #93	; 0x5d
    6d9a:	f001 f823 	bl	7de4 <assert_post_action>
	to->fn = fn;
    6d9e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    6da2:	f04f 0320 	mov.w	r3, #32
    6da6:	f3ef 8b11 	mrs	fp, BASEPRI
    6daa:	f383 8812 	msr	BASEPRI_MAX, r3
    6dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6db2:	484e      	ldr	r0, [pc, #312]	; (6eec <z_add_timeout+0x184>)
    6db4:	f7ff ff62 	bl	6c7c <z_spin_lock_valid>
    6db8:	b968      	cbnz	r0, 6dd6 <z_add_timeout+0x6e>
    6dba:	4a4d      	ldr	r2, [pc, #308]	; (6ef0 <z_add_timeout+0x188>)
    6dbc:	494d      	ldr	r1, [pc, #308]	; (6ef4 <z_add_timeout+0x18c>)
    6dbe:	4849      	ldr	r0, [pc, #292]	; (6ee4 <z_add_timeout+0x17c>)
    6dc0:	2381      	movs	r3, #129	; 0x81
    6dc2:	f001 f8e6 	bl	7f92 <printk>
    6dc6:	4949      	ldr	r1, [pc, #292]	; (6eec <z_add_timeout+0x184>)
    6dc8:	484b      	ldr	r0, [pc, #300]	; (6ef8 <z_add_timeout+0x190>)
    6dca:	f001 f8e2 	bl	7f92 <printk>
    6dce:	4848      	ldr	r0, [pc, #288]	; (6ef0 <z_add_timeout+0x188>)
    6dd0:	2181      	movs	r1, #129	; 0x81
    6dd2:	f001 f807 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6dd6:	4845      	ldr	r0, [pc, #276]	; (6eec <z_add_timeout+0x184>)
    6dd8:	f7ff ff6e 	bl	6cb8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6ddc:	f06f 0301 	mvn.w	r3, #1
    6de0:	ebb3 0804 	subs.w	r8, r3, r4
    6de4:	f04f 32ff 	mov.w	r2, #4294967295
    6de8:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6dec:	f1b8 0f00 	cmp.w	r8, #0
    6df0:	f179 0100 	sbcs.w	r1, r9, #0
    6df4:	db1c      	blt.n	6e30 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6df6:	4841      	ldr	r0, [pc, #260]	; (6efc <z_add_timeout+0x194>)
    6df8:	e9d0 1000 	ldrd	r1, r0, [r0]
    6dfc:	1a5b      	subs	r3, r3, r1
    6dfe:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    6e02:	1b1e      	subs	r6, r3, r4
    6e04:	eb62 0705 	sbc.w	r7, r2, r5
    6e08:	2e01      	cmp	r6, #1
    6e0a:	f177 0300 	sbcs.w	r3, r7, #0
    6e0e:	bfbc      	itt	lt
    6e10:	2601      	movlt	r6, #1
    6e12:	2700      	movlt	r7, #0
    6e14:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    6e18:	4a39      	ldr	r2, [pc, #228]	; (6f00 <z_add_timeout+0x198>)
    6e1a:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e1e:	4293      	cmp	r3, r2
    6e20:	d11d      	bne.n	6e5e <z_add_timeout+0xf6>
	node->prev = tail;
    6e22:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    6e26:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    6e2a:	f8c2 a004 	str.w	sl, [r2, #4]
}
    6e2e:	e02c      	b.n	6e8a <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6e30:	f7ff ff4a 	bl	6cc8 <elapsed>
    6e34:	1c63      	adds	r3, r4, #1
    6e36:	9300      	str	r3, [sp, #0]
    6e38:	f145 0300 	adc.w	r3, r5, #0
    6e3c:	9301      	str	r3, [sp, #4]
    6e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
    6e42:	1812      	adds	r2, r2, r0
    6e44:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6e48:	e9ca 2304 	strd	r2, r3, [sl, #16]
    6e4c:	e7e4      	b.n	6e18 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6e4e:	1be0      	subs	r0, r4, r7
    6e50:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    6e54:	42b3      	cmp	r3, r6
    6e56:	e9ca 0104 	strd	r0, r1, [sl, #16]
    6e5a:	d0e2      	beq.n	6e22 <z_add_timeout+0xba>
    6e5c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d0df      	beq.n	6e22 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    6e62:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    6e66:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    6e6a:	42bc      	cmp	r4, r7
    6e6c:	eb75 0108 	sbcs.w	r1, r5, r8
    6e70:	daed      	bge.n	6e4e <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    6e72:	1b38      	subs	r0, r7, r4
    6e74:	eb68 0105 	sbc.w	r1, r8, r5
    6e78:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6e7c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6e7e:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    6e82:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    6e86:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    6e8a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e8c:	4293      	cmp	r3, r2
    6e8e:	d00b      	beq.n	6ea8 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6e90:	459a      	cmp	sl, r3
    6e92:	d109      	bne.n	6ea8 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6e94:	f7ff ff22 	bl	6cdc <next_timeout>

			if (next_time == 0 ||
    6e98:	b118      	cbz	r0, 6ea2 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    6e9a:	4b1a      	ldr	r3, [pc, #104]	; (6f04 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    6e9c:	691b      	ldr	r3, [r3, #16]
    6e9e:	4283      	cmp	r3, r0
    6ea0:	d002      	beq.n	6ea8 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    6ea2:	2100      	movs	r1, #0
    6ea4:	f7fc fc50 	bl	3748 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ea8:	4810      	ldr	r0, [pc, #64]	; (6eec <z_add_timeout+0x184>)
    6eaa:	f7ff fef5 	bl	6c98 <z_spin_unlock_valid>
    6eae:	b968      	cbnz	r0, 6ecc <z_add_timeout+0x164>
    6eb0:	4a0f      	ldr	r2, [pc, #60]	; (6ef0 <z_add_timeout+0x188>)
    6eb2:	4915      	ldr	r1, [pc, #84]	; (6f08 <z_add_timeout+0x1a0>)
    6eb4:	480b      	ldr	r0, [pc, #44]	; (6ee4 <z_add_timeout+0x17c>)
    6eb6:	23ac      	movs	r3, #172	; 0xac
    6eb8:	f001 f86b 	bl	7f92 <printk>
    6ebc:	490b      	ldr	r1, [pc, #44]	; (6eec <z_add_timeout+0x184>)
    6ebe:	4813      	ldr	r0, [pc, #76]	; (6f0c <z_add_timeout+0x1a4>)
    6ec0:	f001 f867 	bl	7f92 <printk>
    6ec4:	480a      	ldr	r0, [pc, #40]	; (6ef0 <z_add_timeout+0x188>)
    6ec6:	21ac      	movs	r1, #172	; 0xac
    6ec8:	f000 ff8c 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    6ecc:	f38b 8811 	msr	BASEPRI, fp
    6ed0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6ed4:	b003      	add	sp, #12
    6ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6eda:	bf00      	nop
    6edc:	00009d7e 	.word	0x00009d7e
    6ee0:	00009d5a 	.word	0x00009d5a
    6ee4:	00008e27 	.word	0x00008e27
    6ee8:	00009946 	.word	0x00009946
    6eec:	20000a74 	.word	0x20000a74
    6ef0:	00008f3a 	.word	0x00008f3a
    6ef4:	00008f8c 	.word	0x00008f8c
    6ef8:	00008fa1 	.word	0x00008fa1
    6efc:	20000418 	.word	0x20000418
    6f00:	20000184 	.word	0x20000184
    6f04:	20000a2c 	.word	0x20000a2c
    6f08:	00008f60 	.word	0x00008f60
    6f0c:	00008f77 	.word	0x00008f77

00006f10 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6f10:	b538      	push	{r3, r4, r5, lr}
    6f12:	4604      	mov	r4, r0
	__asm__ volatile(
    6f14:	f04f 0320 	mov.w	r3, #32
    6f18:	f3ef 8511 	mrs	r5, BASEPRI
    6f1c:	f383 8812 	msr	BASEPRI_MAX, r3
    6f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f24:	481a      	ldr	r0, [pc, #104]	; (6f90 <z_abort_timeout+0x80>)
    6f26:	f7ff fea9 	bl	6c7c <z_spin_lock_valid>
    6f2a:	b968      	cbnz	r0, 6f48 <z_abort_timeout+0x38>
    6f2c:	4a19      	ldr	r2, [pc, #100]	; (6f94 <z_abort_timeout+0x84>)
    6f2e:	491a      	ldr	r1, [pc, #104]	; (6f98 <z_abort_timeout+0x88>)
    6f30:	481a      	ldr	r0, [pc, #104]	; (6f9c <z_abort_timeout+0x8c>)
    6f32:	2381      	movs	r3, #129	; 0x81
    6f34:	f001 f82d 	bl	7f92 <printk>
    6f38:	4915      	ldr	r1, [pc, #84]	; (6f90 <z_abort_timeout+0x80>)
    6f3a:	4819      	ldr	r0, [pc, #100]	; (6fa0 <z_abort_timeout+0x90>)
    6f3c:	f001 f829 	bl	7f92 <printk>
    6f40:	4814      	ldr	r0, [pc, #80]	; (6f94 <z_abort_timeout+0x84>)
    6f42:	2181      	movs	r1, #129	; 0x81
    6f44:	f000 ff4e 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f48:	4811      	ldr	r0, [pc, #68]	; (6f90 <z_abort_timeout+0x80>)
    6f4a:	f7ff feb5 	bl	6cb8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6f4e:	6823      	ldr	r3, [r4, #0]
    6f50:	b1db      	cbz	r3, 6f8a <z_abort_timeout+0x7a>
			remove_timeout(to);
    6f52:	4620      	mov	r0, r4
    6f54:	f7ff feee 	bl	6d34 <remove_timeout>
			ret = 0;
    6f58:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f5a:	480d      	ldr	r0, [pc, #52]	; (6f90 <z_abort_timeout+0x80>)
    6f5c:	f7ff fe9c 	bl	6c98 <z_spin_unlock_valid>
    6f60:	b968      	cbnz	r0, 6f7e <z_abort_timeout+0x6e>
    6f62:	4a0c      	ldr	r2, [pc, #48]	; (6f94 <z_abort_timeout+0x84>)
    6f64:	490f      	ldr	r1, [pc, #60]	; (6fa4 <z_abort_timeout+0x94>)
    6f66:	480d      	ldr	r0, [pc, #52]	; (6f9c <z_abort_timeout+0x8c>)
    6f68:	23ac      	movs	r3, #172	; 0xac
    6f6a:	f001 f812 	bl	7f92 <printk>
    6f6e:	4908      	ldr	r1, [pc, #32]	; (6f90 <z_abort_timeout+0x80>)
    6f70:	480d      	ldr	r0, [pc, #52]	; (6fa8 <z_abort_timeout+0x98>)
    6f72:	f001 f80e 	bl	7f92 <printk>
    6f76:	4807      	ldr	r0, [pc, #28]	; (6f94 <z_abort_timeout+0x84>)
    6f78:	21ac      	movs	r1, #172	; 0xac
    6f7a:	f000 ff33 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    6f7e:	f385 8811 	msr	BASEPRI, r5
    6f82:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6f86:	4620      	mov	r0, r4
    6f88:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6f8a:	f06f 0415 	mvn.w	r4, #21
    6f8e:	e7e4      	b.n	6f5a <z_abort_timeout+0x4a>
    6f90:	20000a74 	.word	0x20000a74
    6f94:	00008f3a 	.word	0x00008f3a
    6f98:	00008f8c 	.word	0x00008f8c
    6f9c:	00008e27 	.word	0x00008e27
    6fa0:	00008fa1 	.word	0x00008fa1
    6fa4:	00008f60 	.word	0x00008f60
    6fa8:	00008f77 	.word	0x00008f77

00006fac <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6fac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6fae:	f04f 0320 	mov.w	r3, #32
    6fb2:	f3ef 8511 	mrs	r5, BASEPRI
    6fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    6fba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fbe:	4818      	ldr	r0, [pc, #96]	; (7020 <z_get_next_timeout_expiry+0x74>)
    6fc0:	f7ff fe5c 	bl	6c7c <z_spin_lock_valid>
    6fc4:	b968      	cbnz	r0, 6fe2 <z_get_next_timeout_expiry+0x36>
    6fc6:	4a17      	ldr	r2, [pc, #92]	; (7024 <z_get_next_timeout_expiry+0x78>)
    6fc8:	4917      	ldr	r1, [pc, #92]	; (7028 <z_get_next_timeout_expiry+0x7c>)
    6fca:	4818      	ldr	r0, [pc, #96]	; (702c <z_get_next_timeout_expiry+0x80>)
    6fcc:	2381      	movs	r3, #129	; 0x81
    6fce:	f000 ffe0 	bl	7f92 <printk>
    6fd2:	4913      	ldr	r1, [pc, #76]	; (7020 <z_get_next_timeout_expiry+0x74>)
    6fd4:	4816      	ldr	r0, [pc, #88]	; (7030 <z_get_next_timeout_expiry+0x84>)
    6fd6:	f000 ffdc 	bl	7f92 <printk>
    6fda:	4812      	ldr	r0, [pc, #72]	; (7024 <z_get_next_timeout_expiry+0x78>)
    6fdc:	2181      	movs	r1, #129	; 0x81
    6fde:	f000 ff01 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fe2:	480f      	ldr	r0, [pc, #60]	; (7020 <z_get_next_timeout_expiry+0x74>)
    6fe4:	f7ff fe68 	bl	6cb8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6fe8:	f7ff fe78 	bl	6cdc <next_timeout>
    6fec:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fee:	480c      	ldr	r0, [pc, #48]	; (7020 <z_get_next_timeout_expiry+0x74>)
    6ff0:	f7ff fe52 	bl	6c98 <z_spin_unlock_valid>
    6ff4:	b968      	cbnz	r0, 7012 <z_get_next_timeout_expiry+0x66>
    6ff6:	4a0b      	ldr	r2, [pc, #44]	; (7024 <z_get_next_timeout_expiry+0x78>)
    6ff8:	490e      	ldr	r1, [pc, #56]	; (7034 <z_get_next_timeout_expiry+0x88>)
    6ffa:	480c      	ldr	r0, [pc, #48]	; (702c <z_get_next_timeout_expiry+0x80>)
    6ffc:	23ac      	movs	r3, #172	; 0xac
    6ffe:	f000 ffc8 	bl	7f92 <printk>
    7002:	4907      	ldr	r1, [pc, #28]	; (7020 <z_get_next_timeout_expiry+0x74>)
    7004:	480c      	ldr	r0, [pc, #48]	; (7038 <z_get_next_timeout_expiry+0x8c>)
    7006:	f000 ffc4 	bl	7f92 <printk>
    700a:	4806      	ldr	r0, [pc, #24]	; (7024 <z_get_next_timeout_expiry+0x78>)
    700c:	21ac      	movs	r1, #172	; 0xac
    700e:	f000 fee9 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    7012:	f385 8811 	msr	BASEPRI, r5
    7016:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    701a:	4620      	mov	r0, r4
    701c:	bd38      	pop	{r3, r4, r5, pc}
    701e:	bf00      	nop
    7020:	20000a74 	.word	0x20000a74
    7024:	00008f3a 	.word	0x00008f3a
    7028:	00008f8c 	.word	0x00008f8c
    702c:	00008e27 	.word	0x00008e27
    7030:	00008fa1 	.word	0x00008fa1
    7034:	00008f60 	.word	0x00008f60
    7038:	00008f77 	.word	0x00008f77

0000703c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    703c:	b570      	push	{r4, r5, r6, lr}
    703e:	4604      	mov	r4, r0
    7040:	460d      	mov	r5, r1
	__asm__ volatile(
    7042:	f04f 0320 	mov.w	r3, #32
    7046:	f3ef 8611 	mrs	r6, BASEPRI
    704a:	f383 8812 	msr	BASEPRI_MAX, r3
    704e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7052:	481b      	ldr	r0, [pc, #108]	; (70c0 <z_set_timeout_expiry+0x84>)
    7054:	f7ff fe12 	bl	6c7c <z_spin_lock_valid>
    7058:	b968      	cbnz	r0, 7076 <z_set_timeout_expiry+0x3a>
    705a:	4a1a      	ldr	r2, [pc, #104]	; (70c4 <z_set_timeout_expiry+0x88>)
    705c:	491a      	ldr	r1, [pc, #104]	; (70c8 <z_set_timeout_expiry+0x8c>)
    705e:	481b      	ldr	r0, [pc, #108]	; (70cc <z_set_timeout_expiry+0x90>)
    7060:	2381      	movs	r3, #129	; 0x81
    7062:	f000 ff96 	bl	7f92 <printk>
    7066:	4916      	ldr	r1, [pc, #88]	; (70c0 <z_set_timeout_expiry+0x84>)
    7068:	4819      	ldr	r0, [pc, #100]	; (70d0 <z_set_timeout_expiry+0x94>)
    706a:	f000 ff92 	bl	7f92 <printk>
    706e:	4815      	ldr	r0, [pc, #84]	; (70c4 <z_set_timeout_expiry+0x88>)
    7070:	2181      	movs	r1, #129	; 0x81
    7072:	f000 feb7 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7076:	4812      	ldr	r0, [pc, #72]	; (70c0 <z_set_timeout_expiry+0x84>)
    7078:	f7ff fe1e 	bl	6cb8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    707c:	f7ff fe2e 	bl	6cdc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7080:	2801      	cmp	r0, #1
    7082:	dd05      	ble.n	7090 <z_set_timeout_expiry+0x54>
    7084:	42a0      	cmp	r0, r4
    7086:	db03      	blt.n	7090 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7088:	4629      	mov	r1, r5
    708a:	4620      	mov	r0, r4
    708c:	f7fc fb5c 	bl	3748 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7090:	480b      	ldr	r0, [pc, #44]	; (70c0 <z_set_timeout_expiry+0x84>)
    7092:	f7ff fe01 	bl	6c98 <z_spin_unlock_valid>
    7096:	b968      	cbnz	r0, 70b4 <z_set_timeout_expiry+0x78>
    7098:	4a0a      	ldr	r2, [pc, #40]	; (70c4 <z_set_timeout_expiry+0x88>)
    709a:	490e      	ldr	r1, [pc, #56]	; (70d4 <z_set_timeout_expiry+0x98>)
    709c:	480b      	ldr	r0, [pc, #44]	; (70cc <z_set_timeout_expiry+0x90>)
    709e:	23ac      	movs	r3, #172	; 0xac
    70a0:	f000 ff77 	bl	7f92 <printk>
    70a4:	4906      	ldr	r1, [pc, #24]	; (70c0 <z_set_timeout_expiry+0x84>)
    70a6:	480c      	ldr	r0, [pc, #48]	; (70d8 <z_set_timeout_expiry+0x9c>)
    70a8:	f000 ff73 	bl	7f92 <printk>
    70ac:	4805      	ldr	r0, [pc, #20]	; (70c4 <z_set_timeout_expiry+0x88>)
    70ae:	21ac      	movs	r1, #172	; 0xac
    70b0:	f000 fe98 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    70b4:	f386 8811 	msr	BASEPRI, r6
    70b8:	f3bf 8f6f 	isb	sy
		}
	}
}
    70bc:	bd70      	pop	{r4, r5, r6, pc}
    70be:	bf00      	nop
    70c0:	20000a74 	.word	0x20000a74
    70c4:	00008f3a 	.word	0x00008f3a
    70c8:	00008f8c 	.word	0x00008f8c
    70cc:	00008e27 	.word	0x00008e27
    70d0:	00008fa1 	.word	0x00008fa1
    70d4:	00008f60 	.word	0x00008f60
    70d8:	00008f77 	.word	0x00008f77

000070dc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    70dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70e0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    70e2:	f7fe fc0d 	bl	5900 <z_time_slice>
	__asm__ volatile(
    70e6:	f04f 0320 	mov.w	r3, #32
    70ea:	f3ef 8711 	mrs	r7, BASEPRI
    70ee:	f383 8812 	msr	BASEPRI_MAX, r3
    70f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70f6:	4855      	ldr	r0, [pc, #340]	; (724c <sys_clock_announce+0x170>)
    70f8:	f7ff fdc0 	bl	6c7c <z_spin_lock_valid>
    70fc:	b968      	cbnz	r0, 711a <sys_clock_announce+0x3e>
    70fe:	4a54      	ldr	r2, [pc, #336]	; (7250 <sys_clock_announce+0x174>)
    7100:	4954      	ldr	r1, [pc, #336]	; (7254 <sys_clock_announce+0x178>)
    7102:	4855      	ldr	r0, [pc, #340]	; (7258 <sys_clock_announce+0x17c>)
    7104:	2381      	movs	r3, #129	; 0x81
    7106:	f000 ff44 	bl	7f92 <printk>
    710a:	4950      	ldr	r1, [pc, #320]	; (724c <sys_clock_announce+0x170>)
    710c:	4853      	ldr	r0, [pc, #332]	; (725c <sys_clock_announce+0x180>)
    710e:	f000 ff40 	bl	7f92 <printk>
    7112:	484f      	ldr	r0, [pc, #316]	; (7250 <sys_clock_announce+0x174>)
    7114:	2181      	movs	r1, #129	; 0x81
    7116:	f000 fe65 	bl	7de4 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    711a:	4d51      	ldr	r5, [pc, #324]	; (7260 <sys_clock_announce+0x184>)
    711c:	4e51      	ldr	r6, [pc, #324]	; (7264 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    711e:	484b      	ldr	r0, [pc, #300]	; (724c <sys_clock_announce+0x170>)
	return list->head == list;
    7120:	f8df a14c 	ldr.w	sl, [pc, #332]	; 7270 <sys_clock_announce+0x194>
    7124:	f7ff fdc8 	bl	6cb8 <z_spin_lock_set_owner>
    7128:	46b3      	mov	fp, r6
    712a:	602c      	str	r4, [r5, #0]
    712c:	e9d6 2300 	ldrd	r2, r3, [r6]
    7130:	f8d5 c000 	ldr.w	ip, [r5]
    7134:	f8da 4000 	ldr.w	r4, [sl]
    7138:	e9cd 2300 	strd	r2, r3, [sp]
    713c:	4662      	mov	r2, ip
    713e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7140:	4554      	cmp	r4, sl
    7142:	46e0      	mov	r8, ip
    7144:	4699      	mov	r9, r3
    7146:	d00c      	beq.n	7162 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7148:	b15c      	cbz	r4, 7162 <sys_clock_announce+0x86>
    714a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    714e:	458c      	cmp	ip, r1
    7150:	eb79 0302 	sbcs.w	r3, r9, r2
    7154:	da2e      	bge.n	71b4 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7156:	ebb1 000c 	subs.w	r0, r1, ip
    715a:	eb62 0109 	sbc.w	r1, r2, r9
    715e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    7162:	9a00      	ldr	r2, [sp, #0]
    7164:	9901      	ldr	r1, [sp, #4]
    7166:	eb18 0202 	adds.w	r2, r8, r2
    716a:	464b      	mov	r3, r9
    716c:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    7170:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7172:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    7176:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7178:	f7ff fdb0 	bl	6cdc <next_timeout>
    717c:	4621      	mov	r1, r4
    717e:	f7fc fae3 	bl	3748 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7182:	4832      	ldr	r0, [pc, #200]	; (724c <sys_clock_announce+0x170>)
    7184:	f7ff fd88 	bl	6c98 <z_spin_unlock_valid>
    7188:	b968      	cbnz	r0, 71a6 <sys_clock_announce+0xca>
    718a:	4a31      	ldr	r2, [pc, #196]	; (7250 <sys_clock_announce+0x174>)
    718c:	4936      	ldr	r1, [pc, #216]	; (7268 <sys_clock_announce+0x18c>)
    718e:	4832      	ldr	r0, [pc, #200]	; (7258 <sys_clock_announce+0x17c>)
    7190:	23ac      	movs	r3, #172	; 0xac
    7192:	f000 fefe 	bl	7f92 <printk>
    7196:	492d      	ldr	r1, [pc, #180]	; (724c <sys_clock_announce+0x170>)
    7198:	4834      	ldr	r0, [pc, #208]	; (726c <sys_clock_announce+0x190>)
    719a:	f000 fefa 	bl	7f92 <printk>
    719e:	482c      	ldr	r0, [pc, #176]	; (7250 <sys_clock_announce+0x174>)
    71a0:	21ac      	movs	r1, #172	; 0xac
    71a2:	f000 fe1f 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    71a6:	f387 8811 	msr	BASEPRI, r7
    71aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    71ae:	b003      	add	sp, #12
    71b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    71b4:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    71b8:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    71bc:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    71c0:	f04f 0200 	mov.w	r2, #0
    71c4:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    71c8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    71cc:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    71ce:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    71d2:	4620      	mov	r0, r4
		curr_tick += dt;
    71d4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    71d8:	f7ff fdac 	bl	6d34 <remove_timeout>
    71dc:	481b      	ldr	r0, [pc, #108]	; (724c <sys_clock_announce+0x170>)
    71de:	f7ff fd5b 	bl	6c98 <z_spin_unlock_valid>
    71e2:	b968      	cbnz	r0, 7200 <sys_clock_announce+0x124>
    71e4:	4a1a      	ldr	r2, [pc, #104]	; (7250 <sys_clock_announce+0x174>)
    71e6:	4920      	ldr	r1, [pc, #128]	; (7268 <sys_clock_announce+0x18c>)
    71e8:	481b      	ldr	r0, [pc, #108]	; (7258 <sys_clock_announce+0x17c>)
    71ea:	23ac      	movs	r3, #172	; 0xac
    71ec:	f000 fed1 	bl	7f92 <printk>
    71f0:	4916      	ldr	r1, [pc, #88]	; (724c <sys_clock_announce+0x170>)
    71f2:	481e      	ldr	r0, [pc, #120]	; (726c <sys_clock_announce+0x190>)
    71f4:	f000 fecd 	bl	7f92 <printk>
    71f8:	4815      	ldr	r0, [pc, #84]	; (7250 <sys_clock_announce+0x174>)
    71fa:	21ac      	movs	r1, #172	; 0xac
    71fc:	f000 fdf2 	bl	7de4 <assert_post_action>
    7200:	f387 8811 	msr	BASEPRI, r7
    7204:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7208:	68a3      	ldr	r3, [r4, #8]
    720a:	4620      	mov	r0, r4
    720c:	4798      	blx	r3
	__asm__ volatile(
    720e:	f04f 0320 	mov.w	r3, #32
    7212:	f3ef 8711 	mrs	r7, BASEPRI
    7216:	f383 8812 	msr	BASEPRI_MAX, r3
    721a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    721e:	480b      	ldr	r0, [pc, #44]	; (724c <sys_clock_announce+0x170>)
    7220:	f7ff fd2c 	bl	6c7c <z_spin_lock_valid>
    7224:	b968      	cbnz	r0, 7242 <sys_clock_announce+0x166>
    7226:	4a0a      	ldr	r2, [pc, #40]	; (7250 <sys_clock_announce+0x174>)
    7228:	490a      	ldr	r1, [pc, #40]	; (7254 <sys_clock_announce+0x178>)
    722a:	480b      	ldr	r0, [pc, #44]	; (7258 <sys_clock_announce+0x17c>)
    722c:	2381      	movs	r3, #129	; 0x81
    722e:	f000 feb0 	bl	7f92 <printk>
    7232:	4906      	ldr	r1, [pc, #24]	; (724c <sys_clock_announce+0x170>)
    7234:	4809      	ldr	r0, [pc, #36]	; (725c <sys_clock_announce+0x180>)
    7236:	f000 feac 	bl	7f92 <printk>
    723a:	4805      	ldr	r0, [pc, #20]	; (7250 <sys_clock_announce+0x174>)
    723c:	2181      	movs	r1, #129	; 0x81
    723e:	f000 fdd1 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7242:	4802      	ldr	r0, [pc, #8]	; (724c <sys_clock_announce+0x170>)
    7244:	f7ff fd38 	bl	6cb8 <z_spin_lock_set_owner>
	return k;
    7248:	e770      	b.n	712c <sys_clock_announce+0x50>
    724a:	bf00      	nop
    724c:	20000a74 	.word	0x20000a74
    7250:	00008f3a 	.word	0x00008f3a
    7254:	00008f8c 	.word	0x00008f8c
    7258:	00008e27 	.word	0x00008e27
    725c:	00008fa1 	.word	0x00008fa1
    7260:	20000a70 	.word	0x20000a70
    7264:	20000418 	.word	0x20000418
    7268:	00008f60 	.word	0x00008f60
    726c:	00008f77 	.word	0x00008f77
    7270:	20000184 	.word	0x20000184

00007274 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7274:	b570      	push	{r4, r5, r6, lr}
    7276:	f04f 0320 	mov.w	r3, #32
    727a:	f3ef 8611 	mrs	r6, BASEPRI
    727e:	f383 8812 	msr	BASEPRI_MAX, r3
    7282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7286:	481b      	ldr	r0, [pc, #108]	; (72f4 <sys_clock_tick_get+0x80>)
    7288:	f7ff fcf8 	bl	6c7c <z_spin_lock_valid>
    728c:	b968      	cbnz	r0, 72aa <sys_clock_tick_get+0x36>
    728e:	4a1a      	ldr	r2, [pc, #104]	; (72f8 <sys_clock_tick_get+0x84>)
    7290:	491a      	ldr	r1, [pc, #104]	; (72fc <sys_clock_tick_get+0x88>)
    7292:	481b      	ldr	r0, [pc, #108]	; (7300 <sys_clock_tick_get+0x8c>)
    7294:	2381      	movs	r3, #129	; 0x81
    7296:	f000 fe7c 	bl	7f92 <printk>
    729a:	4916      	ldr	r1, [pc, #88]	; (72f4 <sys_clock_tick_get+0x80>)
    729c:	4819      	ldr	r0, [pc, #100]	; (7304 <sys_clock_tick_get+0x90>)
    729e:	f000 fe78 	bl	7f92 <printk>
    72a2:	4815      	ldr	r0, [pc, #84]	; (72f8 <sys_clock_tick_get+0x84>)
    72a4:	2181      	movs	r1, #129	; 0x81
    72a6:	f000 fd9d 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    72aa:	4812      	ldr	r0, [pc, #72]	; (72f4 <sys_clock_tick_get+0x80>)
    72ac:	f7ff fd04 	bl	6cb8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    72b0:	f7fc fa7a 	bl	37a8 <sys_clock_elapsed>
    72b4:	4b14      	ldr	r3, [pc, #80]	; (7308 <sys_clock_tick_get+0x94>)
    72b6:	e9d3 4500 	ldrd	r4, r5, [r3]
    72ba:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72bc:	480d      	ldr	r0, [pc, #52]	; (72f4 <sys_clock_tick_get+0x80>)
    72be:	f145 0500 	adc.w	r5, r5, #0
    72c2:	f7ff fce9 	bl	6c98 <z_spin_unlock_valid>
    72c6:	b968      	cbnz	r0, 72e4 <sys_clock_tick_get+0x70>
    72c8:	4a0b      	ldr	r2, [pc, #44]	; (72f8 <sys_clock_tick_get+0x84>)
    72ca:	4910      	ldr	r1, [pc, #64]	; (730c <sys_clock_tick_get+0x98>)
    72cc:	480c      	ldr	r0, [pc, #48]	; (7300 <sys_clock_tick_get+0x8c>)
    72ce:	23ac      	movs	r3, #172	; 0xac
    72d0:	f000 fe5f 	bl	7f92 <printk>
    72d4:	4907      	ldr	r1, [pc, #28]	; (72f4 <sys_clock_tick_get+0x80>)
    72d6:	480e      	ldr	r0, [pc, #56]	; (7310 <sys_clock_tick_get+0x9c>)
    72d8:	f000 fe5b 	bl	7f92 <printk>
    72dc:	4806      	ldr	r0, [pc, #24]	; (72f8 <sys_clock_tick_get+0x84>)
    72de:	21ac      	movs	r1, #172	; 0xac
    72e0:	f000 fd80 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    72e4:	f386 8811 	msr	BASEPRI, r6
    72e8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    72ec:	4620      	mov	r0, r4
    72ee:	4629      	mov	r1, r5
    72f0:	bd70      	pop	{r4, r5, r6, pc}
    72f2:	bf00      	nop
    72f4:	20000a74 	.word	0x20000a74
    72f8:	00008f3a 	.word	0x00008f3a
    72fc:	00008f8c 	.word	0x00008f8c
    7300:	00008e27 	.word	0x00008e27
    7304:	00008fa1 	.word	0x00008fa1
    7308:	20000418 	.word	0x20000418
    730c:	00008f60 	.word	0x00008f60
    7310:	00008f77 	.word	0x00008f77

00007314 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7316:	4604      	mov	r4, r0
	__asm__ volatile(
    7318:	f04f 0320 	mov.w	r3, #32
    731c:	f3ef 8511 	mrs	r5, BASEPRI
    7320:	f383 8812 	msr	BASEPRI_MAX, r3
    7324:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7328:	484c      	ldr	r0, [pc, #304]	; (745c <z_timer_expiration_handler+0x148>)
    732a:	f7ff fca7 	bl	6c7c <z_spin_lock_valid>
    732e:	b968      	cbnz	r0, 734c <z_timer_expiration_handler+0x38>
    7330:	4a4b      	ldr	r2, [pc, #300]	; (7460 <z_timer_expiration_handler+0x14c>)
    7332:	494c      	ldr	r1, [pc, #304]	; (7464 <z_timer_expiration_handler+0x150>)
    7334:	484c      	ldr	r0, [pc, #304]	; (7468 <z_timer_expiration_handler+0x154>)
    7336:	2381      	movs	r3, #129	; 0x81
    7338:	f000 fe2b 	bl	7f92 <printk>
    733c:	4947      	ldr	r1, [pc, #284]	; (745c <z_timer_expiration_handler+0x148>)
    733e:	484b      	ldr	r0, [pc, #300]	; (746c <z_timer_expiration_handler+0x158>)
    7340:	f000 fe27 	bl	7f92 <printk>
    7344:	4846      	ldr	r0, [pc, #280]	; (7460 <z_timer_expiration_handler+0x14c>)
    7346:	2181      	movs	r1, #129	; 0x81
    7348:	f000 fd4c 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    734c:	4843      	ldr	r0, [pc, #268]	; (745c <z_timer_expiration_handler+0x148>)
    734e:	f7ff fcb3 	bl	6cb8 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7352:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    7356:	1c56      	adds	r6, r2, #1
    7358:	f143 0700 	adc.w	r7, r3, #0
    735c:	2f00      	cmp	r7, #0
    735e:	bf08      	it	eq
    7360:	2e02      	cmpeq	r6, #2
    7362:	d303      	bcc.n	736c <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7364:	4942      	ldr	r1, [pc, #264]	; (7470 <z_timer_expiration_handler+0x15c>)
    7366:	4620      	mov	r0, r4
    7368:	f7ff fcfe 	bl	6d68 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    736c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    736e:	3301      	adds	r3, #1
    7370:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    7372:	6a23      	ldr	r3, [r4, #32]
    7374:	2b00      	cmp	r3, #0
    7376:	d035      	beq.n	73e4 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7378:	4838      	ldr	r0, [pc, #224]	; (745c <z_timer_expiration_handler+0x148>)
    737a:	f7ff fc8d 	bl	6c98 <z_spin_unlock_valid>
    737e:	b968      	cbnz	r0, 739c <z_timer_expiration_handler+0x88>
    7380:	4a37      	ldr	r2, [pc, #220]	; (7460 <z_timer_expiration_handler+0x14c>)
    7382:	493c      	ldr	r1, [pc, #240]	; (7474 <z_timer_expiration_handler+0x160>)
    7384:	4838      	ldr	r0, [pc, #224]	; (7468 <z_timer_expiration_handler+0x154>)
    7386:	23ac      	movs	r3, #172	; 0xac
    7388:	f000 fe03 	bl	7f92 <printk>
    738c:	4933      	ldr	r1, [pc, #204]	; (745c <z_timer_expiration_handler+0x148>)
    738e:	483a      	ldr	r0, [pc, #232]	; (7478 <z_timer_expiration_handler+0x164>)
    7390:	f000 fdff 	bl	7f92 <printk>
    7394:	4832      	ldr	r0, [pc, #200]	; (7460 <z_timer_expiration_handler+0x14c>)
    7396:	21ac      	movs	r1, #172	; 0xac
    7398:	f000 fd24 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    739c:	f385 8811 	msr	BASEPRI, r5
    73a0:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    73a4:	6a23      	ldr	r3, [r4, #32]
    73a6:	4620      	mov	r0, r4
    73a8:	4798      	blx	r3
	__asm__ volatile(
    73aa:	f04f 0320 	mov.w	r3, #32
    73ae:	f3ef 8511 	mrs	r5, BASEPRI
    73b2:	f383 8812 	msr	BASEPRI_MAX, r3
    73b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73ba:	4828      	ldr	r0, [pc, #160]	; (745c <z_timer_expiration_handler+0x148>)
    73bc:	f7ff fc5e 	bl	6c7c <z_spin_lock_valid>
    73c0:	b968      	cbnz	r0, 73de <z_timer_expiration_handler+0xca>
    73c2:	4a27      	ldr	r2, [pc, #156]	; (7460 <z_timer_expiration_handler+0x14c>)
    73c4:	4927      	ldr	r1, [pc, #156]	; (7464 <z_timer_expiration_handler+0x150>)
    73c6:	4828      	ldr	r0, [pc, #160]	; (7468 <z_timer_expiration_handler+0x154>)
    73c8:	2381      	movs	r3, #129	; 0x81
    73ca:	f000 fde2 	bl	7f92 <printk>
    73ce:	4923      	ldr	r1, [pc, #140]	; (745c <z_timer_expiration_handler+0x148>)
    73d0:	4826      	ldr	r0, [pc, #152]	; (746c <z_timer_expiration_handler+0x158>)
    73d2:	f000 fdde 	bl	7f92 <printk>
    73d6:	4822      	ldr	r0, [pc, #136]	; (7460 <z_timer_expiration_handler+0x14c>)
    73d8:	2181      	movs	r1, #129	; 0x81
    73da:	f000 fd03 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    73de:	481f      	ldr	r0, [pc, #124]	; (745c <z_timer_expiration_handler+0x148>)
    73e0:	f7ff fc6a 	bl	6cb8 <z_spin_lock_set_owner>
	return list->head == list;
    73e4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    73e8:	42a6      	cmp	r6, r4
    73ea:	d000      	beq.n	73ee <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    73ec:	b9b6      	cbnz	r6, 741c <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73ee:	481b      	ldr	r0, [pc, #108]	; (745c <z_timer_expiration_handler+0x148>)
    73f0:	f7ff fc52 	bl	6c98 <z_spin_unlock_valid>
    73f4:	b968      	cbnz	r0, 7412 <z_timer_expiration_handler+0xfe>
    73f6:	4a1a      	ldr	r2, [pc, #104]	; (7460 <z_timer_expiration_handler+0x14c>)
    73f8:	491e      	ldr	r1, [pc, #120]	; (7474 <z_timer_expiration_handler+0x160>)
    73fa:	481b      	ldr	r0, [pc, #108]	; (7468 <z_timer_expiration_handler+0x154>)
    73fc:	23ac      	movs	r3, #172	; 0xac
    73fe:	f000 fdc8 	bl	7f92 <printk>
    7402:	4916      	ldr	r1, [pc, #88]	; (745c <z_timer_expiration_handler+0x148>)
    7404:	481c      	ldr	r0, [pc, #112]	; (7478 <z_timer_expiration_handler+0x164>)
    7406:	f000 fdc4 	bl	7f92 <printk>
    740a:	4815      	ldr	r0, [pc, #84]	; (7460 <z_timer_expiration_handler+0x14c>)
    740c:	21ac      	movs	r1, #172	; 0xac
    740e:	f000 fce9 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    7412:	f385 8811 	msr	BASEPRI, r5
    7416:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    741c:	4630      	mov	r0, r6
    741e:	f7fe f851 	bl	54c4 <z_unpend_thread_no_timeout>
    7422:	2300      	movs	r3, #0
    7424:	480d      	ldr	r0, [pc, #52]	; (745c <z_timer_expiration_handler+0x148>)
    7426:	67f3      	str	r3, [r6, #124]	; 0x7c
    7428:	f7ff fc36 	bl	6c98 <z_spin_unlock_valid>
    742c:	b968      	cbnz	r0, 744a <z_timer_expiration_handler+0x136>
    742e:	4a0c      	ldr	r2, [pc, #48]	; (7460 <z_timer_expiration_handler+0x14c>)
    7430:	4910      	ldr	r1, [pc, #64]	; (7474 <z_timer_expiration_handler+0x160>)
    7432:	480d      	ldr	r0, [pc, #52]	; (7468 <z_timer_expiration_handler+0x154>)
    7434:	23ac      	movs	r3, #172	; 0xac
    7436:	f000 fdac 	bl	7f92 <printk>
    743a:	4908      	ldr	r1, [pc, #32]	; (745c <z_timer_expiration_handler+0x148>)
    743c:	480e      	ldr	r0, [pc, #56]	; (7478 <z_timer_expiration_handler+0x164>)
    743e:	f000 fda8 	bl	7f92 <printk>
    7442:	4807      	ldr	r0, [pc, #28]	; (7460 <z_timer_expiration_handler+0x14c>)
    7444:	21ac      	movs	r1, #172	; 0xac
    7446:	f000 fccd 	bl	7de4 <assert_post_action>
    744a:	f385 8811 	msr	BASEPRI, r5
    744e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    7452:	4630      	mov	r0, r6
}
    7454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7458:	f7fe bb1c 	b.w	5a94 <z_ready_thread>
    745c:	20000a78 	.word	0x20000a78
    7460:	00008f3a 	.word	0x00008f3a
    7464:	00008f8c 	.word	0x00008f8c
    7468:	00008e27 	.word	0x00008e27
    746c:	00008fa1 	.word	0x00008fa1
    7470:	00007315 	.word	0x00007315
    7474:	00008f60 	.word	0x00008f60
    7478:	00008f77 	.word	0x00008f77

0000747c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    747c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    7480:	4619      	mov	r1, r3
    7482:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7484:	1c4c      	adds	r4, r1, #1
{
    7486:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7488:	bf08      	it	eq
    748a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    748e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    7492:	4680      	mov	r8, r0
    7494:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7496:	d04c      	beq.n	7532 <z_impl_k_timer_start+0xb6>
    7498:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    749a:	1c6b      	adds	r3, r5, #1
    749c:	bf08      	it	eq
    749e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    74a2:	4614      	mov	r4, r2
    74a4:	d019      	beq.n	74da <z_impl_k_timer_start+0x5e>
    74a6:	ea54 0305 	orrs.w	r3, r4, r5
    74aa:	d016      	beq.n	74da <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    74ac:	f06f 0301 	mvn.w	r3, #1
    74b0:	ebb3 0a02 	subs.w	sl, r3, r2
    74b4:	f04f 33ff 	mov.w	r3, #4294967295
    74b8:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    74bc:	f1ba 0f00 	cmp.w	sl, #0
    74c0:	f17b 0300 	sbcs.w	r3, fp, #0
    74c4:	da09      	bge.n	74da <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    74c6:	f112 34ff 	adds.w	r4, r2, #4294967295
    74ca:	f145 35ff 	adc.w	r5, r5, #4294967295
    74ce:	2c01      	cmp	r4, #1
    74d0:	f175 0300 	sbcs.w	r3, r5, #0
    74d4:	bfbc      	itt	lt
    74d6:	2401      	movlt	r4, #1
    74d8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    74da:	f06f 0301 	mvn.w	r3, #1
    74de:	1a1b      	subs	r3, r3, r0
    74e0:	9300      	str	r3, [sp, #0]
    74e2:	f04f 33ff 	mov.w	r3, #4294967295
    74e6:	eb63 0301 	sbc.w	r3, r3, r1
    74ea:	9301      	str	r3, [sp, #4]
    74ec:	e9dd 2300 	ldrd	r2, r3, [sp]
    74f0:	2a00      	cmp	r2, #0
    74f2:	f173 0300 	sbcs.w	r3, r3, #0
    74f6:	da0c      	bge.n	7512 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    74f8:	f110 38ff 	adds.w	r8, r0, #4294967295
    74fc:	f141 39ff 	adc.w	r9, r1, #4294967295
    7500:	f1b8 0f00 	cmp.w	r8, #0
    7504:	f179 0300 	sbcs.w	r3, r9, #0
    7508:	bfbc      	itt	lt
    750a:	f04f 0800 	movlt.w	r8, #0
    750e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    7512:	4630      	mov	r0, r6
    7514:	f7ff fcfc 	bl	6f10 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7518:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    751a:	4907      	ldr	r1, [pc, #28]	; (7538 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    751c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    751e:	4642      	mov	r2, r8
    7520:	464b      	mov	r3, r9
    7522:	4630      	mov	r0, r6
	timer->period = period;
    7524:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7528:	b002      	add	sp, #8
    752a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    752e:	f7ff bc1b 	b.w	6d68 <z_add_timeout>
}
    7532:	b002      	add	sp, #8
    7534:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7538:	00007315 	.word	0x00007315

0000753c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7540:	4e7e      	ldr	r6, [pc, #504]	; (773c <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7542:	4f7f      	ldr	r7, [pc, #508]	; (7740 <work_queue_main+0x204>)
{
    7544:	b085      	sub	sp, #20
    7546:	4604      	mov	r4, r0
	__asm__ volatile(
    7548:	f04f 0320 	mov.w	r3, #32
    754c:	f3ef 8811 	mrs	r8, BASEPRI
    7550:	f383 8812 	msr	BASEPRI_MAX, r3
    7554:	f3bf 8f6f 	isb	sy
    7558:	4630      	mov	r0, r6
    755a:	f7ff fb8f 	bl	6c7c <z_spin_lock_valid>
    755e:	b968      	cbnz	r0, 757c <work_queue_main+0x40>
    7560:	4a78      	ldr	r2, [pc, #480]	; (7744 <work_queue_main+0x208>)
    7562:	4979      	ldr	r1, [pc, #484]	; (7748 <work_queue_main+0x20c>)
    7564:	4879      	ldr	r0, [pc, #484]	; (774c <work_queue_main+0x210>)
    7566:	2381      	movs	r3, #129	; 0x81
    7568:	f000 fd13 	bl	7f92 <printk>
    756c:	4878      	ldr	r0, [pc, #480]	; (7750 <work_queue_main+0x214>)
    756e:	4631      	mov	r1, r6
    7570:	f000 fd0f 	bl	7f92 <printk>
    7574:	4873      	ldr	r0, [pc, #460]	; (7744 <work_queue_main+0x208>)
    7576:	2181      	movs	r1, #129	; 0x81
    7578:	f000 fc34 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    757c:	4630      	mov	r0, r6
    757e:	f7ff fb9b 	bl	6cb8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    7582:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    7586:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    758a:	b9ad      	cbnz	r5, 75b8 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    758c:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    7590:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    7592:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    7596:	f100 8092 	bmi.w	76be <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    759a:	2300      	movs	r3, #0
    759c:	9302      	str	r3, [sp, #8]
    759e:	f04f 32ff 	mov.w	r2, #4294967295
    75a2:	f04f 33ff 	mov.w	r3, #4294967295
    75a6:	e9cd 2300 	strd	r2, r3, [sp]
    75aa:	4641      	mov	r1, r8
    75ac:	f104 0288 	add.w	r2, r4, #136	; 0x88
    75b0:	4630      	mov	r0, r6
    75b2:	f7ff f927 	bl	6804 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    75b6:	e7c7      	b.n	7548 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    75b8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    75bc:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    75be:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    75c2:	428d      	cmp	r5, r1
    75c4:	d101      	bne.n	75ca <work_queue_main+0x8e>
	list->tail = node;
    75c6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    75ca:	f043 0302 	orr.w	r3, r3, #2
    75ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    75d2:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    75d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    75d8:	f023 0304 	bic.w	r3, r3, #4
    75dc:	f043 0301 	orr.w	r3, r3, #1
    75e0:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75e2:	4630      	mov	r0, r6
    75e4:	f7ff fb58 	bl	6c98 <z_spin_unlock_valid>
    75e8:	b968      	cbnz	r0, 7606 <work_queue_main+0xca>
    75ea:	4a56      	ldr	r2, [pc, #344]	; (7744 <work_queue_main+0x208>)
    75ec:	4959      	ldr	r1, [pc, #356]	; (7754 <work_queue_main+0x218>)
    75ee:	4857      	ldr	r0, [pc, #348]	; (774c <work_queue_main+0x210>)
    75f0:	23ac      	movs	r3, #172	; 0xac
    75f2:	f000 fcce 	bl	7f92 <printk>
    75f6:	4858      	ldr	r0, [pc, #352]	; (7758 <work_queue_main+0x21c>)
    75f8:	4631      	mov	r1, r6
    75fa:	f000 fcca 	bl	7f92 <printk>
    75fe:	4851      	ldr	r0, [pc, #324]	; (7744 <work_queue_main+0x208>)
    7600:	21ac      	movs	r1, #172	; 0xac
    7602:	f000 fbef 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    7606:	f388 8811 	msr	BASEPRI, r8
    760a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    760e:	f1b9 0f00 	cmp.w	r9, #0
    7612:	d10b      	bne.n	762c <work_queue_main+0xf0>
    7614:	4951      	ldr	r1, [pc, #324]	; (775c <work_queue_main+0x220>)
    7616:	484d      	ldr	r0, [pc, #308]	; (774c <work_queue_main+0x210>)
    7618:	4a51      	ldr	r2, [pc, #324]	; (7760 <work_queue_main+0x224>)
    761a:	f44f 7322 	mov.w	r3, #648	; 0x288
    761e:	f000 fcb8 	bl	7f92 <printk>
    7622:	484f      	ldr	r0, [pc, #316]	; (7760 <work_queue_main+0x224>)
    7624:	f44f 7122 	mov.w	r1, #648	; 0x288
    7628:	f000 fbdc 	bl	7de4 <assert_post_action>
		handler(work);
    762c:	4628      	mov	r0, r5
    762e:	47c8      	blx	r9
	__asm__ volatile(
    7630:	f04f 0320 	mov.w	r3, #32
    7634:	f3ef 8a11 	mrs	sl, BASEPRI
    7638:	f383 8812 	msr	BASEPRI_MAX, r3
    763c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7640:	4630      	mov	r0, r6
    7642:	f7ff fb1b 	bl	6c7c <z_spin_lock_valid>
    7646:	b968      	cbnz	r0, 7664 <work_queue_main+0x128>
    7648:	4a3e      	ldr	r2, [pc, #248]	; (7744 <work_queue_main+0x208>)
    764a:	493f      	ldr	r1, [pc, #252]	; (7748 <work_queue_main+0x20c>)
    764c:	483f      	ldr	r0, [pc, #252]	; (774c <work_queue_main+0x210>)
    764e:	2381      	movs	r3, #129	; 0x81
    7650:	f000 fc9f 	bl	7f92 <printk>
    7654:	483e      	ldr	r0, [pc, #248]	; (7750 <work_queue_main+0x214>)
    7656:	4631      	mov	r1, r6
    7658:	f000 fc9b 	bl	7f92 <printk>
    765c:	4839      	ldr	r0, [pc, #228]	; (7744 <work_queue_main+0x208>)
    765e:	2181      	movs	r1, #129	; 0x81
    7660:	f000 fbc0 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7664:	4630      	mov	r0, r6
    7666:	f7ff fb27 	bl	6cb8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    766a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    766c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    766e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7672:	d42e      	bmi.n	76d2 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    7674:	60ea      	str	r2, [r5, #12]
    7676:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    767a:	f023 0302 	bic.w	r3, r3, #2
    767e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7682:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    7684:	f3c3 2500 	ubfx	r5, r3, #8, #1
    7688:	f7ff fb06 	bl	6c98 <z_spin_unlock_valid>
    768c:	b968      	cbnz	r0, 76aa <work_queue_main+0x16e>
    768e:	4a2d      	ldr	r2, [pc, #180]	; (7744 <work_queue_main+0x208>)
    7690:	4930      	ldr	r1, [pc, #192]	; (7754 <work_queue_main+0x218>)
    7692:	482e      	ldr	r0, [pc, #184]	; (774c <work_queue_main+0x210>)
    7694:	23ac      	movs	r3, #172	; 0xac
    7696:	f000 fc7c 	bl	7f92 <printk>
    769a:	482f      	ldr	r0, [pc, #188]	; (7758 <work_queue_main+0x21c>)
    769c:	4631      	mov	r1, r6
    769e:	f000 fc78 	bl	7f92 <printk>
    76a2:	4828      	ldr	r0, [pc, #160]	; (7744 <work_queue_main+0x208>)
    76a4:	21ac      	movs	r1, #172	; 0xac
    76a6:	f000 fb9d 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    76aa:	f38a 8811 	msr	BASEPRI, sl
    76ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    76b2:	2d00      	cmp	r5, #0
    76b4:	f47f af48 	bne.w	7548 <work_queue_main+0xc>
	z_impl_k_yield();
    76b8:	f7fe fdf8 	bl	62ac <z_impl_k_yield>
}
    76bc:	e744      	b.n	7548 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    76be:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    76c2:	2200      	movs	r2, #0
    76c4:	2101      	movs	r1, #1
    76c6:	4628      	mov	r0, r5
    76c8:	f7ff f844 	bl	6754 <z_sched_wake>
    76cc:	2800      	cmp	r0, #0
    76ce:	d1f8      	bne.n	76c2 <work_queue_main+0x186>
    76d0:	e763      	b.n	759a <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    76d2:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    76d4:	f023 0303 	bic.w	r3, r3, #3
    76d8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    76da:	2800      	cmp	r0, #0
    76dc:	d0cb      	beq.n	7676 <work_queue_main+0x13a>
	return node->next;
    76de:	6803      	ldr	r3, [r0, #0]
    76e0:	2b00      	cmp	r3, #0
    76e2:	bf38      	it	cc
    76e4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    76e6:	f04f 0900 	mov.w	r9, #0
    76ea:	4698      	mov	r8, r3
	parent->next = child;
    76ec:	46cb      	mov	fp, r9
		if (wc->work == work) {
    76ee:	6843      	ldr	r3, [r0, #4]
    76f0:	429d      	cmp	r5, r3
    76f2:	4602      	mov	r2, r0
    76f4:	d10d      	bne.n	7712 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    76f6:	6802      	ldr	r2, [r0, #0]
    76f8:	f1b9 0f00 	cmp.w	r9, #0
    76fc:	d115      	bne.n	772a <work_queue_main+0x1ee>
    76fe:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    7700:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    7702:	4283      	cmp	r3, r0
    7704:	d100      	bne.n	7708 <work_queue_main+0x1cc>
	list->tail = node;
    7706:	607a      	str	r2, [r7, #4]
	parent->next = child;
    7708:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    770c:	f7ff f88c 	bl	6828 <z_impl_k_sem_give>
}
    7710:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7712:	f1b8 0f00 	cmp.w	r8, #0
    7716:	d0ae      	beq.n	7676 <work_queue_main+0x13a>
	return node->next;
    7718:	f8d8 3000 	ldr.w	r3, [r8]
    771c:	2b00      	cmp	r3, #0
    771e:	bf38      	it	cc
    7720:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7722:	4640      	mov	r0, r8
    7724:	4691      	mov	r9, r2
    7726:	4698      	mov	r8, r3
    7728:	e7e1      	b.n	76ee <work_queue_main+0x1b2>
	parent->next = child;
    772a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    772e:	687b      	ldr	r3, [r7, #4]
    7730:	4283      	cmp	r3, r0
	list->tail = node;
    7732:	bf08      	it	eq
    7734:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    7738:	e7e6      	b.n	7708 <work_queue_main+0x1cc>
    773a:	bf00      	nop
    773c:	20000a7c 	.word	0x20000a7c
    7740:	20000a80 	.word	0x20000a80
    7744:	00008f3a 	.word	0x00008f3a
    7748:	00008f8c 	.word	0x00008f8c
    774c:	00008e27 	.word	0x00008e27
    7750:	00008fa1 	.word	0x00008fa1
    7754:	00008f60 	.word	0x00008f60
    7758:	00008f77 	.word	0x00008f77
    775c:	00009dbf 	.word	0x00009dbf
    7760:	00009d9e 	.word	0x00009d9e

00007764 <submit_to_queue_locked>:
{
    7764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    7766:	68c3      	ldr	r3, [r0, #12]
    7768:	079a      	lsls	r2, r3, #30
{
    776a:	4604      	mov	r4, r0
    776c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    776e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    7772:	d42b      	bmi.n	77cc <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    7774:	075f      	lsls	r7, r3, #29
    7776:	d42b      	bmi.n	77d0 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    7778:	680a      	ldr	r2, [r1, #0]
    777a:	b90a      	cbnz	r2, 7780 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    777c:	6882      	ldr	r2, [r0, #8]
    777e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    7780:	07d8      	lsls	r0, r3, #31
    7782:	d528      	bpl.n	77d6 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    7784:	68a3      	ldr	r3, [r4, #8]
    7786:	b95b      	cbnz	r3, 77a0 <submit_to_queue_locked+0x3c>
    7788:	4924      	ldr	r1, [pc, #144]	; (781c <submit_to_queue_locked+0xb8>)
    778a:	4825      	ldr	r0, [pc, #148]	; (7820 <submit_to_queue_locked+0xbc>)
    778c:	4a25      	ldr	r2, [pc, #148]	; (7824 <submit_to_queue_locked+0xc0>)
    778e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    7792:	f000 fbfe 	bl	7f92 <printk>
    7796:	4823      	ldr	r0, [pc, #140]	; (7824 <submit_to_queue_locked+0xc0>)
    7798:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    779c:	f000 fb22 	bl	7de4 <assert_post_action>
			*queuep = work->queue;
    77a0:	68a3      	ldr	r3, [r4, #8]
    77a2:	6033      	str	r3, [r6, #0]
			ret = 2;
    77a4:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    77a6:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    77a8:	b38f      	cbz	r7, 780e <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    77aa:	4b1f      	ldr	r3, [pc, #124]	; (7828 <submit_to_queue_locked+0xc4>)
    77ac:	689b      	ldr	r3, [r3, #8]
    77ae:	42bb      	cmp	r3, r7
    77b0:	d113      	bne.n	77da <submit_to_queue_locked+0x76>
    77b2:	f000 ff67 	bl	8684 <k_is_in_isr>
    77b6:	f080 0001 	eor.w	r0, r0, #1
    77ba:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    77bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    77c0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    77c2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    77c6:	d525      	bpl.n	7814 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    77c8:	b14a      	cbz	r2, 77de <submit_to_queue_locked+0x7a>
    77ca:	b950      	cbnz	r0, 77e2 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    77cc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    77d0:	2300      	movs	r3, #0
    77d2:	6033      	str	r3, [r6, #0]
	return ret;
    77d4:	e015      	b.n	7802 <submit_to_queue_locked+0x9e>
		ret = 1;
    77d6:	2501      	movs	r5, #1
    77d8:	e7e5      	b.n	77a6 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    77da:	2000      	movs	r0, #0
    77dc:	e7ee      	b.n	77bc <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    77de:	071b      	lsls	r3, r3, #28
    77e0:	d4f4      	bmi.n	77cc <submit_to_queue_locked+0x68>
	parent->next = child;
    77e2:	2300      	movs	r3, #0
    77e4:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    77e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    77ea:	b963      	cbnz	r3, 7806 <submit_to_queue_locked+0xa2>
	list->head = node;
    77ec:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    77f0:	4638      	mov	r0, r7
    77f2:	f000 ff77 	bl	86e4 <notify_queue_locked>
	*flagp |= BIT(bit);
    77f6:	68e3      	ldr	r3, [r4, #12]
    77f8:	f043 0304 	orr.w	r3, r3, #4
    77fc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    77fe:	6833      	ldr	r3, [r6, #0]
    7800:	60a3      	str	r3, [r4, #8]
}
    7802:	4628      	mov	r0, r5
    7804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7806:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7808:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    780c:	e7f0      	b.n	77f0 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    780e:	f06f 0515 	mvn.w	r5, #21
    7812:	e7dd      	b.n	77d0 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    7814:	f06f 0512 	mvn.w	r5, #18
    7818:	e7da      	b.n	77d0 <submit_to_queue_locked+0x6c>
    781a:	bf00      	nop
    781c:	00009dd6 	.word	0x00009dd6
    7820:	00008e27 	.word	0x00008e27
    7824:	00009d9e 	.word	0x00009d9e
    7828:	20000a2c 	.word	0x20000a2c

0000782c <k_work_submit_to_queue>:
{
    782c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    782e:	460c      	mov	r4, r1
{
    7830:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    7832:	b959      	cbnz	r1, 784c <k_work_submit_to_queue+0x20>
    7834:	4926      	ldr	r1, [pc, #152]	; (78d0 <k_work_submit_to_queue+0xa4>)
    7836:	4827      	ldr	r0, [pc, #156]	; (78d4 <k_work_submit_to_queue+0xa8>)
    7838:	4a27      	ldr	r2, [pc, #156]	; (78d8 <k_work_submit_to_queue+0xac>)
    783a:	f240 1369 	movw	r3, #361	; 0x169
    783e:	f000 fba8 	bl	7f92 <printk>
    7842:	4825      	ldr	r0, [pc, #148]	; (78d8 <k_work_submit_to_queue+0xac>)
    7844:	f240 1169 	movw	r1, #361	; 0x169
    7848:	f000 facc 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    784c:	f04f 0320 	mov.w	r3, #32
    7850:	f3ef 8511 	mrs	r5, BASEPRI
    7854:	f383 8812 	msr	BASEPRI_MAX, r3
    7858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    785c:	481f      	ldr	r0, [pc, #124]	; (78dc <k_work_submit_to_queue+0xb0>)
    785e:	f7ff fa0d 	bl	6c7c <z_spin_lock_valid>
    7862:	b968      	cbnz	r0, 7880 <k_work_submit_to_queue+0x54>
    7864:	4a1e      	ldr	r2, [pc, #120]	; (78e0 <k_work_submit_to_queue+0xb4>)
    7866:	491f      	ldr	r1, [pc, #124]	; (78e4 <k_work_submit_to_queue+0xb8>)
    7868:	481a      	ldr	r0, [pc, #104]	; (78d4 <k_work_submit_to_queue+0xa8>)
    786a:	2381      	movs	r3, #129	; 0x81
    786c:	f000 fb91 	bl	7f92 <printk>
    7870:	491a      	ldr	r1, [pc, #104]	; (78dc <k_work_submit_to_queue+0xb0>)
    7872:	481d      	ldr	r0, [pc, #116]	; (78e8 <k_work_submit_to_queue+0xbc>)
    7874:	f000 fb8d 	bl	7f92 <printk>
    7878:	4819      	ldr	r0, [pc, #100]	; (78e0 <k_work_submit_to_queue+0xb4>)
    787a:	2181      	movs	r1, #129	; 0x81
    787c:	f000 fab2 	bl	7de4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7880:	4816      	ldr	r0, [pc, #88]	; (78dc <k_work_submit_to_queue+0xb0>)
    7882:	f7ff fa19 	bl	6cb8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    7886:	4620      	mov	r0, r4
    7888:	a901      	add	r1, sp, #4
    788a:	f7ff ff6b 	bl	7764 <submit_to_queue_locked>
    788e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7890:	4812      	ldr	r0, [pc, #72]	; (78dc <k_work_submit_to_queue+0xb0>)
    7892:	f7ff fa01 	bl	6c98 <z_spin_unlock_valid>
    7896:	b968      	cbnz	r0, 78b4 <k_work_submit_to_queue+0x88>
    7898:	4a11      	ldr	r2, [pc, #68]	; (78e0 <k_work_submit_to_queue+0xb4>)
    789a:	4914      	ldr	r1, [pc, #80]	; (78ec <k_work_submit_to_queue+0xc0>)
    789c:	480d      	ldr	r0, [pc, #52]	; (78d4 <k_work_submit_to_queue+0xa8>)
    789e:	23ac      	movs	r3, #172	; 0xac
    78a0:	f000 fb77 	bl	7f92 <printk>
    78a4:	490d      	ldr	r1, [pc, #52]	; (78dc <k_work_submit_to_queue+0xb0>)
    78a6:	4812      	ldr	r0, [pc, #72]	; (78f0 <k_work_submit_to_queue+0xc4>)
    78a8:	f000 fb73 	bl	7f92 <printk>
    78ac:	480c      	ldr	r0, [pc, #48]	; (78e0 <k_work_submit_to_queue+0xb4>)
    78ae:	21ac      	movs	r1, #172	; 0xac
    78b0:	f000 fa98 	bl	7de4 <assert_post_action>
	__asm__ volatile(
    78b4:	f385 8811 	msr	BASEPRI, r5
    78b8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    78bc:	2c00      	cmp	r4, #0
    78be:	dd04      	ble.n	78ca <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    78c0:	f7fe fe84 	bl	65cc <z_impl_k_is_preempt_thread>
    78c4:	b108      	cbz	r0, 78ca <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    78c6:	f7fe fcf1 	bl	62ac <z_impl_k_yield>
}
    78ca:	4620      	mov	r0, r4
    78cc:	b003      	add	sp, #12
    78ce:	bd30      	pop	{r4, r5, pc}
    78d0:	00009df1 	.word	0x00009df1
    78d4:	00008e27 	.word	0x00008e27
    78d8:	00009d9e 	.word	0x00009d9e
    78dc:	20000a7c 	.word	0x20000a7c
    78e0:	00008f3a 	.word	0x00008f3a
    78e4:	00008f8c 	.word	0x00008f8c
    78e8:	00008fa1 	.word	0x00008fa1
    78ec:	00008f60 	.word	0x00008f60
    78f0:	00008f77 	.word	0x00008f77

000078f4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    78f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78f8:	b088      	sub	sp, #32
    78fa:	460e      	mov	r6, r1
    78fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    78fe:	4617      	mov	r7, r2
    7900:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    7902:	4604      	mov	r4, r0
    7904:	b958      	cbnz	r0, 791e <k_work_queue_start+0x2a>
    7906:	492e      	ldr	r1, [pc, #184]	; (79c0 <k_work_queue_start+0xcc>)
    7908:	482e      	ldr	r0, [pc, #184]	; (79c4 <k_work_queue_start+0xd0>)
    790a:	4a2f      	ldr	r2, [pc, #188]	; (79c8 <k_work_queue_start+0xd4>)
    790c:	f240 23b5 	movw	r3, #693	; 0x2b5
    7910:	f000 fb3f 	bl	7f92 <printk>
    7914:	482c      	ldr	r0, [pc, #176]	; (79c8 <k_work_queue_start+0xd4>)
    7916:	f240 21b5 	movw	r1, #693	; 0x2b5
    791a:	f000 fa63 	bl	7de4 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    791e:	b95e      	cbnz	r6, 7938 <k_work_queue_start+0x44>
    7920:	492a      	ldr	r1, [pc, #168]	; (79cc <k_work_queue_start+0xd8>)
    7922:	4828      	ldr	r0, [pc, #160]	; (79c4 <k_work_queue_start+0xd0>)
    7924:	4a28      	ldr	r2, [pc, #160]	; (79c8 <k_work_queue_start+0xd4>)
    7926:	f240 23b6 	movw	r3, #694	; 0x2b6
    792a:	f000 fb32 	bl	7f92 <printk>
    792e:	4826      	ldr	r0, [pc, #152]	; (79c8 <k_work_queue_start+0xd4>)
    7930:	f240 21b6 	movw	r1, #694	; 0x2b6
    7934:	f000 fa56 	bl	7de4 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    7938:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    793c:	07db      	lsls	r3, r3, #31
    793e:	d50b      	bpl.n	7958 <k_work_queue_start+0x64>
    7940:	4923      	ldr	r1, [pc, #140]	; (79d0 <k_work_queue_start+0xdc>)
    7942:	4820      	ldr	r0, [pc, #128]	; (79c4 <k_work_queue_start+0xd0>)
    7944:	4a20      	ldr	r2, [pc, #128]	; (79c8 <k_work_queue_start+0xd4>)
    7946:	f240 23b7 	movw	r3, #695	; 0x2b7
    794a:	f000 fb22 	bl	7f92 <printk>
    794e:	481e      	ldr	r0, [pc, #120]	; (79c8 <k_work_queue_start+0xd4>)
    7950:	f240 21b7 	movw	r1, #695	; 0x2b7
    7954:	f000 fa46 	bl	7de4 <assert_post_action>
	list->head = NULL;
    7958:	2300      	movs	r3, #0
	list->tail = NULL;
    795a:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    795e:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7962:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    7966:	f104 0390 	add.w	r3, r4, #144	; 0x90
    796a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    796e:	b32d      	cbz	r5, 79bc <k_work_queue_start+0xc8>
    7970:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7972:	2b00      	cmp	r3, #0
    7974:	f240 1101 	movw	r1, #257	; 0x101
    7978:	bf08      	it	eq
    797a:	2101      	moveq	r1, #1
	*flagp = flags;
    797c:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7980:	f04f 32ff 	mov.w	r2, #4294967295
    7984:	f04f 33ff 	mov.w	r3, #4294967295
    7988:	e9cd 2306 	strd	r2, r3, [sp, #24]
    798c:	2200      	movs	r2, #0
    798e:	e9cd 8203 	strd	r8, r2, [sp, #12]
    7992:	e9cd 2201 	strd	r2, r2, [sp, #4]
    7996:	4b0f      	ldr	r3, [pc, #60]	; (79d4 <k_work_queue_start+0xe0>)
    7998:	9400      	str	r4, [sp, #0]
    799a:	463a      	mov	r2, r7
    799c:	4631      	mov	r1, r6
    799e:	4620      	mov	r0, r4
    79a0:	f7ff f88e 	bl	6ac0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    79a4:	b125      	cbz	r5, 79b0 <k_work_queue_start+0xbc>
    79a6:	6829      	ldr	r1, [r5, #0]
    79a8:	b111      	cbz	r1, 79b0 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    79aa:	4620      	mov	r0, r4
    79ac:	f000 fe70 	bl	8690 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    79b0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    79b2:	b008      	add	sp, #32
    79b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79b8:	f000 be6d 	b.w	8696 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    79bc:	2101      	movs	r1, #1
    79be:	e7dd      	b.n	797c <k_work_queue_start+0x88>
    79c0:	00009e05 	.word	0x00009e05
    79c4:	00008e27 	.word	0x00008e27
    79c8:	00009d9e 	.word	0x00009d9e
    79cc:	00009e0b 	.word	0x00009e0b
    79d0:	00009e11 	.word	0x00009e11
    79d4:	0000753d 	.word	0x0000753d

000079d8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    79d8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    79da:	4806      	ldr	r0, [pc, #24]	; (79f4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    79dc:	4a06      	ldr	r2, [pc, #24]	; (79f8 <z_data_copy+0x20>)
    79de:	4907      	ldr	r1, [pc, #28]	; (79fc <z_data_copy+0x24>)
    79e0:	1a12      	subs	r2, r2, r0
    79e2:	f000 fb22 	bl	802a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    79e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    79ea:	4a05      	ldr	r2, [pc, #20]	; (7a00 <z_data_copy+0x28>)
    79ec:	4905      	ldr	r1, [pc, #20]	; (7a04 <z_data_copy+0x2c>)
    79ee:	4806      	ldr	r0, [pc, #24]	; (7a08 <z_data_copy+0x30>)
    79f0:	f000 bb1b 	b.w	802a <memcpy>
    79f4:	20000000 	.word	0x20000000
    79f8:	20000258 	.word	0x20000258
    79fc:	00009e7c 	.word	0x00009e7c
    7a00:	00000000 	.word	0x00000000
    7a04:	00009e7c 	.word	0x00009e7c
    7a08:	20000000 	.word	0x20000000

00007a0c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7a0c:	4a02      	ldr	r2, [pc, #8]	; (7a18 <boot_banner+0xc>)
    7a0e:	4903      	ldr	r1, [pc, #12]	; (7a1c <boot_banner+0x10>)
    7a10:	4803      	ldr	r0, [pc, #12]	; (7a20 <boot_banner+0x14>)
    7a12:	f000 babe 	b.w	7f92 <printk>
    7a16:	bf00      	nop
    7a18:	00009948 	.word	0x00009948
    7a1c:	00009e45 	.word	0x00009e45
    7a20:	00009e54 	.word	0x00009e54

00007a24 <nrf_cc3xx_platform_init_no_rng>:
    7a24:	b510      	push	{r4, lr}
    7a26:	4c0a      	ldr	r4, [pc, #40]	; (7a50 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7a28:	6823      	ldr	r3, [r4, #0]
    7a2a:	b11b      	cbz	r3, 7a34 <nrf_cc3xx_platform_init_no_rng+0x10>
    7a2c:	2301      	movs	r3, #1
    7a2e:	6023      	str	r3, [r4, #0]
    7a30:	2000      	movs	r0, #0
    7a32:	bd10      	pop	{r4, pc}
    7a34:	f000 f8d6 	bl	7be4 <CC_LibInitNoRng>
    7a38:	2800      	cmp	r0, #0
    7a3a:	d0f7      	beq.n	7a2c <nrf_cc3xx_platform_init_no_rng+0x8>
    7a3c:	3801      	subs	r0, #1
    7a3e:	2806      	cmp	r0, #6
    7a40:	d803      	bhi.n	7a4a <nrf_cc3xx_platform_init_no_rng+0x26>
    7a42:	4b04      	ldr	r3, [pc, #16]	; (7a54 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7a44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7a48:	bd10      	pop	{r4, pc}
    7a4a:	4803      	ldr	r0, [pc, #12]	; (7a58 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7a4c:	bd10      	pop	{r4, pc}
    7a4e:	bf00      	nop
    7a50:	20000a88 	.word	0x20000a88
    7a54:	00008b54 	.word	0x00008b54
    7a58:	ffff8ffe 	.word	0xffff8ffe

00007a5c <nrf_cc3xx_platform_abort>:
    7a5c:	f3bf 8f4f 	dsb	sy
    7a60:	4905      	ldr	r1, [pc, #20]	; (7a78 <nrf_cc3xx_platform_abort+0x1c>)
    7a62:	4b06      	ldr	r3, [pc, #24]	; (7a7c <nrf_cc3xx_platform_abort+0x20>)
    7a64:	68ca      	ldr	r2, [r1, #12]
    7a66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7a6a:	4313      	orrs	r3, r2
    7a6c:	60cb      	str	r3, [r1, #12]
    7a6e:	f3bf 8f4f 	dsb	sy
    7a72:	bf00      	nop
    7a74:	e7fd      	b.n	7a72 <nrf_cc3xx_platform_abort+0x16>
    7a76:	bf00      	nop
    7a78:	e000ed00 	.word	0xe000ed00
    7a7c:	05fa0004 	.word	0x05fa0004

00007a80 <CC_PalAbort>:
    7a80:	b4f0      	push	{r4, r5, r6, r7}
    7a82:	4f09      	ldr	r7, [pc, #36]	; (7aa8 <CC_PalAbort+0x28>)
    7a84:	4e09      	ldr	r6, [pc, #36]	; (7aac <CC_PalAbort+0x2c>)
    7a86:	4c0a      	ldr	r4, [pc, #40]	; (7ab0 <CC_PalAbort+0x30>)
    7a88:	4a0a      	ldr	r2, [pc, #40]	; (7ab4 <CC_PalAbort+0x34>)
    7a8a:	4d0b      	ldr	r5, [pc, #44]	; (7ab8 <CC_PalAbort+0x38>)
    7a8c:	490b      	ldr	r1, [pc, #44]	; (7abc <CC_PalAbort+0x3c>)
    7a8e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7a92:	603b      	str	r3, [r7, #0]
    7a94:	6852      	ldr	r2, [r2, #4]
    7a96:	6033      	str	r3, [r6, #0]
    7a98:	6023      	str	r3, [r4, #0]
    7a9a:	2400      	movs	r4, #0
    7a9c:	602b      	str	r3, [r5, #0]
    7a9e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7aa2:	bcf0      	pop	{r4, r5, r6, r7}
    7aa4:	4710      	bx	r2
    7aa6:	bf00      	nop
    7aa8:	5002b400 	.word	0x5002b400
    7aac:	5002b404 	.word	0x5002b404
    7ab0:	5002b408 	.word	0x5002b408
    7ab4:	2000018c 	.word	0x2000018c
    7ab8:	5002b40c 	.word	0x5002b40c
    7abc:	5002a000 	.word	0x5002a000

00007ac0 <nrf_cc3xx_platform_set_abort>:
    7ac0:	e9d0 1200 	ldrd	r1, r2, [r0]
    7ac4:	4b01      	ldr	r3, [pc, #4]	; (7acc <nrf_cc3xx_platform_set_abort+0xc>)
    7ac6:	e9c3 1200 	strd	r1, r2, [r3]
    7aca:	4770      	bx	lr
    7acc:	2000018c 	.word	0x2000018c

00007ad0 <mutex_free>:
    7ad0:	b510      	push	{r4, lr}
    7ad2:	4604      	mov	r4, r0
    7ad4:	b130      	cbz	r0, 7ae4 <mutex_free+0x14>
    7ad6:	6863      	ldr	r3, [r4, #4]
    7ad8:	06db      	lsls	r3, r3, #27
    7ada:	d502      	bpl.n	7ae2 <mutex_free+0x12>
    7adc:	2300      	movs	r3, #0
    7ade:	6023      	str	r3, [r4, #0]
    7ae0:	6063      	str	r3, [r4, #4]
    7ae2:	bd10      	pop	{r4, pc}
    7ae4:	4b02      	ldr	r3, [pc, #8]	; (7af0 <mutex_free+0x20>)
    7ae6:	4803      	ldr	r0, [pc, #12]	; (7af4 <mutex_free+0x24>)
    7ae8:	685b      	ldr	r3, [r3, #4]
    7aea:	4798      	blx	r3
    7aec:	e7f3      	b.n	7ad6 <mutex_free+0x6>
    7aee:	bf00      	nop
    7af0:	2000018c 	.word	0x2000018c
    7af4:	00008b70 	.word	0x00008b70

00007af8 <mutex_unlock>:
    7af8:	b168      	cbz	r0, 7b16 <mutex_unlock+0x1e>
    7afa:	6843      	ldr	r3, [r0, #4]
    7afc:	b13b      	cbz	r3, 7b0e <mutex_unlock+0x16>
    7afe:	06db      	lsls	r3, r3, #27
    7b00:	d507      	bpl.n	7b12 <mutex_unlock+0x1a>
    7b02:	f3bf 8f5f 	dmb	sy
    7b06:	2300      	movs	r3, #0
    7b08:	6003      	str	r3, [r0, #0]
    7b0a:	4618      	mov	r0, r3
    7b0c:	4770      	bx	lr
    7b0e:	4803      	ldr	r0, [pc, #12]	; (7b1c <mutex_unlock+0x24>)
    7b10:	4770      	bx	lr
    7b12:	4803      	ldr	r0, [pc, #12]	; (7b20 <mutex_unlock+0x28>)
    7b14:	4770      	bx	lr
    7b16:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7b1a:	4770      	bx	lr
    7b1c:	ffff8fea 	.word	0xffff8fea
    7b20:	ffff8fe9 	.word	0xffff8fe9

00007b24 <mutex_init>:
    7b24:	b510      	push	{r4, lr}
    7b26:	4604      	mov	r4, r0
    7b28:	b120      	cbz	r0, 7b34 <mutex_init+0x10>
    7b2a:	2200      	movs	r2, #0
    7b2c:	2311      	movs	r3, #17
    7b2e:	6022      	str	r2, [r4, #0]
    7b30:	6063      	str	r3, [r4, #4]
    7b32:	bd10      	pop	{r4, pc}
    7b34:	4801      	ldr	r0, [pc, #4]	; (7b3c <mutex_init+0x18>)
    7b36:	f7ff ffa3 	bl	7a80 <CC_PalAbort>
    7b3a:	e7f6      	b.n	7b2a <mutex_init+0x6>
    7b3c:	00008b98 	.word	0x00008b98

00007b40 <mutex_lock>:
    7b40:	b1c0      	cbz	r0, 7b74 <mutex_lock+0x34>
    7b42:	6843      	ldr	r3, [r0, #4]
    7b44:	b1a3      	cbz	r3, 7b70 <mutex_lock+0x30>
    7b46:	06db      	lsls	r3, r3, #27
    7b48:	d510      	bpl.n	7b6c <mutex_lock+0x2c>
    7b4a:	2201      	movs	r2, #1
    7b4c:	f3bf 8f5b 	dmb	ish
    7b50:	e850 3f00 	ldrex	r3, [r0]
    7b54:	e840 2100 	strex	r1, r2, [r0]
    7b58:	2900      	cmp	r1, #0
    7b5a:	d1f9      	bne.n	7b50 <mutex_lock+0x10>
    7b5c:	f3bf 8f5b 	dmb	ish
    7b60:	2b01      	cmp	r3, #1
    7b62:	d0f3      	beq.n	7b4c <mutex_lock+0xc>
    7b64:	f3bf 8f5f 	dmb	sy
    7b68:	2000      	movs	r0, #0
    7b6a:	4770      	bx	lr
    7b6c:	4803      	ldr	r0, [pc, #12]	; (7b7c <mutex_lock+0x3c>)
    7b6e:	4770      	bx	lr
    7b70:	4803      	ldr	r0, [pc, #12]	; (7b80 <mutex_lock+0x40>)
    7b72:	4770      	bx	lr
    7b74:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7b78:	4770      	bx	lr
    7b7a:	bf00      	nop
    7b7c:	ffff8fe9 	.word	0xffff8fe9
    7b80:	ffff8fea 	.word	0xffff8fea

00007b84 <nrf_cc3xx_platform_set_mutexes>:
    7b84:	b570      	push	{r4, r5, r6, lr}
    7b86:	e9d0 2300 	ldrd	r2, r3, [r0]
    7b8a:	4c13      	ldr	r4, [pc, #76]	; (7bd8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7b8c:	4d13      	ldr	r5, [pc, #76]	; (7bdc <nrf_cc3xx_platform_set_mutexes+0x58>)
    7b8e:	e9c4 2300 	strd	r2, r3, [r4]
    7b92:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    7b96:	e9c4 6302 	strd	r6, r3, [r4, #8]
    7b9a:	4b11      	ldr	r3, [pc, #68]	; (7be0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7b9c:	6808      	ldr	r0, [r1, #0]
    7b9e:	6018      	str	r0, [r3, #0]
    7ba0:	6848      	ldr	r0, [r1, #4]
    7ba2:	6058      	str	r0, [r3, #4]
    7ba4:	6888      	ldr	r0, [r1, #8]
    7ba6:	6098      	str	r0, [r3, #8]
    7ba8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7bac:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7bb0:	60de      	str	r6, [r3, #12]
    7bb2:	6118      	str	r0, [r3, #16]
    7bb4:	06cb      	lsls	r3, r1, #27
    7bb6:	d50d      	bpl.n	7bd4 <nrf_cc3xx_platform_set_mutexes+0x50>
    7bb8:	2300      	movs	r3, #0
    7bba:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7bbe:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7bc2:	f505 7088 	add.w	r0, r5, #272	; 0x110
    7bc6:	4790      	blx	r2
    7bc8:	6823      	ldr	r3, [r4, #0]
    7bca:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bd2:	4718      	bx	r3
    7bd4:	bd70      	pop	{r4, r5, r6, pc}
    7bd6:	bf00      	nop
    7bd8:	2000019c 	.word	0x2000019c
    7bdc:	20000aa4 	.word	0x20000aa4
    7be0:	200001ac 	.word	0x200001ac

00007be4 <CC_LibInitNoRng>:
    7be4:	b510      	push	{r4, lr}
    7be6:	f000 f833 	bl	7c50 <CC_HalInit>
    7bea:	b120      	cbz	r0, 7bf6 <CC_LibInitNoRng+0x12>
    7bec:	2403      	movs	r4, #3
    7bee:	f000 f867 	bl	7cc0 <CC_PalTerminate>
    7bf2:	4620      	mov	r0, r4
    7bf4:	bd10      	pop	{r4, pc}
    7bf6:	f000 f835 	bl	7c64 <CC_PalInit>
    7bfa:	b990      	cbnz	r0, 7c22 <CC_LibInitNoRng+0x3e>
    7bfc:	f000 f8b0 	bl	7d60 <CC_PalPowerSaveModeSelect>
    7c00:	b990      	cbnz	r0, 7c28 <CC_LibInitNoRng+0x44>
    7c02:	4b0f      	ldr	r3, [pc, #60]	; (7c40 <CC_LibInitNoRng+0x5c>)
    7c04:	681b      	ldr	r3, [r3, #0]
    7c06:	0e1b      	lsrs	r3, r3, #24
    7c08:	2bf0      	cmp	r3, #240	; 0xf0
    7c0a:	d108      	bne.n	7c1e <CC_LibInitNoRng+0x3a>
    7c0c:	4a0d      	ldr	r2, [pc, #52]	; (7c44 <CC_LibInitNoRng+0x60>)
    7c0e:	4b0e      	ldr	r3, [pc, #56]	; (7c48 <CC_LibInitNoRng+0x64>)
    7c10:	6812      	ldr	r2, [r2, #0]
    7c12:	429a      	cmp	r2, r3
    7c14:	d00a      	beq.n	7c2c <CC_LibInitNoRng+0x48>
    7c16:	2407      	movs	r4, #7
    7c18:	f000 f81c 	bl	7c54 <CC_HalTerminate>
    7c1c:	e7e7      	b.n	7bee <CC_LibInitNoRng+0xa>
    7c1e:	2406      	movs	r4, #6
    7c20:	e7fa      	b.n	7c18 <CC_LibInitNoRng+0x34>
    7c22:	2404      	movs	r4, #4
    7c24:	4620      	mov	r0, r4
    7c26:	bd10      	pop	{r4, pc}
    7c28:	2400      	movs	r4, #0
    7c2a:	e7f5      	b.n	7c18 <CC_LibInitNoRng+0x34>
    7c2c:	2001      	movs	r0, #1
    7c2e:	f000 f897 	bl	7d60 <CC_PalPowerSaveModeSelect>
    7c32:	4604      	mov	r4, r0
    7c34:	2800      	cmp	r0, #0
    7c36:	d1f7      	bne.n	7c28 <CC_LibInitNoRng+0x44>
    7c38:	4b04      	ldr	r3, [pc, #16]	; (7c4c <CC_LibInitNoRng+0x68>)
    7c3a:	6018      	str	r0, [r3, #0]
    7c3c:	e7d9      	b.n	7bf2 <CC_LibInitNoRng+0xe>
    7c3e:	bf00      	nop
    7c40:	5002b928 	.word	0x5002b928
    7c44:	5002ba24 	.word	0x5002ba24
    7c48:	20e00000 	.word	0x20e00000
    7c4c:	5002ba0c 	.word	0x5002ba0c

00007c50 <CC_HalInit>:
    7c50:	2000      	movs	r0, #0
    7c52:	4770      	bx	lr

00007c54 <CC_HalTerminate>:
    7c54:	2000      	movs	r0, #0
    7c56:	4770      	bx	lr

00007c58 <CC_HalMaskInterrupt>:
    7c58:	4b01      	ldr	r3, [pc, #4]	; (7c60 <CC_HalMaskInterrupt+0x8>)
    7c5a:	6018      	str	r0, [r3, #0]
    7c5c:	4770      	bx	lr
    7c5e:	bf00      	nop
    7c60:	5002ba04 	.word	0x5002ba04

00007c64 <CC_PalInit>:
    7c64:	b510      	push	{r4, lr}
    7c66:	4811      	ldr	r0, [pc, #68]	; (7cac <CC_PalInit+0x48>)
    7c68:	f000 f848 	bl	7cfc <CC_PalMutexCreate>
    7c6c:	b100      	cbz	r0, 7c70 <CC_PalInit+0xc>
    7c6e:	bd10      	pop	{r4, pc}
    7c70:	480f      	ldr	r0, [pc, #60]	; (7cb0 <CC_PalInit+0x4c>)
    7c72:	f000 f843 	bl	7cfc <CC_PalMutexCreate>
    7c76:	2800      	cmp	r0, #0
    7c78:	d1f9      	bne.n	7c6e <CC_PalInit+0xa>
    7c7a:	4c0e      	ldr	r4, [pc, #56]	; (7cb4 <CC_PalInit+0x50>)
    7c7c:	4620      	mov	r0, r4
    7c7e:	f000 f83d 	bl	7cfc <CC_PalMutexCreate>
    7c82:	2800      	cmp	r0, #0
    7c84:	d1f3      	bne.n	7c6e <CC_PalInit+0xa>
    7c86:	4b0c      	ldr	r3, [pc, #48]	; (7cb8 <CC_PalInit+0x54>)
    7c88:	480c      	ldr	r0, [pc, #48]	; (7cbc <CC_PalInit+0x58>)
    7c8a:	601c      	str	r4, [r3, #0]
    7c8c:	f000 f836 	bl	7cfc <CC_PalMutexCreate>
    7c90:	4601      	mov	r1, r0
    7c92:	2800      	cmp	r0, #0
    7c94:	d1eb      	bne.n	7c6e <CC_PalInit+0xa>
    7c96:	f000 f82d 	bl	7cf4 <CC_PalDmaInit>
    7c9a:	4604      	mov	r4, r0
    7c9c:	b108      	cbz	r0, 7ca2 <CC_PalInit+0x3e>
    7c9e:	4620      	mov	r0, r4
    7ca0:	bd10      	pop	{r4, pc}
    7ca2:	f000 f83f 	bl	7d24 <CC_PalPowerSaveModeInit>
    7ca6:	4620      	mov	r0, r4
    7ca8:	e7fa      	b.n	7ca0 <CC_PalInit+0x3c>
    7caa:	bf00      	nop
    7cac:	200001e4 	.word	0x200001e4
    7cb0:	200001d8 	.word	0x200001d8
    7cb4:	200001e0 	.word	0x200001e0
    7cb8:	200001e8 	.word	0x200001e8
    7cbc:	200001dc 	.word	0x200001dc

00007cc0 <CC_PalTerminate>:
    7cc0:	b508      	push	{r3, lr}
    7cc2:	4808      	ldr	r0, [pc, #32]	; (7ce4 <CC_PalTerminate+0x24>)
    7cc4:	f000 f824 	bl	7d10 <CC_PalMutexDestroy>
    7cc8:	4807      	ldr	r0, [pc, #28]	; (7ce8 <CC_PalTerminate+0x28>)
    7cca:	f000 f821 	bl	7d10 <CC_PalMutexDestroy>
    7cce:	4807      	ldr	r0, [pc, #28]	; (7cec <CC_PalTerminate+0x2c>)
    7cd0:	f000 f81e 	bl	7d10 <CC_PalMutexDestroy>
    7cd4:	4806      	ldr	r0, [pc, #24]	; (7cf0 <CC_PalTerminate+0x30>)
    7cd6:	f000 f81b 	bl	7d10 <CC_PalMutexDestroy>
    7cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7cde:	f000 b80b 	b.w	7cf8 <CC_PalDmaTerminate>
    7ce2:	bf00      	nop
    7ce4:	200001e4 	.word	0x200001e4
    7ce8:	200001d8 	.word	0x200001d8
    7cec:	200001e0 	.word	0x200001e0
    7cf0:	200001dc 	.word	0x200001dc

00007cf4 <CC_PalDmaInit>:
    7cf4:	2000      	movs	r0, #0
    7cf6:	4770      	bx	lr

00007cf8 <CC_PalDmaTerminate>:
    7cf8:	4770      	bx	lr
    7cfa:	bf00      	nop

00007cfc <CC_PalMutexCreate>:
    7cfc:	b508      	push	{r3, lr}
    7cfe:	4b03      	ldr	r3, [pc, #12]	; (7d0c <CC_PalMutexCreate+0x10>)
    7d00:	6802      	ldr	r2, [r0, #0]
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	6810      	ldr	r0, [r2, #0]
    7d06:	4798      	blx	r3
    7d08:	2000      	movs	r0, #0
    7d0a:	bd08      	pop	{r3, pc}
    7d0c:	2000019c 	.word	0x2000019c

00007d10 <CC_PalMutexDestroy>:
    7d10:	b508      	push	{r3, lr}
    7d12:	4b03      	ldr	r3, [pc, #12]	; (7d20 <CC_PalMutexDestroy+0x10>)
    7d14:	6802      	ldr	r2, [r0, #0]
    7d16:	685b      	ldr	r3, [r3, #4]
    7d18:	6810      	ldr	r0, [r2, #0]
    7d1a:	4798      	blx	r3
    7d1c:	2000      	movs	r0, #0
    7d1e:	bd08      	pop	{r3, pc}
    7d20:	2000019c 	.word	0x2000019c

00007d24 <CC_PalPowerSaveModeInit>:
    7d24:	b570      	push	{r4, r5, r6, lr}
    7d26:	4c09      	ldr	r4, [pc, #36]	; (7d4c <CC_PalPowerSaveModeInit+0x28>)
    7d28:	4d09      	ldr	r5, [pc, #36]	; (7d50 <CC_PalPowerSaveModeInit+0x2c>)
    7d2a:	6920      	ldr	r0, [r4, #16]
    7d2c:	68ab      	ldr	r3, [r5, #8]
    7d2e:	4798      	blx	r3
    7d30:	b118      	cbz	r0, 7d3a <CC_PalPowerSaveModeInit+0x16>
    7d32:	4b08      	ldr	r3, [pc, #32]	; (7d54 <CC_PalPowerSaveModeInit+0x30>)
    7d34:	4808      	ldr	r0, [pc, #32]	; (7d58 <CC_PalPowerSaveModeInit+0x34>)
    7d36:	685b      	ldr	r3, [r3, #4]
    7d38:	4798      	blx	r3
    7d3a:	4a08      	ldr	r2, [pc, #32]	; (7d5c <CC_PalPowerSaveModeInit+0x38>)
    7d3c:	68eb      	ldr	r3, [r5, #12]
    7d3e:	6920      	ldr	r0, [r4, #16]
    7d40:	2100      	movs	r1, #0
    7d42:	6011      	str	r1, [r2, #0]
    7d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d48:	4718      	bx	r3
    7d4a:	bf00      	nop
    7d4c:	200001ac 	.word	0x200001ac
    7d50:	2000019c 	.word	0x2000019c
    7d54:	2000018c 	.word	0x2000018c
    7d58:	00008bbc 	.word	0x00008bbc
    7d5c:	20000a9c 	.word	0x20000a9c

00007d60 <CC_PalPowerSaveModeSelect>:
    7d60:	b570      	push	{r4, r5, r6, lr}
    7d62:	4d1a      	ldr	r5, [pc, #104]	; (7dcc <CC_PalPowerSaveModeSelect+0x6c>)
    7d64:	4e1a      	ldr	r6, [pc, #104]	; (7dd0 <CC_PalPowerSaveModeSelect+0x70>)
    7d66:	4604      	mov	r4, r0
    7d68:	68b2      	ldr	r2, [r6, #8]
    7d6a:	6928      	ldr	r0, [r5, #16]
    7d6c:	4790      	blx	r2
    7d6e:	b9f0      	cbnz	r0, 7dae <CC_PalPowerSaveModeSelect+0x4e>
    7d70:	b15c      	cbz	r4, 7d8a <CC_PalPowerSaveModeSelect+0x2a>
    7d72:	4c18      	ldr	r4, [pc, #96]	; (7dd4 <CC_PalPowerSaveModeSelect+0x74>)
    7d74:	6823      	ldr	r3, [r4, #0]
    7d76:	b1ab      	cbz	r3, 7da4 <CC_PalPowerSaveModeSelect+0x44>
    7d78:	2b01      	cmp	r3, #1
    7d7a:	d01a      	beq.n	7db2 <CC_PalPowerSaveModeSelect+0x52>
    7d7c:	3b01      	subs	r3, #1
    7d7e:	6023      	str	r3, [r4, #0]
    7d80:	6928      	ldr	r0, [r5, #16]
    7d82:	68f3      	ldr	r3, [r6, #12]
    7d84:	4798      	blx	r3
    7d86:	2000      	movs	r0, #0
    7d88:	bd70      	pop	{r4, r5, r6, pc}
    7d8a:	4c12      	ldr	r4, [pc, #72]	; (7dd4 <CC_PalPowerSaveModeSelect+0x74>)
    7d8c:	6821      	ldr	r1, [r4, #0]
    7d8e:	b939      	cbnz	r1, 7da0 <CC_PalPowerSaveModeSelect+0x40>
    7d90:	4b11      	ldr	r3, [pc, #68]	; (7dd8 <CC_PalPowerSaveModeSelect+0x78>)
    7d92:	4a12      	ldr	r2, [pc, #72]	; (7ddc <CC_PalPowerSaveModeSelect+0x7c>)
    7d94:	2001      	movs	r0, #1
    7d96:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7d9a:	6813      	ldr	r3, [r2, #0]
    7d9c:	2b00      	cmp	r3, #0
    7d9e:	d1fc      	bne.n	7d9a <CC_PalPowerSaveModeSelect+0x3a>
    7da0:	3101      	adds	r1, #1
    7da2:	6021      	str	r1, [r4, #0]
    7da4:	68f3      	ldr	r3, [r6, #12]
    7da6:	6928      	ldr	r0, [r5, #16]
    7da8:	4798      	blx	r3
    7daa:	2000      	movs	r0, #0
    7dac:	bd70      	pop	{r4, r5, r6, pc}
    7dae:	480c      	ldr	r0, [pc, #48]	; (7de0 <CC_PalPowerSaveModeSelect+0x80>)
    7db0:	bd70      	pop	{r4, r5, r6, pc}
    7db2:	4a0a      	ldr	r2, [pc, #40]	; (7ddc <CC_PalPowerSaveModeSelect+0x7c>)
    7db4:	6813      	ldr	r3, [r2, #0]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d1fc      	bne.n	7db4 <CC_PalPowerSaveModeSelect+0x54>
    7dba:	4a07      	ldr	r2, [pc, #28]	; (7dd8 <CC_PalPowerSaveModeSelect+0x78>)
    7dbc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7dc0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7dc4:	f7ff ff48 	bl	7c58 <CC_HalMaskInterrupt>
    7dc8:	6823      	ldr	r3, [r4, #0]
    7dca:	e7d7      	b.n	7d7c <CC_PalPowerSaveModeSelect+0x1c>
    7dcc:	200001ac 	.word	0x200001ac
    7dd0:	2000019c 	.word	0x2000019c
    7dd4:	20000a9c 	.word	0x20000a9c
    7dd8:	5002a000 	.word	0x5002a000
    7ddc:	5002b910 	.word	0x5002b910
    7de0:	ffff8fe9 	.word	0xffff8fe9

00007de4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7de4:	4040      	eors	r0, r0
    7de6:	f380 8811 	msr	BASEPRI, r0
    7dea:	f04f 0004 	mov.w	r0, #4
    7dee:	df02      	svc	2
}
    7df0:	4770      	bx	lr

00007df2 <encode_uint>:
{
    7df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7df6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    7df8:	78d3      	ldrb	r3, [r2, #3]
{
    7dfa:	4614      	mov	r4, r2
	switch (specifier) {
    7dfc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7dfe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    7e02:	4606      	mov	r6, r0
    7e04:	460f      	mov	r7, r1
    7e06:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    7e08:	d02d      	beq.n	7e66 <encode_uint+0x74>
    7e0a:	d828      	bhi.n	7e5e <encode_uint+0x6c>
		return 16;
    7e0c:	2b58      	cmp	r3, #88	; 0x58
    7e0e:	bf14      	ite	ne
    7e10:	250a      	movne	r5, #10
    7e12:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    7e14:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    7e18:	46aa      	mov	sl, r5
    7e1a:	f04f 0b00 	mov.w	fp, #0
    7e1e:	4652      	mov	r2, sl
    7e20:	465b      	mov	r3, fp
    7e22:	4630      	mov	r0, r6
    7e24:	4639      	mov	r1, r7
    7e26:	f7f8 f96b 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e2a:	2a09      	cmp	r2, #9
    7e2c:	b2d3      	uxtb	r3, r2
    7e2e:	d81f      	bhi.n	7e70 <encode_uint+0x7e>
    7e30:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7e32:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e34:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    7e36:	bf08      	it	eq
    7e38:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e3a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    7e3e:	d301      	bcc.n	7e44 <encode_uint+0x52>
    7e40:	45c8      	cmp	r8, r9
    7e42:	d812      	bhi.n	7e6a <encode_uint+0x78>
	if (conv->flag_hash) {
    7e44:	7823      	ldrb	r3, [r4, #0]
    7e46:	069b      	lsls	r3, r3, #26
    7e48:	d505      	bpl.n	7e56 <encode_uint+0x64>
		if (radix == 8) {
    7e4a:	2d08      	cmp	r5, #8
    7e4c:	d116      	bne.n	7e7c <encode_uint+0x8a>
			conv->altform_0 = true;
    7e4e:	78a3      	ldrb	r3, [r4, #2]
    7e50:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7e54:	70a3      	strb	r3, [r4, #2]
}
    7e56:	4640      	mov	r0, r8
    7e58:	b003      	add	sp, #12
    7e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7e5e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7e62:	2b70      	cmp	r3, #112	; 0x70
    7e64:	e7d3      	b.n	7e0e <encode_uint+0x1c>
	switch (specifier) {
    7e66:	2508      	movs	r5, #8
    7e68:	e7d4      	b.n	7e14 <encode_uint+0x22>
		value /= radix;
    7e6a:	4606      	mov	r6, r0
    7e6c:	460f      	mov	r7, r1
    7e6e:	e7d6      	b.n	7e1e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e70:	9a01      	ldr	r2, [sp, #4]
    7e72:	2a19      	cmp	r2, #25
    7e74:	bf94      	ite	ls
    7e76:	3337      	addls	r3, #55	; 0x37
    7e78:	3357      	addhi	r3, #87	; 0x57
    7e7a:	e7da      	b.n	7e32 <encode_uint+0x40>
		} else if (radix == 16) {
    7e7c:	2d10      	cmp	r5, #16
    7e7e:	d1ea      	bne.n	7e56 <encode_uint+0x64>
			conv->altform_0c = true;
    7e80:	78a3      	ldrb	r3, [r4, #2]
    7e82:	f043 0310 	orr.w	r3, r3, #16
    7e86:	e7e5      	b.n	7e54 <encode_uint+0x62>

00007e88 <outs>:
{
    7e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e8c:	4607      	mov	r7, r0
    7e8e:	4688      	mov	r8, r1
    7e90:	4615      	mov	r5, r2
    7e92:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7e94:	4614      	mov	r4, r2
    7e96:	42b4      	cmp	r4, r6
    7e98:	eba4 0005 	sub.w	r0, r4, r5
    7e9c:	d302      	bcc.n	7ea4 <outs+0x1c>
    7e9e:	b93e      	cbnz	r6, 7eb0 <outs+0x28>
    7ea0:	7823      	ldrb	r3, [r4, #0]
    7ea2:	b12b      	cbz	r3, 7eb0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    7ea4:	f814 0b01 	ldrb.w	r0, [r4], #1
    7ea8:	4641      	mov	r1, r8
    7eaa:	47b8      	blx	r7
		if (rc < 0) {
    7eac:	2800      	cmp	r0, #0
    7eae:	daf2      	bge.n	7e96 <outs+0xe>
}
    7eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007eb4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7eb4:	4770      	bx	lr

00007eb6 <sys_notify_validate>:
	if (notify == NULL) {
    7eb6:	4603      	mov	r3, r0
    7eb8:	b140      	cbz	r0, 7ecc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7eba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7ebc:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    7ec0:	2a02      	cmp	r2, #2
    7ec2:	d006      	beq.n	7ed2 <sys_notify_validate+0x1c>
    7ec4:	2a03      	cmp	r2, #3
    7ec6:	d004      	beq.n	7ed2 <sys_notify_validate+0x1c>
    7ec8:	2a01      	cmp	r2, #1
    7eca:	d005      	beq.n	7ed8 <sys_notify_validate+0x22>
		return -EINVAL;
    7ecc:	f06f 0015 	mvn.w	r0, #21
}
    7ed0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    7ed2:	681a      	ldr	r2, [r3, #0]
    7ed4:	2a00      	cmp	r2, #0
    7ed6:	d0f9      	beq.n	7ecc <sys_notify_validate+0x16>
		notify->result = 0;
    7ed8:	2000      	movs	r0, #0
    7eda:	6098      	str	r0, [r3, #8]
    7edc:	4770      	bx	lr

00007ede <abort_function>:
{
    7ede:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7ee0:	2000      	movs	r0, #0
    7ee2:	f7f9 fc4b 	bl	177c <sys_reboot>

00007ee6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7ee6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    7ee8:	f013 0307 	ands.w	r3, r3, #7
    7eec:	d105      	bne.n	7efa <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7eee:	6803      	ldr	r3, [r0, #0]
    7ef0:	2b00      	cmp	r3, #0
		evt = EVT_START;
    7ef2:	bf0c      	ite	eq
    7ef4:	2000      	moveq	r0, #0
    7ef6:	2003      	movne	r0, #3
    7ef8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7efa:	2b02      	cmp	r3, #2
    7efc:	d105      	bne.n	7f0a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7efe:	8bc3      	ldrh	r3, [r0, #30]
    7f00:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    7f02:	bf14      	ite	ne
    7f04:	2000      	movne	r0, #0
    7f06:	2004      	moveq	r0, #4
    7f08:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7f0a:	2b01      	cmp	r3, #1
    7f0c:	d105      	bne.n	7f1a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7f0e:	6803      	ldr	r3, [r0, #0]
    7f10:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    7f12:	bf0c      	ite	eq
    7f14:	2000      	moveq	r0, #0
    7f16:	2005      	movne	r0, #5
    7f18:	4770      	bx	lr
	int evt = EVT_NOP;
    7f1a:	2000      	movs	r0, #0
}
    7f1c:	4770      	bx	lr

00007f1e <notify_one>:
{
    7f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f22:	460d      	mov	r5, r1
    7f24:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7f26:	4619      	mov	r1, r3
    7f28:	1d28      	adds	r0, r5, #4
{
    7f2a:	4690      	mov	r8, r2
    7f2c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7f2e:	f7f8 ff05 	bl	d3c <sys_notify_finalize>
	if (cb) {
    7f32:	4604      	mov	r4, r0
    7f34:	b138      	cbz	r0, 7f46 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7f36:	4633      	mov	r3, r6
    7f38:	4642      	mov	r2, r8
    7f3a:	4629      	mov	r1, r5
    7f3c:	4638      	mov	r0, r7
    7f3e:	46a4      	mov	ip, r4
}
    7f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7f44:	4760      	bx	ip
}
    7f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007f4a <validate_args>:
{
    7f4a:	b510      	push	{r4, lr}
    7f4c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7f4e:	b140      	cbz	r0, 7f62 <validate_args+0x18>
    7f50:	b139      	cbz	r1, 7f62 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7f52:	1d08      	adds	r0, r1, #4
    7f54:	f7ff ffaf 	bl	7eb6 <sys_notify_validate>
	if ((rv == 0)
    7f58:	b928      	cbnz	r0, 7f66 <validate_args+0x1c>
	    && ((cli->notify.flags
    7f5a:	68a3      	ldr	r3, [r4, #8]
    7f5c:	f033 0303 	bics.w	r3, r3, #3
    7f60:	d001      	beq.n	7f66 <validate_args+0x1c>
		rv = -EINVAL;
    7f62:	f06f 0015 	mvn.w	r0, #21
}
    7f66:	bd10      	pop	{r4, pc}

00007f68 <onoff_manager_init>:
{
    7f68:	b538      	push	{r3, r4, r5, lr}
    7f6a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7f6c:	4605      	mov	r5, r0
    7f6e:	b158      	cbz	r0, 7f88 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7f70:	b151      	cbz	r1, 7f88 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7f72:	680b      	ldr	r3, [r1, #0]
    7f74:	b143      	cbz	r3, 7f88 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7f76:	684b      	ldr	r3, [r1, #4]
    7f78:	b133      	cbz	r3, 7f88 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7f7a:	2220      	movs	r2, #32
    7f7c:	2100      	movs	r1, #0
    7f7e:	f000 f85f 	bl	8040 <memset>
    7f82:	612c      	str	r4, [r5, #16]
	return 0;
    7f84:	2000      	movs	r0, #0
}
    7f86:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7f88:	f06f 0015 	mvn.w	r0, #21
    7f8c:	e7fb      	b.n	7f86 <onoff_manager_init+0x1e>

00007f8e <arch_printk_char_out>:
}
    7f8e:	2000      	movs	r0, #0
    7f90:	4770      	bx	lr

00007f92 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    7f92:	b40f      	push	{r0, r1, r2, r3}
    7f94:	b507      	push	{r0, r1, r2, lr}
    7f96:	a904      	add	r1, sp, #16
    7f98:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7f9c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7f9e:	f7f9 fbdf 	bl	1760 <vprintk>
	}
	va_end(ap);
}
    7fa2:	b003      	add	sp, #12
    7fa4:	f85d eb04 	ldr.w	lr, [sp], #4
    7fa8:	b004      	add	sp, #16
    7faa:	4770      	bx	lr

00007fac <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7fac:	2200      	movs	r2, #0
    7fae:	e9c0 2200 	strd	r2, r2, [r0]
    7fb2:	6082      	str	r2, [r0, #8]
}
    7fb4:	4770      	bx	lr

00007fb6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7fb6:	4604      	mov	r4, r0
    7fb8:	b508      	push	{r3, lr}
    7fba:	4608      	mov	r0, r1
    7fbc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7fbe:	461a      	mov	r2, r3
    7fc0:	47a0      	blx	r4
	return z_impl_z_current_get();
    7fc2:	f7fe fafd 	bl	65c0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7fc6:	f7f9 ff15 	bl	1df4 <z_impl_k_thread_abort>

00007fca <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7fca:	f7fc bd39 	b.w	4a40 <z_fatal_error>

00007fce <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7fce:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    7fd0:	6800      	ldr	r0, [r0, #0]
    7fd2:	f7fc bd35 	b.w	4a40 <z_fatal_error>

00007fd6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7fd6:	2100      	movs	r1, #0
    7fd8:	2001      	movs	r0, #1
    7fda:	f7ff bff6 	b.w	7fca <z_arm_fatal_error>

00007fde <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    7fde:	b508      	push	{r3, lr}
	handler();
    7fe0:	f7f9 fc1e 	bl	1820 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7fe8:	f7f9 bd2c 	b.w	1a44 <z_arm_exc_exit>

00007fec <_stdout_hook_default>:
}
    7fec:	f04f 30ff 	mov.w	r0, #4294967295
    7ff0:	4770      	bx	lr

00007ff2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7ff2:	4603      	mov	r3, r0
	size_t n = 0;
    7ff4:	2000      	movs	r0, #0

	while (*s != '\0') {
    7ff6:	5c1a      	ldrb	r2, [r3, r0]
    7ff8:	b902      	cbnz	r2, 7ffc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7ffa:	4770      	bx	lr
		n++;
    7ffc:	3001      	adds	r0, #1
    7ffe:	e7fa      	b.n	7ff6 <strlen+0x4>

00008000 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8000:	4603      	mov	r3, r0
	size_t n = 0;
    8002:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8004:	5c1a      	ldrb	r2, [r3, r0]
    8006:	b10a      	cbz	r2, 800c <strnlen+0xc>
    8008:	4288      	cmp	r0, r1
    800a:	d100      	bne.n	800e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    800c:	4770      	bx	lr
		n++;
    800e:	3001      	adds	r0, #1
    8010:	e7f8      	b.n	8004 <strnlen+0x4>

00008012 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8012:	1e43      	subs	r3, r0, #1
    8014:	3901      	subs	r1, #1
    8016:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    801a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    801e:	4282      	cmp	r2, r0
    8020:	d101      	bne.n	8026 <strcmp+0x14>
    8022:	2a00      	cmp	r2, #0
    8024:	d1f7      	bne.n	8016 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8026:	1a10      	subs	r0, r2, r0
    8028:	4770      	bx	lr

0000802a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    802a:	b510      	push	{r4, lr}
    802c:	1e43      	subs	r3, r0, #1
    802e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8030:	4291      	cmp	r1, r2
    8032:	d100      	bne.n	8036 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8034:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8036:	f811 4b01 	ldrb.w	r4, [r1], #1
    803a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    803e:	e7f7      	b.n	8030 <memcpy+0x6>

00008040 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8040:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8042:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8044:	4603      	mov	r3, r0
	while (n > 0) {
    8046:	4293      	cmp	r3, r2
    8048:	d100      	bne.n	804c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    804a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    804c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8050:	e7f9      	b.n	8046 <memset+0x6>

00008052 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    8052:	b084      	sub	sp, #16
    8054:	ab04      	add	r3, sp, #16
    8056:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    805a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    805e:	2b06      	cmp	r3, #6
    8060:	d108      	bne.n	8074 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8066:	2201      	movs	r2, #1
    8068:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    806c:	f3bf 8f4f 	dsb	sy
        __WFE();
    8070:	bf20      	wfe
    while (true)
    8072:	e7fd      	b.n	8070 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    8074:	b004      	add	sp, #16
    8076:	4770      	bx	lr

00008078 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8078:	b084      	sub	sp, #16
    807a:	ab04      	add	r3, sp, #16
    807c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8080:	2300      	movs	r3, #0
    8082:	f383 8811 	msr	BASEPRI, r3
    8086:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    808a:	b004      	add	sp, #16
    808c:	4770      	bx	lr

0000808e <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    808e:	f1a0 0308 	sub.w	r3, r0, #8
    8092:	f3bf 8f5b 	dmb	ish
    8096:	e853 2f00 	ldrex	r2, [r3]
    809a:	1c51      	adds	r1, r2, #1
    809c:	e843 1c00 	strex	ip, r1, [r3]
    80a0:	f1bc 0f00 	cmp.w	ip, #0
    80a4:	d1f7      	bne.n	8096 <adc_context_on_timer_expired+0x8>
    80a6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    80aa:	b91a      	cbnz	r2, 80b4 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    80ac:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    80b0:	f7fa b830 	b.w	2114 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    80b4:	f06f 030f 	mvn.w	r3, #15
    80b8:	6683      	str	r3, [r0, #104]	; 0x68
}
    80ba:	4770      	bx	lr

000080bc <set_starting_state>:
{
    80bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    80be:	f04f 0320 	mov.w	r3, #32
    80c2:	f3ef 8211 	mrs	r2, BASEPRI
    80c6:	f383 8812 	msr	BASEPRI_MAX, r3
    80ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    80ce:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    80d0:	f003 0407 	and.w	r4, r3, #7
    80d4:	2c01      	cmp	r4, #1
    80d6:	d106      	bne.n	80e6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    80d8:	6001      	str	r1, [r0, #0]
	int err = 0;
    80da:	2000      	movs	r0, #0
	__asm__ volatile(
    80dc:	f382 8811 	msr	BASEPRI, r2
    80e0:	f3bf 8f6f 	isb	sy
}
    80e4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    80e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    80ea:	428b      	cmp	r3, r1
		err = -EALREADY;
    80ec:	bf14      	ite	ne
    80ee:	f04f 30ff 	movne.w	r0, #4294967295
    80f2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    80f6:	e7f1      	b.n	80dc <set_starting_state+0x20>

000080f8 <set_on_state>:
	__asm__ volatile(
    80f8:	f04f 0320 	mov.w	r3, #32
    80fc:	f3ef 8211 	mrs	r2, BASEPRI
    8100:	f383 8812 	msr	BASEPRI_MAX, r3
    8104:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8108:	6803      	ldr	r3, [r0, #0]
    810a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    810e:	f043 0302 	orr.w	r3, r3, #2
    8112:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8114:	f382 8811 	msr	BASEPRI, r2
    8118:	f3bf 8f6f 	isb	sy
}
    811c:	4770      	bx	lr

0000811e <onoff_started_callback>:
	return &data->mgr[type];
    811e:	6900      	ldr	r0, [r0, #16]
    8120:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8122:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8126:	2100      	movs	r1, #0
    8128:	4710      	bx	r2

0000812a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    812a:	2000      	movs	r0, #0
    812c:	f7fb bbbe 	b.w	38ac <nrfx_clock_start>

00008130 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8130:	2000      	movs	r0, #0
    8132:	f7fb bc0f 	b.w	3954 <nrfx_clock_stop>

00008136 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8136:	2280      	movs	r2, #128	; 0x80
    8138:	f7fa ba52 	b.w	25e0 <stop>

0000813c <blocking_start_callback>:
{
    813c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    813e:	f7fe bb73 	b.w	6828 <z_impl_k_sem_give>

00008142 <api_start>:
{
    8142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8146:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    8148:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    814a:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    814c:	436f      	muls	r7, r5
{
    814e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8150:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8154:	2180      	movs	r1, #128	; 0x80
    8156:	4420      	add	r0, r4
{
    8158:	4690      	mov	r8, r2
    815a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    815c:	f7ff ffae 	bl	80bc <set_starting_state>
	if (err < 0) {
    8160:	2800      	cmp	r0, #0
    8162:	db07      	blt.n	8174 <api_start+0x32>
	subdata->cb = cb;
    8164:	443c      	add	r4, r7
	subdata->user_data = user_data;
    8166:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    816a:	6873      	ldr	r3, [r6, #4]
    816c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    8170:	4798      	blx	r3
	return 0;
    8172:	2000      	movs	r0, #0
}
    8174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008178 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8178:	6843      	ldr	r3, [r0, #4]
    817a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    817c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8180:	600b      	str	r3, [r1, #0]
}
    8182:	2000      	movs	r0, #0
    8184:	4770      	bx	lr

00008186 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8186:	6843      	ldr	r3, [r0, #4]
    8188:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    818a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    818e:	4042      	eors	r2, r0
    8190:	400a      	ands	r2, r1
    8192:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8194:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8198:	2000      	movs	r0, #0
    819a:	4770      	bx	lr

0000819c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    819c:	6843      	ldr	r3, [r0, #4]
    819e:	685b      	ldr	r3, [r3, #4]
}
    81a0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    81a2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    81a6:	4770      	bx	lr

000081a8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    81a8:	6843      	ldr	r3, [r0, #4]
    81aa:	685b      	ldr	r3, [r3, #4]
}
    81ac:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    81ae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    81b2:	4770      	bx	lr

000081b4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    81b4:	6843      	ldr	r3, [r0, #4]
    81b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    81b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    81bc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    81be:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    81c2:	2000      	movs	r0, #0
    81c4:	4770      	bx	lr

000081c6 <any_other_channel_is_active>:
{
    81c6:	b530      	push	{r4, r5, lr}
    81c8:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    81ca:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    81cc:	b2da      	uxtb	r2, r3
    81ce:	4282      	cmp	r2, r0
    81d0:	d007      	beq.n	81e2 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    81d2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    81d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    81da:	b112      	cbz	r2, 81e2 <any_other_channel_is_active+0x1c>
    81dc:	898d      	ldrh	r5, [r1, #12]
    81de:	4295      	cmp	r5, r2
    81e0:	d804      	bhi.n	81ec <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    81e2:	3301      	adds	r3, #1
    81e4:	2b04      	cmp	r3, #4
    81e6:	d1f1      	bne.n	81cc <any_other_channel_is_active+0x6>
	return false;
    81e8:	2000      	movs	r0, #0
}
    81ea:	bd30      	pop	{r4, r5, pc}
			return true;
    81ec:	2001      	movs	r0, #1
    81ee:	e7fc      	b.n	81ea <any_other_channel_is_active+0x24>

000081f0 <pwm_nrfx_pin_set>:
{
    81f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81f4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    81f8:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    81fa:	6904      	ldr	r4, [r0, #16]
{
    81fc:	4688      	mov	r8, r1
    81fe:	4616      	mov	r6, r2
    8200:	4699      	mov	r9, r3
	if (flags) {
    8202:	2d00      	cmp	r5, #0
    8204:	d140      	bne.n	8288 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8206:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    8208:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    820c:	2bff      	cmp	r3, #255	; 0xff
    820e:	d003      	beq.n	8218 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8214:	4598      	cmp	r8, r3
    8216:	d03a      	beq.n	828e <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8218:	3501      	adds	r5, #1
    821a:	b2ed      	uxtb	r5, r5
    821c:	2d04      	cmp	r5, #4
    821e:	d1f3      	bne.n	8208 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    8220:	f06f 0015 	mvn.w	r0, #21
    8224:	e009      	b.n	823a <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    8226:	2000      	movs	r0, #0
    8228:	e042      	b.n	82b0 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    822a:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    822c:	2b08      	cmp	r3, #8
		countertop >>= 1;
    822e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8232:	d158      	bne.n	82e6 <pwm_nrfx_pin_set+0xf6>
    8234:	e7f4      	b.n	8220 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    8236:	b9d0      	cbnz	r0, 826e <pwm_nrfx_pin_set+0x7e>
	return 0;
    8238:	2000      	movs	r0, #0
}
    823a:	b003      	add	sp, #12
    823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    8240:	454e      	cmp	r6, r9
    8242:	d87f      	bhi.n	8344 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8244:	a801      	add	r0, sp, #4
    8246:	f8cd 8004 	str.w	r8, [sp, #4]
    824a:	f7fa fe01 	bl	2e50 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    824e:	9a01      	ldr	r2, [sp, #4]
    8250:	2301      	movs	r3, #1
    8252:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    8254:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    8258:	4621      	mov	r1, r4
    825a:	4628      	mov	r0, r5
    825c:	f7ff ffb3 	bl	81c6 <any_other_channel_is_active>
    8260:	2800      	cmp	r0, #0
    8262:	d1e9      	bne.n	8238 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    8264:	4601      	mov	r1, r0
    8266:	4638      	mov	r0, r7
    8268:	f7fc fa5e 	bl	4728 <nrfx_pwm_stop>
    826c:	e7e4      	b.n	8238 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    826e:	4638      	mov	r0, r7
    8270:	f7fc fa2c 	bl	46cc <nrfx_pwm_is_stopped>
    8274:	2800      	cmp	r0, #0
    8276:	d0fa      	beq.n	826e <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    8278:	2302      	movs	r3, #2
    827a:	2201      	movs	r2, #1
    827c:	f107 0118 	add.w	r1, r7, #24
    8280:	4638      	mov	r0, r7
    8282:	f7fc f9af 	bl	45e4 <nrfx_pwm_simple_playback>
    8286:	e7d7      	b.n	8238 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    8288:	f06f 0085 	mvn.w	r0, #133	; 0x85
    828c:	e7d5      	b.n	823a <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    828e:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    8292:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    8296:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    829a:	b113      	cbz	r3, 82a2 <pwm_nrfx_pin_set+0xb2>
    829c:	89a2      	ldrh	r2, [r4, #12]
    829e:	429a      	cmp	r2, r3
    82a0:	d8c1      	bhi.n	8226 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    82a2:	4621      	mov	r1, r4
    82a4:	4628      	mov	r0, r5
    82a6:	f7ff ff8e 	bl	81c6 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    82aa:	f080 0001 	eor.w	r0, r0, #1
    82ae:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    82b0:	7bb9      	ldrb	r1, [r7, #14]
    82b2:	2901      	cmp	r1, #1
		period_cycles /= 2;
    82b4:	bf04      	itt	eq
    82b6:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    82b8:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    82bc:	b326      	cbz	r6, 8308 <pwm_nrfx_pin_set+0x118>
    82be:	6823      	ldr	r3, [r4, #0]
    82c0:	42b3      	cmp	r3, r6
    82c2:	d021      	beq.n	8308 <pwm_nrfx_pin_set+0x118>
    82c4:	2300      	movs	r3, #0
				data->current[i]
    82c6:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    82ca:	b2da      	uxtb	r2, r3
    82cc:	42aa      	cmp	r2, r5
    82ce:	d005      	beq.n	82dc <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    82d0:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    82d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
    82d8:	2a00      	cmp	r2, #0
    82da:	d1a1      	bne.n	8220 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    82dc:	3301      	adds	r3, #1
    82de:	2b04      	cmp	r3, #4
    82e0:	d1f3      	bne.n	82ca <pwm_nrfx_pin_set+0xda>
    82e2:	4632      	mov	r2, r6
    82e4:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    82e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    82ea:	fa5f fc83 	uxtb.w	ip, r3
    82ee:	d29c      	bcs.n	822a <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    82f0:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    82f4:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    82f8:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    82fa:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    82fc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    8300:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    8304:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    8308:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    830a:	454e      	cmp	r6, r9
    830c:	4633      	mov	r3, r6
    830e:	bf28      	it	cs
    8310:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    8312:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    8316:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    831a:	ea42 020b 	orr.w	r2, r2, fp
    831e:	b292      	uxth	r2, r2
	data->current[channel] = (
    8320:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    8324:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8328:	b112      	cbz	r2, 8330 <pwm_nrfx_pin_set+0x140>
    832a:	89a1      	ldrh	r1, [r4, #12]
    832c:	4291      	cmp	r1, r2
    832e:	d882      	bhi.n	8236 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8330:	197a      	adds	r2, r7, r5
    8332:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    8336:	2b00      	cmp	r3, #0
    8338:	d082      	beq.n	8240 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    833a:	454e      	cmp	r6, r9
    833c:	d805      	bhi.n	834a <pwm_nrfx_pin_set+0x15a>
    833e:	2a00      	cmp	r2, #0
    8340:	db80      	blt.n	8244 <pwm_nrfx_pin_set+0x54>
    8342:	e002      	b.n	834a <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    8344:	2a00      	cmp	r2, #0
    8346:	f6bf af7d 	bge.w	8244 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    834a:	a801      	add	r0, sp, #4
    834c:	f8cd 8004 	str.w	r8, [sp, #4]
    8350:	f7fa fd7e 	bl	2e50 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8354:	9a01      	ldr	r2, [sp, #4]
    8356:	2301      	movs	r3, #1
    8358:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    835a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    835e:	e77b      	b.n	8258 <pwm_nrfx_pin_set+0x68>

00008360 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8360:	6843      	ldr	r3, [r0, #4]
    8362:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    8364:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8368:	05d1      	lsls	r1, r2, #23
    836a:	d518      	bpl.n	839e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    836c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8370:	b1aa      	cbz	r2, 839e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8372:	f04f 0120 	mov.w	r1, #32
    8376:	f3ef 8211 	mrs	r2, BASEPRI
    837a:	f381 8812 	msr	BASEPRI_MAX, r1
    837e:	f3bf 8f6f 	isb	sy
    8382:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8386:	b131      	cbz	r1, 8396 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8388:	2100      	movs	r1, #0
    838a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    838e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8392:	2101      	movs	r1, #1
    8394:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8396:	f382 8811 	msr	BASEPRI, r2
    839a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    839e:	6842      	ldr	r2, [r0, #4]
    83a0:	6852      	ldr	r2, [r2, #4]
    83a2:	06d2      	lsls	r2, r2, #27
    83a4:	d515      	bpl.n	83d2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    83a6:	f04f 0120 	mov.w	r1, #32
    83aa:	f3ef 8211 	mrs	r2, BASEPRI
    83ae:	f381 8812 	msr	BASEPRI_MAX, r1
    83b2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83b6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    83ba:	b111      	cbz	r1, 83c2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    83bc:	2100      	movs	r1, #0
    83be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    83c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    83c6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    83ca:	f382 8811 	msr	BASEPRI, r2
    83ce:	f3bf 8f6f 	isb	sy
}
    83d2:	4770      	bx	lr

000083d4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    83d4:	6902      	ldr	r2, [r0, #16]
{
    83d6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    83d8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    83dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
    83e0:	2000      	movs	r0, #0
    83e2:	4770      	bx	lr

000083e4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    83e4:	6843      	ldr	r3, [r0, #4]
    83e6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    83e8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    83ec:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    83f0:	4770      	bx	lr

000083f2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    83f2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    83f4:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83f6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    83fa:	b940      	cbnz	r0, 840e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    83fc:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    83fe:	0792      	lsls	r2, r2, #30
    8400:	d406      	bmi.n	8410 <is_tx_ready+0x1e>
    8402:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    8406:	3800      	subs	r0, #0
    8408:	bf18      	it	ne
    840a:	2001      	movne	r0, #1
    840c:	4770      	bx	lr
    840e:	2001      	movs	r0, #1
}
    8410:	4770      	bx	lr

00008412 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8412:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    8414:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8416:	681b      	ldr	r3, [r3, #0]
    8418:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    841c:	b148      	cbz	r0, 8432 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    841e:	7c52      	ldrb	r2, [r2, #17]
    8420:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8422:	2000      	movs	r0, #0
    8424:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8428:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    842c:	2201      	movs	r2, #1
    842e:	601a      	str	r2, [r3, #0]
	return 0;
    8430:	4770      	bx	lr
		return -1;
    8432:	f04f 30ff 	mov.w	r0, #4294967295
}
    8436:	4770      	bx	lr

00008438 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8438:	b510      	push	{r4, lr}
    843a:	2200      	movs	r2, #0
    843c:	4604      	mov	r4, r0
    843e:	2101      	movs	r1, #1
    8440:	2002      	movs	r0, #2
    8442:	f7f9 fa49 	bl	18d8 <z_arm_irq_priority_set>
    8446:	2002      	movs	r0, #2
    8448:	f7f9 fa28 	bl	189c <arch_irq_enable>
    844c:	4620      	mov	r0, r4
    844e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8452:	f7fa be95 	b.w	3180 <uarte_instance_init.isra.0>

00008456 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8456:	b510      	push	{r4, lr}
    8458:	2200      	movs	r2, #0
    845a:	4604      	mov	r4, r0
    845c:	2101      	movs	r1, #1
    845e:	2028      	movs	r0, #40	; 0x28
    8460:	f7f9 fa3a 	bl	18d8 <z_arm_irq_priority_set>
    8464:	2028      	movs	r0, #40	; 0x28
    8466:	f7f9 fa19 	bl	189c <arch_irq_enable>
    846a:	4620      	mov	r0, r4
    846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8470:	f7fa be86 	b.w	3180 <uarte_instance_init.isra.0>

00008474 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8474:	4770      	bx	lr

00008476 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8476:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    8478:	2000      	movs	r0, #0
    847a:	f7f9 fe2b 	bl	20d4 <sys_arch_reboot>

0000847e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    847e:	f7ff bad1 	b.w	7a24 <nrf_cc3xx_platform_init_no_rng>

00008482 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8482:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8484:	f7f8 fc8a 	bl	d9c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8488:	f7f8 fd3c 	bl	f04 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    848c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8490:	f7ff bac8 	b.w	7a24 <nrf_cc3xx_platform_init_no_rng>

00008494 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8494:	4700      	bx	r0

00008496 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8496:	f000 b904 	b.w	86a2 <z_impl_k_busy_wait>

0000849a <nrf_gpio_pin_present_check>:
    switch (port)
    849a:	0943      	lsrs	r3, r0, #5
    849c:	d00b      	beq.n	84b6 <nrf_gpio_pin_present_check+0x1c>
    849e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    84a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    84a4:	bf18      	it	ne
    84a6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    84a8:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    84ac:	fa23 f000 	lsr.w	r0, r3, r0
}
    84b0:	f000 0001 	and.w	r0, r0, #1
    84b4:	4770      	bx	lr
    switch (port)
    84b6:	f04f 33ff 	mov.w	r3, #4294967295
    84ba:	e7f5      	b.n	84a8 <nrf_gpio_pin_present_check+0xe>

000084bc <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    84bc:	0080      	lsls	r0, r0, #2
}
    84be:	f500 7080 	add.w	r0, r0, #256	; 0x100
    84c2:	4770      	bx	lr

000084c4 <nrf_gpio_reconfigure>:
{
    84c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    84c8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    84ca:	a801      	add	r0, sp, #4
{
    84cc:	460e      	mov	r6, r1
    84ce:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    84d2:	4690      	mov	r8, r2
    84d4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    84d6:	f7fb fbab 	bl	3c30 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    84da:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    84dc:	f1b8 0f00 	cmp.w	r8, #0
    84e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    84e4:	bf14      	ite	ne
    84e6:	2302      	movne	r3, #2
    84e8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    84ea:	2e00      	cmp	r6, #0
    84ec:	bf18      	it	ne
    84ee:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    84f2:	2d00      	cmp	r5, #0
    84f4:	bf14      	ite	ne
    84f6:	210c      	movne	r1, #12
    84f8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    84fa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    84fc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8500:	bf14      	ite	ne
    8502:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8506:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8508:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    850a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    850e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8512:	bf14      	ite	ne
    8514:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    8518:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    851a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    851c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8520:	b106      	cbz	r6, 8524 <nrf_gpio_reconfigure+0x60>
    8522:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8524:	f1b8 0f00 	cmp.w	r8, #0
    8528:	d003      	beq.n	8532 <nrf_gpio_reconfigure+0x6e>
    852a:	f898 8000 	ldrb.w	r8, [r8]
    852e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8532:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8534:	b10d      	cbz	r5, 853a <nrf_gpio_reconfigure+0x76>
    8536:	782d      	ldrb	r5, [r5, #0]
    8538:	00ad      	lsls	r5, r5, #2
    853a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    853e:	b10c      	cbz	r4, 8544 <nrf_gpio_reconfigure+0x80>
    8540:	7822      	ldrb	r2, [r4, #0]
    8542:	0214      	lsls	r4, r2, #8
    8544:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8546:	b10f      	cbz	r7, 854c <nrf_gpio_reconfigure+0x88>
    8548:	783f      	ldrb	r7, [r7, #0]
    854a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    854c:	432c      	orrs	r4, r5
    854e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    8550:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    8554:	b002      	add	sp, #8
    8556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000855a <nrf_gpio_cfg_sense_set>:
{
    855a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    855c:	f10d 030f 	add.w	r3, sp, #15
    8560:	9301      	str	r3, [sp, #4]
    8562:	2300      	movs	r3, #0
{
    8564:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8568:	9300      	str	r3, [sp, #0]
    856a:	461a      	mov	r2, r3
    856c:	4619      	mov	r1, r3
    856e:	f7ff ffa9 	bl	84c4 <nrf_gpio_reconfigure>
}
    8572:	b005      	add	sp, #20
    8574:	f85d fb04 	ldr.w	pc, [sp], #4

00008578 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    8578:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    857a:	2402      	movs	r4, #2
    857c:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    857e:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    8580:	6809      	ldr	r1, [r1, #0]
    8582:	b171      	cbz	r1, 85a2 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    8584:	f012 0f04 	tst.w	r2, #4
    8588:	bf0c      	ite	eq
    858a:	2182      	moveq	r1, #130	; 0x82
    858c:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    858e:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    8590:	bf48      	it	mi
    8592:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    8596:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    8598:	bf48      	it	mi
    859a:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    859e:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    85a2:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85a4:	f04f 0100 	mov.w	r1, #0
    85a8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85ac:	bf58      	it	pl
    85ae:	2201      	movpl	r2, #1
    85b0:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    85b4:	bf56      	itet	pl
    85b6:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    85b8:	18c0      	addmi	r0, r0, r3
    return 0;
    85ba:	4608      	movpl	r0, r1
}
    85bc:	bd10      	pop	{r4, pc}

000085be <z_device_state_init>:
}
    85be:	4770      	bx	lr

000085c0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    85c0:	b138      	cbz	r0, 85d2 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    85c2:	68c3      	ldr	r3, [r0, #12]
    85c4:	8818      	ldrh	r0, [r3, #0]
    85c6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    85ca:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    85ce:	4258      	negs	r0, r3
    85d0:	4158      	adcs	r0, r3
}
    85d2:	4770      	bx	lr

000085d4 <z_pm_save_idle_exit>:
{
    85d4:	b508      	push	{r3, lr}
	pm_system_resume();
    85d6:	f7f8 fff1 	bl	15bc <pm_system_resume>
}
    85da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    85de:	f7ff bf49 	b.w	8474 <sys_clock_idle_exit>

000085e2 <k_mem_slab_init>:
{
    85e2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    85e4:	2400      	movs	r4, #0
    85e6:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    85e8:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    85ea:	ea41 0402 	orr.w	r4, r1, r2
    85ee:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    85f2:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    85f6:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    85f8:	d10c      	bne.n	8614 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    85fa:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    85fc:	42a3      	cmp	r3, r4
    85fe:	d103      	bne.n	8608 <k_mem_slab_init+0x26>
    8600:	e9c0 0000 	strd	r0, r0, [r0]
}
    8604:	2000      	movs	r0, #0
}
    8606:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8608:	6985      	ldr	r5, [r0, #24]
    860a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    860c:	3401      	adds	r4, #1
		slab->free_list = p;
    860e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8610:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8612:	e7f3      	b.n	85fc <k_mem_slab_init+0x1a>
		return -EINVAL;
    8614:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8618:	e7f5      	b.n	8606 <k_mem_slab_init+0x24>

0000861a <z_impl_k_mutex_init>:
{
    861a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    861c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    861e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8622:	e9c3 3300 	strd	r3, r3, [r3]
}
    8626:	4770      	bx	lr

00008628 <z_handle_obj_poll_events>:
{
    8628:	4603      	mov	r3, r0
	return list->head == list;
    862a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    862c:	4283      	cmp	r3, r0
    862e:	d008      	beq.n	8642 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    8630:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8634:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8636:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8638:	2300      	movs	r3, #0
	node->prev = NULL;
    863a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    863e:	f7fc bdf3 	b.w	5228 <signal_poll_event>
}
    8642:	4770      	bx	lr

00008644 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8644:	4603      	mov	r3, r0
    8646:	b920      	cbnz	r0, 8652 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8648:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    864c:	b90a      	cbnz	r2, 8652 <z_reschedule_irqlock+0xe>
    864e:	f7f9 b993 	b.w	1978 <arch_swap>
    8652:	f383 8811 	msr	BASEPRI, r3
    8656:	f3bf 8f6f 	isb	sy
}
    865a:	4770      	bx	lr

0000865c <z_reschedule_unlocked>:
	__asm__ volatile(
    865c:	f04f 0320 	mov.w	r3, #32
    8660:	f3ef 8011 	mrs	r0, BASEPRI
    8664:	f383 8812 	msr	BASEPRI_MAX, r3
    8668:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    866c:	f7ff bfea 	b.w	8644 <z_reschedule_irqlock>

00008670 <z_priq_dumb_best>:
{
    8670:	4603      	mov	r3, r0
	return list->head == list;
    8672:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8674:	4283      	cmp	r3, r0
    8676:	d003      	beq.n	8680 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8678:	2800      	cmp	r0, #0
    867a:	bf38      	it	cc
    867c:	2000      	movcc	r0, #0
    867e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8680:	2000      	movs	r0, #0
}
    8682:	4770      	bx	lr

00008684 <k_is_in_isr>:
    8684:	f3ef 8005 	mrs	r0, IPSR
}
    8688:	3800      	subs	r0, #0
    868a:	bf18      	it	ne
    868c:	2001      	movne	r0, #1
    868e:	4770      	bx	lr

00008690 <z_impl_k_thread_name_set>:
}
    8690:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8694:	4770      	bx	lr

00008696 <z_impl_k_thread_start>:
	z_sched_start(thread);
    8696:	f7fd ba45 	b.w	5b24 <z_sched_start>

0000869a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    869a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    869c:	f7fe fdea 	bl	7274 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    86a0:	bd08      	pop	{r3, pc}

000086a2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    86a2:	b108      	cbz	r0, 86a8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    86a4:	f7f9 bd2c 	b.w	2100 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    86a8:	4770      	bx	lr

000086aa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    86aa:	b510      	push	{r4, lr}
    86ac:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    86ae:	f7fe fc2f 	bl	6f10 <z_abort_timeout>

	if (inactive) {
    86b2:	b9b0      	cbnz	r0, 86e2 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    86b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86b6:	b10b      	cbz	r3, 86bc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    86b8:	4620      	mov	r0, r4
    86ba:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    86bc:	f104 0018 	add.w	r0, r4, #24
    86c0:	f7fd fd4c 	bl	615c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    86c4:	b168      	cbz	r0, 86e2 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    86c6:	f7fd f9e5 	bl	5a94 <z_ready_thread>
    86ca:	f04f 0320 	mov.w	r3, #32
    86ce:	f3ef 8011 	mrs	r0, BASEPRI
    86d2:	f383 8812 	msr	BASEPRI_MAX, r3
    86d6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    86da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86de:	f7ff bfb1 	b.w	8644 <z_reschedule_irqlock>
    86e2:	bd10      	pop	{r4, pc}

000086e4 <notify_queue_locked>:
	if (queue != NULL) {
    86e4:	b120      	cbz	r0, 86f0 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    86e6:	2200      	movs	r2, #0
    86e8:	4611      	mov	r1, r2
    86ea:	3088      	adds	r0, #136	; 0x88
    86ec:	f7fe b832 	b.w	6754 <z_sched_wake>
}
    86f0:	4770      	bx	lr

000086f2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    86f2:	4770      	bx	lr

000086f4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    86f4:	f7fc b870 	b.w	47d8 <SystemInit>
