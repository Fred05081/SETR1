
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001e80 	.word	0x20001e80
}
   4:	00001c95 	.word	0x00001c95
   8:	0000823b 	.word	0x0000823b
   c:	00001c81 	.word	0x00001c81
  10:	00001c81 	.word	0x00001c81
  14:	00001c81 	.word	0x00001c81
  18:	00001c81 	.word	0x00001c81
	...
  2c:	00001a9d 	.word	0x00001a9d
  30:	00001c81 	.word	0x00001c81
  34:	00000000 	.word	0x00000000
  38:	00001a49 	.word	0x00001a49
  3c:	00001c81 	.word	0x00001c81

00000040 <_irq_vector_table>:
  40:	00001a01 00001a01 00001a01 00001a01     ................
  50:	00001a01 00001a01 00001a01 00001a01     ................
  60:	00001a01 00001a01 00001a01 00001a01     ................
  70:	00001a01 00001a01 00001a01 00001a01     ................
  80:	00001a01 00001a01 00001a01 00001a01     ................
  90:	00001a01 00001a01 00001a01 00001a01     ................
  a0:	00001a01 00001a01 00001a01 00001a01     ................
  b0:	00001a01 00001a01 00001a01 00001a01     ................
  c0:	00001a01 00001a01 00001a01 00001a01     ................
  d0:	00001a01 00001a01 00001a01 00001a01     ................
  e0:	00001a01 00001a01 00001a01 00001a01     ................
  f0:	00001a01 00001a01 00001a01 00001a01     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x5a>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x1c8>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x1c8>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x1cc>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x1cc>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x96>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0x28>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0x26>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x1f4>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x50>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x4e>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x1fc>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x70>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x1c2>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x110>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x82>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x1f0>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0xe0>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x1ec>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x1ec>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x108>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <__data_size+0x1e4>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x1e4>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x2>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x162>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <__data_size+0x1e8>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x1e8>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x18c>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <__data_size+0x1e0>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x1e0>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x1d4>
     38c:	d016      	beq.n	3bc <__data_size+0x1d0>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x1bc>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x1a2>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x1a2>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x18c>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x108>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x162>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0xe0>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x8c>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0x28>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x50>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <thread_B_code>:
* the first average value.
* In the end, it sets variable bc to the average value.
*
*/
void thread_B_code(void *argA , void *argB, void *argC)
{    
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b08b      	sub	sp, #44	; 0x2c
    /** array de dados da adc*/
    int Array_dados[len_dados]={0};
     3f8:	2224      	movs	r2, #36	; 0x24
     3fa:	2100      	movs	r1, #0
     3fc:	a801      	add	r0, sp, #4
     3fe:	f007 ff4f 	bl	82a0 <memset>
    int k=0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     402:	481e      	ldr	r0, [pc, #120]	; (47c <CONFIG_FLASH_SIZE+0x7c>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     404:	4e1e      	ldr	r6, [pc, #120]	; (480 <CONFIG_FLASH_SIZE+0x80>)
        int sumador=0,somador_2=0,media=0, media_filtered=0;
        int contador=0;
       
        k_sem_take(&sem_ab,  K_FOREVER);
        
        printk("Task B read ab value: %d\n",ab);
     406:	4d1f      	ldr	r5, [pc, #124]	; (484 <CONFIG_FLASH_SIZE+0x84>)
     408:	4f1f      	ldr	r7, [pc, #124]	; (488 <CONFIG_FLASH_SIZE+0x88>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     40a:	f007 fef0 	bl	81ee <printk>
    int k=0;
     40e:	2400      	movs	r4, #0
     410:	f04f 32ff 	mov.w	r2, #4294967295
     414:	f04f 33ff 	mov.w	r3, #4294967295
     418:	4630      	mov	r0, r6
     41a:	f006 fb77 	bl	6b0c <z_impl_k_sem_take>
        printk("Task B read ab value: %d\n",ab);
     41e:	6829      	ldr	r1, [r5, #0]
     420:	4638      	mov	r0, r7
     422:	f007 fee4 	bl	81ee <printk>

        Array_dados[0]= ab;
        Array_dados[(k+1)%10]= Array_dados[(k)%10];
     426:	210a      	movs	r1, #10
        Array_dados[0]= ab;
     428:	682b      	ldr	r3, [r5, #0]
     42a:	9300      	str	r3, [sp, #0]
        Array_dados[(k+1)%10]= Array_dados[(k)%10];
     42c:	fb94 f2f1 	sdiv	r2, r4, r1
     430:	ab0a      	add	r3, sp, #40	; 0x28
     432:	fb01 4212 	mls	r2, r1, r2, r4
     436:	3401      	adds	r4, #1
     438:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     43c:	fb94 f3f1 	sdiv	r3, r4, r1
     440:	fb01 4313 	mls	r3, r1, r3, r4
     444:	a90a      	add	r1, sp, #40	; 0x28
     446:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     44a:	f852 2c28 	ldr.w	r2, [r2, #-40]
     44e:	f843 2c28 	str.w	r2, [r3, #-40]
        k=k+1;
        /*printk("0: %d 1: %d 3: %d 4: %d 5: %d 6: %d 7: %d 8: %d 09: %d /n/r",Array_dados[0],Array_dados[1],Array_dados[2],Array_dados[3],Array_dados[4],Array_dados[5],Array_dados[6],Array_dados[7],Array_dados[8],Array_dados[9]);*/
       
       for(int i = 0; i < len_dados; i++){
     452:	2300      	movs	r3, #0
     454:	466a      	mov	r2, sp
        int sumador=0,somador_2=0,media=0, media_filtered=0;
     456:	4619      	mov	r1, r3
            if(Array_dados[i] != 0){
     458:	f852 0b04 	ldr.w	r0, [r2], #4
       for(int i = 0; i < len_dados; i++){
     45c:	3301      	adds	r3, #1
     45e:	2b0a      	cmp	r3, #10
                sumador = sumador + Array_dados[i];
     460:	4401      	add	r1, r0
       for(int i = 0; i < len_dados; i++){
     462:	d1f9      	bne.n	458 <CONFIG_FLASH_SIZE+0x58>
            }
        }
        media=sumador/len_dados;
     464:	fb91 f1f3 	sdiv	r1, r1, r3
        if(somador_2 != 0)
            media_filtered=somador_2/contador;
        else 
            media_filtered = 0;

        bc=media;
     468:	4b08      	ldr	r3, [pc, #32]	; (48c <CONFIG_FLASH_SIZE+0x8c>)
        printk("Thread B set bc value to: %d\n",bc);  
     46a:	4809      	ldr	r0, [pc, #36]	; (490 <CONFIG_FLASH_SIZE+0x90>)
        bc=media;
     46c:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d\n",bc);  
     46e:	f007 febe 	bl	81ee <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     472:	4808      	ldr	r0, [pc, #32]	; (494 <CONFIG_FLASH_SIZE+0x94>)
     474:	f006 fb06 	bl	6a84 <z_impl_k_sem_give>
    while(1) {
     478:	e7ca      	b.n	410 <CONFIG_FLASH_SIZE+0x10>
     47a:	bf00      	nop
     47c:	00008e64 	.word	0x00008e64
     480:	200005ac 	.word	0x200005ac
     484:	200005a0 	.word	0x200005a0
     488:	00008e9e 	.word	0x00008e9e
     48c:	200005a8 	.word	0x200005a8
     490:	00008eb8 	.word	0x00008eb8
     494:	200005c4 	.word	0x200005c4

00000498 <thread_C_code>:
* to the average value in bc. This will 
* allow the control of the intensity of LED_1. 
*
*/
void thread_C_code(void *argA , void *argB, void *argC)
{
     498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct device *pwm0_dev;          /** Pointer to PWM device structure */
    int ret=0;                              /** Generic return value variable */
    
    unsigned int pwmPeriod_us = 1000;       /** PWM period in us */

    printk("Thread C init (sporadic, waits on a semaphore by task B)\n");
     49c:	483b      	ldr	r0, [pc, #236]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
{
     49e:	b087      	sub	sp, #28
    printk("Thread C init (sporadic, waits on a semaphore by task B)\n");
     4a0:	f007 fea5 	bl	81ee <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4a4:	483a      	ldr	r0, [pc, #232]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     4a6:	f004 fbcd 	bl	4c44 <z_impl_device_get_binding>
    
    /** Bind to GPIO 0 and PWM0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    if (gpio0_dev == NULL) {
     4aa:	b928      	cbnz	r0, 4b8 <thread_C_code+0x20>
        printk("Error: Failed to bind to GPIO0\n\r");        
     4ac:	4839      	ldr	r0, [pc, #228]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
	return;
    }
        
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
	printk("Error: Failed to bind to PWM0\n r");
     4ae:	f007 fe9e 	bl	81ee <printk>
            return;
        }
                       
        printk("Task C - PWM: %u % \n", (unsigned int)(((pwmPeriod_us*bc)/1023)/10));   /** Prints dutty-cycle*/
    }
}
     4b2:	b007      	add	sp, #28
     4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4b8:	4837      	ldr	r0, [pc, #220]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     4ba:	f004 fbc3 	bl	4c44 <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
     4be:	4604      	mov	r4, r0
     4c0:	b1f8      	cbz	r0, 502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*bc)/1023), PWM_POLARITY_NORMAL);
     4c2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
	return z_impl_k_sem_take(sem, timeout);
     4c6:	f04f 32ff 	mov.w	r2, #4294967295
     4ca:	f04f 33ff 	mov.w	r3, #4294967295
     4ce:	4833      	ldr	r0, [pc, #204]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     4d0:	f006 fb1c 	bl	6b0c <z_impl_k_sem_take>
     4d4:	f8da 3000 	ldr.w	r3, [sl]
     4d8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     4dc:	436b      	muls	r3, r5
        ret = pwm_pin_set_usec(pwm0_dev, BOARDLED1,
     4de:	f240 38ff 	movw	r8, #1023	; 0x3ff
     4e2:	fbb3 f8f8 	udiv	r8, r3, r8
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     4e6:	68a3      	ldr	r3, [r4, #8]
     4e8:	aa04      	add	r2, sp, #16
     4ea:	685b      	ldr	r3, [r3, #4]
     4ec:	210d      	movs	r1, #13
     4ee:	4620      	mov	r0, r4
     4f0:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     4f2:	9002      	str	r0, [sp, #8]
     4f4:	b138      	cbz	r0, 506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
		return -EIO;
     4f6:	f06f 0104 	mvn.w	r1, #4
            printk("Error %d: failed to set pulse width\n", ret);
     4fa:	4829      	ldr	r0, [pc, #164]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     4fc:	f007 fe77 	bl	81ee <printk>
            return;
     500:	e7d7      	b.n	4b2 <thread_C_code+0x1a>
	printk("Error: Failed to bind to PWM0\n r");
     502:	4828      	ldr	r0, [pc, #160]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     504:	e7d3      	b.n	4ae <thread_C_code+0x16>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     506:	9b04      	ldr	r3, [sp, #16]
     508:	f8dd b014 	ldr.w	fp, [sp, #20]
     50c:	4a26      	ldr	r2, [pc, #152]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     50e:	9303      	str	r3, [sp, #12]
     510:	fba3 6705 	umull	r6, r7, r3, r5
     514:	fb05 770b 	mla	r7, r5, fp, r7
     518:	2300      	movs	r3, #0
     51a:	4630      	mov	r0, r6
     51c:	4639      	mov	r1, r7
     51e:	f7ff fdef 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     522:	4b22      	ldr	r3, [pc, #136]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     524:	f04f 32ff 	mov.w	r2, #4294967295
     528:	42bb      	cmp	r3, r7
     52a:	bf08      	it	eq
     52c:	42b2      	cmpeq	r2, r6
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     52e:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     530:	d202      	bcs.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
		return -ENOTSUP;
     532:	f06f 0185 	mvn.w	r1, #133	; 0x85
     536:	e7e0      	b.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     538:	9b03      	ldr	r3, [sp, #12]
     53a:	4a1b      	ldr	r2, [pc, #108]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     53c:	fba8 6703 	umull	r6, r7, r8, r3
     540:	fb08 770b 	mla	r7, r8, fp, r7
     544:	2300      	movs	r3, #0
     546:	4630      	mov	r0, r6
     548:	4639      	mov	r1, r7
     54a:	f7ff fdd9 	bl	100 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     54e:	4a17      	ldr	r2, [pc, #92]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     550:	f04f 31ff 	mov.w	r1, #4294967295
     554:	42ba      	cmp	r2, r7
     556:	bf08      	it	eq
     558:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     55a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     55c:	d3e9      	bcc.n	532 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4a>
	return api->pin_set(dev, pwm, period, pulse, flags);
     55e:	68a2      	ldr	r2, [r4, #8]
     560:	9902      	ldr	r1, [sp, #8]
     562:	9100      	str	r1, [sp, #0]
     564:	6816      	ldr	r6, [r2, #0]
     566:	210d      	movs	r1, #13
     568:	464a      	mov	r2, r9
     56a:	4620      	mov	r0, r4
     56c:	47b0      	blx	r6
        if (ret) {
     56e:	4601      	mov	r1, r0
     570:	2800      	cmp	r0, #0
     572:	d1c2      	bne.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
        printk("Task C - PWM: %u % \n", (unsigned int)(((pwmPeriod_us*bc)/1023)/10));   /** Prints dutty-cycle*/
     574:	f8da 1000 	ldr.w	r1, [sl]
     578:	480d      	ldr	r0, [pc, #52]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     57a:	434d      	muls	r5, r1
     57c:	f242 71f6 	movw	r1, #10230	; 0x27f6
     580:	fbb5 f1f1 	udiv	r1, r5, r1
     584:	f007 fe33 	bl	81ee <printk>
    while(1) {
     588:	e79d      	b.n	4c6 <thread_C_code+0x2e>
     58a:	bf00      	nop
     58c:	00008ed6 	.word	0x00008ed6
     590:	00008f10 	.word	0x00008f10
     594:	00008f17 	.word	0x00008f17
     598:	00008f38 	.word	0x00008f38
     59c:	200005c4 	.word	0x200005c4
     5a0:	00008f5f 	.word	0x00008f5f
     5a4:	00008f3e 	.word	0x00008f3e
     5a8:	000f4240 	.word	0x000f4240
     5ac:	000f423f 	.word	0x000f423f
     5b0:	00008f84 	.word	0x00008f84
     5b4:	200005a8 	.word	0x200005a8

000005b8 <thread_A_code>:
{
     5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printk("Thread A init (periodic)\n");
     5bc:	4845      	ldr	r0, [pc, #276]	; (6d4 <thread_A_code+0x11c>)
{
     5be:	b086      	sub	sp, #24
    printk("Thread A init (periodic)\n");
     5c0:	f007 fe15 	bl	81ee <printk>
	return z_impl_k_uptime_ticks();
     5c4:	f008 f9ad 	bl	8922 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     5c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5cc:	460a      	mov	r2, r1
     5ce:	fba0 0103 	umull	r0, r1, r0, r3
     5d2:	fb03 1102 	mla	r1, r3, r2, r1
     5d6:	0bc3      	lsrs	r3, r0, #15
     5d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     5dc:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     5de:	f113 0464 	adds.w	r4, r3, #100	; 0x64
     5e2:	f142 0500 	adc.w	r5, r2, #0
     5e6:	483c      	ldr	r0, [pc, #240]	; (6d8 <thread_A_code+0x120>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     5e8:	4e3c      	ldr	r6, [pc, #240]	; (6dc <thread_A_code+0x124>)
     5ea:	f004 fb2b 	bl	4c44 <z_impl_device_get_binding>
     5ee:	6030      	str	r0, [r6, #0]
    if (!adc_dev) {
     5f0:	b910      	cbnz	r0, 5f8 <thread_A_code+0x40>
        printk("ADC device_get_binding() failed\n");
     5f2:	483b      	ldr	r0, [pc, #236]	; (6e0 <thread_A_code+0x128>)
     5f4:	f007 fdfb 	bl	81ee <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     5f8:	6830      	ldr	r0, [r6, #0]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
     5fa:	6883      	ldr	r3, [r0, #8]
     5fc:	4939      	ldr	r1, [pc, #228]	; (6e4 <thread_A_code+0x12c>)
     5fe:	681b      	ldr	r3, [r3, #0]
     600:	4798      	blx	r3
    if (err) {
     602:	4601      	mov	r1, r0
     604:	b110      	cbz	r0, 60c <thread_A_code+0x54>
        printk("adc_channel_setup() failed with error code %d\n", err);
     606:	4838      	ldr	r0, [pc, #224]	; (6e8 <thread_A_code+0x130>)
     608:	f007 fdf1 	bl	81ee <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     60c:	4b37      	ldr	r3, [pc, #220]	; (6ec <thread_A_code+0x134>)
	const struct adc_sequence sequence = {
     60e:	4f38      	ldr	r7, [pc, #224]	; (6f0 <thread_A_code+0x138>)
                ab=adc_sample_buffer[0];
     610:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 708 <thread_A_code+0x150>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     614:	2201      	movs	r2, #1
     616:	60da      	str	r2, [r3, #12]
            printk("adc_sample() failed with error code %d\n\r",err);
     618:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 70c <thread_A_code+0x154>
	const struct adc_sequence sequence = {
     61c:	2214      	movs	r2, #20
     61e:	2100      	movs	r1, #0
     620:	a801      	add	r0, sp, #4
     622:	f007 fe3d 	bl	82a0 <memset>
     626:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     628:	6830      	ldr	r0, [r6, #0]
	const struct adc_sequence sequence = {
     62a:	9304      	str	r3, [sp, #16]
     62c:	e9cd 3702 	strd	r3, r7, [sp, #8]
     630:	230a      	movs	r3, #10
     632:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     636:	bbb8      	cbnz	r0, 6a8 <thread_A_code+0xf0>
            printk("adc_sample(): error, must bind to adc first \n\r");
     638:	482e      	ldr	r0, [pc, #184]	; (6f4 <thread_A_code+0x13c>)
     63a:	f007 fdd8 	bl	81ee <printk>
            return -1;
     63e:	f04f 3aff 	mov.w	sl, #4294967295
            printk("adc_sample() failed with error code %d\n\r",err);
     642:	4651      	mov	r1, sl
     644:	4648      	mov	r0, r9
     646:	f007 fdd2 	bl	81ee <printk>
        printk("Thread A set ab value to: %d \n",ab);  
     64a:	f8d8 1000 	ldr.w	r1, [r8]
     64e:	482a      	ldr	r0, [pc, #168]	; (6f8 <thread_A_code+0x140>)
     650:	f007 fdcd 	bl	81ee <printk>
	z_impl_k_sem_give(sem);
     654:	4829      	ldr	r0, [pc, #164]	; (6fc <thread_A_code+0x144>)
     656:	f006 fa15 	bl	6a84 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     65a:	f008 f962 	bl	8922 <z_impl_k_uptime_ticks>
     65e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     662:	460a      	mov	r2, r1
     664:	fba0 0103 	umull	r0, r1, r0, r3
     668:	fb03 1102 	mla	r1, r3, r2, r1
     66c:	0bc2      	lsrs	r2, r0, #15
     66e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     672:	0bcb      	lsrs	r3, r1, #15
        if( fin_time < release_time) {        
     674:	42a2      	cmp	r2, r4
     676:	eb73 0105 	sbcs.w	r1, r3, r5
     67a:	dacf      	bge.n	61c <thread_A_code+0x64>
            k_msleep(release_time - fin_time);            
     67c:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     680:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
     684:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     688:	f240 30e7 	movw	r0, #999	; 0x3e7
     68c:	2100      	movs	r1, #0
     68e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     692:	2300      	movs	r3, #0
     694:	fbce 010c 	smlal	r0, r1, lr, ip
     698:	f7ff fd32 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     69c:	f006 f886 	bl	67ac <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     6a0:	3464      	adds	r4, #100	; 0x64
     6a2:	f145 0500 	adc.w	r5, r5, #0
     6a6:	e7b7      	b.n	618 <thread_A_code+0x60>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     6a8:	6883      	ldr	r3, [r0, #8]
     6aa:	a901      	add	r1, sp, #4
     6ac:	685b      	ldr	r3, [r3, #4]
     6ae:	4798      	blx	r3
	if (ret) {
     6b0:	4682      	mov	sl, r0
     6b2:	b138      	cbz	r0, 6c4 <thread_A_code+0x10c>
            printk("adc_read() failed with code %d\n", ret);
     6b4:	4601      	mov	r1, r0
     6b6:	4812      	ldr	r0, [pc, #72]	; (700 <thread_A_code+0x148>)
     6b8:	f007 fd99 	bl	81ee <printk>
        if(err) {
     6bc:	e7c1      	b.n	642 <thread_A_code+0x8a>
                ab=adc_sample_buffer[0];
     6be:	f8c8 3000 	str.w	r3, [r8]
     6c2:	e7c2      	b.n	64a <thread_A_code+0x92>
            if(adc_sample_buffer[0] > 1023) {
     6c4:	883b      	ldrh	r3, [r7, #0]
     6c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     6ca:	d3f8      	bcc.n	6be <thread_A_code+0x106>
                printk("adc reading out of range\n\r");
     6cc:	480d      	ldr	r0, [pc, #52]	; (704 <thread_A_code+0x14c>)
     6ce:	f007 fd8e 	bl	81ee <printk>
     6d2:	e7ba      	b.n	64a <thread_A_code+0x92>
     6d4:	00008f99 	.word	0x00008f99
     6d8:	00008fb3 	.word	0x00008fb3
     6dc:	200005a4 	.word	0x200005a4
     6e0:	00008fb9 	.word	0x00008fb9
     6e4:	00008e5c 	.word	0x00008e5c
     6e8:	00008fda 	.word	0x00008fda
     6ec:	40007000 	.word	0x40007000
     6f0:	20000c60 	.word	0x20000c60
     6f4:	00009009 	.word	0x00009009
     6f8:	0000909c 	.word	0x0000909c
     6fc:	200005ac 	.word	0x200005ac
     700:	00009038 	.word	0x00009038
     704:	00009081 	.word	0x00009081
     708:	200005a0 	.word	0x200005a0
     70c:	00009058 	.word	0x00009058

00000710 <main>:
void main(void) {
     710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     714:	4823      	ldr	r0, [pc, #140]	; (7a4 <main+0x94>)
void main(void) {
     716:	b088      	sub	sp, #32
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     718:	f001 fdb4 	bl	2284 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     71c:	2201      	movs	r2, #1
     71e:	2100      	movs	r1, #0
     720:	4821      	ldr	r0, [pc, #132]	; (7a8 <main+0x98>)
     722:	f008 f8df 	bl	88e4 <z_impl_k_sem_init>
     726:	2201      	movs	r2, #1
     728:	2100      	movs	r1, #0
     72a:	4820      	ldr	r0, [pc, #128]	; (7ac <main+0x9c>)
     72c:	f008 f8da 	bl	88e4 <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     730:	2600      	movs	r6, #0
     732:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     734:	2400      	movs	r4, #0
     736:	2501      	movs	r5, #1
     738:	e9cd 6706 	strd	r6, r7, [sp, #24]
     73c:	e9cd 5403 	strd	r5, r4, [sp, #12]
     740:	e9cd 4401 	strd	r4, r4, [sp, #4]
     744:	4b1a      	ldr	r3, [pc, #104]	; (7b0 <main+0xa0>)
     746:	491b      	ldr	r1, [pc, #108]	; (7b4 <main+0xa4>)
     748:	9400      	str	r4, [sp, #0]
     74a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     74e:	481a      	ldr	r0, [pc, #104]	; (7b8 <main+0xa8>)
     750:	f006 fae4 	bl	6d1c <z_impl_k_thread_create>
     754:	4b19      	ldr	r3, [pc, #100]	; (7bc <main+0xac>)
     756:	6018      	str	r0, [r3, #0]
     758:	4b19      	ldr	r3, [pc, #100]	; (7c0 <main+0xb0>)
     75a:	491a      	ldr	r1, [pc, #104]	; (7c4 <main+0xb4>)
     75c:	9400      	str	r4, [sp, #0]
     75e:	e9cd 6706 	strd	r6, r7, [sp, #24]
     762:	e9cd 5403 	strd	r5, r4, [sp, #12]
     766:	e9cd 4401 	strd	r4, r4, [sp, #4]
     76a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     76e:	4816      	ldr	r0, [pc, #88]	; (7c8 <main+0xb8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     770:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7d8 <main+0xc8>
     774:	f006 fad2 	bl	6d1c <z_impl_k_thread_create>
     778:	f8c8 0000 	str.w	r0, [r8]
     77c:	4b13      	ldr	r3, [pc, #76]	; (7cc <main+0xbc>)
     77e:	4914      	ldr	r1, [pc, #80]	; (7d0 <main+0xc0>)
     780:	9400      	str	r4, [sp, #0]
     782:	e9cd 6706 	strd	r6, r7, [sp, #24]
     786:	e9cd 5403 	strd	r5, r4, [sp, #12]
     78a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     78e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     792:	4810      	ldr	r0, [pc, #64]	; (7d4 <main+0xc4>)
     794:	f006 fac2 	bl	6d1c <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     798:	f8c8 0000 	str.w	r0, [r8]
} 
     79c:	b008      	add	sp, #32
     79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7a2:	bf00      	nop
     7a4:	000090bb 	.word	0x000090bb
     7a8:	200005ac 	.word	0x200005ac
     7ac:	200005c4 	.word	0x200005c4
     7b0:	000005b9 	.word	0x000005b9
     7b4:	20000e20 	.word	0x20000e20
     7b8:	20000258 	.word	0x20000258
     7bc:	200005dc 	.word	0x200005dc
     7c0:	000003f5 	.word	0x000003f5
     7c4:	20001240 	.word	0x20001240
     7c8:	200002d8 	.word	0x200002d8
     7cc:	00000499 	.word	0x00000499
     7d0:	20001660 	.word	0x20001660
     7d4:	20000358 	.word	0x20000358
     7d8:	200005e0 	.word	0x200005e0

000007dc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7e0:	b091      	sub	sp, #68	; 0x44
     7e2:	468b      	mov	fp, r1
     7e4:	9002      	str	r0, [sp, #8]
     7e6:	4692      	mov	sl, r2
     7e8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7ea:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7ec:	f89a 0000 	ldrb.w	r0, [sl]
     7f0:	b908      	cbnz	r0, 7f6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7f2:	4628      	mov	r0, r5
     7f4:	e35e      	b.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
		if (*fp != '%') {
     7f6:	2825      	cmp	r0, #37	; 0x25
     7f8:	f10a 0701 	add.w	r7, sl, #1
     7fc:	d007      	beq.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
			OUTC('%');
     7fe:	9b02      	ldr	r3, [sp, #8]
     800:	4659      	mov	r1, fp
     802:	4798      	blx	r3
     804:	2800      	cmp	r0, #0
     806:	f2c0 8355 	blt.w	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     80a:	3501      	adds	r5, #1
			break;
     80c:	e210      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		} state = {
     80e:	2218      	movs	r2, #24
     810:	2100      	movs	r1, #0
     812:	a80a      	add	r0, sp, #40	; 0x28
     814:	f007 fd44 	bl	82a0 <memset>
	if (*sp == '%') {
     818:	f89a 3001 	ldrb.w	r3, [sl, #1]
     81c:	2b25      	cmp	r3, #37	; 0x25
     81e:	d078      	beq.n	912 <CONFIG_ISR_STACK_SIZE+0x112>
     820:	2200      	movs	r2, #0
     822:	4694      	mov	ip, r2
     824:	4616      	mov	r6, r2
     826:	4696      	mov	lr, r2
     828:	4610      	mov	r0, r2
     82a:	4639      	mov	r1, r7
		switch (*sp) {
     82c:	f817 3b01 	ldrb.w	r3, [r7], #1
     830:	2b2b      	cmp	r3, #43	; 0x2b
     832:	f000 809d 	beq.w	970 <CONFIG_ISR_STACK_SIZE+0x170>
     836:	f200 8094 	bhi.w	962 <CONFIG_ISR_STACK_SIZE+0x162>
     83a:	2b20      	cmp	r3, #32
     83c:	f000 809b 	beq.w	976 <CONFIG_ISR_STACK_SIZE+0x176>
     840:	2b23      	cmp	r3, #35	; 0x23
     842:	f000 809a 	beq.w	97a <CONFIG_ISR_STACK_SIZE+0x17a>
     846:	b128      	cbz	r0, 854 <CONFIG_ISR_STACK_SIZE+0x54>
     848:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     84c:	f040 0004 	orr.w	r0, r0, #4
     850:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     854:	f1be 0f00 	cmp.w	lr, #0
     858:	d005      	beq.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
     85a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     85e:	f040 0008 	orr.w	r0, r0, #8
     862:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     866:	b12e      	cbz	r6, 874 <CONFIG_ISR_STACK_SIZE+0x74>
     868:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     86c:	f040 0010 	orr.w	r0, r0, #16
     870:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     874:	f1bc 0f00 	cmp.w	ip, #0
     878:	d005      	beq.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
     87a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     87e:	f040 0020 	orr.w	r0, r0, #32
     882:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     886:	b12a      	cbz	r2, 894 <CONFIG_ISR_STACK_SIZE+0x94>
     888:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     88c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     890:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     894:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     898:	f002 0044 	and.w	r0, r2, #68	; 0x44
     89c:	2844      	cmp	r0, #68	; 0x44
     89e:	d103      	bne.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
		conv->flag_zero = false;
     8a0:	f36f 1286 	bfc	r2, #6, #1
     8a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     8a8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8ac:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     8ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     8b2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8b6:	d17b      	bne.n	9b0 <CONFIG_ISR_STACK_SIZE+0x1b0>
		conv->width_star = true;
     8b8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8bc:	f042 0201 	orr.w	r2, r2, #1
     8c0:	1c4b      	adds	r3, r1, #1
     8c2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     8c6:	781a      	ldrb	r2, [r3, #0]
     8c8:	2a2e      	cmp	r2, #46	; 0x2e
     8ca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8ce:	bf0c      	ite	eq
     8d0:	2101      	moveq	r1, #1
     8d2:	2100      	movne	r1, #0
     8d4:	f361 0241 	bfi	r2, r1, #1, #1
     8d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     8dc:	d174      	bne.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
	if (*sp == '*') {
     8de:	785a      	ldrb	r2, [r3, #1]
     8e0:	2a2a      	cmp	r2, #42	; 0x2a
     8e2:	d06a      	beq.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     8e4:	3301      	adds	r3, #1
	size_t val = 0;
     8e6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     8e8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8ea:	4618      	mov	r0, r3
     8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
     8f0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     8f4:	2f09      	cmp	r7, #9
     8f6:	f240 808e 	bls.w	a16 <CONFIG_ISR_STACK_SIZE+0x216>
	conv->unsupported |= ((conv->prec_value < 0)
     8fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     8fe:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     900:	f3c2 0040 	ubfx	r0, r2, #1, #1
     904:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     908:	f361 0241 	bfi	r2, r1, #1, #1
     90c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     910:	e05a      	b.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
		conv->specifier = *sp++;
     912:	f10a 0702 	add.w	r7, sl, #2
     916:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     91a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     91e:	07d9      	lsls	r1, r3, #31
     920:	f140 8149 	bpl.w	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
			width = va_arg(ap, int);
     924:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     928:	f1b9 0f00 	cmp.w	r9, #0
     92c:	da07      	bge.n	93e <CONFIG_ISR_STACK_SIZE+0x13e>
				conv->flag_dash = true;
     92e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     932:	f042 0204 	orr.w	r2, r2, #4
     936:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     93a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     93e:	075a      	lsls	r2, r3, #29
     940:	f140 8142 	bpl.w	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
			int arg = va_arg(ap, int);
     944:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     948:	f1b8 0f00 	cmp.w	r8, #0
     94c:	f280 8141 	bge.w	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
				conv->prec_present = false;
     950:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     954:	f36f 0341 	bfc	r3, #1, #1
     958:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     95c:	f04f 38ff 	mov.w	r8, #4294967295
     960:	e137      	b.n	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
		switch (*sp) {
     962:	2b2d      	cmp	r3, #45	; 0x2d
     964:	d00c      	beq.n	980 <CONFIG_ISR_STACK_SIZE+0x180>
     966:	2b30      	cmp	r3, #48	; 0x30
     968:	f47f af6d 	bne.w	846 <CONFIG_ISR_STACK_SIZE+0x46>
			conv->flag_zero = true;
     96c:	2201      	movs	r2, #1
	} while (loop);
     96e:	e75c      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
			conv->flag_plus = true;
     970:	f04f 0e01 	mov.w	lr, #1
     974:	e759      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
			conv->flag_space = true;
     976:	2601      	movs	r6, #1
     978:	e757      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
			conv->flag_hash = true;
     97a:	f04f 0c01 	mov.w	ip, #1
     97e:	e754      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		switch (*sp) {
     980:	2001      	movs	r0, #1
     982:	e752      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		val = 10U * val + *sp++ - '0';
     984:	fb0c 0202 	mla	r2, ip, r2, r0
     988:	3a30      	subs	r2, #48	; 0x30
     98a:	4633      	mov	r3, r6
     98c:	461e      	mov	r6, r3
     98e:	f816 0b01 	ldrb.w	r0, [r6], #1
     992:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     996:	2f09      	cmp	r7, #9
     998:	d9f4      	bls.n	984 <CONFIG_ISR_STACK_SIZE+0x184>
	if (sp != wp) {
     99a:	4299      	cmp	r1, r3
     99c:	d093      	beq.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
		conv->unsupported |= ((conv->width_value < 0)
     99e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     9a2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     9a4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9a6:	f362 0141 	bfi	r1, r2, #1, #1
     9aa:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     9ae:	e78a      	b.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
     9b0:	460b      	mov	r3, r1
	size_t val = 0;
     9b2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9b4:	f04f 0c0a 	mov.w	ip, #10
     9b8:	e7e8      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		conv->prec_star = true;
     9ba:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9be:	f042 0204 	orr.w	r2, r2, #4
     9c2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     9c6:	3302      	adds	r3, #2
	switch (*sp) {
     9c8:	461f      	mov	r7, r3
     9ca:	f817 2b01 	ldrb.w	r2, [r7], #1
     9ce:	2a6c      	cmp	r2, #108	; 0x6c
     9d0:	d041      	beq.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
     9d2:	d825      	bhi.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     9d4:	2a68      	cmp	r2, #104	; 0x68
     9d6:	d02b      	beq.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
     9d8:	2a6a      	cmp	r2, #106	; 0x6a
     9da:	d046      	beq.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
     9dc:	2a4c      	cmp	r2, #76	; 0x4c
     9de:	d04c      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     9e0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     9e2:	f817 2b01 	ldrb.w	r2, [r7], #1
     9e6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9ea:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     9ee:	2a78      	cmp	r2, #120	; 0x78
     9f0:	f200 80d9 	bhi.w	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
     9f4:	2a57      	cmp	r2, #87	; 0x57
     9f6:	d84d      	bhi.n	a94 <CONFIG_ISR_STACK_SIZE+0x294>
     9f8:	2a41      	cmp	r2, #65	; 0x41
     9fa:	d003      	beq.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     9fc:	3a45      	subs	r2, #69	; 0x45
     9fe:	2a02      	cmp	r2, #2
     a00:	f200 80d1 	bhi.w	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
		conv->specifier_cat = SPECIFIER_FP;
     a04:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     a08:	2204      	movs	r2, #4
     a0a:	f362 0302 	bfi	r3, r2, #0, #3
     a0e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     a12:	2301      	movs	r3, #1
			break;
     a14:	e09e      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
		val = 10U * val + *sp++ - '0';
     a16:	fb06 2101 	mla	r1, r6, r1, r2
     a1a:	3930      	subs	r1, #48	; 0x30
     a1c:	4603      	mov	r3, r0
     a1e:	e764      	b.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
	switch (*sp) {
     a20:	2a74      	cmp	r2, #116	; 0x74
     a22:	d026      	beq.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
     a24:	2a7a      	cmp	r2, #122	; 0x7a
     a26:	d1db      	bne.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
		conv->length_mod = LENGTH_Z;
     a28:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a2c:	2206      	movs	r2, #6
     a2e:	e00d      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		if (*++sp == 'h') {
     a30:	785a      	ldrb	r2, [r3, #1]
     a32:	2a68      	cmp	r2, #104	; 0x68
     a34:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a38:	d106      	bne.n	a48 <CONFIG_ISR_STACK_SIZE+0x248>
			conv->length_mod = LENGTH_HH;
     a3a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a3c:	f361 02c6 	bfi	r2, r1, #3, #4
     a40:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     a44:	1c9f      	adds	r7, r3, #2
     a46:	e7cc      	b.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
			conv->length_mod = LENGTH_H;
     a48:	4613      	mov	r3, r2
     a4a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a4c:	f362 03c6 	bfi	r3, r2, #3, #4
     a50:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     a54:	e7c5      	b.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
		if (*++sp == 'l') {
     a56:	785a      	ldrb	r2, [r3, #1]
     a58:	2a6c      	cmp	r2, #108	; 0x6c
     a5a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a5e:	d101      	bne.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
			conv->length_mod = LENGTH_LL;
     a60:	2104      	movs	r1, #4
     a62:	e7eb      	b.n	a3c <CONFIG_ISR_STACK_SIZE+0x23c>
			conv->length_mod = LENGTH_L;
     a64:	4613      	mov	r3, r2
     a66:	2203      	movs	r2, #3
     a68:	e7f0      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		conv->length_mod = LENGTH_J;
     a6a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a6e:	2205      	movs	r2, #5
     a70:	e7ec      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		conv->length_mod = LENGTH_T;
     a72:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a76:	2207      	movs	r2, #7
     a78:	e7e8      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		conv->unsupported = true;
     a7a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     a7e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a82:	f023 0302 	bic.w	r3, r3, #2
     a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a8a:	f043 0302 	orr.w	r3, r3, #2
     a8e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a92:	e7a6      	b.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     a94:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     a98:	2920      	cmp	r1, #32
     a9a:	f200 8084 	bhi.w	ba6 <CONFIG_ISR_STACK_SIZE+0x3a6>
     a9e:	a001      	add	r0, pc, #4	; (adr r0, aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>)
     aa0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     aa4:	00000b69 	.word	0x00000b69
     aa8:	00000ba7 	.word	0x00000ba7
     aac:	00000ba7 	.word	0x00000ba7
     ab0:	00000ba7 	.word	0x00000ba7
     ab4:	00000ba7 	.word	0x00000ba7
     ab8:	00000ba7 	.word	0x00000ba7
     abc:	00000ba7 	.word	0x00000ba7
     ac0:	00000ba7 	.word	0x00000ba7
     ac4:	00000ba7 	.word	0x00000ba7
     ac8:	00000a05 	.word	0x00000a05
     acc:	00000ba7 	.word	0x00000ba7
     ad0:	00000b69 	.word	0x00000b69
     ad4:	00000b29 	.word	0x00000b29
     ad8:	00000a05 	.word	0x00000a05
     adc:	00000a05 	.word	0x00000a05
     ae0:	00000a05 	.word	0x00000a05
     ae4:	00000ba7 	.word	0x00000ba7
     ae8:	00000b29 	.word	0x00000b29
     aec:	00000ba7 	.word	0x00000ba7
     af0:	00000ba7 	.word	0x00000ba7
     af4:	00000ba7 	.word	0x00000ba7
     af8:	00000ba7 	.word	0x00000ba7
     afc:	00000b71 	.word	0x00000b71
     b00:	00000b69 	.word	0x00000b69
     b04:	00000b8d 	.word	0x00000b8d
     b08:	00000ba7 	.word	0x00000ba7
     b0c:	00000ba7 	.word	0x00000ba7
     b10:	00000b8d 	.word	0x00000b8d
     b14:	00000ba7 	.word	0x00000ba7
     b18:	00000b69 	.word	0x00000b69
     b1c:	00000ba7 	.word	0x00000ba7
     b20:	00000ba7 	.word	0x00000ba7
     b24:	00000b69 	.word	0x00000b69
		conv->specifier_cat = SPECIFIER_SINT;
     b28:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b2c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     b2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b32:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b36:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b38:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     b3c:	bf02      	ittt	eq
     b3e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     b42:	f041 0101 	orreq.w	r1, r1, #1
     b46:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     b4a:	2a63      	cmp	r2, #99	; 0x63
     b4c:	d131      	bne.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b4e:	3b00      	subs	r3, #0
     b50:	bf18      	it	ne
     b52:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b58:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b5c:	430b      	orrs	r3, r1
     b5e:	f363 0241 	bfi	r2, r3, #1, #1
     b62:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b66:	e6d8      	b.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
		conv->specifier_cat = SPECIFIER_UINT;
     b68:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b6c:	2002      	movs	r0, #2
     b6e:	e7de      	b.n	b2e <CONFIG_ISR_STACK_SIZE+0x32e>
		conv->specifier_cat = SPECIFIER_PTR;
     b70:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b74:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b78:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b7c:	2103      	movs	r1, #3
     b7e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b82:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     b84:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b88:	4143      	adcs	r3, r0
     b8a:	e7e3      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
     b8c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b90:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     b92:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b96:	f361 0202 	bfi	r2, r1, #0, #3
     b9a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b9e:	bf14      	ite	ne
     ba0:	2301      	movne	r3, #1
     ba2:	2300      	moveq	r3, #0
     ba4:	e7d6      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
		conv->invalid = true;
     ba6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     baa:	f043 0301 	orr.w	r3, r3, #1
     bae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     bb2:	2300      	movs	r3, #0
     bb4:	e7ce      	b.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
		} else if (conv->width_present) {
     bb6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     bba:	2a00      	cmp	r2, #0
			width = conv->width_value;
     bbc:	bfb4      	ite	lt
     bbe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     bc2:	f04f 39ff 	movge.w	r9, #4294967295
     bc6:	e6ba      	b.n	93e <CONFIG_ISR_STACK_SIZE+0x13e>
		} else if (conv->prec_present) {
     bc8:	079b      	lsls	r3, r3, #30
     bca:	f57f aec7 	bpl.w	95c <CONFIG_ISR_STACK_SIZE+0x15c>
			precision = conv->prec_value;
     bce:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     bd2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     bd6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     bd8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     bdc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     be0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     be4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     be6:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     bea:	d136      	bne.n	c5a <CONFIG_ISR_STACK_SIZE+0x45a>
			switch (length_mod) {
     bec:	1ed3      	subs	r3, r2, #3
     bee:	2b04      	cmp	r3, #4
     bf0:	d820      	bhi.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     bf2:	e8df f003 	tbb	[pc, r3]
     bf6:	0703      	.short	0x0703
     bf8:	1f07      	.short	0x1f07
     bfa:	1f          	.byte	0x1f
     bfb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     bfc:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     c00:	17c1      	asrs	r1, r0, #31
     c02:	e004      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
					(sint_value_type)va_arg(ap, intmax_t);
     c04:	3407      	adds	r4, #7
     c06:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c0a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     c0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     c12:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     c16:	f013 0603 	ands.w	r6, r3, #3
     c1a:	d054      	beq.n	cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
			OUTS(sp, fp);
     c1c:	9802      	ldr	r0, [sp, #8]
     c1e:	463b      	mov	r3, r7
     c20:	4652      	mov	r2, sl
     c22:	4659      	mov	r1, fp
     c24:	f007 fa5e 	bl	80e4 <outs>
     c28:	2800      	cmp	r0, #0
     c2a:	f2c0 8143 	blt.w	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     c2e:	4405      	add	r5, r0
			continue;
     c30:	46ba      	mov	sl, r7
     c32:	e5db      	b.n	7ec <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c34:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     c38:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c3a:	ea4f 71e0 	mov.w	r1, r0, asr #31
     c3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c42:	d105      	bne.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
				value->uint = (unsigned char)value->uint;
     c44:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     c48:	930a      	str	r3, [sp, #40]	; 0x28
     c4a:	2300      	movs	r3, #0
     c4c:	930b      	str	r3, [sp, #44]	; 0x2c
     c4e:	e7e0      	b.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
			} else if (length_mod == LENGTH_H) {
     c50:	2a02      	cmp	r2, #2
     c52:	d1de      	bne.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
				value->sint = (short)value->sint;
     c54:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     c58:	e7d2      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c5a:	2b02      	cmp	r3, #2
     c5c:	d123      	bne.n	ca6 <CONFIG_ISR_STACK_SIZE+0x4a6>
			switch (length_mod) {
     c5e:	1ed3      	subs	r3, r2, #3
     c60:	2b04      	cmp	r3, #4
     c62:	d813      	bhi.n	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
     c64:	e8df f003 	tbb	[pc, r3]
     c68:	120a0a03 	.word	0x120a0a03
     c6c:	12          	.byte	0x12
     c6d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     c6e:	6820      	ldr	r0, [r4, #0]
     c70:	900a      	str	r0, [sp, #40]	; 0x28
     c72:	2100      	movs	r1, #0
     c74:	1d23      	adds	r3, r4, #4
     c76:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     c78:	461c      	mov	r4, r3
     c7a:	e7ca      	b.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
					(uint_value_type)va_arg(ap,
     c7c:	3407      	adds	r4, #7
     c7e:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     c82:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     c86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     c8a:	e7f5      	b.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
					(uint_value_type)va_arg(ap, size_t);
     c8c:	f854 3b04 	ldr.w	r3, [r4], #4
     c90:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c92:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     c94:	f04f 0300 	mov.w	r3, #0
     c98:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     c9a:	d0d3      	beq.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
			} else if (length_mod == LENGTH_H) {
     c9c:	2a02      	cmp	r2, #2
     c9e:	d1b8      	bne.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
				value->uint = (unsigned short)value->uint;
     ca0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ca4:	e7d0      	b.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
		} else if (specifier_cat == SPECIFIER_FP) {
     ca6:	2b04      	cmp	r3, #4
     ca8:	d107      	bne.n	cba <CONFIG_ISR_STACK_SIZE+0x4ba>
			if (length_mod == LENGTH_UPPER_L) {
     caa:	3407      	adds	r4, #7
     cac:	f024 0407 	bic.w	r4, r4, #7
     cb0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     cb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     cb8:	e7ab      	b.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
		} else if (specifier_cat == SPECIFIER_PTR) {
     cba:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     cbc:	bf04      	itt	eq
     cbe:	f854 3b04 	ldreq.w	r3, [r4], #4
     cc2:	930a      	streq	r3, [sp, #40]	; 0x28
     cc4:	e7a5      	b.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
		switch (conv->specifier) {
     cc6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cca:	2878      	cmp	r0, #120	; 0x78
     ccc:	d8b0      	bhi.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     cce:	2862      	cmp	r0, #98	; 0x62
     cd0:	d822      	bhi.n	d18 <CONFIG_ISR_STACK_SIZE+0x518>
     cd2:	2825      	cmp	r0, #37	; 0x25
     cd4:	f43f ad93 	beq.w	7fe <cbvprintf+0x22>
     cd8:	2858      	cmp	r0, #88	; 0x58
     cda:	d1a9      	bne.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
			bps = encode_uint(value->uint, conv, buf, bpe);
     cdc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ce0:	9300      	str	r3, [sp, #0]
     ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     ce6:	ab04      	add	r3, sp, #16
     ce8:	aa0c      	add	r2, sp, #48	; 0x30
     cea:	f007 f9b0 	bl	804e <encode_uint>
     cee:	4682      	mov	sl, r0
			if (precision >= 0) {
     cf0:	f1b8 0f00 	cmp.w	r8, #0
     cf4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     cf8:	db0c      	blt.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
				conv->flag_zero = false;
     cfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     cfe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     d02:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d06:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     d08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     d0c:	d902      	bls.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
					conv->pad0_value = precision - (int)len;
     d0e:	eba8 0303 	sub.w	r3, r8, r3
     d12:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     d14:	4680      	mov	r8, r0
     d16:	e03d      	b.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     d18:	3863      	subs	r0, #99	; 0x63
     d1a:	2815      	cmp	r0, #21
     d1c:	d888      	bhi.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     d1e:	a101      	add	r1, pc, #4	; (adr r1, d24 <CONFIG_ISR_STACK_SIZE+0x524>)
     d20:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     d24:	00000da5 	.word	0x00000da5
     d28:	00000e09 	.word	0x00000e09
     d2c:	00000c31 	.word	0x00000c31
     d30:	00000c31 	.word	0x00000c31
     d34:	00000c31 	.word	0x00000c31
     d38:	00000c31 	.word	0x00000c31
     d3c:	00000e09 	.word	0x00000e09
     d40:	00000c31 	.word	0x00000c31
     d44:	00000c31 	.word	0x00000c31
     d48:	00000c31 	.word	0x00000c31
     d4c:	00000c31 	.word	0x00000c31
     d50:	00000e67 	.word	0x00000e67
     d54:	00000e35 	.word	0x00000e35
     d58:	00000e39 	.word	0x00000e39
     d5c:	00000c31 	.word	0x00000c31
     d60:	00000c31 	.word	0x00000c31
     d64:	00000d7d 	.word	0x00000d7d
     d68:	00000c31 	.word	0x00000c31
     d6c:	00000e35 	.word	0x00000e35
     d70:	00000c31 	.word	0x00000c31
     d74:	00000c31 	.word	0x00000c31
     d78:	00000e35 	.word	0x00000e35
			if (precision >= 0) {
     d7c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     d80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d84:	db0a      	blt.n	d9c <CONFIG_ISR_STACK_SIZE+0x59c>
				len = strnlen(bps, precision);
     d86:	4641      	mov	r1, r8
     d88:	4650      	mov	r0, sl
     d8a:	f007 fa69 	bl	8260 <strnlen>
			bpe = bps + len;
     d8e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     d92:	2600      	movs	r6, #0
		if (bps == NULL) {
     d94:	f1ba 0f00 	cmp.w	sl, #0
     d98:	d10c      	bne.n	db4 <CONFIG_ISR_STACK_SIZE+0x5b4>
     d9a:	e749      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
				len = strlen(bps);
     d9c:	4650      	mov	r0, sl
     d9e:	f007 fa58 	bl	8252 <strlen>
     da2:	e7f4      	b.n	d8e <CONFIG_ISR_STACK_SIZE+0x58e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     da6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     daa:	2600      	movs	r6, #0
			bpe = buf + 1;
     dac:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     db0:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     db4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     db8:	b106      	cbz	r6, dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
			nj_len += 1U;
     dba:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     dbc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     dc0:	06d0      	lsls	r0, r2, #27
     dc2:	d56b      	bpl.n	e9c <CONFIG_ISR_STACK_SIZE+0x69c>
			nj_len += 2U;
     dc4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     dc6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     dc8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     dca:	bf48      	it	mi
     dcc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     dce:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     dd0:	bf48      	it	mi
     dd2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     dd4:	f1b9 0f00 	cmp.w	r9, #0
     dd8:	dd79      	ble.n	ece <CONFIG_ISR_STACK_SIZE+0x6ce>
			if (!conv->flag_dash) {
     dda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     dde:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     de2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     de6:	9303      	str	r3, [sp, #12]
     de8:	0753      	lsls	r3, r2, #29
     dea:	d470      	bmi.n	ece <CONFIG_ISR_STACK_SIZE+0x6ce>
				if (conv->flag_zero) {
     dec:	0650      	lsls	r0, r2, #25
     dee:	d564      	bpl.n	eba <CONFIG_ISR_STACK_SIZE+0x6ba>
					if (sign != 0) {
     df0:	b146      	cbz	r6, e04 <CONFIG_ISR_STACK_SIZE+0x604>
						OUTC(sign);
     df2:	9b02      	ldr	r3, [sp, #8]
     df4:	4659      	mov	r1, fp
     df6:	4630      	mov	r0, r6
     df8:	4798      	blx	r3
     dfa:	2800      	cmp	r0, #0
     dfc:	db5a      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
						sign = 0;
     dfe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     e00:	3501      	adds	r5, #1
						sign = 0;
     e02:	461e      	mov	r6, r3
					pad = '0';
     e04:	2330      	movs	r3, #48	; 0x30
     e06:	e059      	b.n	ebc <CONFIG_ISR_STACK_SIZE+0x6bc>
			if (conv->flag_plus) {
     e08:	071e      	lsls	r6, r3, #28
     e0a:	d411      	bmi.n	e30 <CONFIG_ISR_STACK_SIZE+0x630>
				sign = ' ';
     e0c:	f013 0610 	ands.w	r6, r3, #16
     e10:	bf18      	it	ne
     e12:	2620      	movne	r6, #32
			sint = value->sint;
     e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     e18:	2a00      	cmp	r2, #0
     e1a:	f173 0100 	sbcs.w	r1, r3, #0
     e1e:	f6bf af5d 	bge.w	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
				value->uint = (uint_value_type)-sint;
     e22:	4252      	negs	r2, r2
     e24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     e2c:	262d      	movs	r6, #45	; 0x2d
     e2e:	e755      	b.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
				sign = '+';
     e30:	262b      	movs	r6, #43	; 0x2b
     e32:	e7ef      	b.n	e14 <CONFIG_ISR_STACK_SIZE+0x614>
		switch (conv->specifier) {
     e34:	2600      	movs	r6, #0
     e36:	e751      	b.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
			if (value->ptr != NULL) {
     e38:	980a      	ldr	r0, [sp, #40]	; 0x28
     e3a:	b348      	cbz	r0, e90 <CONFIG_ISR_STACK_SIZE+0x690>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e40:	9300      	str	r3, [sp, #0]
     e42:	aa0c      	add	r2, sp, #48	; 0x30
     e44:	ab04      	add	r3, sp, #16
     e46:	2100      	movs	r1, #0
     e48:	f007 f901 	bl	804e <encode_uint>
				conv->altform_0c = true;
     e4c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     e50:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e54:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e58:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e5c:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e5e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     e62:	2600      	movs	r6, #0
				goto prec_int_pad0;
     e64:	e744      	b.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
				store_count(conv, value->ptr, count);
     e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     e68:	2a07      	cmp	r2, #7
     e6a:	f63f aee1 	bhi.w	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     e6e:	e8df f002 	tbb	[pc, r2]
     e72:	040d      	.short	0x040d
     e74:	08080d06 	.word	0x08080d06
     e78:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     e7a:	701d      	strb	r5, [r3, #0]
		break;
     e7c:	e6d8      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		*(short *)dp = (short)count;
     e7e:	801d      	strh	r5, [r3, #0]
		break;
     e80:	e6d6      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		*(intmax_t *)dp = (intmax_t)count;
     e82:	4628      	mov	r0, r5
     e84:	17e9      	asrs	r1, r5, #31
     e86:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     e8a:	e6d1      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e8c:	601d      	str	r5, [r3, #0]
		break;
     e8e:	e6cf      	b.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
			bpe = bps + 5;
     e90:	f8df 80c4 	ldr.w	r8, [pc, #196]	; f58 <CONFIG_ISR_STACK_SIZE+0x758>
     e94:	4606      	mov	r6, r0
			bps = "(nil)";
     e96:	f1a8 0a05 	sub.w	sl, r8, #5
     e9a:	e78b      	b.n	db4 <CONFIG_ISR_STACK_SIZE+0x5b4>
		} else if (conv->altform_0) {
     e9c:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     e9e:	bf48      	it	mi
     ea0:	3301      	addmi	r3, #1
     ea2:	e790      	b.n	dc6 <CONFIG_ISR_STACK_SIZE+0x5c6>
					OUTC(pad);
     ea4:	4618      	mov	r0, r3
     ea6:	9303      	str	r3, [sp, #12]
     ea8:	4659      	mov	r1, fp
     eaa:	9b02      	ldr	r3, [sp, #8]
     eac:	4798      	blx	r3
     eae:	2800      	cmp	r0, #0
     eb0:	9b03      	ldr	r3, [sp, #12]
     eb2:	da04      	bge.n	ebe <CONFIG_ISR_STACK_SIZE+0x6be>
#undef OUTS
#undef OUTC
}
     eb4:	b011      	add	sp, #68	; 0x44
     eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     eba:	2320      	movs	r3, #32
     ebc:	444d      	add	r5, r9
     ebe:	464a      	mov	r2, r9
				while (width-- > 0) {
     ec0:	2a00      	cmp	r2, #0
     ec2:	eba5 0109 	sub.w	r1, r5, r9
     ec6:	f109 39ff 	add.w	r9, r9, #4294967295
     eca:	dceb      	bgt.n	ea4 <CONFIG_ISR_STACK_SIZE+0x6a4>
     ecc:	460d      	mov	r5, r1
		if (sign != 0) {
     ece:	b136      	cbz	r6, ede <CONFIG_ISR_STACK_SIZE+0x6de>
			OUTC(sign);
     ed0:	9b02      	ldr	r3, [sp, #8]
     ed2:	4659      	mov	r1, fp
     ed4:	4630      	mov	r0, r6
     ed6:	4798      	blx	r3
     ed8:	2800      	cmp	r0, #0
     eda:	dbeb      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     edc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ede:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ee2:	06d9      	lsls	r1, r3, #27
     ee4:	d401      	bmi.n	eea <CONFIG_ISR_STACK_SIZE+0x6ea>
     ee6:	071a      	lsls	r2, r3, #28
     ee8:	d506      	bpl.n	ef8 <CONFIG_ISR_STACK_SIZE+0x6f8>
				OUTC('0');
     eea:	9b02      	ldr	r3, [sp, #8]
     eec:	4659      	mov	r1, fp
     eee:	2030      	movs	r0, #48	; 0x30
     ef0:	4798      	blx	r3
     ef2:	2800      	cmp	r0, #0
     ef4:	dbde      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     ef6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     ef8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     efc:	06db      	lsls	r3, r3, #27
     efe:	d507      	bpl.n	f10 <CONFIG_ISR_STACK_SIZE+0x710>
				OUTC(conv->specifier);
     f00:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f04:	9b02      	ldr	r3, [sp, #8]
     f06:	4659      	mov	r1, fp
     f08:	4798      	blx	r3
     f0a:	2800      	cmp	r0, #0
     f0c:	dbd2      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     f0e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f10:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     f12:	442e      	add	r6, r5
     f14:	1b73      	subs	r3, r6, r5
     f16:	2b00      	cmp	r3, #0
     f18:	dc16      	bgt.n	f48 <CONFIG_ISR_STACK_SIZE+0x748>
			OUTS(bps, bpe);
     f1a:	9802      	ldr	r0, [sp, #8]
     f1c:	4643      	mov	r3, r8
     f1e:	4652      	mov	r2, sl
     f20:	4659      	mov	r1, fp
     f22:	f007 f8df 	bl	80e4 <outs>
     f26:	2800      	cmp	r0, #0
     f28:	dbc4      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     f2a:	4405      	add	r5, r0
		while (width > 0) {
     f2c:	44a9      	add	r9, r5
     f2e:	eba9 0305 	sub.w	r3, r9, r5
     f32:	2b00      	cmp	r3, #0
     f34:	f77f ae7c 	ble.w	c30 <CONFIG_ISR_STACK_SIZE+0x430>
			OUTC(' ');
     f38:	9b02      	ldr	r3, [sp, #8]
     f3a:	4659      	mov	r1, fp
     f3c:	2020      	movs	r0, #32
     f3e:	4798      	blx	r3
     f40:	2800      	cmp	r0, #0
     f42:	dbb7      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     f44:	3501      	adds	r5, #1
			--width;
     f46:	e7f2      	b.n	f2e <CONFIG_ISR_STACK_SIZE+0x72e>
				OUTC('0');
     f48:	9b02      	ldr	r3, [sp, #8]
     f4a:	4659      	mov	r1, fp
     f4c:	2030      	movs	r0, #48	; 0x30
     f4e:	4798      	blx	r3
     f50:	2800      	cmp	r0, #0
     f52:	dbaf      	blt.n	eb4 <CONFIG_ISR_STACK_SIZE+0x6b4>
     f54:	3501      	adds	r5, #1
     f56:	e7dd      	b.n	f14 <CONFIG_ISR_STACK_SIZE+0x714>
     f58:	000090f3 	.word	0x000090f3

00000f5c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     f5c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     f5e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     f62:	2b02      	cmp	r3, #2
{
     f64:	b570      	push	{r4, r5, r6, lr}
     f66:	4604      	mov	r4, r0
     f68:	460e      	mov	r6, r1
	notify->result = res;
     f6a:	6081      	str	r1, [r0, #8]
	switch (method) {
     f6c:	d010      	beq.n	f90 <sys_notify_finalize+0x34>
     f6e:	2b03      	cmp	r3, #3
     f70:	d004      	beq.n	f7c <sys_notify_finalize+0x20>
     f72:	2b01      	cmp	r3, #1
     f74:	d10f      	bne.n	f96 <sys_notify_finalize+0x3a>
     f76:	2500      	movs	r5, #0
     f78:	4628      	mov	r0, r5
     f7a:	e001      	b.n	f80 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     f7c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
     f7e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     f80:	2300      	movs	r3, #0
     f82:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
     f84:	b110      	cbz	r0, f8c <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
     f86:	4631      	mov	r1, r6
     f88:	f004 faf2 	bl	5570 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     f8c:	4628      	mov	r0, r5
     f8e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
     f90:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
     f92:	2500      	movs	r5, #0
		break;
     f94:	e7f4      	b.n	f80 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
     f96:	4a06      	ldr	r2, [pc, #24]	; (fb0 <sys_notify_finalize+0x54>)
     f98:	4906      	ldr	r1, [pc, #24]	; (fb4 <sys_notify_finalize+0x58>)
     f9a:	4807      	ldr	r0, [pc, #28]	; (fb8 <sys_notify_finalize+0x5c>)
     f9c:	2345      	movs	r3, #69	; 0x45
     f9e:	f007 f926 	bl	81ee <printk>
     fa2:	4803      	ldr	r0, [pc, #12]	; (fb0 <sys_notify_finalize+0x54>)
     fa4:	2145      	movs	r1, #69	; 0x45
     fa6:	f007 f84b 	bl	8040 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     faa:	2500      	movs	r5, #0
     fac:	e7e7      	b.n	f7e <sys_notify_finalize+0x22>
     fae:	bf00      	nop
     fb0:	000090f4 	.word	0x000090f4
     fb4:	000098f6 	.word	0x000098f6
     fb8:	00009117 	.word	0x00009117

00000fbc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
     fbc:	4801      	ldr	r0, [pc, #4]	; (fc4 <nrf_cc3xx_platform_abort_init+0x8>)
     fbe:	f006 bead 	b.w	7d1c <nrf_cc3xx_platform_set_abort>
     fc2:	bf00      	nop
     fc4:	00008c58 	.word	0x00008c58

00000fc8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     fc8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     fca:	b1d0      	cbz	r0, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     fcc:	6843      	ldr	r3, [r0, #4]
     fce:	2b04      	cmp	r3, #4
     fd0:	d111      	bne.n	ff6 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     fd2:	2200      	movs	r2, #0
     fd4:	6803      	ldr	r3, [r0, #0]
     fd6:	f3bf 8f5b 	dmb	ish
     fda:	e853 1f00 	ldrex	r1, [r3]
     fde:	2901      	cmp	r1, #1
     fe0:	d103      	bne.n	fea <mutex_unlock_platform+0x22>
     fe2:	e843 2000 	strex	r0, r2, [r3]
     fe6:	2800      	cmp	r0, #0
     fe8:	d1f7      	bne.n	fda <mutex_unlock_platform+0x12>
     fea:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
     fee:	4807      	ldr	r0, [pc, #28]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     ff0:	bf08      	it	eq
     ff2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
     ff4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     ff6:	b13b      	cbz	r3, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
        p_mutex = (struct k_mutex *)mutex->mutex;
     ff8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     ffa:	f004 f97b 	bl	52f4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
     ffe:	2000      	movs	r0, #0
    1000:	e7f8      	b.n	ff4 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1002:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1006:	e7f5      	b.n	ff4 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1008:	4801      	ldr	r0, [pc, #4]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    100a:	e7f3      	b.n	ff4 <mutex_unlock_platform+0x2c>
    100c:	ffff8fe9 	.word	0xffff8fe9
    1010:	ffff8fea 	.word	0xffff8fea

00001014 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1014:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1016:	4604      	mov	r4, r0
    1018:	b918      	cbnz	r0, 1022 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    101a:	4b0d      	ldr	r3, [pc, #52]	; (1050 <mutex_free_platform+0x3c>)
    101c:	480d      	ldr	r0, [pc, #52]	; (1054 <mutex_free_platform+0x40>)
    101e:	685b      	ldr	r3, [r3, #4]
    1020:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1022:	6861      	ldr	r1, [r4, #4]
    1024:	2908      	cmp	r1, #8
    1026:	d00d      	beq.n	1044 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1028:	f031 0304 	bics.w	r3, r1, #4
    102c:	d00a      	beq.n	1044 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    102e:	f011 0102 	ands.w	r1, r1, #2
    1032:	d008      	beq.n	1046 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1034:	4808      	ldr	r0, [pc, #32]	; (1058 <mutex_free_platform+0x44>)
    1036:	4621      	mov	r1, r4
    1038:	f003 fff8 	bl	502c <k_mem_slab_free>
        mutex->mutex = NULL;
    103c:	2300      	movs	r3, #0
    103e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1040:	2300      	movs	r3, #0
    1042:	6063      	str	r3, [r4, #4]
}
    1044:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1046:	6820      	ldr	r0, [r4, #0]
    1048:	2214      	movs	r2, #20
    104a:	f007 f929 	bl	82a0 <memset>
    104e:	e7f7      	b.n	1040 <mutex_free_platform+0x2c>
    1050:	2000018c 	.word	0x2000018c
    1054:	00009134 	.word	0x00009134
    1058:	200005e4 	.word	0x200005e4

0000105c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    105c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    105e:	4604      	mov	r4, r0
    1060:	b918      	cbnz	r0, 106a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1062:	4b16      	ldr	r3, [pc, #88]	; (10bc <mutex_init_platform+0x60>)
    1064:	4816      	ldr	r0, [pc, #88]	; (10c0 <mutex_init_platform+0x64>)
    1066:	685b      	ldr	r3, [r3, #4]
    1068:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    106a:	6863      	ldr	r3, [r4, #4]
    106c:	2b04      	cmp	r3, #4
    106e:	d023      	beq.n	10b8 <mutex_init_platform+0x5c>
    1070:	2b08      	cmp	r3, #8
    1072:	d021      	beq.n	10b8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1074:	b9cb      	cbnz	r3, 10aa <mutex_init_platform+0x4e>
    1076:	6823      	ldr	r3, [r4, #0]
    1078:	b9bb      	cbnz	r3, 10aa <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    107a:	4812      	ldr	r0, [pc, #72]	; (10c4 <mutex_init_platform+0x68>)
    107c:	f04f 32ff 	mov.w	r2, #4294967295
    1080:	f04f 33ff 	mov.w	r3, #4294967295
    1084:	4621      	mov	r1, r4
    1086:	f003 ff65 	bl	4f54 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    108a:	b908      	cbnz	r0, 1090 <mutex_init_platform+0x34>
    108c:	6823      	ldr	r3, [r4, #0]
    108e:	b91b      	cbnz	r3, 1098 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1090:	4b0a      	ldr	r3, [pc, #40]	; (10bc <mutex_init_platform+0x60>)
    1092:	480d      	ldr	r0, [pc, #52]	; (10c8 <mutex_init_platform+0x6c>)
    1094:	685b      	ldr	r3, [r3, #4]
    1096:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1098:	6820      	ldr	r0, [r4, #0]
    109a:	2214      	movs	r2, #20
    109c:	2100      	movs	r1, #0
    109e:	f007 f8ff 	bl	82a0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    10a2:	6863      	ldr	r3, [r4, #4]
    10a4:	f043 0302 	orr.w	r3, r3, #2
    10a8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    10aa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    10ac:	f007 fbe5 	bl	887a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    10b0:	6863      	ldr	r3, [r4, #4]
    10b2:	f043 0301 	orr.w	r3, r3, #1
    10b6:	6063      	str	r3, [r4, #4]
}
    10b8:	bd10      	pop	{r4, pc}
    10ba:	bf00      	nop
    10bc:	2000018c 	.word	0x2000018c
    10c0:	00009134 	.word	0x00009134
    10c4:	200005e4 	.word	0x200005e4
    10c8:	0000915a 	.word	0x0000915a

000010cc <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10cc:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    10ce:	b308      	cbz	r0, 1114 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    10d0:	6843      	ldr	r3, [r0, #4]
    10d2:	2b04      	cmp	r3, #4
    10d4:	d110      	bne.n	10f8 <mutex_lock_platform+0x2c>
    10d6:	2201      	movs	r2, #1
    10d8:	6803      	ldr	r3, [r0, #0]
    10da:	f3bf 8f5b 	dmb	ish
    10de:	e853 1f00 	ldrex	r1, [r3]
    10e2:	2900      	cmp	r1, #0
    10e4:	d103      	bne.n	10ee <mutex_lock_platform+0x22>
    10e6:	e843 2000 	strex	r0, r2, [r3]
    10ea:	2800      	cmp	r0, #0
    10ec:	d1f7      	bne.n	10de <mutex_lock_platform+0x12>
    10ee:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10f2:	d10b      	bne.n	110c <mutex_lock_platform+0x40>
    10f4:	2000      	movs	r0, #0
}
    10f6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10f8:	b153      	cbz	r3, 1110 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    10fa:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    10fc:	f04f 32ff 	mov.w	r2, #4294967295
    1100:	f04f 33ff 	mov.w	r3, #4294967295
    1104:	f003 fff6 	bl	50f4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1108:	2800      	cmp	r0, #0
    110a:	d0f3      	beq.n	10f4 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    110c:	4803      	ldr	r0, [pc, #12]	; (111c <mutex_lock_platform+0x50>)
    110e:	e7f2      	b.n	10f6 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1110:	4803      	ldr	r0, [pc, #12]	; (1120 <mutex_lock_platform+0x54>)
    1112:	e7f0      	b.n	10f6 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1114:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1118:	e7ed      	b.n	10f6 <mutex_lock_platform+0x2a>
    111a:	bf00      	nop
    111c:	ffff8fe9 	.word	0xffff8fe9
    1120:	ffff8fea 	.word	0xffff8fea

00001124 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1124:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1126:	4906      	ldr	r1, [pc, #24]	; (1140 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1128:	4806      	ldr	r0, [pc, #24]	; (1144 <nrf_cc3xx_platform_mutex_init+0x20>)
    112a:	2340      	movs	r3, #64	; 0x40
    112c:	2214      	movs	r2, #20
    112e:	f007 fb88 	bl	8842 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1136:	4904      	ldr	r1, [pc, #16]	; (1148 <nrf_cc3xx_platform_mutex_init+0x24>)
    1138:	4804      	ldr	r0, [pc, #16]	; (114c <nrf_cc3xx_platform_mutex_init+0x28>)
    113a:	f006 be51 	b.w	7de0 <nrf_cc3xx_platform_set_mutexes>
    113e:	bf00      	nop
    1140:	20000604 	.word	0x20000604
    1144:	200005e4 	.word	0x200005e4
    1148:	00008c70 	.word	0x00008c70
    114c:	00008c60 	.word	0x00008c60

00001150 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1154:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1158:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    115a:	f019 0f08 	tst.w	r9, #8
{
    115e:	4604      	mov	r4, r0
    1160:	9203      	str	r2, [sp, #12]
	if (processing) {
    1162:	d022      	beq.n	11aa <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1164:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1166:	bf0c      	ite	eq
    1168:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    116c:	f049 0920 	orrne.w	r9, r9, #32
    1170:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1174:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1176:	4620      	mov	r0, r4
    1178:	f005 febc 	bl	6ef4 <z_spin_unlock_valid>
    117c:	b968      	cbnz	r0, 119a <process_event+0x4a>
    117e:	4a9f      	ldr	r2, [pc, #636]	; (13fc <process_event+0x2ac>)
    1180:	499f      	ldr	r1, [pc, #636]	; (1400 <process_event+0x2b0>)
    1182:	48a0      	ldr	r0, [pc, #640]	; (1404 <process_event+0x2b4>)
    1184:	23ac      	movs	r3, #172	; 0xac
    1186:	f007 f832 	bl	81ee <printk>
    118a:	489f      	ldr	r0, [pc, #636]	; (1408 <process_event+0x2b8>)
    118c:	4621      	mov	r1, r4
    118e:	f007 f82e 	bl	81ee <printk>
    1192:	489a      	ldr	r0, [pc, #616]	; (13fc <process_event+0x2ac>)
    1194:	21ac      	movs	r1, #172	; 0xac
    1196:	f006 ff53 	bl	8040 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    119a:	9b03      	ldr	r3, [sp, #12]
    119c:	f383 8811 	msr	BASEPRI, r3
    11a0:	f3bf 8f6f 	isb	sy
}
    11a4:	b005      	add	sp, #20
    11a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    11aa:	4f98      	ldr	r7, [pc, #608]	; (140c <process_event+0x2bc>)
    11ac:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1404 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11b0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    11b4:	2902      	cmp	r1, #2
    11b6:	d106      	bne.n	11c6 <process_event+0x76>
			evt = process_recheck(mgr);
    11b8:	4620      	mov	r0, r4
    11ba:	f006 ffc2 	bl	8142 <process_recheck>
		if (evt == EVT_NOP) {
    11be:	2800      	cmp	r0, #0
    11c0:	d0d8      	beq.n	1174 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    11c2:	2801      	cmp	r0, #1
    11c4:	d168      	bne.n	1298 <process_event+0x148>
			res = mgr->last_res;
    11c6:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11ca:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    11cc:	f1bb 0f00 	cmp.w	fp, #0
    11d0:	da0a      	bge.n	11e8 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    11d2:	2600      	movs	r6, #0
		*clients = mgr->clients;
    11d4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11d6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    11da:	e9c4 6600 	strd	r6, r6, [r4]
    11de:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    11e2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    11e4:	9601      	str	r6, [sp, #4]
    11e6:	e027      	b.n	1238 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11e8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    11ec:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    11ee:	2901      	cmp	r1, #1
    11f0:	d834      	bhi.n	125c <process_event+0x10c>
	list->head = NULL;
    11f2:	2100      	movs	r1, #0
    11f4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    11f8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    11fa:	6825      	ldr	r5, [r4, #0]
    11fc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    11fe:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1202:	d10c      	bne.n	121e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1204:	428d      	cmp	r5, r1
    1206:	462a      	mov	r2, r5
    1208:	bf38      	it	cc
    120a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    120c:	b12a      	cbz	r2, 121a <process_event+0xca>
				mgr->refs += 1U;
    120e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1210:	6812      	ldr	r2, [r2, #0]
    1212:	3101      	adds	r1, #1
    1214:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1216:	2a00      	cmp	r2, #0
    1218:	d1f8      	bne.n	120c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    121a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    121e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1220:	4620      	mov	r0, r4
    1222:	f006 ff8e 	bl	8142 <process_recheck>
    1226:	4606      	mov	r6, r0
    1228:	2800      	cmp	r0, #0
    122a:	d0db      	beq.n	11e4 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    122c:	8ba3      	ldrh	r3, [r4, #28]
    122e:	f043 0320 	orr.w	r3, r3, #32
    1232:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1234:	2300      	movs	r3, #0
    1236:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1238:	8ba3      	ldrh	r3, [r4, #28]
    123a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    123e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1240:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1242:	d003      	beq.n	124c <process_event+0xfc>
		if (do_monitors
    1244:	68a2      	ldr	r2, [r4, #8]
    1246:	2a00      	cmp	r2, #0
    1248:	f040 80f0 	bne.w	142c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    124c:	b91d      	cbnz	r5, 1256 <process_event+0x106>
		    || (transit != NULL)) {
    124e:	9a01      	ldr	r2, [sp, #4]
    1250:	2a00      	cmp	r2, #0
    1252:	f000 8136 	beq.w	14c2 <process_event+0x372>
    1256:	f04f 0900 	mov.w	r9, #0
    125a:	e0e9      	b.n	1430 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    125c:	2a04      	cmp	r2, #4
    125e:	d10e      	bne.n	127e <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1260:	f023 0307 	bic.w	r3, r3, #7
    1264:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1266:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1268:	4620      	mov	r0, r4
    126a:	f006 ff6a 	bl	8142 <process_recheck>
    126e:	4605      	mov	r5, r0
    1270:	b118      	cbz	r0, 127a <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1272:	f042 0220 	orr.w	r2, r2, #32
    1276:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1278:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    127a:	9501      	str	r5, [sp, #4]
    127c:	e7dc      	b.n	1238 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    127e:	4640      	mov	r0, r8
    1280:	4963      	ldr	r1, [pc, #396]	; (1410 <process_event+0x2c0>)
    1282:	f240 131b 	movw	r3, #283	; 0x11b
    1286:	463a      	mov	r2, r7
    1288:	f006 ffb1 	bl	81ee <printk>
    128c:	f240 111b 	movw	r1, #283	; 0x11b
    1290:	4638      	mov	r0, r7
    1292:	f006 fed5 	bl	8040 <assert_post_action>
    1296:	e7ef      	b.n	1278 <process_event+0x128>
		} else if (evt == EVT_START) {
    1298:	2803      	cmp	r0, #3
    129a:	d135      	bne.n	1308 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    129c:	f1b9 0f00 	cmp.w	r9, #0
    12a0:	d00b      	beq.n	12ba <process_event+0x16a>
    12a2:	495c      	ldr	r1, [pc, #368]	; (1414 <process_event+0x2c4>)
    12a4:	4640      	mov	r0, r8
    12a6:	f44f 73ab 	mov.w	r3, #342	; 0x156
    12aa:	463a      	mov	r2, r7
    12ac:	f006 ff9f 	bl	81ee <printk>
    12b0:	f44f 71ab 	mov.w	r1, #342	; 0x156
    12b4:	4638      	mov	r0, r7
    12b6:	f006 fec3 	bl	8040 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    12ba:	6823      	ldr	r3, [r4, #0]
    12bc:	b95b      	cbnz	r3, 12d6 <process_event+0x186>
    12be:	4956      	ldr	r1, [pc, #344]	; (1418 <process_event+0x2c8>)
    12c0:	4640      	mov	r0, r8
    12c2:	f240 1357 	movw	r3, #343	; 0x157
    12c6:	463a      	mov	r2, r7
    12c8:	f006 ff91 	bl	81ee <printk>
    12cc:	f240 1157 	movw	r1, #343	; 0x157
    12d0:	4638      	mov	r0, r7
    12d2:	f006 feb5 	bl	8040 <assert_post_action>
			transit = mgr->transitions->start;
    12d6:	6923      	ldr	r3, [r4, #16]
    12d8:	681b      	ldr	r3, [r3, #0]
    12da:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    12dc:	b95b      	cbnz	r3, 12f6 <process_event+0x1a6>
    12de:	494f      	ldr	r1, [pc, #316]	; (141c <process_event+0x2cc>)
    12e0:	4640      	mov	r0, r8
    12e2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    12e6:	463a      	mov	r2, r7
    12e8:	f006 ff81 	bl	81ee <printk>
    12ec:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    12f0:	4638      	mov	r0, r7
    12f2:	f006 fea5 	bl	8040 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12f6:	8ba3      	ldrh	r3, [r4, #28]
    12f8:	f023 0307 	bic.w	r3, r3, #7
    12fc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1300:	83a3      	strh	r3, [r4, #28]
}
    1302:	2500      	movs	r5, #0
		res = 0;
    1304:	46ab      	mov	fp, r5
}
    1306:	e797      	b.n	1238 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1308:	2804      	cmp	r0, #4
    130a:	d132      	bne.n	1372 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    130c:	f1b9 0f02 	cmp.w	r9, #2
    1310:	d00b      	beq.n	132a <process_event+0x1da>
    1312:	4943      	ldr	r1, [pc, #268]	; (1420 <process_event+0x2d0>)
    1314:	4640      	mov	r0, r8
    1316:	f240 135d 	movw	r3, #349	; 0x15d
    131a:	463a      	mov	r2, r7
    131c:	f006 ff67 	bl	81ee <printk>
    1320:	f240 115d 	movw	r1, #349	; 0x15d
    1324:	4638      	mov	r0, r7
    1326:	f006 fe8b 	bl	8040 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    132a:	8be3      	ldrh	r3, [r4, #30]
    132c:	b15b      	cbz	r3, 1346 <process_event+0x1f6>
    132e:	493d      	ldr	r1, [pc, #244]	; (1424 <process_event+0x2d4>)
    1330:	4640      	mov	r0, r8
    1332:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1336:	463a      	mov	r2, r7
    1338:	f006 ff59 	bl	81ee <printk>
    133c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1340:	4638      	mov	r0, r7
    1342:	f006 fe7d 	bl	8040 <assert_post_action>
			transit = mgr->transitions->stop;
    1346:	6923      	ldr	r3, [r4, #16]
    1348:	685b      	ldr	r3, [r3, #4]
    134a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    134c:	b95b      	cbnz	r3, 1366 <process_event+0x216>
    134e:	4933      	ldr	r1, [pc, #204]	; (141c <process_event+0x2cc>)
    1350:	4640      	mov	r0, r8
    1352:	f240 1361 	movw	r3, #353	; 0x161
    1356:	463a      	mov	r2, r7
    1358:	f006 ff49 	bl	81ee <printk>
    135c:	f240 1161 	movw	r1, #353	; 0x161
    1360:	4638      	mov	r0, r7
    1362:	f006 fe6d 	bl	8040 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1366:	8ba3      	ldrh	r3, [r4, #28]
    1368:	f023 0307 	bic.w	r3, r3, #7
    136c:	f043 0304 	orr.w	r3, r3, #4
    1370:	e7c6      	b.n	1300 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    1372:	2805      	cmp	r0, #5
    1374:	d132      	bne.n	13dc <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1376:	f1b9 0f01 	cmp.w	r9, #1
    137a:	d00b      	beq.n	1394 <process_event+0x244>
    137c:	492a      	ldr	r1, [pc, #168]	; (1428 <process_event+0x2d8>)
    137e:	4640      	mov	r0, r8
    1380:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1384:	463a      	mov	r2, r7
    1386:	f006 ff32 	bl	81ee <printk>
    138a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    138e:	4638      	mov	r0, r7
    1390:	f006 fe56 	bl	8040 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1394:	6823      	ldr	r3, [r4, #0]
    1396:	b95b      	cbnz	r3, 13b0 <process_event+0x260>
    1398:	491f      	ldr	r1, [pc, #124]	; (1418 <process_event+0x2c8>)
    139a:	4640      	mov	r0, r8
    139c:	f240 1365 	movw	r3, #357	; 0x165
    13a0:	463a      	mov	r2, r7
    13a2:	f006 ff24 	bl	81ee <printk>
    13a6:	f240 1165 	movw	r1, #357	; 0x165
    13aa:	4638      	mov	r0, r7
    13ac:	f006 fe48 	bl	8040 <assert_post_action>
			transit = mgr->transitions->reset;
    13b0:	6923      	ldr	r3, [r4, #16]
    13b2:	689b      	ldr	r3, [r3, #8]
    13b4:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    13b6:	b95b      	cbnz	r3, 13d0 <process_event+0x280>
    13b8:	4918      	ldr	r1, [pc, #96]	; (141c <process_event+0x2cc>)
    13ba:	4640      	mov	r0, r8
    13bc:	f44f 73b4 	mov.w	r3, #360	; 0x168
    13c0:	463a      	mov	r2, r7
    13c2:	f006 ff14 	bl	81ee <printk>
    13c6:	f44f 71b4 	mov.w	r1, #360	; 0x168
    13ca:	4638      	mov	r0, r7
    13cc:	f006 fe38 	bl	8040 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13d0:	8ba3      	ldrh	r3, [r4, #28]
    13d2:	f023 0307 	bic.w	r3, r3, #7
    13d6:	f043 0305 	orr.w	r3, r3, #5
    13da:	e791      	b.n	1300 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    13dc:	490c      	ldr	r1, [pc, #48]	; (1410 <process_event+0x2c0>)
    13de:	f240 136b 	movw	r3, #363	; 0x16b
    13e2:	463a      	mov	r2, r7
    13e4:	4640      	mov	r0, r8
    13e6:	f006 ff02 	bl	81ee <printk>
    13ea:	2500      	movs	r5, #0
    13ec:	f240 116b 	movw	r1, #363	; 0x16b
    13f0:	4638      	mov	r0, r7
    13f2:	f006 fe25 	bl	8040 <assert_post_action>
		onoff_transition_fn transit = NULL;
    13f6:	9501      	str	r5, [sp, #4]
    13f8:	e784      	b.n	1304 <process_event+0x1b4>
    13fa:	bf00      	nop
    13fc:	0000922a 	.word	0x0000922a
    1400:	00009250 	.word	0x00009250
    1404:	00009117 	.word	0x00009117
    1408:	00009267 	.word	0x00009267
    140c:	00009187 	.word	0x00009187
    1410:	000098f6 	.word	0x000098f6
    1414:	000091a9 	.word	0x000091a9
    1418:	000091b5 	.word	0x000091b5
    141c:	000091d8 	.word	0x000091d8
    1420:	000091ef 	.word	0x000091ef
    1424:	00009205 	.word	0x00009205
    1428:	00009214 	.word	0x00009214
				   && !sys_slist_is_empty(&mgr->monitors);
    142c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1430:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1434:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1438:	83a3      	strh	r3, [r4, #28]
    143a:	4650      	mov	r0, sl
    143c:	f005 fd5a 	bl	6ef4 <z_spin_unlock_valid>
    1440:	b968      	cbnz	r0, 145e <process_event+0x30e>
    1442:	4a3a      	ldr	r2, [pc, #232]	; (152c <process_event+0x3dc>)
    1444:	493a      	ldr	r1, [pc, #232]	; (1530 <process_event+0x3e0>)
    1446:	23ac      	movs	r3, #172	; 0xac
    1448:	4640      	mov	r0, r8
    144a:	f006 fed0 	bl	81ee <printk>
    144e:	4839      	ldr	r0, [pc, #228]	; (1534 <process_event+0x3e4>)
    1450:	4651      	mov	r1, sl
    1452:	f006 fecc 	bl	81ee <printk>
    1456:	4835      	ldr	r0, [pc, #212]	; (152c <process_event+0x3dc>)
    1458:	21ac      	movs	r1, #172	; 0xac
    145a:	f006 fdf1 	bl	8040 <assert_post_action>
    145e:	9b03      	ldr	r3, [sp, #12]
    1460:	f383 8811 	msr	BASEPRI, r3
    1464:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1468:	f1b9 0f00 	cmp.w	r9, #0
    146c:	d138      	bne.n	14e0 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    146e:	2d00      	cmp	r5, #0
    1470:	d14b      	bne.n	150a <process_event+0x3ba>
			if (transit != NULL) {
    1472:	9b01      	ldr	r3, [sp, #4]
    1474:	b113      	cbz	r3, 147c <process_event+0x32c>
				transit(mgr, transition_complete);
    1476:	4930      	ldr	r1, [pc, #192]	; (1538 <process_event+0x3e8>)
    1478:	4620      	mov	r0, r4
    147a:	4798      	blx	r3
	__asm__ volatile(
    147c:	f04f 0320 	mov.w	r3, #32
    1480:	f3ef 8b11 	mrs	fp, BASEPRI
    1484:	f383 8812 	msr	BASEPRI_MAX, r3
    1488:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    148c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    148e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1492:	f005 fd21 	bl	6ed8 <z_spin_lock_valid>
    1496:	b968      	cbnz	r0, 14b4 <process_event+0x364>
    1498:	4a24      	ldr	r2, [pc, #144]	; (152c <process_event+0x3dc>)
    149a:	4928      	ldr	r1, [pc, #160]	; (153c <process_event+0x3ec>)
    149c:	2381      	movs	r3, #129	; 0x81
    149e:	4640      	mov	r0, r8
    14a0:	f006 fea5 	bl	81ee <printk>
    14a4:	4826      	ldr	r0, [pc, #152]	; (1540 <process_event+0x3f0>)
    14a6:	4651      	mov	r1, sl
    14a8:	f006 fea1 	bl	81ee <printk>
    14ac:	481f      	ldr	r0, [pc, #124]	; (152c <process_event+0x3dc>)
    14ae:	2181      	movs	r1, #129	; 0x81
    14b0:	f006 fdc6 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    14b4:	4650      	mov	r0, sl
    14b6:	f005 fd2d 	bl	6f14 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    14ba:	8ba3      	ldrh	r3, [r4, #28]
    14bc:	f023 0308 	bic.w	r3, r3, #8
    14c0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    14c2:	8ba3      	ldrh	r3, [r4, #28]
    14c4:	06da      	lsls	r2, r3, #27
    14c6:	d528      	bpl.n	151a <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14c8:	f023 0310 	bic.w	r3, r3, #16
    14cc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    14ce:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    14d0:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    14d4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    14d8:	2900      	cmp	r1, #0
    14da:	f47f ae6b 	bne.w	11b4 <process_event+0x64>
out:
    14de:	e649      	b.n	1174 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14e0:	68a1      	ldr	r1, [r4, #8]
    14e2:	2900      	cmp	r1, #0
    14e4:	d0c3      	beq.n	146e <process_event+0x31e>
	return node->next;
    14e6:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    14e8:	9a02      	ldr	r2, [sp, #8]
    14ea:	2b00      	cmp	r3, #0
    14ec:	bf38      	it	cc
    14ee:	2300      	movcc	r3, #0
    14f0:	4699      	mov	r9, r3
    14f2:	684b      	ldr	r3, [r1, #4]
    14f4:	4620      	mov	r0, r4
    14f6:	461e      	mov	r6, r3
    14f8:	465b      	mov	r3, fp
    14fa:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14fc:	f1b9 0f00 	cmp.w	r9, #0
    1500:	d0b5      	beq.n	146e <process_event+0x31e>
    1502:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1506:	4649      	mov	r1, r9
    1508:	e7ee      	b.n	14e8 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    150a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    150c:	9a02      	ldr	r2, [sp, #8]
    150e:	682d      	ldr	r5, [r5, #0]
    1510:	465b      	mov	r3, fp
    1512:	4620      	mov	r0, r4
    1514:	f006 fe31 	bl	817a <notify_one>
    1518:	e7a9      	b.n	146e <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    151a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    151e:	bf1e      	ittt	ne
    1520:	f023 0320 	bicne.w	r3, r3, #32
    1524:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1526:	2102      	movne	r1, #2
    1528:	e7d2      	b.n	14d0 <process_event+0x380>
    152a:	bf00      	nop
    152c:	0000922a 	.word	0x0000922a
    1530:	00009250 	.word	0x00009250
    1534:	00009267 	.word	0x00009267
    1538:	00001545 	.word	0x00001545
    153c:	0000927c 	.word	0x0000927c
    1540:	00009291 	.word	0x00009291

00001544 <transition_complete>:
{
    1544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1546:	4604      	mov	r4, r0
    1548:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    154a:	f100 0614 	add.w	r6, r0, #20
    154e:	f04f 0320 	mov.w	r3, #32
    1552:	f3ef 8711 	mrs	r7, BASEPRI
    1556:	f383 8812 	msr	BASEPRI_MAX, r3
    155a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    155e:	4630      	mov	r0, r6
    1560:	f005 fcba 	bl	6ed8 <z_spin_lock_valid>
    1564:	b968      	cbnz	r0, 1582 <transition_complete+0x3e>
    1566:	4a0c      	ldr	r2, [pc, #48]	; (1598 <transition_complete+0x54>)
    1568:	490c      	ldr	r1, [pc, #48]	; (159c <transition_complete+0x58>)
    156a:	480d      	ldr	r0, [pc, #52]	; (15a0 <transition_complete+0x5c>)
    156c:	2381      	movs	r3, #129	; 0x81
    156e:	f006 fe3e 	bl	81ee <printk>
    1572:	480c      	ldr	r0, [pc, #48]	; (15a4 <transition_complete+0x60>)
    1574:	4631      	mov	r1, r6
    1576:	f006 fe3a 	bl	81ee <printk>
    157a:	4807      	ldr	r0, [pc, #28]	; (1598 <transition_complete+0x54>)
    157c:	2181      	movs	r1, #129	; 0x81
    157e:	f006 fd5f 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    1582:	4630      	mov	r0, r6
    1584:	f005 fcc6 	bl	6f14 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1588:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    158a:	463a      	mov	r2, r7
    158c:	4620      	mov	r0, r4
    158e:	2101      	movs	r1, #1
}
    1590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1594:	f7ff bddc 	b.w	1150 <process_event>
    1598:	0000922a 	.word	0x0000922a
    159c:	0000927c 	.word	0x0000927c
    15a0:	00009117 	.word	0x00009117
    15a4:	00009291 	.word	0x00009291

000015a8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    15a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ac:	4604      	mov	r4, r0
    15ae:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    15b0:	f006 fdf9 	bl	81a6 <validate_args>

	if (rv < 0) {
    15b4:	1e05      	subs	r5, r0, #0
    15b6:	db5e      	blt.n	1676 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    15b8:	f104 0914 	add.w	r9, r4, #20
    15bc:	f04f 0320 	mov.w	r3, #32
    15c0:	f3ef 8a11 	mrs	sl, BASEPRI
    15c4:	f383 8812 	msr	BASEPRI_MAX, r3
    15c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    15cc:	4648      	mov	r0, r9
    15ce:	f005 fc83 	bl	6ed8 <z_spin_lock_valid>
    15d2:	b968      	cbnz	r0, 15f0 <onoff_request+0x48>
    15d4:	4a38      	ldr	r2, [pc, #224]	; (16b8 <onoff_request+0x110>)
    15d6:	4939      	ldr	r1, [pc, #228]	; (16bc <onoff_request+0x114>)
    15d8:	4839      	ldr	r0, [pc, #228]	; (16c0 <onoff_request+0x118>)
    15da:	2381      	movs	r3, #129	; 0x81
    15dc:	f006 fe07 	bl	81ee <printk>
    15e0:	4838      	ldr	r0, [pc, #224]	; (16c4 <onoff_request+0x11c>)
    15e2:	4649      	mov	r1, r9
    15e4:	f006 fe03 	bl	81ee <printk>
    15e8:	4833      	ldr	r0, [pc, #204]	; (16b8 <onoff_request+0x110>)
    15ea:	2181      	movs	r1, #129	; 0x81
    15ec:	f006 fd28 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    15f0:	4648      	mov	r0, r9
    15f2:	f005 fc8f 	bl	6f14 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    15f6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15f8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    15fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    15fe:	428b      	cmp	r3, r1
    1600:	f002 0607 	and.w	r6, r2, #7
    1604:	d050      	beq.n	16a8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1606:	2e02      	cmp	r6, #2
    1608:	d124      	bne.n	1654 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    160a:	3301      	adds	r3, #1
    160c:	83e3      	strh	r3, [r4, #30]
	rv = state;
    160e:	4635      	mov	r5, r6
		notify = true;
    1610:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1614:	4648      	mov	r0, r9
    1616:	f005 fc6d 	bl	6ef4 <z_spin_unlock_valid>
    161a:	b968      	cbnz	r0, 1638 <onoff_request+0x90>
    161c:	4a26      	ldr	r2, [pc, #152]	; (16b8 <onoff_request+0x110>)
    161e:	492a      	ldr	r1, [pc, #168]	; (16c8 <onoff_request+0x120>)
    1620:	4827      	ldr	r0, [pc, #156]	; (16c0 <onoff_request+0x118>)
    1622:	23ac      	movs	r3, #172	; 0xac
    1624:	f006 fde3 	bl	81ee <printk>
    1628:	4828      	ldr	r0, [pc, #160]	; (16cc <onoff_request+0x124>)
    162a:	4649      	mov	r1, r9
    162c:	f006 fddf 	bl	81ee <printk>
    1630:	4821      	ldr	r0, [pc, #132]	; (16b8 <onoff_request+0x110>)
    1632:	21ac      	movs	r1, #172	; 0xac
    1634:	f006 fd04 	bl	8040 <assert_post_action>
	__asm__ volatile(
    1638:	f38a 8811 	msr	BASEPRI, sl
    163c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1640:	f1b8 0f00 	cmp.w	r8, #0
    1644:	d017      	beq.n	1676 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1646:	2300      	movs	r3, #0
    1648:	4632      	mov	r2, r6
    164a:	4639      	mov	r1, r7
    164c:	4620      	mov	r0, r4
    164e:	f006 fd94 	bl	817a <notify_one>
    1652:	e010      	b.n	1676 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1654:	0793      	lsls	r3, r2, #30
    1656:	d001      	beq.n	165c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1658:	2e06      	cmp	r6, #6
    165a:	d10f      	bne.n	167c <onoff_request+0xd4>
	parent->next = child;
    165c:	2300      	movs	r3, #0
    165e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1660:	6863      	ldr	r3, [r4, #4]
    1662:	b9f3      	cbnz	r3, 16a2 <onoff_request+0xfa>
	list->head = node;
    1664:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1668:	4635      	mov	r5, r6
    166a:	b9fe      	cbnz	r6, 16ac <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    166c:	4652      	mov	r2, sl
    166e:	2102      	movs	r1, #2
    1670:	4620      	mov	r0, r4
    1672:	f7ff fd6d 	bl	1150 <process_event>
		}
	}

	return rv;
}
    1676:	4628      	mov	r0, r5
    1678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    167c:	2e05      	cmp	r6, #5
    167e:	d018      	beq.n	16b2 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1680:	2e01      	cmp	r6, #1
    1682:	d00b      	beq.n	169c <onoff_request+0xf4>
    1684:	4912      	ldr	r1, [pc, #72]	; (16d0 <onoff_request+0x128>)
    1686:	480e      	ldr	r0, [pc, #56]	; (16c0 <onoff_request+0x118>)
    1688:	4a12      	ldr	r2, [pc, #72]	; (16d4 <onoff_request+0x12c>)
    168a:	f240 13c9 	movw	r3, #457	; 0x1c9
    168e:	f006 fdae 	bl	81ee <printk>
    1692:	4810      	ldr	r0, [pc, #64]	; (16d4 <onoff_request+0x12c>)
    1694:	f240 11c9 	movw	r1, #457	; 0x1c9
    1698:	f006 fcd2 	bl	8040 <assert_post_action>
		rv = -EIO;
    169c:	f06f 0504 	mvn.w	r5, #4
    16a0:	e004      	b.n	16ac <onoff_request+0x104>
	parent->next = child;
    16a2:	601f      	str	r7, [r3, #0]
	list->tail = node;
    16a4:	6067      	str	r7, [r4, #4]
}
    16a6:	e7df      	b.n	1668 <onoff_request+0xc0>
		rv = -EAGAIN;
    16a8:	f06f 050a 	mvn.w	r5, #10
    16ac:	f04f 0800 	mov.w	r8, #0
    16b0:	e7b0      	b.n	1614 <onoff_request+0x6c>
		rv = -ENOTSUP;
    16b2:	f06f 0585 	mvn.w	r5, #133	; 0x85
    16b6:	e7f9      	b.n	16ac <onoff_request+0x104>
    16b8:	0000922a 	.word	0x0000922a
    16bc:	0000927c 	.word	0x0000927c
    16c0:	00009117 	.word	0x00009117
    16c4:	00009291 	.word	0x00009291
    16c8:	00009250 	.word	0x00009250
    16cc:	00009267 	.word	0x00009267
    16d0:	00009214 	.word	0x00009214
    16d4:	00009187 	.word	0x00009187

000016d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    16d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16dc:	4605      	mov	r5, r0
	__asm__ volatile(
    16de:	f04f 0320 	mov.w	r3, #32
    16e2:	f3ef 8611 	mrs	r6, BASEPRI
    16e6:	f383 8812 	msr	BASEPRI_MAX, r3
    16ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16ee:	4823      	ldr	r0, [pc, #140]	; (177c <pm_state_notify+0xa4>)
    16f0:	f005 fbf2 	bl	6ed8 <z_spin_lock_valid>
    16f4:	b968      	cbnz	r0, 1712 <pm_state_notify+0x3a>
    16f6:	4a22      	ldr	r2, [pc, #136]	; (1780 <pm_state_notify+0xa8>)
    16f8:	4922      	ldr	r1, [pc, #136]	; (1784 <pm_state_notify+0xac>)
    16fa:	4823      	ldr	r0, [pc, #140]	; (1788 <pm_state_notify+0xb0>)
    16fc:	2381      	movs	r3, #129	; 0x81
    16fe:	f006 fd76 	bl	81ee <printk>
    1702:	491e      	ldr	r1, [pc, #120]	; (177c <pm_state_notify+0xa4>)
    1704:	4821      	ldr	r0, [pc, #132]	; (178c <pm_state_notify+0xb4>)
    1706:	f006 fd72 	bl	81ee <printk>
    170a:	481d      	ldr	r0, [pc, #116]	; (1780 <pm_state_notify+0xa8>)
    170c:	2181      	movs	r1, #129	; 0x81
    170e:	f006 fc97 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    1712:	481a      	ldr	r0, [pc, #104]	; (177c <pm_state_notify+0xa4>)
    1714:	f005 fbfe 	bl	6f14 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1718:	4b1d      	ldr	r3, [pc, #116]	; (1790 <pm_state_notify+0xb8>)
    171a:	681c      	ldr	r4, [r3, #0]
    171c:	2c00      	cmp	r4, #0
    171e:	bf38      	it	cc
    1720:	2400      	movcc	r4, #0
    1722:	b19c      	cbz	r4, 174c <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1724:	4f1b      	ldr	r7, [pc, #108]	; (1794 <pm_state_notify+0xbc>)
    1726:	f8df 8078 	ldr.w	r8, [pc, #120]	; 17a0 <pm_state_notify+0xc8>
    172a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    172e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1732:	2d00      	cmp	r5, #0
    1734:	bf08      	it	eq
    1736:	4613      	moveq	r3, r2
		if (callback) {
    1738:	b12b      	cbz	r3, 1746 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    173a:	f898 2014 	ldrb.w	r2, [r8, #20]
    173e:	fb09 f202 	mul.w	r2, r9, r2
    1742:	5cb8      	ldrb	r0, [r7, r2]
    1744:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1746:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1748:	2c00      	cmp	r4, #0
    174a:	d1f0      	bne.n	172e <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    174c:	480b      	ldr	r0, [pc, #44]	; (177c <pm_state_notify+0xa4>)
    174e:	f005 fbd1 	bl	6ef4 <z_spin_unlock_valid>
    1752:	b968      	cbnz	r0, 1770 <pm_state_notify+0x98>
    1754:	4a0a      	ldr	r2, [pc, #40]	; (1780 <pm_state_notify+0xa8>)
    1756:	4910      	ldr	r1, [pc, #64]	; (1798 <pm_state_notify+0xc0>)
    1758:	480b      	ldr	r0, [pc, #44]	; (1788 <pm_state_notify+0xb0>)
    175a:	23ac      	movs	r3, #172	; 0xac
    175c:	f006 fd47 	bl	81ee <printk>
    1760:	4906      	ldr	r1, [pc, #24]	; (177c <pm_state_notify+0xa4>)
    1762:	480e      	ldr	r0, [pc, #56]	; (179c <pm_state_notify+0xc4>)
    1764:	f006 fd43 	bl	81ee <printk>
    1768:	4805      	ldr	r0, [pc, #20]	; (1780 <pm_state_notify+0xa8>)
    176a:	21ac      	movs	r1, #172	; 0xac
    176c:	f006 fc68 	bl	8040 <assert_post_action>
	__asm__ volatile(
    1770:	f386 8811 	msr	BASEPRI, r6
    1774:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    177c:	20000b04 	.word	0x20000b04
    1780:	0000922a 	.word	0x0000922a
    1784:	0000927c 	.word	0x0000927c
    1788:	00009117 	.word	0x00009117
    178c:	00009291 	.word	0x00009291
    1790:	20000b08 	.word	0x20000b08
    1794:	20000b14 	.word	0x20000b14
    1798:	00009250 	.word	0x00009250
    179c:	00009267 	.word	0x00009267
    17a0:	20000bec 	.word	0x20000bec

000017a4 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    17a4:	f000 031f 	and.w	r3, r0, #31
    17a8:	2201      	movs	r2, #1
    17aa:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    17ac:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <atomic_test_and_set_bit.constprop.0+0x34>)
    17ae:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    17b2:	0940      	lsrs	r0, r0, #5
    17b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    17b8:	e850 3f00 	ldrex	r3, [r0]
    17bc:	ea43 0102 	orr.w	r1, r3, r2
    17c0:	e840 1c00 	strex	ip, r1, [r0]
    17c4:	f1bc 0f00 	cmp.w	ip, #0
    17c8:	d1f6      	bne.n	17b8 <atomic_test_and_set_bit.constprop.0+0x14>
    17ca:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    17ce:	421a      	tst	r2, r3
}
    17d0:	bf14      	ite	ne
    17d2:	2001      	movne	r0, #1
    17d4:	2000      	moveq	r0, #0
    17d6:	4770      	bx	lr
    17d8:	20000b20 	.word	0x20000b20

000017dc <pm_system_resume>:

void pm_system_resume(void)
{
    17dc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    17de:	4b1d      	ldr	r3, [pc, #116]	; (1854 <pm_system_resume+0x78>)
    17e0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    17e2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    17e6:	f005 031f 	and.w	r3, r5, #31
    17ea:	2201      	movs	r2, #1
    17ec:	409a      	lsls	r2, r3
    17ee:	4b1a      	ldr	r3, [pc, #104]	; (1858 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    17f0:	0969      	lsrs	r1, r5, #5
{
    17f2:	b085      	sub	sp, #20
    17f4:	43d0      	mvns	r0, r2
    17f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    17fa:	e853 1f00 	ldrex	r1, [r3]
    17fe:	ea01 0400 	and.w	r4, r1, r0
    1802:	e843 4c00 	strex	ip, r4, [r3]
    1806:	f1bc 0f00 	cmp.w	ip, #0
    180a:	d1f6      	bne.n	17fa <pm_system_resume+0x1e>
    180c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1810:	4211      	tst	r1, r2
    1812:	d017      	beq.n	1844 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1814:	4c11      	ldr	r4, [pc, #68]	; (185c <pm_system_resume+0x80>)
    1816:	220c      	movs	r2, #12
    1818:	fb02 4205 	mla	r2, r2, r5, r4
    181c:	ca07      	ldmia	r2, {r0, r1, r2}
    181e:	ab01      	add	r3, sp, #4
    1820:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1824:	4a0e      	ldr	r2, [pc, #56]	; (1860 <pm_system_resume+0x84>)
    1826:	b17a      	cbz	r2, 1848 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    182c:	f006 fd54 	bl	82d8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1830:	2000      	movs	r0, #0
    1832:	f7ff ff51 	bl	16d8 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1836:	230c      	movs	r3, #12
    1838:	436b      	muls	r3, r5
    183a:	2200      	movs	r2, #0
    183c:	18e1      	adds	r1, r4, r3
    183e:	50e2      	str	r2, [r4, r3]
    1840:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1844:	b005      	add	sp, #20
    1846:	bd30      	pop	{r4, r5, pc}
    1848:	f382 8811 	msr	BASEPRI, r2
    184c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1850:	e7ee      	b.n	1830 <pm_system_resume+0x54>
    1852:	bf00      	nop
    1854:	20000bec 	.word	0x20000bec
    1858:	20000b10 	.word	0x20000b10
    185c:	20000b14 	.word	0x20000b14
    1860:	000082d9 	.word	0x000082d9

00001864 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1868:	4b37      	ldr	r3, [pc, #220]	; (1948 <pm_system_suspend+0xe4>)
    186a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1960 <pm_system_suspend+0xfc>
    186e:	7d1c      	ldrb	r4, [r3, #20]
{
    1870:	b088      	sub	sp, #32
    1872:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1874:	4620      	mov	r0, r4
    1876:	f7ff ff95 	bl	17a4 <atomic_test_and_set_bit.constprop.0>
    187a:	b960      	cbnz	r0, 1896 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    187c:	466e      	mov	r6, sp
    187e:	463a      	mov	r2, r7
    1880:	4621      	mov	r1, r4
    1882:	4630      	mov	r0, r6
    1884:	f006 fcc0 	bl	8208 <pm_policy_next_state>
    1888:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    188c:	250c      	movs	r5, #12
    188e:	fb05 8504 	mla	r5, r5, r4, r8
    1892:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    1896:	230c      	movs	r3, #12
    1898:	4363      	muls	r3, r4
    189a:	eb08 0203 	add.w	r2, r8, r3
    189e:	f818 0003 	ldrb.w	r0, [r8, r3]
    18a2:	0965      	lsrs	r5, r4, #5
    18a4:	f004 061f 	and.w	r6, r4, #31
    18a8:	b3c8      	cbz	r0, 191e <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    18aa:	1c7b      	adds	r3, r7, #1
    18ac:	d00f      	beq.n	18ce <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    18ae:	f8d2 e008 	ldr.w	lr, [r2, #8]
    18b2:	4826      	ldr	r0, [pc, #152]	; (194c <pm_system_suspend+0xe8>)
    18b4:	4a26      	ldr	r2, [pc, #152]	; (1950 <pm_system_suspend+0xec>)
    18b6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    18ba:	2100      	movs	r1, #0
    18bc:	2300      	movs	r3, #0
    18be:	fbec 010e 	umlal	r0, r1, ip, lr
    18c2:	f7fe fc1d 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    18c6:	2101      	movs	r1, #1
    18c8:	1a38      	subs	r0, r7, r0
    18ca:	f005 fce5 	bl	7298 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    18ce:	f003 ffb3 	bl	5838 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    18d2:	2001      	movs	r0, #1
    18d4:	f7ff ff00 	bl	16d8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    18d8:	f3bf 8f5b 	dmb	ish
    18dc:	4b1d      	ldr	r3, [pc, #116]	; (1954 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    18de:	2201      	movs	r2, #1
    18e0:	40b2      	lsls	r2, r6
    18e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    18e6:	e853 1f00 	ldrex	r1, [r3]
    18ea:	4311      	orrs	r1, r2
    18ec:	e843 1000 	strex	r0, r1, [r3]
    18f0:	2800      	cmp	r0, #0
    18f2:	d1f8      	bne.n	18e6 <pm_system_suspend+0x82>
    18f4:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    18f8:	230c      	movs	r3, #12
    18fa:	fb03 8404 	mla	r4, r3, r4, r8
    18fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1902:	ab05      	add	r3, sp, #20
    1904:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1908:	4a13      	ldr	r2, [pc, #76]	; (1958 <pm_system_suspend+0xf4>)
    190a:	b11a      	cbz	r2, 1914 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    190c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1910:	f006 fccf 	bl	82b2 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1914:	f7ff ff62 	bl	17dc <pm_system_resume>
	k_sched_unlock();
    1918:	f004 fcd2 	bl	62c0 <k_sched_unlock>
	bool ret = true;
    191c:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    191e:	4a0f      	ldr	r2, [pc, #60]	; (195c <pm_system_suspend+0xf8>)
    1920:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1924:	2301      	movs	r3, #1
    1926:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1928:	43db      	mvns	r3, r3
    192a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    192e:	e855 2f00 	ldrex	r2, [r5]
    1932:	401a      	ands	r2, r3
    1934:	e845 2100 	strex	r1, r2, [r5]
    1938:	2900      	cmp	r1, #0
    193a:	d1f8      	bne.n	192e <pm_system_suspend+0xca>
    193c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1940:	b008      	add	sp, #32
    1942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1946:	bf00      	nop
    1948:	20000bec 	.word	0x20000bec
    194c:	000f423f 	.word	0x000f423f
    1950:	000f4240 	.word	0x000f4240
    1954:	20000b10 	.word	0x20000b10
    1958:	000082b3 	.word	0x000082b3
    195c:	20000b20 	.word	0x20000b20
    1960:	20000b14 	.word	0x20000b14

00001964 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1964:	680b      	ldr	r3, [r1, #0]
    1966:	3301      	adds	r3, #1
    1968:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    196a:	4b01      	ldr	r3, [pc, #4]	; (1970 <char_out+0xc>)
    196c:	681b      	ldr	r3, [r3, #0]
    196e:	4718      	bx	r3
    1970:	200000d0 	.word	0x200000d0

00001974 <__printk_hook_install>:
	_char_out = fn;
    1974:	4b01      	ldr	r3, [pc, #4]	; (197c <__printk_hook_install+0x8>)
    1976:	6018      	str	r0, [r3, #0]
}
    1978:	4770      	bx	lr
    197a:	bf00      	nop
    197c:	200000d0 	.word	0x200000d0

00001980 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1980:	b507      	push	{r0, r1, r2, lr}
    1982:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1984:	2100      	movs	r1, #0
{
    1986:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1988:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    198a:	4803      	ldr	r0, [pc, #12]	; (1998 <vprintk+0x18>)
    198c:	a901      	add	r1, sp, #4
    198e:	f7fe ff25 	bl	7dc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1992:	b003      	add	sp, #12
    1994:	f85d fb04 	ldr.w	pc, [sp], #4
    1998:	00001965 	.word	0x00001965

0000199c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    199c:	b508      	push	{r3, lr}
	__asm__ volatile(
    199e:	f04f 0220 	mov.w	r2, #32
    19a2:	f3ef 8311 	mrs	r3, BASEPRI
    19a6:	f382 8812 	msr	BASEPRI_MAX, r2
    19aa:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    19ae:	f000 fcbf 	bl	2330 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    19b2:	4803      	ldr	r0, [pc, #12]	; (19c0 <sys_reboot+0x24>)
    19b4:	f006 fc1b 	bl	81ee <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    19b8:	f000 f80a 	bl	19d0 <arch_cpu_idle>
    19bc:	e7fc      	b.n	19b8 <sys_reboot+0x1c>
    19be:	bf00      	nop
    19c0:	000092a9 	.word	0x000092a9

000019c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    19c4:	4901      	ldr	r1, [pc, #4]	; (19cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    19c6:	2210      	movs	r2, #16
	str	r2, [r1]
    19c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    19ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    19cc:	e000ed10 	.word	0xe000ed10

000019d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    19d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    19d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    19d4:	f380 8811 	msr	BASEPRI, r0
	isb
    19d8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    19dc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    19e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    19e2:	b662      	cpsie	i
	isb
    19e4:	f3bf 8f6f 	isb	sy

	bx	lr
    19e8:	4770      	bx	lr
    19ea:	bf00      	nop

000019ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    19ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    19ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    19f0:	f381 8811 	msr	BASEPRI, r1

	wfe
    19f4:	bf20      	wfe

	msr	BASEPRI, r0
    19f6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    19fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    19fc:	4770      	bx	lr
    19fe:	bf00      	nop

00001a00 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1a00:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1a02:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1a04:	4a0b      	ldr	r2, [pc, #44]	; (1a34 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1a06:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1a08:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1a0a:	bf1e      	ittt	ne
	movne	r1, #0
    1a0c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1a0e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1a10:	f006 ff10 	blne	8834 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1a14:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1a16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1a1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1a1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1a22:	4905      	ldr	r1, [pc, #20]	; (1a38 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1a24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1a26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1a28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1a2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1a2e:	4903      	ldr	r1, [pc, #12]	; (1a3c <_isr_wrapper+0x3c>)
	bx r1
    1a30:	4708      	bx	r1
    1a32:	0000      	.short	0x0000
	ldr r2, =_kernel
    1a34:	20000bec 	.word	0x20000bec
	ldr r1, =_sw_isr_table
    1a38:	00008a9c 	.word	0x00008a9c
	ldr r1, =z_arm_int_exit
    1a3c:	00001c65 	.word	0x00001c65

00001a40 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1a40:	bf30      	wfi
    b z_SysNmiOnReset
    1a42:	f7ff bffd 	b.w	1a40 <z_SysNmiOnReset>
    1a46:	bf00      	nop

00001a48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1a48:	4912      	ldr	r1, [pc, #72]	; (1a94 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1a4a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a4c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a5a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a5c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a60:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a64:	4f0c      	ldr	r7, [pc, #48]	; (1a98 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1a6a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1a6c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1a6e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1a70:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    1a72:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1a74:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1a76:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1a7a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1a7c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1a7e:	f000 fae7 	bl	2050 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1a82:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1a86:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1a8a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1a8e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1a92:	4770      	bx	lr
    ldr r1, =_kernel
    1a94:	20000bec 	.word	0x20000bec
    ldr v4, =_SCS_ICSR
    1a98:	e000ed04 	.word	0xe000ed04

00001a9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1a9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1aa0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1aa2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1aa6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1aaa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1aac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1ab0:	2902      	cmp	r1, #2
    beq _oops
    1ab2:	d0ff      	beq.n	1ab4 <_oops>

00001ab4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1ab4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1ab6:	f006 fbb8 	bl	822a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1aba:	bd01      	pop	{r0, pc}

00001abc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1abc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1abe:	2b00      	cmp	r3, #0
    1ac0:	db08      	blt.n	1ad4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ac2:	2201      	movs	r2, #1
    1ac4:	f000 001f 	and.w	r0, r0, #31
    1ac8:	fa02 f000 	lsl.w	r0, r2, r0
    1acc:	095b      	lsrs	r3, r3, #5
    1ace:	4a02      	ldr	r2, [pc, #8]	; (1ad8 <arch_irq_enable+0x1c>)
    1ad0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	e000e100 	.word	0xe000e100

00001adc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1adc:	4b05      	ldr	r3, [pc, #20]	; (1af4 <arch_irq_is_enabled+0x18>)
    1ade:	0942      	lsrs	r2, r0, #5
    1ae0:	f000 001f 	and.w	r0, r0, #31
    1ae4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1ae8:	2301      	movs	r3, #1
    1aea:	fa03 f000 	lsl.w	r0, r3, r0
}
    1aee:	4010      	ands	r0, r2
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	e000e100 	.word	0xe000e100

00001af8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1af8:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1afa:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1afc:	2c07      	cmp	r4, #7
{
    1afe:	4605      	mov	r5, r0
    1b00:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1b02:	d90f      	bls.n	1b24 <z_arm_irq_priority_set+0x2c>
    1b04:	4a11      	ldr	r2, [pc, #68]	; (1b4c <z_arm_irq_priority_set+0x54>)
    1b06:	4912      	ldr	r1, [pc, #72]	; (1b50 <z_arm_irq_priority_set+0x58>)
    1b08:	4812      	ldr	r0, [pc, #72]	; (1b54 <z_arm_irq_priority_set+0x5c>)
    1b0a:	2359      	movs	r3, #89	; 0x59
    1b0c:	f006 fb6f 	bl	81ee <printk>
    1b10:	4811      	ldr	r0, [pc, #68]	; (1b58 <z_arm_irq_priority_set+0x60>)
    1b12:	4631      	mov	r1, r6
    1b14:	2307      	movs	r3, #7
    1b16:	462a      	mov	r2, r5
    1b18:	f006 fb69 	bl	81ee <printk>
    1b1c:	480b      	ldr	r0, [pc, #44]	; (1b4c <z_arm_irq_priority_set+0x54>)
    1b1e:	2159      	movs	r1, #89	; 0x59
    1b20:	f006 fa8e 	bl	8040 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b24:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b26:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b28:	bfac      	ite	ge
    1b2a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b2e:	4b0b      	ldrlt	r3, [pc, #44]	; (1b5c <z_arm_irq_priority_set+0x64>)
    1b30:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1b34:	bfb8      	it	lt
    1b36:	f005 050f 	andlt.w	r5, r5, #15
    1b3a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b3c:	bfaa      	itet	ge
    1b3e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b42:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b44:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1b48:	bd70      	pop	{r4, r5, r6, pc}
    1b4a:	bf00      	nop
    1b4c:	000092d2 	.word	0x000092d2
    1b50:	00009308 	.word	0x00009308
    1b54:	00009117 	.word	0x00009117
    1b58:	00009323 	.word	0x00009323
    1b5c:	e000ed14 	.word	0xe000ed14

00001b60 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b60:	4a0b      	ldr	r2, [pc, #44]	; (1b90 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1b62:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1b64:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <z_arm_prep_c+0x34>)
    1b66:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1b6a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1b6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b70:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1b74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1b78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1b80:	f003 f930 	bl	4de4 <z_bss_zero>
	z_data_copy();
    1b84:	f006 f856 	bl	7c34 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1b88:	f000 f9f6 	bl	1f78 <z_arm_interrupt_init>
	z_cstart();
    1b8c:	f003 f934 	bl	4df8 <z_cstart>
    1b90:	00000000 	.word	0x00000000
    1b94:	e000ed00 	.word	0xe000ed00

00001b98 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1b98:	4a09      	ldr	r2, [pc, #36]	; (1bc0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1b9a:	490a      	ldr	r1, [pc, #40]	; (1bc4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1b9c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1b9e:	6809      	ldr	r1, [r1, #0]
    1ba0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ba2:	4909      	ldr	r1, [pc, #36]	; (1bc8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1ba4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ba6:	684b      	ldr	r3, [r1, #4]
    1ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1bac:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1bae:	2300      	movs	r3, #0
    1bb0:	f383 8811 	msr	BASEPRI, r3
    1bb4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1bb8:	6893      	ldr	r3, [r2, #8]
}
    1bba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1bbc:	4770      	bx	lr
    1bbe:	bf00      	nop
    1bc0:	20000bec 	.word	0x20000bec
    1bc4:	00008dd0 	.word	0x00008dd0
    1bc8:	e000ed00 	.word	0xe000ed00

00001bcc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1bcc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1bd0:	9b00      	ldr	r3, [sp, #0]
    1bd2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1bd6:	490a      	ldr	r1, [pc, #40]	; (1c00 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1bd8:	9b01      	ldr	r3, [sp, #4]
    1bda:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1bde:	9b02      	ldr	r3, [sp, #8]
    1be0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1be4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1bec:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1bf0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1bf4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1bf6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1bf8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1bfa:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	00008213 	.word	0x00008213

00001c04 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1c04:	4a0b      	ldr	r2, [pc, #44]	; (1c34 <z_check_thread_stack_fail+0x30>)
{
    1c06:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1c08:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1c0a:	b190      	cbz	r0, 1c32 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1c0c:	f113 0f16 	cmn.w	r3, #22
    1c10:	6e80      	ldr	r0, [r0, #104]	; 0x68
    1c12:	d005      	beq.n	1c20 <z_check_thread_stack_fail+0x1c>
    1c14:	f1a0 0220 	sub.w	r2, r0, #32
    1c18:	429a      	cmp	r2, r3
    1c1a:	d806      	bhi.n	1c2a <z_check_thread_stack_fail+0x26>
    1c1c:	4283      	cmp	r3, r0
    1c1e:	d204      	bcs.n	1c2a <z_check_thread_stack_fail+0x26>
    1c20:	4281      	cmp	r1, r0
    1c22:	bf2c      	ite	cs
    1c24:	2100      	movcs	r1, #0
    1c26:	2101      	movcc	r1, #1
    1c28:	e000      	b.n	1c2c <z_check_thread_stack_fail+0x28>
    1c2a:	2100      	movs	r1, #0
    1c2c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1c2e:	bf08      	it	eq
    1c30:	2000      	moveq	r0, #0
}
    1c32:	4770      	bx	lr
    1c34:	20000bec 	.word	0x20000bec

00001c38 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1c38:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c3a:	4b09      	ldr	r3, [pc, #36]	; (1c60 <arch_switch_to_main_thread+0x28>)
    1c3c:	6098      	str	r0, [r3, #8]
{
    1c3e:	460d      	mov	r5, r1
    1c40:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1c42:	f000 fa05 	bl	2050 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c46:	4620      	mov	r0, r4
    1c48:	f385 8809 	msr	PSP, r5
    1c4c:	2100      	movs	r1, #0
    1c4e:	b663      	cpsie	if
    1c50:	f381 8811 	msr	BASEPRI, r1
    1c54:	f3bf 8f6f 	isb	sy
    1c58:	2200      	movs	r2, #0
    1c5a:	2300      	movs	r3, #0
    1c5c:	f006 fad9 	bl	8212 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1c60:	20000bec 	.word	0x20000bec

00001c64 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1c64:	4b04      	ldr	r3, [pc, #16]	; (1c78 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1c66:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1c68:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1c6a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1c6c:	d003      	beq.n	1c76 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1c6e:	4903      	ldr	r1, [pc, #12]	; (1c7c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1c74:	600a      	str	r2, [r1, #0]

00001c76 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1c76:	4770      	bx	lr
	ldr r3, =_kernel
    1c78:	20000bec 	.word	0x20000bec
	ldr r1, =_SCS_ICSR
    1c7c:	e000ed04 	.word	0xe000ed04

00001c80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1c80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1c84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1c88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1c8a:	4672      	mov	r2, lr
	bl z_arm_fault
    1c8c:	f000 f8ae 	bl	1dec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1c90:	bd01      	pop	{r0, pc}
    1c92:	bf00      	nop

00001c94 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1c94:	2000      	movs	r0, #0
    msr CONTROL, r0
    1c96:	f380 8814 	msr	CONTROL, r0
    isb
    1c9a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1c9e:	f006 fe6b 	bl	8978 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1ca2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1ca4:	490d      	ldr	r1, [pc, #52]	; (1cdc <__start+0x48>)
    str r0, [r1]
    1ca6:	6008      	str	r0, [r1, #0]
    dsb
    1ca8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1cac:	480c      	ldr	r0, [pc, #48]	; (1ce0 <__start+0x4c>)
    msr msp, r0
    1cae:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1cb2:	f000 f97d 	bl	1fb0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1cb6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1cb8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1cbc:	4809      	ldr	r0, [pc, #36]	; (1ce4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1cbe:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1cc2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1cc4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1cc8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1ccc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1cce:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1cd0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1cd4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1cd8:	f7ff ff42 	bl	1b60 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1cdc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ce0:	20001e80 	.word	0x20001e80
    ldr r0, =z_interrupt_stacks
    1ce4:	20002000 	.word	0x20002000

00001ce8 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ce8:	4b23      	ldr	r3, [pc, #140]	; (1d78 <mem_manage_fault+0x90>)
{
    1cea:	b570      	push	{r4, r5, r6, lr}
    1cec:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1cf4:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cf6:	0790      	lsls	r0, r2, #30
    1cf8:	d51a      	bpl.n	1d30 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1cfa:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cfe:	0612      	lsls	r2, r2, #24
    1d00:	d516      	bpl.n	1d30 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1d02:	b119      	cbz	r1, 1d0c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1d0a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d12:	06d6      	lsls	r6, r2, #27
    1d14:	d40f      	bmi.n	1d36 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d18:	0799      	lsls	r1, r3, #30
    1d1a:	d40c      	bmi.n	1d36 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d1c:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d1e:	4a16      	ldr	r2, [pc, #88]	; (1d78 <mem_manage_fault+0x90>)
    1d20:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d22:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1d26:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1d28:	2300      	movs	r3, #0
    1d2a:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1d2c:	4620      	mov	r0, r4
    1d2e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1d30:	f06f 0015 	mvn.w	r0, #21
    1d34:	e7ea      	b.n	1d0c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1d36:	4e10      	ldr	r6, [pc, #64]	; (1d78 <mem_manage_fault+0x90>)
    1d38:	6873      	ldr	r3, [r6, #4]
    1d3a:	051a      	lsls	r2, r3, #20
    1d3c:	d5ee      	bpl.n	1d1c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1d3e:	4621      	mov	r1, r4
    1d40:	f7ff ff60 	bl	1c04 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1d44:	4604      	mov	r4, r0
    1d46:	b118      	cbz	r0, 1d50 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1d48:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1d4c:	2402      	movs	r4, #2
    1d4e:	e7e6      	b.n	1d1e <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1d50:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1d52:	06db      	lsls	r3, r3, #27
    1d54:	d5e2      	bpl.n	1d1c <mem_manage_fault+0x34>
    1d56:	4a09      	ldr	r2, [pc, #36]	; (1d7c <mem_manage_fault+0x94>)
    1d58:	4909      	ldr	r1, [pc, #36]	; (1d80 <mem_manage_fault+0x98>)
    1d5a:	480a      	ldr	r0, [pc, #40]	; (1d84 <mem_manage_fault+0x9c>)
    1d5c:	f240 1349 	movw	r3, #329	; 0x149
    1d60:	f006 fa45 	bl	81ee <printk>
    1d64:	4808      	ldr	r0, [pc, #32]	; (1d88 <mem_manage_fault+0xa0>)
    1d66:	f006 fa42 	bl	81ee <printk>
    1d6a:	4804      	ldr	r0, [pc, #16]	; (1d7c <mem_manage_fault+0x94>)
    1d6c:	f240 1149 	movw	r1, #329	; 0x149
    1d70:	f006 f966 	bl	8040 <assert_post_action>
    1d74:	e7d3      	b.n	1d1e <mem_manage_fault+0x36>
    1d76:	bf00      	nop
    1d78:	e000ed00 	.word	0xe000ed00
    1d7c:	00009363 	.word	0x00009363
    1d80:	0000939d 	.word	0x0000939d
    1d84:	00009117 	.word	0x00009117
    1d88:	000093e7 	.word	0x000093e7

00001d8c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1d8c:	4b0d      	ldr	r3, [pc, #52]	; (1dc4 <bus_fault.isra.0+0x38>)
    1d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d94:	0592      	lsls	r2, r2, #22
    1d96:	d508      	bpl.n	1daa <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d9c:	0412      	lsls	r2, r2, #16
    1d9e:	d504      	bpl.n	1daa <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1da0:	b118      	cbz	r0, 1daa <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1da8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1daa:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <bus_fault.isra.0+0x38>)
    1dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1db0:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1db2:	bf58      	it	pl
    1db4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1db6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1db8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1dba:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1dbe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1dc0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1dc2:	4770      	bx	lr
    1dc4:	e000ed00 	.word	0xe000ed00

00001dc8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1dc8:	4b07      	ldr	r3, [pc, #28]	; (1de8 <usage_fault.isra.0+0x20>)
    1dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dd8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1ddc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1de0:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1de2:	2000      	movs	r0, #0
    1de4:	4770      	bx	lr
    1de6:	bf00      	nop
    1de8:	e000ed00 	.word	0xe000ed00

00001dec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1dec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1dee:	4b54      	ldr	r3, [pc, #336]	; (1f40 <z_arm_fault+0x154>)
    1df0:	685c      	ldr	r4, [r3, #4]
{
    1df2:	b08a      	sub	sp, #40	; 0x28
    1df4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1df6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1dfa:	2600      	movs	r6, #0
    1dfc:	f386 8811 	msr	BASEPRI, r6
    1e00:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e04:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1e08:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1e0c:	d108      	bne.n	1e20 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1e0e:	f002 030c 	and.w	r3, r2, #12
    1e12:	2b08      	cmp	r3, #8
    1e14:	d004      	beq.n	1e20 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1e16:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1e18:	bf5c      	itt	pl
    1e1a:	4605      	movpl	r5, r0
			*nested_exc = true;
    1e1c:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1e1e:	b97d      	cbnz	r5, 1e40 <z_arm_fault+0x54>
    1e20:	4a48      	ldr	r2, [pc, #288]	; (1f44 <z_arm_fault+0x158>)
    1e22:	4949      	ldr	r1, [pc, #292]	; (1f48 <z_arm_fault+0x15c>)
    1e24:	4849      	ldr	r0, [pc, #292]	; (1f4c <z_arm_fault+0x160>)
    1e26:	f240 33f2 	movw	r3, #1010	; 0x3f2
    1e2a:	f006 f9e0 	bl	81ee <printk>
    1e2e:	4848      	ldr	r0, [pc, #288]	; (1f50 <z_arm_fault+0x164>)
    1e30:	f006 f9dd 	bl	81ee <printk>
    1e34:	4843      	ldr	r0, [pc, #268]	; (1f44 <z_arm_fault+0x158>)
    1e36:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1e3a:	f006 f901 	bl	8040 <assert_post_action>
    1e3e:	2500      	movs	r5, #0
	*recoverable = false;
    1e40:	2300      	movs	r3, #0
    1e42:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1e46:	1ee3      	subs	r3, r4, #3
    1e48:	2b03      	cmp	r3, #3
    1e4a:	d872      	bhi.n	1f32 <z_arm_fault+0x146>
    1e4c:	e8df f003 	tbb	[pc, r3]
    1e50:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1e54:	4b3a      	ldr	r3, [pc, #232]	; (1f40 <z_arm_fault+0x154>)
    1e56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1e58:	f014 0402 	ands.w	r4, r4, #2
    1e5c:	d169      	bne.n	1f32 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e60:	2a00      	cmp	r2, #0
    1e62:	db18      	blt.n	1e96 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e66:	005b      	lsls	r3, r3, #1
    1e68:	d54e      	bpl.n	1f08 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    1e6a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1e6c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1e70:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1e74:	429a      	cmp	r2, r3
    1e76:	d00d      	beq.n	1e94 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1e78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1e7c:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1e80:	781b      	ldrb	r3, [r3, #0]
    1e82:	b30b      	cbz	r3, 1ec8 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1e84:	f10d 0207 	add.w	r2, sp, #7
    1e88:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1e8a:	4628      	mov	r0, r5
    1e8c:	f7ff ff2c 	bl	1ce8 <mem_manage_fault>
		reason = usage_fault(esf);
    1e90:	4604      	mov	r4, r0
		break;
    1e92:	e000      	b.n	1e96 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    1e94:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e9a:	b99b      	cbnz	r3, 1ec4 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1e9c:	2220      	movs	r2, #32
    1e9e:	4629      	mov	r1, r5
    1ea0:	a802      	add	r0, sp, #8
    1ea2:	f006 f9f2 	bl	828a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ea8:	2e00      	cmp	r6, #0
    1eaa:	d044      	beq.n	1f36 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1eac:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1eb0:	b922      	cbnz	r2, 1ebc <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1eb2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1eb6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1eba:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ebc:	a902      	add	r1, sp, #8
    1ebe:	4620      	mov	r0, r4
    1ec0:	f006 f9b1 	bl	8226 <z_arm_fatal_error>
}
    1ec4:	b00a      	add	sp, #40	; 0x28
    1ec6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1ec8:	4b22      	ldr	r3, [pc, #136]	; (1f54 <z_arm_fault+0x168>)
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	b12b      	cbz	r3, 1eda <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1ece:	f10d 0107 	add.w	r1, sp, #7
    1ed2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1ed4:	f7ff ff5a 	bl	1d8c <bus_fault.isra.0>
    1ed8:	e7da      	b.n	1e90 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    1eda:	4b1f      	ldr	r3, [pc, #124]	; (1f58 <z_arm_fault+0x16c>)
    1edc:	881b      	ldrh	r3, [r3, #0]
    1ede:	b29b      	uxth	r3, r3
    1ee0:	b113      	cbz	r3, 1ee8 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    1ee2:	f7ff ff71 	bl	1dc8 <usage_fault.isra.0>
    1ee6:	e7d3      	b.n	1e90 <z_arm_fault+0xa4>
			__ASSERT(0,
    1ee8:	491c      	ldr	r1, [pc, #112]	; (1f5c <z_arm_fault+0x170>)
    1eea:	4a16      	ldr	r2, [pc, #88]	; (1f44 <z_arm_fault+0x158>)
    1eec:	4817      	ldr	r0, [pc, #92]	; (1f4c <z_arm_fault+0x160>)
    1eee:	f240 23c3 	movw	r3, #707	; 0x2c3
    1ef2:	f006 f97c 	bl	81ee <printk>
    1ef6:	481a      	ldr	r0, [pc, #104]	; (1f60 <z_arm_fault+0x174>)
    1ef8:	f006 f979 	bl	81ee <printk>
    1efc:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1f00:	4810      	ldr	r0, [pc, #64]	; (1f44 <z_arm_fault+0x158>)
    1f02:	f006 f89d 	bl	8040 <assert_post_action>
    1f06:	e7c6      	b.n	1e96 <z_arm_fault+0xaa>
    1f08:	4914      	ldr	r1, [pc, #80]	; (1f5c <z_arm_fault+0x170>)
    1f0a:	4a0e      	ldr	r2, [pc, #56]	; (1f44 <z_arm_fault+0x158>)
    1f0c:	480f      	ldr	r0, [pc, #60]	; (1f4c <z_arm_fault+0x160>)
    1f0e:	f240 23c7 	movw	r3, #711	; 0x2c7
    1f12:	f006 f96c 	bl	81ee <printk>
    1f16:	4813      	ldr	r0, [pc, #76]	; (1f64 <z_arm_fault+0x178>)
    1f18:	f006 f969 	bl	81ee <printk>
    1f1c:	f240 21c7 	movw	r1, #711	; 0x2c7
    1f20:	e7ee      	b.n	1f00 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    1f22:	f10d 0207 	add.w	r2, sp, #7
    1f26:	2100      	movs	r1, #0
    1f28:	e7af      	b.n	1e8a <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    1f2a:	f10d 0107 	add.w	r1, sp, #7
    1f2e:	2000      	movs	r0, #0
    1f30:	e7d0      	b.n	1ed4 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f32:	2400      	movs	r4, #0
    1f34:	e7af      	b.n	1e96 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1f3a:	f023 0301 	bic.w	r3, r3, #1
    1f3e:	e7bc      	b.n	1eba <z_arm_fault+0xce>
    1f40:	e000ed00 	.word	0xe000ed00
    1f44:	00009363 	.word	0x00009363
    1f48:	0000940a 	.word	0x0000940a
    1f4c:	00009117 	.word	0x00009117
    1f50:	0000941d 	.word	0x0000941d
    1f54:	e000ed29 	.word	0xe000ed29
    1f58:	e000ed2a 	.word	0xe000ed2a
    1f5c:	000098f6 	.word	0x000098f6
    1f60:	0000945b 	.word	0x0000945b
    1f64:	0000947f 	.word	0x0000947f

00001f68 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1f68:	4a02      	ldr	r2, [pc, #8]	; (1f74 <z_arm_fault_init+0xc>)
    1f6a:	6953      	ldr	r3, [r2, #20]
    1f6c:	f043 0310 	orr.w	r3, r3, #16
    1f70:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1f72:	4770      	bx	lr
    1f74:	e000ed00 	.word	0xe000ed00

00001f78 <z_arm_interrupt_init>:
    1f78:	4804      	ldr	r0, [pc, #16]	; (1f8c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1f7a:	2300      	movs	r3, #0
    1f7c:	2120      	movs	r1, #32
    1f7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1f80:	3301      	adds	r3, #1
    1f82:	2b30      	cmp	r3, #48	; 0x30
    1f84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1f88:	d1f9      	bne.n	1f7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1f8a:	4770      	bx	lr
    1f8c:	e000e100 	.word	0xe000e100

00001f90 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1f90:	4a06      	ldr	r2, [pc, #24]	; (1fac <z_arm_clear_arm_mpu_config+0x1c>)
    1f92:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1f94:	2300      	movs	r3, #0
	int num_regions =
    1f96:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1f9a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1f9c:	428b      	cmp	r3, r1
    1f9e:	d100      	bne.n	1fa2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1fa0:	4770      	bx	lr
  MPU->RNR = rnr;
    1fa2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1fa4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1fa6:	3301      	adds	r3, #1
    1fa8:	e7f8      	b.n	1f9c <z_arm_clear_arm_mpu_config+0xc>
    1faa:	bf00      	nop
    1fac:	e000ed90 	.word	0xe000ed90

00001fb0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1fb0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1fb2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1fb4:	2300      	movs	r3, #0
    1fb6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1fba:	f7ff ffe9 	bl	1f90 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1fbe:	4b14      	ldr	r3, [pc, #80]	; (2010 <z_arm_init_arch_hw_at_boot+0x60>)
    1fc0:	f04f 32ff 	mov.w	r2, #4294967295
    1fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1fd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1fd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1fdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1fe0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1fe4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1fe8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1fec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1ff0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1ff4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1ff8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ffc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2000:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2004:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2006:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    200a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    200e:	bd08      	pop	{r3, pc}
    2010:	e000e100 	.word	0xe000e100

00002014 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2014:	4b06      	ldr	r3, [pc, #24]	; (2030 <z_impl_k_thread_abort+0x1c>)
    2016:	689b      	ldr	r3, [r3, #8]
    2018:	4283      	cmp	r3, r0
    201a:	d107      	bne.n	202c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    201c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2020:	b123      	cbz	r3, 202c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2022:	4a04      	ldr	r2, [pc, #16]	; (2034 <z_impl_k_thread_abort+0x20>)
    2024:	6853      	ldr	r3, [r2, #4]
    2026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    202a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    202c:	f004 bc0c 	b.w	6848 <z_thread_abort>
    2030:	20000bec 	.word	0x20000bec
    2034:	e000ed00 	.word	0xe000ed00

00002038 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2038:	4b02      	ldr	r3, [pc, #8]	; (2044 <z_arm_configure_static_mpu_regions+0xc>)
    203a:	4a03      	ldr	r2, [pc, #12]	; (2048 <z_arm_configure_static_mpu_regions+0x10>)
    203c:	4803      	ldr	r0, [pc, #12]	; (204c <z_arm_configure_static_mpu_regions+0x14>)
    203e:	2101      	movs	r1, #1
    2040:	f000 b868 	b.w	2114 <arm_core_mpu_configure_static_mpu_regions>
    2044:	20040000 	.word	0x20040000
    2048:	20000000 	.word	0x20000000
    204c:	00008c84 	.word	0x00008c84

00002050 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2050:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2052:	4b05      	ldr	r3, [pc, #20]	; (2068 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2054:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2056:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2058:	4a04      	ldr	r2, [pc, #16]	; (206c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    205a:	2120      	movs	r1, #32
    205c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2060:	4618      	mov	r0, r3
    2062:	2101      	movs	r1, #1
    2064:	f000 b87e 	b.w	2164 <arm_core_mpu_configure_dynamic_mpu_regions>
    2068:	20000b24 	.word	0x20000b24
    206c:	150b0000 	.word	0x150b0000

00002070 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2070:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2072:	4f1e      	ldr	r7, [pc, #120]	; (20ec <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2074:	2600      	movs	r6, #0
    2076:	428e      	cmp	r6, r1
    2078:	db01      	blt.n	207e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    207a:	4610      	mov	r0, r2
    207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    207e:	6844      	ldr	r4, [r0, #4]
    2080:	b384      	cbz	r4, 20e4 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2082:	b153      	cbz	r3, 209a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2084:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2088:	ea14 0f0c 	tst.w	r4, ip
    208c:	d118      	bne.n	20c0 <mpu_configure_regions+0x50>
		&&
    208e:	2c1f      	cmp	r4, #31
    2090:	d916      	bls.n	20c0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2092:	6805      	ldr	r5, [r0, #0]
		&&
    2094:	ea1c 0f05 	tst.w	ip, r5
    2098:	d112      	bne.n	20c0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    209a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    209c:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    209e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    20a2:	b2d2      	uxtb	r2, r2
    20a4:	d90f      	bls.n	20c6 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    20a6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    20aa:	d80e      	bhi.n	20ca <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    20ac:	3c01      	subs	r4, #1
    20ae:	fab4 f484 	clz	r4, r4
    20b2:	f1c4 041f 	rsb	r4, r4, #31
    20b6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    20b8:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    20ba:	ea4c 0404 	orr.w	r4, ip, r4
    20be:	d906      	bls.n	20ce <mpu_configure_regions+0x5e>
			return -EINVAL;
    20c0:	f06f 0215 	mvn.w	r2, #21
    20c4:	e7d9      	b.n	207a <mpu_configure_regions+0xa>
		return REGION_32B;
    20c6:	2408      	movs	r4, #8
    20c8:	e7f6      	b.n	20b8 <mpu_configure_regions+0x48>
		return REGION_4G;
    20ca:	243e      	movs	r4, #62	; 0x3e
    20cc:	e7f4      	b.n	20b8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20ce:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    20d2:	4315      	orrs	r5, r2
    20d4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20d8:	f044 0401 	orr.w	r4, r4, #1
    20dc:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20de:	60fd      	str	r5, [r7, #12]
		reg_index++;
    20e0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20e2:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    20e4:	3601      	adds	r6, #1
    20e6:	300c      	adds	r0, #12
    20e8:	e7c5      	b.n	2076 <mpu_configure_regions+0x6>
    20ea:	bf00      	nop
    20ec:	e000ed90 	.word	0xe000ed90

000020f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    20f0:	4b03      	ldr	r3, [pc, #12]	; (2100 <arm_core_mpu_enable+0x10>)
    20f2:	2205      	movs	r2, #5
    20f4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    20f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20fa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    20fe:	4770      	bx	lr
    2100:	e000ed90 	.word	0xe000ed90

00002104 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2104:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2108:	4b01      	ldr	r3, [pc, #4]	; (2110 <arm_core_mpu_disable+0xc>)
    210a:	2200      	movs	r2, #0
    210c:	605a      	str	r2, [r3, #4]
}
    210e:	4770      	bx	lr
    2110:	e000ed90 	.word	0xe000ed90

00002114 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2114:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2116:	4d0e      	ldr	r5, [pc, #56]	; (2150 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2118:	2301      	movs	r3, #1
    211a:	782a      	ldrb	r2, [r5, #0]
    211c:	460c      	mov	r4, r1
    211e:	f7ff ffa7 	bl	2070 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2122:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2124:	3016      	adds	r0, #22
    2126:	d111      	bne.n	214c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2128:	f240 1311 	movw	r3, #273	; 0x111
    212c:	4a09      	ldr	r2, [pc, #36]	; (2154 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    212e:	490a      	ldr	r1, [pc, #40]	; (2158 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2130:	480a      	ldr	r0, [pc, #40]	; (215c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2132:	f006 f85c 	bl	81ee <printk>
    2136:	4621      	mov	r1, r4
    2138:	4809      	ldr	r0, [pc, #36]	; (2160 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    213a:	f006 f858 	bl	81ee <printk>
			regions_num);
	}
}
    213e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2142:	4804      	ldr	r0, [pc, #16]	; (2154 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2144:	f240 1111 	movw	r1, #273	; 0x111
    2148:	f005 bf7a 	b.w	8040 <assert_post_action>
}
    214c:	bd38      	pop	{r3, r4, r5, pc}
    214e:	bf00      	nop
    2150:	20000c62 	.word	0x20000c62
    2154:	000094af 	.word	0x000094af
    2158:	000098f6 	.word	0x000098f6
    215c:	00009117 	.word	0x00009117
    2160:	000094e6 	.word	0x000094e6

00002164 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2164:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2166:	4a12      	ldr	r2, [pc, #72]	; (21b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2168:	2300      	movs	r3, #0
    216a:	7812      	ldrb	r2, [r2, #0]
    216c:	460c      	mov	r4, r1
    216e:	f7ff ff7f 	bl	2070 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2172:	f110 0f16 	cmn.w	r0, #22
    2176:	d008      	beq.n	218a <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2178:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    217a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    217c:	2807      	cmp	r0, #7
    217e:	dd00      	ble.n	2182 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2180:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2182:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2184:	611a      	str	r2, [r3, #16]
    2186:	3001      	adds	r0, #1
    2188:	e7f8      	b.n	217c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    218a:	4a0b      	ldr	r2, [pc, #44]	; (21b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    218c:	490b      	ldr	r1, [pc, #44]	; (21bc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    218e:	480c      	ldr	r0, [pc, #48]	; (21c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2190:	f44f 7398 	mov.w	r3, #304	; 0x130
    2194:	f006 f82b 	bl	81ee <printk>
    2198:	4621      	mov	r1, r4
    219a:	480a      	ldr	r0, [pc, #40]	; (21c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    219c:	f006 f827 	bl	81ee <printk>
}
    21a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    21a4:	4804      	ldr	r0, [pc, #16]	; (21b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    21a6:	f44f 7198 	mov.w	r1, #304	; 0x130
    21aa:	f005 bf49 	b.w	8040 <assert_post_action>
    21ae:	bf00      	nop
    21b0:	20000c62 	.word	0x20000c62
    21b4:	e000ed90 	.word	0xe000ed90
    21b8:	000094af 	.word	0x000094af
    21bc:	000098f6 	.word	0x000098f6
    21c0:	00009117 	.word	0x00009117
    21c4:	00009512 	.word	0x00009512

000021c8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    21c8:	4925      	ldr	r1, [pc, #148]	; (2260 <z_arm_mpu_init+0x98>)
{
    21ca:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    21cc:	680c      	ldr	r4, [r1, #0]
    21ce:	2c08      	cmp	r4, #8
    21d0:	d913      	bls.n	21fa <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    21d2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    21d6:	4a23      	ldr	r2, [pc, #140]	; (2264 <z_arm_mpu_init+0x9c>)
    21d8:	4923      	ldr	r1, [pc, #140]	; (2268 <z_arm_mpu_init+0xa0>)
    21da:	4824      	ldr	r0, [pc, #144]	; (226c <z_arm_mpu_init+0xa4>)
    21dc:	f006 f807 	bl	81ee <printk>
    21e0:	4823      	ldr	r0, [pc, #140]	; (2270 <z_arm_mpu_init+0xa8>)
    21e2:	2208      	movs	r2, #8
    21e4:	4621      	mov	r1, r4
    21e6:	f006 f802 	bl	81ee <printk>
    21ea:	481e      	ldr	r0, [pc, #120]	; (2264 <z_arm_mpu_init+0x9c>)
    21ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
    21f0:	f005 ff26 	bl	8040 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    21f4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    21f8:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    21fa:	f7ff ff83 	bl	2104 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    21fe:	6848      	ldr	r0, [r1, #4]
    2200:	491c      	ldr	r1, [pc, #112]	; (2274 <z_arm_mpu_init+0xac>)
    2202:	2200      	movs	r2, #0
    2204:	4294      	cmp	r4, r2
    2206:	f100 000c 	add.w	r0, r0, #12
    220a:	d119      	bne.n	2240 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    220c:	4b1a      	ldr	r3, [pc, #104]	; (2278 <z_arm_mpu_init+0xb0>)
    220e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2210:	f7ff ff6e 	bl	20f0 <arm_core_mpu_enable>
	__ASSERT(
    2214:	680b      	ldr	r3, [r1, #0]
    2216:	f3c3 2307 	ubfx	r3, r3, #8, #8
    221a:	2b08      	cmp	r3, #8
    221c:	d00e      	beq.n	223c <z_arm_mpu_init+0x74>
    221e:	4917      	ldr	r1, [pc, #92]	; (227c <z_arm_mpu_init+0xb4>)
    2220:	4a10      	ldr	r2, [pc, #64]	; (2264 <z_arm_mpu_init+0x9c>)
    2222:	4812      	ldr	r0, [pc, #72]	; (226c <z_arm_mpu_init+0xa4>)
    2224:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2228:	f005 ffe1 	bl	81ee <printk>
    222c:	4814      	ldr	r0, [pc, #80]	; (2280 <z_arm_mpu_init+0xb8>)
    222e:	f005 ffde 	bl	81ee <printk>
    2232:	480c      	ldr	r0, [pc, #48]	; (2264 <z_arm_mpu_init+0x9c>)
    2234:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2238:	f005 ff02 	bl	8040 <assert_post_action>
	return 0;
    223c:	2000      	movs	r0, #0
    223e:	e7db      	b.n	21f8 <z_arm_mpu_init+0x30>
    2240:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2242:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2246:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    224a:	4313      	orrs	r3, r2
    224c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2250:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2252:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2256:	f043 0301 	orr.w	r3, r3, #1
    225a:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    225c:	3201      	adds	r2, #1
    225e:	e7d1      	b.n	2204 <z_arm_mpu_init+0x3c>
    2260:	00008c90 	.word	0x00008c90
    2264:	000094af 	.word	0x000094af
    2268:	000098f6 	.word	0x000098f6
    226c:	00009117 	.word	0x00009117
    2270:	0000953f 	.word	0x0000953f
    2274:	e000ed90 	.word	0xe000ed90
    2278:	20000c62 	.word	0x20000c62
    227c:	00009573 	.word	0x00009573
    2280:	000095c3 	.word	0x000095c3

00002284 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    2284:	b40f      	push	{r0, r1, r2, r3}
    2286:	b507      	push	{r0, r1, r2, lr}
    2288:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    228a:	2102      	movs	r1, #2
{
    228c:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2290:	4804      	ldr	r0, [pc, #16]	; (22a4 <printf+0x20>)
	va_start(vargs, format);
    2292:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2294:	f7fe faa2 	bl	7dc <cbvprintf>
	va_end(vargs);

	return r;
}
    2298:	b003      	add	sp, #12
    229a:	f85d eb04 	ldr.w	lr, [sp], #4
    229e:	b004      	add	sp, #16
    22a0:	4770      	bx	lr
    22a2:	bf00      	nop
    22a4:	0000824f 	.word	0x0000824f

000022a8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    22a8:	4b01      	ldr	r3, [pc, #4]	; (22b0 <__stdout_hook_install+0x8>)
    22aa:	6018      	str	r0, [r3, #0]
}
    22ac:	4770      	bx	lr
    22ae:	bf00      	nop
    22b0:	200000d4 	.word	0x200000d4

000022b4 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    22b4:	3902      	subs	r1, #2
    22b6:	2901      	cmp	r1, #1
    22b8:	d802      	bhi.n	22c0 <z_impl_zephyr_fputc+0xc>
    22ba:	4b03      	ldr	r3, [pc, #12]	; (22c8 <z_impl_zephyr_fputc+0x14>)
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	4718      	bx	r3
}
    22c0:	f04f 30ff 	mov.w	r0, #4294967295
    22c4:	4770      	bx	lr
    22c6:	bf00      	nop
    22c8:	200000d4 	.word	0x200000d4

000022cc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    22cc:	f04f 0320 	mov.w	r3, #32
    22d0:	f3ef 8111 	mrs	r1, BASEPRI
    22d4:	f383 8812 	msr	BASEPRI_MAX, r3
    22d8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    22dc:	4a0f      	ldr	r2, [pc, #60]	; (231c <nordicsemi_nrf52_init+0x50>)
    22de:	2301      	movs	r3, #1
    22e0:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    22e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22e8:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    22ec:	4a0c      	ldr	r2, [pc, #48]	; (2320 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    22ee:	6812      	ldr	r2, [r2, #0]
    22f0:	2a08      	cmp	r2, #8
    22f2:	d108      	bne.n	2306 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    22f4:	4a0b      	ldr	r2, [pc, #44]	; (2324 <nordicsemi_nrf52_init+0x58>)
    22f6:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    22f8:	2a05      	cmp	r2, #5
    22fa:	d804      	bhi.n	2306 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    22fc:	480a      	ldr	r0, [pc, #40]	; (2328 <nordicsemi_nrf52_init+0x5c>)
    22fe:	5c82      	ldrb	r2, [r0, r2]
    2300:	b10a      	cbz	r2, 2306 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2302:	4a0a      	ldr	r2, [pc, #40]	; (232c <nordicsemi_nrf52_init+0x60>)
    2304:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    230a:	2201      	movs	r2, #1
    230c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2310:	f381 8811 	msr	BASEPRI, r1
    2314:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2318:	2000      	movs	r0, #0
    231a:	4770      	bx	lr
    231c:	4001e000 	.word	0x4001e000
    2320:	10000130 	.word	0x10000130
    2324:	10000134 	.word	0x10000134
    2328:	000095f3 	.word	0x000095f3
    232c:	40000638 	.word	0x40000638

00002330 <sys_arch_reboot>:
    *p_gpregret = val;
    2330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2334:	b2c0      	uxtb	r0, r0
    2336:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    233a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    233e:	4905      	ldr	r1, [pc, #20]	; (2354 <sys_arch_reboot+0x24>)
    2340:	4b05      	ldr	r3, [pc, #20]	; (2358 <sys_arch_reboot+0x28>)
    2342:	68ca      	ldr	r2, [r1, #12]
    2344:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2348:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    234a:	60cb      	str	r3, [r1, #12]
    234c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2350:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2352:	e7fd      	b.n	2350 <sys_arch_reboot+0x20>
    2354:	e000ed00 	.word	0xe000ed00
    2358:	05fa0004 	.word	0x05fa0004

0000235c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    235c:	b120      	cbz	r0, 2368 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    235e:	4b03      	ldr	r3, [pc, #12]	; (236c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2360:	0180      	lsls	r0, r0, #6
    2362:	f043 0301 	orr.w	r3, r3, #1
    2366:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2368:	4770      	bx	lr
    236a:	bf00      	nop
    236c:	00008c50 	.word	0x00008c50

00002370 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2370:	4a05      	ldr	r2, [pc, #20]	; (2388 <adc_context_start_sampling.isra.0+0x18>)
    2372:	2301      	movs	r3, #1
    2374:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2378:	b108      	cbz	r0, 237e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    237a:	60d3      	str	r3, [r2, #12]
}
    237c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    237e:	6013      	str	r3, [r2, #0]
    2380:	4a02      	ldr	r2, [pc, #8]	; (238c <adc_context_start_sampling.isra.0+0x1c>)
    2382:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	40007000 	.word	0x40007000
    238c:	40007004 	.word	0x40007004

00002390 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2390:	7908      	ldrb	r0, [r1, #4]
{
    2392:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2394:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    2398:	2c07      	cmp	r4, #7
    239a:	d81f      	bhi.n	23dc <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    239c:	780b      	ldrb	r3, [r1, #0]
    239e:	2b09      	cmp	r3, #9
    23a0:	d81c      	bhi.n	23dc <adc_nrfx_channel_setup+0x4c>
    23a2:	e8df f003 	tbb	[pc, r3]
    23a6:	0606      	.short	0x0606
    23a8:	1b060606 	.word	0x1b060606
    23ac:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    23b0:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    23b2:	784a      	ldrb	r2, [r1, #1]
    23b4:	2a03      	cmp	r2, #3
    23b6:	d018      	beq.n	23ea <adc_nrfx_channel_setup+0x5a>
    23b8:	2a04      	cmp	r2, #4
    23ba:	d10f      	bne.n	23dc <adc_nrfx_channel_setup+0x4c>
    23bc:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    23be:	884a      	ldrh	r2, [r1, #2]
    23c0:	f244 060a 	movw	r6, #16394	; 0x400a
    23c4:	42b2      	cmp	r2, r6
    23c6:	d044      	beq.n	2452 <adc_nrfx_channel_setup+0xc2>
    23c8:	d811      	bhi.n	23ee <adc_nrfx_channel_setup+0x5e>
    23ca:	f244 0603 	movw	r6, #16387	; 0x4003
    23ce:	42b2      	cmp	r2, r6
    23d0:	d03b      	beq.n	244a <adc_nrfx_channel_setup+0xba>
    23d2:	f244 0605 	movw	r6, #16389	; 0x4005
    23d6:	42b2      	cmp	r2, r6
    23d8:	d039      	beq.n	244e <adc_nrfx_channel_setup+0xbe>
    23da:	b3d2      	cbz	r2, 2452 <adc_nrfx_channel_setup+0xc2>
    23dc:	f06f 0015 	mvn.w	r0, #21
    23e0:	e032      	b.n	2448 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    23e2:	2306      	movs	r3, #6
		break;
    23e4:	e7e5      	b.n	23b2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    23e6:	2307      	movs	r3, #7
		break;
    23e8:	e7e3      	b.n	23b2 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    23ea:	2501      	movs	r5, #1
    23ec:	e7e7      	b.n	23be <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    23ee:	f244 0614 	movw	r6, #16404	; 0x4014
    23f2:	42b2      	cmp	r2, r6
    23f4:	d02f      	beq.n	2456 <adc_nrfx_channel_setup+0xc6>
    23f6:	f244 0628 	movw	r6, #16424	; 0x4028
    23fa:	42b2      	cmp	r2, r6
    23fc:	d02d      	beq.n	245a <adc_nrfx_channel_setup+0xca>
    23fe:	f244 060f 	movw	r6, #16399	; 0x400f
    2402:	42b2      	cmp	r2, r6
    2404:	d1ea      	bne.n	23dc <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2406:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2408:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    240c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    240e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2412:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    241a:	0122      	lsls	r2, r4, #4
    241c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2420:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2424:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2426:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    242a:	0123      	lsls	r3, r4, #4
    242c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2430:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2434:	798a      	ldrb	r2, [r1, #6]
    2436:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    243a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    243e:	4b08      	ldr	r3, [pc, #32]	; (2460 <adc_nrfx_channel_setup+0xd0>)
    2440:	441c      	add	r4, r3
    2442:	794b      	ldrb	r3, [r1, #5]
    2444:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    2448:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    244a:	2200      	movs	r2, #0
    244c:	e7dc      	b.n	2408 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    244e:	2201      	movs	r2, #1
    2450:	e7da      	b.n	2408 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2452:	2202      	movs	r2, #2
    2454:	e7d8      	b.n	2408 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2456:	2204      	movs	r2, #4
    2458:	e7d6      	b.n	2408 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    245a:	2205      	movs	r2, #5
    245c:	e7d4      	b.n	2408 <adc_nrfx_channel_setup+0x78>
    245e:	bf00      	nop
    2460:	20000000 	.word	0x20000000

00002464 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    2464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2466:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    2468:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    246a:	b910      	cbnz	r0, 2472 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    246c:	f06f 0015 	mvn.w	r0, #21
    2470:	e09c      	b.n	25ac <start_read.isra.0+0x148>
	if (!selected_channels ||
    2472:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    2476:	d1f9      	bne.n	246c <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    2478:	4c57      	ldr	r4, [pc, #348]	; (25d8 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    247a:	4f58      	ldr	r7, [pc, #352]	; (25dc <start_read.isra.0+0x178>)
	active_channels = 0U;
    247c:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    247e:	fa20 f302 	lsr.w	r3, r0, r2
    2482:	f013 0301 	ands.w	r3, r3, #1
    2486:	d033      	beq.n	24f0 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2488:	18bb      	adds	r3, r7, r2
    248a:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    248e:	f1bc 0f00 	cmp.w	ip, #0
    2492:	d0eb      	beq.n	246c <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2494:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2498:	7c6e      	ldrb	r6, [r5, #17]
    249a:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    249e:	3e00      	subs	r6, #0
    24a0:	bf18      	it	ne
    24a2:	2601      	movne	r6, #1
    24a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    24a8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    24ac:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    24b0:	f102 0351 	add.w	r3, r2, #81	; 0x51
    24b4:	011b      	lsls	r3, r3, #4
			++active_channels;
    24b6:	3101      	adds	r1, #1
    24b8:	f844 c003 	str.w	ip, [r4, r3]
    24bc:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    24be:	3201      	adds	r2, #1
    24c0:	2a08      	cmp	r2, #8
    24c2:	d1dc      	bne.n	247e <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    24c4:	7c2b      	ldrb	r3, [r5, #16]
    24c6:	3b08      	subs	r3, #8
    24c8:	2b06      	cmp	r3, #6
    24ca:	d8cf      	bhi.n	246c <start_read.isra.0+0x8>
    24cc:	a201      	add	r2, pc, #4	; (adr r2, 24d4 <start_read.isra.0+0x70>)
    24ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    24d2:	bf00      	nop
    24d4:	000025b9 	.word	0x000025b9
    24d8:	0000246d 	.word	0x0000246d
    24dc:	000024fb 	.word	0x000024fb
    24e0:	0000246d 	.word	0x0000246d
    24e4:	000025b1 	.word	0x000025b1
    24e8:	0000246d 	.word	0x0000246d
    24ec:	000025b5 	.word	0x000025b5
    24f0:	f102 0651 	add.w	r6, r2, #81	; 0x51
    24f4:	0136      	lsls	r6, r6, #4
    24f6:	51a3      	str	r3, [r4, r6]
}
    24f8:	e7e1      	b.n	24be <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    24fa:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    24fc:	4b36      	ldr	r3, [pc, #216]	; (25d8 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    24fe:	2901      	cmp	r1, #1
    2500:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    2504:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2506:	d959      	bls.n	25bc <start_read.isra.0+0x158>
    2508:	2a00      	cmp	r2, #0
    250a:	d1af      	bne.n	246c <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    250c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    2510:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2512:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2514:	b112      	cbz	r2, 251c <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2516:	8992      	ldrh	r2, [r2, #12]
    2518:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    251c:	68ea      	ldr	r2, [r5, #12]
    251e:	429a      	cmp	r2, r3
    2520:	d356      	bcc.n	25d0 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2522:	4b2d      	ldr	r3, [pc, #180]	; (25d8 <start_read.isra.0+0x174>)
    2524:	68aa      	ldr	r2, [r5, #8]
    2526:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    252a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    252c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2530:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2532:	4c2a      	ldr	r4, [pc, #168]	; (25dc <start_read.isra.0+0x178>)
    2534:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    2538:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    253a:	683b      	ldr	r3, [r7, #0]
    253c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    253e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    2540:	2600      	movs	r6, #0
    2542:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    2544:	2b00      	cmp	r3, #0
    2546:	d03c      	beq.n	25c2 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    2548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    254a:	f104 0590 	add.w	r5, r4, #144	; 0x90
    254e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    2552:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    2554:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    2558:	b398      	cbz	r0, 25c2 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    255a:	f3bf 8f5b 	dmb	ish
    255e:	e854 3f00 	ldrex	r3, [r4]
    2562:	e844 6200 	strex	r2, r6, [r4]
    2566:	2a00      	cmp	r2, #0
    2568:	d1f9      	bne.n	255e <start_read.isra.0+0xfa>
    256a:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    256e:	481c      	ldr	r0, [pc, #112]	; (25e0 <start_read.isra.0+0x17c>)
    2570:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    2574:	4a1b      	ldr	r2, [pc, #108]	; (25e4 <start_read.isra.0+0x180>)
    2576:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    257a:	2100      	movs	r1, #0
    257c:	2300      	movs	r3, #0
    257e:	fbe5 0106 	umlal	r0, r1, r5, r6
    2582:	f7fd fdbd 	bl	100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    2586:	2200      	movs	r2, #0
    2588:	e9cd 0100 	strd	r0, r1, [sp]
    258c:	2300      	movs	r3, #0
    258e:	f104 0008 	add.w	r0, r4, #8
    2592:	f005 f8a1 	bl	76d8 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    2596:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    259a:	b9bb      	cbnz	r3, 25cc <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    259c:	4812      	ldr	r0, [pc, #72]	; (25e8 <start_read.isra.0+0x184>)
    259e:	f04f 32ff 	mov.w	r2, #4294967295
    25a2:	f04f 33ff 	mov.w	r3, #4294967295
    25a6:	f004 fab1 	bl	6b0c <z_impl_k_sem_take>
	return ctx->status;
    25aa:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    25ac:	b003      	add	sp, #12
    25ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    25b0:	2202      	movs	r2, #2
		break;
    25b2:	e7a3      	b.n	24fc <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    25b4:	2203      	movs	r2, #3
		break;
    25b6:	e7a1      	b.n	24fc <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    25b8:	2200      	movs	r2, #0
    25ba:	e79f      	b.n	24fc <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    25bc:	2a08      	cmp	r2, #8
    25be:	d9a5      	bls.n	250c <start_read.isra.0+0xa8>
    25c0:	e754      	b.n	246c <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    25c2:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    25c6:	f7ff fed3 	bl	2370 <adc_context_start_sampling.isra.0>
    25ca:	e7e4      	b.n	2596 <start_read.isra.0+0x132>
		return 0;
    25cc:	2000      	movs	r0, #0
	return error;
    25ce:	e7ed      	b.n	25ac <start_read.isra.0+0x148>
		return -ENOMEM;
    25d0:	f06f 000b 	mvn.w	r0, #11
    25d4:	e7ea      	b.n	25ac <start_read.isra.0+0x148>
    25d6:	bf00      	nop
    25d8:	40007000 	.word	0x40007000
    25dc:	20000000 	.word	0x20000000
    25e0:	000f423f 	.word	0x000f423f
    25e4:	000f4240 	.word	0x000f4240
    25e8:	20000058 	.word	0x20000058

000025ec <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	460c      	mov	r4, r1
    25f0:	4616      	mov	r6, r2
    25f2:	4d0d      	ldr	r5, [pc, #52]	; (2628 <adc_nrfx_read_async+0x3c>)
    25f4:	f04f 32ff 	mov.w	r2, #4294967295
    25f8:	f04f 33ff 	mov.w	r3, #4294967295
    25fc:	f105 0040 	add.w	r0, r5, #64	; 0x40
    2600:	f004 fa84 	bl	6b0c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    2604:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    2606:	4620      	mov	r0, r4
    2608:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    260c:	676e      	str	r6, [r5, #116]	; 0x74
    260e:	f7ff ff29 	bl	2464 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    2612:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2616:	4604      	mov	r4, r0
    2618:	b103      	cbz	r3, 261c <adc_nrfx_read_async+0x30>
    261a:	b110      	cbz	r0, 2622 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    261c:	4803      	ldr	r0, [pc, #12]	; (262c <adc_nrfx_read_async+0x40>)
    261e:	f004 fa31 	bl	6a84 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    2622:	4620      	mov	r0, r4
    2624:	bd70      	pop	{r4, r5, r6, pc}
    2626:	bf00      	nop
    2628:	20000000 	.word	0x20000000
    262c:	20000040 	.word	0x20000040

00002630 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2630:	4b0d      	ldr	r3, [pc, #52]	; (2668 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    2632:	b510      	push	{r4, lr}
    2634:	2400      	movs	r4, #0
    2636:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	4b0c      	ldr	r3, [pc, #48]	; (266c <init_saadc+0x3c>)
    263c:	601c      	str	r4, [r3, #0]
    263e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2640:	4b0b      	ldr	r3, [pc, #44]	; (2670 <init_saadc+0x40>)
    2642:	2212      	movs	r2, #18
    2644:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2648:	2007      	movs	r0, #7
    264a:	f7ff fa37 	bl	1abc <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    264e:	4622      	mov	r2, r4
    2650:	2101      	movs	r1, #1
    2652:	2007      	movs	r0, #7
    2654:	f7ff fa50 	bl	1af8 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    2658:	4806      	ldr	r0, [pc, #24]	; (2674 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    265a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    265c:	b913      	cbnz	r3, 2664 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    265e:	3040      	adds	r0, #64	; 0x40
    2660:	f004 fa10 	bl	6a84 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    2664:	2000      	movs	r0, #0
    2666:	bd10      	pop	{r4, pc}
    2668:	40007104 	.word	0x40007104
    266c:	40007110 	.word	0x40007110
    2670:	40007000 	.word	0x40007000
    2674:	20000000 	.word	0x20000000

00002678 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2678:	4b34      	ldr	r3, [pc, #208]	; (274c <saadc_irq_handler+0xd4>)
    267a:	681a      	ldr	r2, [r3, #0]
{
    267c:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    267e:	2a00      	cmp	r2, #0
    2680:	d055      	beq.n	272e <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2682:	2200      	movs	r2, #0
    2684:	601a      	str	r2, [r3, #0]
    2686:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    2688:	4c31      	ldr	r4, [pc, #196]	; (2750 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    268a:	4b32      	ldr	r3, [pc, #200]	; (2754 <saadc_irq_handler+0xdc>)
    268c:	2101      	movs	r1, #1
    268e:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2690:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    2694:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2696:	b3db      	cbz	r3, 2710 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    2698:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    269c:	b143      	cbz	r3, 26b0 <saadc_irq_handler+0x38>
			action = callback(dev,
    269e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    26a2:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    26a6:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    26a8:	2801      	cmp	r0, #1
    26aa:	d014      	beq.n	26d6 <saadc_irq_handler+0x5e>
    26ac:	2802      	cmp	r0, #2
    26ae:	d029      	beq.n	2704 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    26b0:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    26b4:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    26b8:	429a      	cmp	r2, r3
    26ba:	d923      	bls.n	2704 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    26bc:	3301      	adds	r3, #1
    26be:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    26c2:	4b25      	ldr	r3, [pc, #148]	; (2758 <saadc_irq_handler+0xe0>)
    26c4:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    26c8:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    26cc:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    26ce:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    26d2:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    26d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    26da:	b92b      	cbnz	r3, 26e8 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    26dc:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    26e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    26e4:	f7ff be44 	b.w	2370 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    26e8:	f3bf 8f5b 	dmb	ish
    26ec:	e854 3f00 	ldrex	r3, [r4]
    26f0:	1e5a      	subs	r2, r3, #1
    26f2:	e844 2100 	strex	r1, r2, [r4]
    26f6:	2900      	cmp	r1, #0
    26f8:	d1f8      	bne.n	26ec <saadc_irq_handler+0x74>
    26fa:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    26fe:	2b01      	cmp	r3, #1
    2700:	dcec      	bgt.n	26dc <saadc_irq_handler+0x64>
    2702:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2704:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2708:	b113      	cbz	r3, 2710 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    270a:	4814      	ldr	r0, [pc, #80]	; (275c <saadc_irq_handler+0xe4>)
    270c:	f006 f90f 	bl	892e <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    2710:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    2714:	b14b      	cbz	r3, 272a <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    2716:	6f60      	ldr	r0, [r4, #116]	; 0x74
    2718:	b110      	cbz	r0, 2720 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    271a:	2100      	movs	r1, #0
    271c:	f002 ff28 	bl	5570 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    2720:	480f      	ldr	r0, [pc, #60]	; (2760 <saadc_irq_handler+0xe8>)
    2722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2726:	f004 b9ad 	b.w	6a84 <z_impl_k_sem_give>
    272a:	480e      	ldr	r0, [pc, #56]	; (2764 <saadc_irq_handler+0xec>)
    272c:	e7f9      	b.n	2722 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    272e:	4b0e      	ldr	r3, [pc, #56]	; (2768 <saadc_irq_handler+0xf0>)
    2730:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2732:	2900      	cmp	r1, #0
    2734:	d0e5      	beq.n	2702 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2736:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2738:	4a06      	ldr	r2, [pc, #24]	; (2754 <saadc_irq_handler+0xdc>)
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	2301      	movs	r3, #1
    273e:	6013      	str	r3, [r2, #0]
    2740:	f842 3c08 	str.w	r3, [r2, #-8]
    2744:	f842 3c04 	str.w	r3, [r2, #-4]
}
    2748:	e7db      	b.n	2702 <saadc_irq_handler+0x8a>
    274a:	bf00      	nop
    274c:	40007104 	.word	0x40007104
    2750:	20000000 	.word	0x20000000
    2754:	40007008 	.word	0x40007008
    2758:	40007000 	.word	0x40007000
    275c:	20000008 	.word	0x20000008
    2760:	20000040 	.word	0x20000040
    2764:	20000058 	.word	0x20000058
    2768:	40007110 	.word	0x40007110

0000276c <adc_nrfx_read>:
{
    276c:	b538      	push	{r3, r4, r5, lr}
    276e:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    2770:	4d0c      	ldr	r5, [pc, #48]	; (27a4 <adc_nrfx_read+0x38>)
    2772:	f04f 32ff 	mov.w	r2, #4294967295
    2776:	f04f 33ff 	mov.w	r3, #4294967295
    277a:	f105 0040 	add.w	r0, r5, #64	; 0x40
    277e:	f004 f9c5 	bl	6b0c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    2782:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    2784:	4620      	mov	r0, r4
    2786:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    278a:	676b      	str	r3, [r5, #116]	; 0x74
    278c:	f7ff fe6a 	bl	2464 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    2790:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2794:	4604      	mov	r4, r0
    2796:	b103      	cbz	r3, 279a <adc_nrfx_read+0x2e>
    2798:	b110      	cbz	r0, 27a0 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    279a:	4803      	ldr	r0, [pc, #12]	; (27a8 <adc_nrfx_read+0x3c>)
    279c:	f004 f972 	bl	6a84 <z_impl_k_sem_give>
}
    27a0:	4620      	mov	r0, r4
    27a2:	bd38      	pop	{r3, r4, r5, pc}
    27a4:	20000000 	.word	0x20000000
    27a8:	20000040 	.word	0x20000040

000027ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    27ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    27b0:	4c10      	ldr	r4, [pc, #64]	; (27f4 <onoff_start+0x48>)
    27b2:	1b07      	subs	r7, r0, r4
    27b4:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    27b8:	f04f 080c 	mov.w	r8, #12
    27bc:	fb08 f807 	mul.w	r8, r8, r7
{
    27c0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    27c2:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    27c6:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    27c8:	4420      	add	r0, r4
    27ca:	2140      	movs	r1, #64	; 0x40
    27cc:	f005 fda6 	bl	831c <set_starting_state>
	if (err < 0) {
    27d0:	1e01      	subs	r1, r0, #0
    27d2:	db09      	blt.n	27e8 <onoff_start+0x3c>
	subdata->cb = cb;
    27d4:	4b08      	ldr	r3, [pc, #32]	; (27f8 <onoff_start+0x4c>)
    27d6:	4444      	add	r4, r8
	subdata->user_data = user_data;
    27d8:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    27dc:	4b07      	ldr	r3, [pc, #28]	; (27fc <onoff_start+0x50>)
    27de:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    27e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    27e6:	4718      	bx	r3
		notify(mgr, err);
    27e8:	4630      	mov	r0, r6
    27ea:	462b      	mov	r3, r5
}
    27ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    27f0:	4718      	bx	r3
    27f2:	bf00      	nop
    27f4:	20000b40 	.word	0x20000b40
    27f8:	0000837f 	.word	0x0000837f
    27fc:	00008cd8 	.word	0x00008cd8

00002800 <get_status>:
{
    2800:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2802:	b2cc      	uxtb	r4, r1
    2804:	2c01      	cmp	r4, #1
{
    2806:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2808:	d909      	bls.n	281e <get_status+0x1e>
    280a:	4909      	ldr	r1, [pc, #36]	; (2830 <get_status+0x30>)
    280c:	4809      	ldr	r0, [pc, #36]	; (2834 <get_status+0x34>)
    280e:	4a0a      	ldr	r2, [pc, #40]	; (2838 <get_status+0x38>)
    2810:	2379      	movs	r3, #121	; 0x79
    2812:	f005 fcec 	bl	81ee <printk>
    2816:	4808      	ldr	r0, [pc, #32]	; (2838 <get_status+0x38>)
    2818:	2179      	movs	r1, #121	; 0x79
    281a:	f005 fc11 	bl	8040 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    281e:	692b      	ldr	r3, [r5, #16]
    2820:	210c      	movs	r1, #12
    2822:	fb04 3401 	mla	r4, r4, r1, r3
    2826:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2828:	f000 0007 	and.w	r0, r0, #7
    282c:	bd38      	pop	{r3, r4, r5, pc}
    282e:	bf00      	nop
    2830:	00009636 	.word	0x00009636
    2834:	00009117 	.word	0x00009117
    2838:	000095f9 	.word	0x000095f9

0000283c <stop>:
{
    283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    283e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2840:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2842:	6907      	ldr	r7, [r0, #16]
{
    2844:	4605      	mov	r5, r0
    2846:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2848:	d90b      	bls.n	2862 <stop+0x26>
    284a:	4918      	ldr	r1, [pc, #96]	; (28ac <stop+0x70>)
    284c:	4818      	ldr	r0, [pc, #96]	; (28b0 <stop+0x74>)
    284e:	4a19      	ldr	r2, [pc, #100]	; (28b4 <stop+0x78>)
    2850:	f240 134d 	movw	r3, #333	; 0x14d
    2854:	f005 fccb 	bl	81ee <printk>
    2858:	4816      	ldr	r0, [pc, #88]	; (28b4 <stop+0x78>)
    285a:	f240 114d 	movw	r1, #333	; 0x14d
    285e:	f005 fbef 	bl	8040 <assert_post_action>
	__asm__ volatile(
    2862:	f04f 0320 	mov.w	r3, #32
    2866:	f3ef 8211 	mrs	r2, BASEPRI
    286a:	f383 8812 	msr	BASEPRI_MAX, r3
    286e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2872:	230c      	movs	r3, #12
    2874:	fb03 7104 	mla	r1, r3, r4, r7
    2878:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    287a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    287e:	d001      	beq.n	2884 <stop+0x48>
    2880:	428e      	cmp	r6, r1
    2882:	d110      	bne.n	28a6 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2884:	fb03 7304 	mla	r3, r3, r4, r7
    2888:	2101      	movs	r1, #1
    288a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    288c:	2000      	movs	r0, #0
	__asm__ volatile(
    288e:	f382 8811 	msr	BASEPRI, r2
    2892:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2896:	b928      	cbnz	r0, 28a4 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2898:	6869      	ldr	r1, [r5, #4]
    289a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    289e:	6863      	ldr	r3, [r4, #4]
    28a0:	4798      	blx	r3
	return 0;
    28a2:	2000      	movs	r0, #0
}
    28a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    28a6:	f04f 30ff 	mov.w	r0, #4294967295
    28aa:	e7f0      	b.n	288e <stop+0x52>
    28ac:	00009636 	.word	0x00009636
    28b0:	00009117 	.word	0x00009117
    28b4:	000095f9 	.word	0x000095f9

000028b8 <onoff_stop>:
{
    28b8:	b570      	push	{r4, r5, r6, lr}
    28ba:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    28bc:	4906      	ldr	r1, [pc, #24]	; (28d8 <onoff_stop+0x20>)
    28be:	1a41      	subs	r1, r0, r1
{
    28c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    28c2:	1149      	asrs	r1, r1, #5
    28c4:	4805      	ldr	r0, [pc, #20]	; (28dc <onoff_stop+0x24>)
    28c6:	2240      	movs	r2, #64	; 0x40
    28c8:	f7ff ffb8 	bl	283c <stop>
	notify(mgr, res);
    28cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    28ce:	4601      	mov	r1, r0
	notify(mgr, res);
    28d0:	4620      	mov	r0, r4
}
    28d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    28d6:	4718      	bx	r3
    28d8:	20000b40 	.word	0x20000b40
    28dc:	000089f4 	.word	0x000089f4

000028e0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    28e0:	2200      	movs	r2, #0
{
    28e2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    28e4:	2101      	movs	r1, #1
{
    28e6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    28e8:	4610      	mov	r0, r2
    28ea:	f7ff f905 	bl	1af8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    28ee:	2000      	movs	r0, #0
    28f0:	f7ff f8e4 	bl	1abc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    28f4:	480f      	ldr	r0, [pc, #60]	; (2934 <clk_init+0x54>)
    28f6:	f001 f8c3 	bl	3a80 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    28fa:	4b0f      	ldr	r3, [pc, #60]	; (2938 <clk_init+0x58>)
    28fc:	4298      	cmp	r0, r3
    28fe:	d115      	bne.n	292c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2900:	f001 f8e2 	bl	3ac8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2904:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2906:	490d      	ldr	r1, [pc, #52]	; (293c <clk_init+0x5c>)
    2908:	4630      	mov	r0, r6
    290a:	f005 fc5b 	bl	81c4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    290e:	2800      	cmp	r0, #0
    2910:	db0b      	blt.n	292a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2912:	2501      	movs	r5, #1
    2914:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2916:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2918:	4908      	ldr	r1, [pc, #32]	; (293c <clk_init+0x5c>)
    291a:	f104 0020 	add.w	r0, r4, #32
    291e:	f005 fc51 	bl	81c4 <onoff_manager_init>
		if (err < 0) {
    2922:	2800      	cmp	r0, #0
    2924:	db01      	blt.n	292a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2926:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2928:	2000      	movs	r0, #0
}
    292a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    292c:	f06f 0004 	mvn.w	r0, #4
    2930:	e7fb      	b.n	292a <clk_init+0x4a>
    2932:	bf00      	nop
    2934:	00002975 	.word	0x00002975
    2938:	0bad0000 	.word	0x0bad0000
    293c:	00008ce8 	.word	0x00008ce8

00002940 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2940:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2942:	230c      	movs	r3, #12
    2944:	4809      	ldr	r0, [pc, #36]	; (296c <clkstarted_handle.constprop.0+0x2c>)
    2946:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2948:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    294a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    294c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2950:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2952:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2954:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2956:	4418      	add	r0, r3
    2958:	f005 fcfe 	bl	8358 <set_on_state>
	if (callback) {
    295c:	b12d      	cbz	r5, 296a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    295e:	4632      	mov	r2, r6
    2960:	462b      	mov	r3, r5
    2962:	4803      	ldr	r0, [pc, #12]	; (2970 <clkstarted_handle.constprop.0+0x30>)
}
    2964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2968:	4718      	bx	r3
}
    296a:	bd70      	pop	{r4, r5, r6, pc}
    296c:	20000b40 	.word	0x20000b40
    2970:	000089f4 	.word	0x000089f4

00002974 <clock_event_handler>:
	switch (event) {
    2974:	2801      	cmp	r0, #1
{
    2976:	b508      	push	{r3, lr}
	switch (event) {
    2978:	d006      	beq.n	2988 <clock_event_handler+0x14>
    297a:	2803      	cmp	r0, #3
    297c:	d008      	beq.n	2990 <clock_event_handler+0x1c>
    297e:	b9a8      	cbnz	r0, 29ac <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2980:	4b10      	ldr	r3, [pc, #64]	; (29c4 <clock_event_handler+0x50>)
    2982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2984:	075b      	lsls	r3, r3, #29
    2986:	d11b      	bne.n	29c0 <clock_event_handler+0x4c>
}
    2988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    298c:	f7ff bfd8 	b.w	2940 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2990:	490d      	ldr	r1, [pc, #52]	; (29c8 <clock_event_handler+0x54>)
    2992:	4a0e      	ldr	r2, [pc, #56]	; (29cc <clock_event_handler+0x58>)
    2994:	480e      	ldr	r0, [pc, #56]	; (29d0 <clock_event_handler+0x5c>)
    2996:	f240 235e 	movw	r3, #606	; 0x25e
    299a:	f005 fc28 	bl	81ee <printk>
    299e:	f240 215e 	movw	r1, #606	; 0x25e
}
    29a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    29a6:	4809      	ldr	r0, [pc, #36]	; (29cc <clock_event_handler+0x58>)
    29a8:	f005 bb4a 	b.w	8040 <assert_post_action>
    29ac:	4906      	ldr	r1, [pc, #24]	; (29c8 <clock_event_handler+0x54>)
    29ae:	4a07      	ldr	r2, [pc, #28]	; (29cc <clock_event_handler+0x58>)
    29b0:	4807      	ldr	r0, [pc, #28]	; (29d0 <clock_event_handler+0x5c>)
    29b2:	f240 2362 	movw	r3, #610	; 0x262
    29b6:	f005 fc1a 	bl	81ee <printk>
    29ba:	f240 2162 	movw	r1, #610	; 0x262
    29be:	e7f0      	b.n	29a2 <clock_event_handler+0x2e>
}
    29c0:	bd08      	pop	{r3, pc}
    29c2:	bf00      	nop
    29c4:	20000b40 	.word	0x20000b40
    29c8:	000098f6 	.word	0x000098f6
    29cc:	000095f9 	.word	0x000095f9
    29d0:	00009117 	.word	0x00009117

000029d4 <generic_hfclk_start>:
{
    29d4:	b508      	push	{r3, lr}
	__asm__ volatile(
    29d6:	f04f 0320 	mov.w	r3, #32
    29da:	f3ef 8111 	mrs	r1, BASEPRI
    29de:	f383 8812 	msr	BASEPRI_MAX, r3
    29e2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    29e6:	4a12      	ldr	r2, [pc, #72]	; (2a30 <generic_hfclk_start+0x5c>)
    29e8:	6813      	ldr	r3, [r2, #0]
    29ea:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    29ee:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    29f2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    29f4:	d00c      	beq.n	2a10 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    29f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29fa:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    29fe:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2a02:	f013 0301 	ands.w	r3, r3, #1
    2a06:	d003      	beq.n	2a10 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2a08:	480a      	ldr	r0, [pc, #40]	; (2a34 <generic_hfclk_start+0x60>)
    2a0a:	f005 fca5 	bl	8358 <set_on_state>
			already_started = true;
    2a0e:	2301      	movs	r3, #1
	__asm__ volatile(
    2a10:	f381 8811 	msr	BASEPRI, r1
    2a14:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2a18:	b123      	cbz	r3, 2a24 <generic_hfclk_start+0x50>
}
    2a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2a1e:	2000      	movs	r0, #0
    2a20:	f7ff bf8e 	b.w	2940 <clkstarted_handle.constprop.0>
}
    2a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2a28:	2001      	movs	r0, #1
    2a2a:	f001 b86d 	b.w	3b08 <nrfx_clock_start>
    2a2e:	bf00      	nop
    2a30:	20000b98 	.word	0x20000b98
    2a34:	20000b88 	.word	0x20000b88

00002a38 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2a38:	4b09      	ldr	r3, [pc, #36]	; (2a60 <generic_hfclk_stop+0x28>)
    2a3a:	f3bf 8f5b 	dmb	ish
    2a3e:	e853 2f00 	ldrex	r2, [r3]
    2a42:	f022 0102 	bic.w	r1, r2, #2
    2a46:	e843 1000 	strex	r0, r1, [r3]
    2a4a:	2800      	cmp	r0, #0
    2a4c:	d1f7      	bne.n	2a3e <generic_hfclk_stop+0x6>
    2a4e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2a52:	07d3      	lsls	r3, r2, #31
    2a54:	d402      	bmi.n	2a5c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2a56:	2001      	movs	r0, #1
    2a58:	f001 b8aa 	b.w	3bb0 <nrfx_clock_stop>
}
    2a5c:	4770      	bx	lr
    2a5e:	bf00      	nop
    2a60:	20000b98 	.word	0x20000b98

00002a64 <api_blocking_start>:
{
    2a64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2a66:	2200      	movs	r2, #0
    2a68:	2301      	movs	r3, #1
    2a6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2a6e:	ab04      	add	r3, sp, #16
    2a70:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2a74:	4a09      	ldr	r2, [pc, #36]	; (2a9c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2a76:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2a7a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2a7c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2a80:	f005 fc8f 	bl	83a2 <api_start>
	if (err < 0) {
    2a84:	2800      	cmp	r0, #0
    2a86:	db05      	blt.n	2a94 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    2a88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2a8c:	2300      	movs	r3, #0
    2a8e:	4668      	mov	r0, sp
    2a90:	f004 f83c 	bl	6b0c <z_impl_k_sem_take>
}
    2a94:	b007      	add	sp, #28
    2a96:	f85d fb04 	ldr.w	pc, [sp], #4
    2a9a:	bf00      	nop
    2a9c:	0000839d 	.word	0x0000839d

00002aa0 <z_nrf_clock_control_lf_on>:
{
    2aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2aa4:	4949      	ldr	r1, [pc, #292]	; (2bcc <z_nrf_clock_control_lf_on+0x12c>)
    2aa6:	f3bf 8f5b 	dmb	ish
    2aaa:	4605      	mov	r5, r0
    2aac:	2201      	movs	r2, #1
    2aae:	e851 3f00 	ldrex	r3, [r1]
    2ab2:	e841 2000 	strex	r0, r2, [r1]
    2ab6:	2800      	cmp	r0, #0
    2ab8:	d1f9      	bne.n	2aae <z_nrf_clock_control_lf_on+0xe>
    2aba:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2abe:	b9a3      	cbnz	r3, 2aea <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2ac0:	4943      	ldr	r1, [pc, #268]	; (2bd0 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2ac2:	4844      	ldr	r0, [pc, #272]	; (2bd4 <z_nrf_clock_control_lf_on+0x134>)
    2ac4:	604b      	str	r3, [r1, #4]
    2ac6:	60cb      	str	r3, [r1, #12]
    2ac8:	608a      	str	r2, [r1, #8]
    2aca:	f7fe fd6d 	bl	15a8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2ace:	2800      	cmp	r0, #0
    2ad0:	da0b      	bge.n	2aea <z_nrf_clock_control_lf_on+0x4a>
    2ad2:	4941      	ldr	r1, [pc, #260]	; (2bd8 <z_nrf_clock_control_lf_on+0x138>)
    2ad4:	4841      	ldr	r0, [pc, #260]	; (2bdc <z_nrf_clock_control_lf_on+0x13c>)
    2ad6:	4a42      	ldr	r2, [pc, #264]	; (2be0 <z_nrf_clock_control_lf_on+0x140>)
    2ad8:	f44f 7308 	mov.w	r3, #544	; 0x220
    2adc:	f005 fb87 	bl	81ee <printk>
    2ae0:	483f      	ldr	r0, [pc, #252]	; (2be0 <z_nrf_clock_control_lf_on+0x140>)
    2ae2:	f44f 7108 	mov.w	r1, #544	; 0x220
    2ae6:	f005 faab 	bl	8040 <assert_post_action>
	switch (start_mode) {
    2aea:	b3ad      	cbz	r5, 2b58 <z_nrf_clock_control_lf_on+0xb8>
    2aec:	1e6b      	subs	r3, r5, #1
    2aee:	2b01      	cmp	r3, #1
    2af0:	d856      	bhi.n	2ba0 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2af2:	2d01      	cmp	r5, #1
    2af4:	d107      	bne.n	2b06 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2afa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2afe:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2b02:	2b01      	cmp	r3, #1
    2b04:	d028      	beq.n	2b58 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b06:	f005 fefd 	bl	8904 <k_is_in_isr>
    2b0a:	4604      	mov	r4, r0
    2b0c:	b918      	cbnz	r0, 2b16 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2b0e:	4b35      	ldr	r3, [pc, #212]	; (2be4 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2b10:	781b      	ldrb	r3, [r3, #0]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d152      	bne.n	2bbc <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    2b16:	f04f 0320 	mov.w	r3, #32
    2b1a:	f3ef 8611 	mrs	r6, BASEPRI
    2b1e:	f383 8812 	msr	BASEPRI_MAX, r3
    2b22:	f3bf 8f6f 	isb	sy
    2b26:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b28:	4f2f      	ldr	r7, [pc, #188]	; (2be8 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b2a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2bf0 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b2e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2bf4 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b36:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2b3a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2b3e:	03d2      	lsls	r2, r2, #15
    2b40:	d50c      	bpl.n	2b5c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2b42:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2b46:	2b01      	cmp	r3, #1
    2b48:	d001      	beq.n	2b4e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2b4a:	2d01      	cmp	r5, #1
    2b4c:	d106      	bne.n	2b5c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2b4e:	b30c      	cbz	r4, 2b94 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2b50:	f386 8811 	msr	BASEPRI, r6
    2b54:	f3bf 8f6f 	isb	sy
}
    2b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2b5c:	b1ac      	cbz	r4, 2b8a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2b5e:	4630      	mov	r0, r6
    2b60:	f7fe ff44 	bl	19ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2b64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b68:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d1e0      	bne.n	2b32 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b70:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2b72:	2900      	cmp	r1, #0
    2b74:	d0dd      	beq.n	2b32 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b76:	603b      	str	r3, [r7, #0]
    2b78:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2b7a:	2301      	movs	r3, #1
    2b7c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2b80:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b84:	f8c9 3000 	str.w	r3, [r9]
}
    2b88:	e7d3      	b.n	2b32 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    2b8a:	2100      	movs	r1, #0
    2b8c:	2021      	movs	r0, #33	; 0x21
    2b8e:	f003 fe0d 	bl	67ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2b92:	e7e7      	b.n	2b64 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b98:	2202      	movs	r2, #2
    2b9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2b9e:	e7db      	b.n	2b58 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2ba0:	4912      	ldr	r1, [pc, #72]	; (2bec <z_nrf_clock_control_lf_on+0x14c>)
    2ba2:	480e      	ldr	r0, [pc, #56]	; (2bdc <z_nrf_clock_control_lf_on+0x13c>)
    2ba4:	4a0e      	ldr	r2, [pc, #56]	; (2be0 <z_nrf_clock_control_lf_on+0x140>)
    2ba6:	f240 2332 	movw	r3, #562	; 0x232
    2baa:	f005 fb20 	bl	81ee <printk>
}
    2bae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2bb2:	480b      	ldr	r0, [pc, #44]	; (2be0 <z_nrf_clock_control_lf_on+0x140>)
    2bb4:	f240 2132 	movw	r1, #562	; 0x232
    2bb8:	f005 ba42 	b.w	8040 <assert_post_action>
    p_reg->INTENCLR = mask;
    2bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bc0:	2202      	movs	r2, #2
    2bc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2bc6:	4606      	mov	r6, r0
}
    2bc8:	e7ae      	b.n	2b28 <z_nrf_clock_control_lf_on+0x88>
    2bca:	bf00      	nop
    2bcc:	20000b9c 	.word	0x20000b9c
    2bd0:	20000b30 	.word	0x20000b30
    2bd4:	20000b60 	.word	0x20000b60
    2bd8:	0000965a 	.word	0x0000965a
    2bdc:	00009117 	.word	0x00009117
    2be0:	000095f9 	.word	0x000095f9
    2be4:	20000c63 	.word	0x20000c63
    2be8:	40000104 	.word	0x40000104
    2bec:	000098f6 	.word	0x000098f6
    2bf0:	e000e100 	.word	0xe000e100
    2bf4:	40000008 	.word	0x40000008

00002bf8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2bf8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2bfa:	4b08      	ldr	r3, [pc, #32]	; (2c1c <uart_console_init+0x24>)
    2bfc:	4808      	ldr	r0, [pc, #32]	; (2c20 <uart_console_init+0x28>)
    2bfe:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2c00:	f005 fe0e 	bl	8820 <z_device_ready>
    2c04:	b138      	cbz	r0, 2c16 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2c06:	4807      	ldr	r0, [pc, #28]	; (2c24 <uart_console_init+0x2c>)
    2c08:	f7ff fb4e 	bl	22a8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2c0c:	4805      	ldr	r0, [pc, #20]	; (2c24 <uart_console_init+0x2c>)
    2c0e:	f7fe feb1 	bl	1974 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2c12:	2000      	movs	r0, #0
}
    2c14:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2c16:	f06f 0012 	mvn.w	r0, #18
    2c1a:	e7fb      	b.n	2c14 <uart_console_init+0x1c>
    2c1c:	20000ba0 	.word	0x20000ba0
    2c20:	00008a54 	.word	0x00008a54
    2c24:	00002c29 	.word	0x00002c29

00002c28 <console_out>:
	if ('\n' == c) {
    2c28:	280a      	cmp	r0, #10
{
    2c2a:	b538      	push	{r3, r4, r5, lr}
    2c2c:	4d07      	ldr	r5, [pc, #28]	; (2c4c <console_out+0x24>)
    2c2e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2c30:	d104      	bne.n	2c3c <console_out+0x14>
    2c32:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2c34:	6883      	ldr	r3, [r0, #8]
    2c36:	210d      	movs	r1, #13
    2c38:	685b      	ldr	r3, [r3, #4]
    2c3a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2c3c:	6828      	ldr	r0, [r5, #0]
    2c3e:	6883      	ldr	r3, [r0, #8]
    2c40:	b2e1      	uxtb	r1, r4
    2c42:	685b      	ldr	r3, [r3, #4]
    2c44:	4798      	blx	r3
}
    2c46:	4620      	mov	r0, r4
    2c48:	bd38      	pop	{r3, r4, r5, pc}
    2c4a:	bf00      	nop
    2c4c:	20000ba0 	.word	0x20000ba0

00002c50 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2c50:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2c52:	6905      	ldr	r5, [r0, #16]
{
    2c54:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2c56:	460c      	mov	r4, r1
    2c58:	b961      	cbnz	r1, 2c74 <gpio_nrfx_manage_callback+0x24>
    2c5a:	4922      	ldr	r1, [pc, #136]	; (2ce4 <gpio_nrfx_manage_callback+0x94>)
    2c5c:	4a22      	ldr	r2, [pc, #136]	; (2ce8 <gpio_nrfx_manage_callback+0x98>)
    2c5e:	4823      	ldr	r0, [pc, #140]	; (2cec <gpio_nrfx_manage_callback+0x9c>)
    2c60:	2324      	movs	r3, #36	; 0x24
    2c62:	f005 fac4 	bl	81ee <printk>
    2c66:	4822      	ldr	r0, [pc, #136]	; (2cf0 <gpio_nrfx_manage_callback+0xa0>)
    2c68:	f005 fac1 	bl	81ee <printk>
    2c6c:	481e      	ldr	r0, [pc, #120]	; (2ce8 <gpio_nrfx_manage_callback+0x98>)
    2c6e:	2124      	movs	r1, #36	; 0x24
    2c70:	f005 f9e6 	bl	8040 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2c74:	6863      	ldr	r3, [r4, #4]
    2c76:	b963      	cbnz	r3, 2c92 <gpio_nrfx_manage_callback+0x42>
    2c78:	491e      	ldr	r1, [pc, #120]	; (2cf4 <gpio_nrfx_manage_callback+0xa4>)
    2c7a:	4a1b      	ldr	r2, [pc, #108]	; (2ce8 <gpio_nrfx_manage_callback+0x98>)
    2c7c:	481b      	ldr	r0, [pc, #108]	; (2cec <gpio_nrfx_manage_callback+0x9c>)
    2c7e:	2325      	movs	r3, #37	; 0x25
    2c80:	f005 fab5 	bl	81ee <printk>
    2c84:	481c      	ldr	r0, [pc, #112]	; (2cf8 <gpio_nrfx_manage_callback+0xa8>)
    2c86:	f005 fab2 	bl	81ee <printk>
    2c8a:	4817      	ldr	r0, [pc, #92]	; (2ce8 <gpio_nrfx_manage_callback+0x98>)
    2c8c:	2125      	movs	r1, #37	; 0x25
    2c8e:	f005 f9d7 	bl	8040 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2c92:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2c94:	b15b      	cbz	r3, 2cae <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2c96:	2200      	movs	r2, #0
    2c98:	429c      	cmp	r4, r3
    2c9a:	d113      	bne.n	2cc4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2c9c:	6823      	ldr	r3, [r4, #0]
    2c9e:	b95a      	cbnz	r2, 2cb8 <gpio_nrfx_manage_callback+0x68>
    2ca0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2ca2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2ca4:	4294      	cmp	r4, r2
    2ca6:	d100      	bne.n	2caa <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2ca8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2caa:	2300      	movs	r3, #0
    2cac:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2cae:	b976      	cbnz	r6, 2cce <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2cb0:	2000      	movs	r0, #0
				     callback, set);
}
    2cb2:	bd70      	pop	{r4, r5, r6, pc}
    2cb4:	460b      	mov	r3, r1
    2cb6:	e7ef      	b.n	2c98 <gpio_nrfx_manage_callback+0x48>
    2cb8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2cba:	68ab      	ldr	r3, [r5, #8]
    2cbc:	429c      	cmp	r4, r3
	list->tail = node;
    2cbe:	bf08      	it	eq
    2cc0:	60aa      	streq	r2, [r5, #8]
}
    2cc2:	e7f2      	b.n	2caa <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2cc4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2cc6:	461a      	mov	r2, r3
    2cc8:	2900      	cmp	r1, #0
    2cca:	d1f3      	bne.n	2cb4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2ccc:	b13e      	cbz	r6, 2cde <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2cce:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2cd0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2cd2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2cd4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d1ea      	bne.n	2cb0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    2cda:	60ac      	str	r4, [r5, #8]
}
    2cdc:	e7e9      	b.n	2cb2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2cde:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2ce2:	e7e6      	b.n	2cb2 <gpio_nrfx_manage_callback+0x62>
    2ce4:	00009696 	.word	0x00009696
    2ce8:	00009669 	.word	0x00009669
    2cec:	00009117 	.word	0x00009117
    2cf0:	0000969f 	.word	0x0000969f
    2cf4:	000096ae 	.word	0x000096ae
    2cf8:	000096c0 	.word	0x000096c0

00002cfc <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2cfc:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d02:	d003      	beq.n	2d0c <nrfx_gpio_handler+0x10>
    2d04:	2b01      	cmp	r3, #1
    2d06:	d036      	beq.n	2d76 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d0c:	4f1b      	ldr	r7, [pc, #108]	; (2d7c <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d0e:	693b      	ldr	r3, [r7, #16]
    2d10:	685c      	ldr	r4, [r3, #4]
    2d12:	2c00      	cmp	r4, #0
    2d14:	d0f8      	beq.n	2d08 <nrfx_gpio_handler+0xc>
    2d16:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    2d18:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2d88 <nrfx_gpio_handler+0x8c>
    2d1c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2d8c <nrfx_gpio_handler+0x90>
    2d20:	f8df a06c 	ldr.w	sl, [pc, #108]	; 2d90 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2d24:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2d28:	2601      	movs	r6, #1
    2d2a:	2d00      	cmp	r5, #0
    2d2c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2d30:	bf38      	it	cc
    2d32:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2d34:	68a3      	ldr	r3, [r4, #8]
    2d36:	421e      	tst	r6, r3
    2d38:	d014      	beq.n	2d64 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    2d3a:	6863      	ldr	r3, [r4, #4]
    2d3c:	b963      	cbnz	r3, 2d58 <nrfx_gpio_handler+0x5c>
    2d3e:	4649      	mov	r1, r9
    2d40:	2345      	movs	r3, #69	; 0x45
    2d42:	4642      	mov	r2, r8
    2d44:	4650      	mov	r0, sl
    2d46:	f005 fa52 	bl	81ee <printk>
    2d4a:	480d      	ldr	r0, [pc, #52]	; (2d80 <nrfx_gpio_handler+0x84>)
    2d4c:	f005 fa4f 	bl	81ee <printk>
    2d50:	2145      	movs	r1, #69	; 0x45
    2d52:	4640      	mov	r0, r8
    2d54:	f005 f974 	bl	8040 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2d58:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2d5c:	4621      	mov	r1, r4
    2d5e:	4032      	ands	r2, r6
    2d60:	4638      	mov	r0, r7
    2d62:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d64:	2d00      	cmp	r5, #0
    2d66:	d0cf      	beq.n	2d08 <nrfx_gpio_handler+0xc>
    2d68:	682b      	ldr	r3, [r5, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	bf38      	it	cc
    2d6e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2d70:	462c      	mov	r4, r5
    2d72:	461d      	mov	r5, r3
    2d74:	e7de      	b.n	2d34 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d76:	4f03      	ldr	r7, [pc, #12]	; (2d84 <nrfx_gpio_handler+0x88>)
    2d78:	e7c9      	b.n	2d0e <nrfx_gpio_handler+0x12>
    2d7a:	bf00      	nop
    2d7c:	00008a0c 	.word	0x00008a0c
    2d80:	000096c0 	.word	0x000096c0
    2d84:	00008a24 	.word	0x00008a24
    2d88:	00009669 	.word	0x00009669
    2d8c:	000096d7 	.word	0x000096d7
    2d90:	00009117 	.word	0x00009117

00002d94 <gpio_nrfx_pin_interrupt_configure>:
{
    2d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2d96:	6840      	ldr	r0, [r0, #4]
    2d98:	7b05      	ldrb	r5, [r0, #12]
    2d9a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2d9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2da2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2da6:	f04f 0500 	mov.w	r5, #0
    2daa:	d104      	bne.n	2db6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2dac:	4620      	mov	r0, r4
    2dae:	f001 fa97 	bl	42e0 <nrfx_gpiote_trigger_disable>
	return 0;
    2db2:	2000      	movs	r0, #0
    2db4:	e054      	b.n	2e60 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2db6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2dba:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2dbe:	d151      	bne.n	2e64 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2dc4:	bf0c      	ite	eq
    2dc6:	2304      	moveq	r3, #4
    2dc8:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2dca:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2dce:	6883      	ldr	r3, [r0, #8]
    2dd0:	fa23 f101 	lsr.w	r1, r3, r1
    2dd4:	f011 0101 	ands.w	r1, r1, #1
    2dd8:	d155      	bne.n	2e86 <gpio_nrfx_pin_interrupt_configure+0xf2>
    2dda:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2dde:	d152      	bne.n	2e86 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    2de0:	0966      	lsrs	r6, r4, #5
    2de2:	d04a      	beq.n	2e7a <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    2de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2de8:	2e01      	cmp	r6, #1
    2dea:	bf08      	it	eq
    2dec:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    2dee:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2df2:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2df4:	07ca      	lsls	r2, r1, #31
    2df6:	d40b      	bmi.n	2e10 <gpio_nrfx_pin_interrupt_configure+0x7c>
    2df8:	492b      	ldr	r1, [pc, #172]	; (2ea8 <gpio_nrfx_pin_interrupt_configure+0x114>)
    2dfa:	482c      	ldr	r0, [pc, #176]	; (2eac <gpio_nrfx_pin_interrupt_configure+0x118>)
    2dfc:	4a2c      	ldr	r2, [pc, #176]	; (2eb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2dfe:	f240 2329 	movw	r3, #553	; 0x229
    2e02:	f005 f9f4 	bl	81ee <printk>
    2e06:	482a      	ldr	r0, [pc, #168]	; (2eb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2e08:	f240 2129 	movw	r1, #553	; 0x229
    2e0c:	f005 f918 	bl	8040 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e10:	b16e      	cbz	r6, 2e2e <gpio_nrfx_pin_interrupt_configure+0x9a>
    2e12:	2e01      	cmp	r6, #1
    2e14:	d034      	beq.n	2e80 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    2e16:	4927      	ldr	r1, [pc, #156]	; (2eb4 <gpio_nrfx_pin_interrupt_configure+0x120>)
    2e18:	4824      	ldr	r0, [pc, #144]	; (2eac <gpio_nrfx_pin_interrupt_configure+0x118>)
    2e1a:	4a25      	ldr	r2, [pc, #148]	; (2eb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2e1c:	f240 232e 	movw	r3, #558	; 0x22e
    2e20:	f005 f9e5 	bl	81ee <printk>
    2e24:	4822      	ldr	r0, [pc, #136]	; (2eb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2e26:	f240 212e 	movw	r1, #558	; 0x22e
    2e2a:	f005 f909 	bl	8040 <assert_post_action>
        case 0: return NRF_P0;
    2e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2e32:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    2e36:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2e3a:	07db      	lsls	r3, r3, #31
    2e3c:	d423      	bmi.n	2e86 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2e3e:	f10d 0507 	add.w	r5, sp, #7
    2e42:	4629      	mov	r1, r5
    2e44:	4620      	mov	r0, r4
    2e46:	f001 f975 	bl	4134 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2e4a:	4b1b      	ldr	r3, [pc, #108]	; (2eb8 <gpio_nrfx_pin_interrupt_configure+0x124>)
    2e4c:	4298      	cmp	r0, r3
    2e4e:	d119      	bne.n	2e84 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    2e50:	4628      	mov	r0, r5
    2e52:	f001 f9cf 	bl	41f4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2e56:	4b19      	ldr	r3, [pc, #100]	; (2ebc <gpio_nrfx_pin_interrupt_configure+0x128>)
    2e58:	4298      	cmp	r0, r3
    2e5a:	d013      	beq.n	2e84 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    2e5c:	f06f 000b 	mvn.w	r0, #11
}
    2e60:	b004      	add	sp, #16
    2e62:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2e64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2e68:	d005      	beq.n	2e76 <gpio_nrfx_pin_interrupt_configure+0xe2>
    2e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2e6e:	bf0c      	ite	eq
    2e70:	2302      	moveq	r3, #2
    2e72:	2301      	movne	r3, #1
    2e74:	e7a9      	b.n	2dca <gpio_nrfx_pin_interrupt_configure+0x36>
    2e76:	2303      	movs	r3, #3
    2e78:	e7a7      	b.n	2dca <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    2e7a:	f04f 31ff 	mov.w	r1, #4294967295
    2e7e:	e7b6      	b.n	2dee <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e80:	4b0f      	ldr	r3, [pc, #60]	; (2ec0 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    2e82:	e7d6      	b.n	2e32 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    2e84:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e86:	2300      	movs	r3, #0
    2e88:	4619      	mov	r1, r3
    2e8a:	aa02      	add	r2, sp, #8
    2e8c:	4620      	mov	r0, r4
    2e8e:	f001 f833 	bl	3ef8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e92:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <gpio_nrfx_pin_interrupt_configure+0x128>)
    2e94:	4298      	cmp	r0, r3
    2e96:	d104      	bne.n	2ea2 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2e98:	2101      	movs	r1, #1
    2e9a:	4620      	mov	r0, r4
    2e9c:	f001 f9b0 	bl	4200 <nrfx_gpiote_trigger_enable>
    2ea0:	e787      	b.n	2db2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2ea2:	f06f 0004 	mvn.w	r0, #4
    2ea6:	e7db      	b.n	2e60 <gpio_nrfx_pin_interrupt_configure+0xcc>
    2ea8:	00009716 	.word	0x00009716
    2eac:	00009117 	.word	0x00009117
    2eb0:	000096e3 	.word	0x000096e3
    2eb4:	000098f6 	.word	0x000098f6
    2eb8:	0bad0004 	.word	0x0bad0004
    2ebc:	0bad0000 	.word	0x0bad0000
    2ec0:	50000300 	.word	0x50000300

00002ec4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2ec4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2ec6:	f001 f985 	bl	41d4 <nrfx_gpiote_is_init>
    2eca:	4604      	mov	r4, r0
    2ecc:	b968      	cbnz	r0, 2eea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2ece:	f001 f959 	bl	4184 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2ed2:	4b08      	ldr	r3, [pc, #32]	; (2ef4 <gpio_nrfx_init+0x30>)
    2ed4:	4298      	cmp	r0, r3
    2ed6:	d10a      	bne.n	2eee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2ed8:	4807      	ldr	r0, [pc, #28]	; (2ef8 <gpio_nrfx_init+0x34>)
    2eda:	4621      	mov	r1, r4
    2edc:	f001 f924 	bl	4128 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2ee0:	4622      	mov	r2, r4
    2ee2:	2105      	movs	r1, #5
    2ee4:	2006      	movs	r0, #6
    2ee6:	f7fe fe07 	bl	1af8 <z_arm_irq_priority_set>
		return 0;
    2eea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2eec:	bd10      	pop	{r4, pc}
		return -EIO;
    2eee:	f06f 0004 	mvn.w	r0, #4
    2ef2:	e7fb      	b.n	2eec <gpio_nrfx_init+0x28>
    2ef4:	0bad0000 	.word	0x0bad0000
    2ef8:	00002cfd 	.word	0x00002cfd

00002efc <gpio_nrfx_pin_configure>:
{
    2efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2f00:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2f02:	7b3b      	ldrb	r3, [r7, #12]
    2f04:	f001 051f 	and.w	r5, r1, #31
{
    2f08:	b085      	sub	sp, #20
    2f0a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2f0c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2f10:	4614      	mov	r4, r2
    2f12:	b9ca      	cbnz	r2, 2f48 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2f14:	a902      	add	r1, sp, #8
    2f16:	4628      	mov	r0, r5
    2f18:	f001 f90c 	bl	4134 <nrfx_gpiote_channel_get>
    2f1c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2f1e:	4628      	mov	r0, r5
    2f20:	f001 fa00 	bl	4324 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2f24:	4b48      	ldr	r3, [pc, #288]	; (3048 <gpio_nrfx_pin_configure+0x14c>)
    2f26:	4298      	cmp	r0, r3
    2f28:	d004      	beq.n	2f34 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2f2a:	f06f 0004 	mvn.w	r0, #4
}
    2f2e:	b005      	add	sp, #20
    2f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2f34:	4284      	cmp	r4, r0
    2f36:	d105      	bne.n	2f44 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2f38:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f3c:	f001 f954 	bl	41e8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2f40:	42a0      	cmp	r0, r4
    2f42:	d1f2      	bne.n	2f2a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f44:	2000      	movs	r0, #0
    2f46:	e7f2      	b.n	2f2e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f48:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2f4c:	f10d 0103 	add.w	r1, sp, #3
    2f50:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2f52:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2f56:	f001 f8ed 	bl	4134 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2f5a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2f5c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2f5e:	aa02      	add	r2, sp, #8
    2f60:	4649      	mov	r1, r9
    2f62:	4628      	mov	r0, r5
    2f64:	f000 ffc8 	bl	3ef8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2f68:	4b37      	ldr	r3, [pc, #220]	; (3048 <gpio_nrfx_pin_configure+0x14c>)
    2f6a:	4298      	cmp	r0, r3
    2f6c:	d002      	beq.n	2f74 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2f6e:	f06f 0015 	mvn.w	r0, #21
    2f72:	e7dc      	b.n	2f2e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2f74:	4580      	cmp	r8, r0
    2f76:	d103      	bne.n	2f80 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2f78:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2f7c:	f001 f934 	bl	41e8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2f80:	05a3      	lsls	r3, r4, #22
    2f82:	d54e      	bpl.n	3022 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2f84:	4b31      	ldr	r3, [pc, #196]	; (304c <gpio_nrfx_pin_configure+0x150>)
    2f86:	4a32      	ldr	r2, [pc, #200]	; (3050 <gpio_nrfx_pin_configure+0x154>)
    2f88:	4023      	ands	r3, r4
    2f8a:	4293      	cmp	r3, r2
    2f8c:	d03a      	beq.n	3004 <gpio_nrfx_pin_configure+0x108>
    2f8e:	d80c      	bhi.n	2faa <gpio_nrfx_pin_configure+0xae>
    2f90:	2b06      	cmp	r3, #6
    2f92:	d014      	beq.n	2fbe <gpio_nrfx_pin_configure+0xc2>
    2f94:	d804      	bhi.n	2fa0 <gpio_nrfx_pin_configure+0xa4>
    2f96:	b193      	cbz	r3, 2fbe <gpio_nrfx_pin_configure+0xc2>
    2f98:	2b02      	cmp	r3, #2
    2f9a:	d1e8      	bne.n	2f6e <gpio_nrfx_pin_configure+0x72>
    2f9c:	2304      	movs	r3, #4
    2f9e:	e00e      	b.n	2fbe <gpio_nrfx_pin_configure+0xc2>
    2fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2fa4:	d1e3      	bne.n	2f6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2fa6:	2301      	movs	r3, #1
    2fa8:	e009      	b.n	2fbe <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2faa:	4a2a      	ldr	r2, [pc, #168]	; (3054 <gpio_nrfx_pin_configure+0x158>)
    2fac:	4293      	cmp	r3, r2
    2fae:	d02b      	beq.n	3008 <gpio_nrfx_pin_configure+0x10c>
    2fb0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2fb4:	d02a      	beq.n	300c <gpio_nrfx_pin_configure+0x110>
    2fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2fba:	d1d8      	bne.n	2f6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2fbc:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2fbe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2fc2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2fc6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2fca:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2fcc:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2fd0:	bf54      	ite	pl
    2fd2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2fd6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2fd8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2fda:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2fde:	d517      	bpl.n	3010 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	2101      	movs	r1, #1
    2fe4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2fe8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2fec:	2200      	movs	r2, #0
    2fee:	a901      	add	r1, sp, #4
    2ff0:	4628      	mov	r0, r5
    2ff2:	f001 f829 	bl	4048 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ff6:	4b14      	ldr	r3, [pc, #80]	; (3048 <gpio_nrfx_pin_configure+0x14c>)
    2ff8:	4298      	cmp	r0, r3
    2ffa:	bf14      	ite	ne
    2ffc:	f06f 0015 	mvnne.w	r0, #21
    3000:	2000      	moveq	r0, #0
    3002:	e794      	b.n	2f2e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3004:	2307      	movs	r3, #7
    3006:	e7da      	b.n	2fbe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3008:	2305      	movs	r3, #5
    300a:	e7d8      	b.n	2fbe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    300c:	2303      	movs	r3, #3
    300e:	e7d6      	b.n	2fbe <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3010:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3012:	bf41      	itttt	mi
    3014:	687b      	ldrmi	r3, [r7, #4]
    3016:	2101      	movmi	r1, #1
    3018:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    301c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3020:	e7e4      	b.n	2fec <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3022:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3024:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3028:	bf54      	ite	pl
    302a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    302e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3030:	461a      	mov	r2, r3
    3032:	a901      	add	r1, sp, #4
    3034:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3036:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    303a:	f000 ff5d 	bl	3ef8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    303e:	4b02      	ldr	r3, [pc, #8]	; (3048 <gpio_nrfx_pin_configure+0x14c>)
    3040:	4298      	cmp	r0, r3
    3042:	f43f af7f 	beq.w	2f44 <gpio_nrfx_pin_configure+0x48>
    3046:	e792      	b.n	2f6e <gpio_nrfx_pin_configure+0x72>
    3048:	0bad0000 	.word	0x0bad0000
    304c:	00f00006 	.word	0x00f00006
    3050:	00100006 	.word	0x00100006
    3054:	00400002 	.word	0x00400002

00003058 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3058:	4802      	ldr	r0, [pc, #8]	; (3064 <pwm_nrfx_get_cycles_per_sec+0xc>)
    305a:	2100      	movs	r1, #0
    305c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3060:	2000      	movs	r0, #0
    3062:	4770      	bx	lr
    3064:	00f42400 	.word	0x00f42400

00003068 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3068:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    306a:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    306c:	6912      	ldr	r2, [r2, #16]
{
    306e:	b538      	push	{r3, r4, r5, lr}
    3070:	f100 0308 	add.w	r3, r0, #8
    3074:	3204      	adds	r2, #4
    3076:	f100 040c 	add.w	r4, r0, #12
    307a:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    307c:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3080:	2d00      	cmp	r5, #0
    3082:	bfb4      	ite	lt
    3084:	2500      	movlt	r5, #0
    3086:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    308a:	42a3      	cmp	r3, r4

		data->current[i] = value;
    308c:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3090:	d1f4      	bne.n	307c <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3092:	2300      	movs	r3, #0
    3094:	461a      	mov	r2, r3
    3096:	f001 fb07 	bl	46a8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    309a:	4b03      	ldr	r3, [pc, #12]	; (30a8 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    309c:	4298      	cmp	r0, r3
	}

	return 0;
}
    309e:	bf14      	ite	ne
    30a0:	f06f 000f 	mvnne.w	r0, #15
    30a4:	2000      	moveq	r0, #0
    30a6:	bd38      	pop	{r3, r4, r5, pc}
    30a8:	0bad0000 	.word	0x0bad0000

000030ac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    30ac:	6802      	ldr	r2, [r0, #0]
    switch (port)
    30ae:	0953      	lsrs	r3, r2, #5
{
    30b0:	b510      	push	{r4, lr}
    30b2:	4604      	mov	r4, r0
    switch (port)
    30b4:	d02c      	beq.n	3110 <nrf_gpio_pin_port_decode+0x64>
    30b6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    30b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    30bc:	bf18      	it	ne
    30be:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    30c0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    30c4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    30c6:	07db      	lsls	r3, r3, #31
    30c8:	d40b      	bmi.n	30e2 <nrf_gpio_pin_port_decode+0x36>
    30ca:	4914      	ldr	r1, [pc, #80]	; (311c <nrf_gpio_pin_port_decode+0x70>)
    30cc:	4814      	ldr	r0, [pc, #80]	; (3120 <nrf_gpio_pin_port_decode+0x74>)
    30ce:	4a15      	ldr	r2, [pc, #84]	; (3124 <nrf_gpio_pin_port_decode+0x78>)
    30d0:	f240 2329 	movw	r3, #553	; 0x229
    30d4:	f005 f88b 	bl	81ee <printk>
    30d8:	4812      	ldr	r0, [pc, #72]	; (3124 <nrf_gpio_pin_port_decode+0x78>)
    30da:	f240 2129 	movw	r1, #553	; 0x229
    30de:	f004 ffaf 	bl	8040 <assert_post_action>
    uint32_t pin_number = *p_pin;
    30e2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    30e4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30e8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    30ea:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30ec:	d00d      	beq.n	310a <nrf_gpio_pin_port_decode+0x5e>
    30ee:	2b01      	cmp	r3, #1
    30f0:	d011      	beq.n	3116 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    30f2:	490d      	ldr	r1, [pc, #52]	; (3128 <nrf_gpio_pin_port_decode+0x7c>)
    30f4:	480a      	ldr	r0, [pc, #40]	; (3120 <nrf_gpio_pin_port_decode+0x74>)
    30f6:	4a0b      	ldr	r2, [pc, #44]	; (3124 <nrf_gpio_pin_port_decode+0x78>)
    30f8:	f240 232e 	movw	r3, #558	; 0x22e
    30fc:	f005 f877 	bl	81ee <printk>
    3100:	4808      	ldr	r0, [pc, #32]	; (3124 <nrf_gpio_pin_port_decode+0x78>)
    3102:	f240 212e 	movw	r1, #558	; 0x22e
    3106:	f004 ff9b 	bl	8040 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    310a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    310e:	bd10      	pop	{r4, pc}
    switch (port)
    3110:	f04f 33ff 	mov.w	r3, #4294967295
    3114:	e7d4      	b.n	30c0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3116:	4805      	ldr	r0, [pc, #20]	; (312c <nrf_gpio_pin_port_decode+0x80>)
    3118:	e7f9      	b.n	310e <nrf_gpio_pin_port_decode+0x62>
    311a:	bf00      	nop
    311c:	00009716 	.word	0x00009716
    3120:	00009117 	.word	0x00009117
    3124:	000096e3 	.word	0x000096e3
    3128:	000098f6 	.word	0x000098f6
    312c:	50000300 	.word	0x50000300

00003130 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3130:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3132:	794b      	ldrb	r3, [r1, #5]
    3134:	2b01      	cmp	r3, #1
    3136:	d026      	beq.n	3186 <uarte_nrfx_configure+0x56>
    3138:	2b03      	cmp	r3, #3
    313a:	d121      	bne.n	3180 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    313c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    313e:	798b      	ldrb	r3, [r1, #6]
    3140:	2b03      	cmp	r3, #3
    3142:	d11d      	bne.n	3180 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3144:	79cc      	ldrb	r4, [r1, #7]
    3146:	b10c      	cbz	r4, 314c <uarte_nrfx_configure+0x1c>
    3148:	2c01      	cmp	r4, #1
    314a:	d119      	bne.n	3180 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    314c:	790a      	ldrb	r2, [r1, #4]
    314e:	b112      	cbz	r2, 3156 <uarte_nrfx_configure+0x26>
    3150:	2a02      	cmp	r2, #2
    3152:	d115      	bne.n	3180 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3154:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3156:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3158:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    315a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    315e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3160:	d065      	beq.n	322e <uarte_nrfx_configure+0xfe>
    3162:	d82d      	bhi.n	31c0 <uarte_nrfx_configure+0x90>
    3164:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3168:	d064      	beq.n	3234 <uarte_nrfx_configure+0x104>
    316a:	d816      	bhi.n	319a <uarte_nrfx_configure+0x6a>
    316c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3170:	d062      	beq.n	3238 <uarte_nrfx_configure+0x108>
    3172:	d80a      	bhi.n	318a <uarte_nrfx_configure+0x5a>
    3174:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3178:	d061      	beq.n	323e <uarte_nrfx_configure+0x10e>
    317a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    317e:	d061      	beq.n	3244 <uarte_nrfx_configure+0x114>
    3180:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3184:	e052      	b.n	322c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3186:	2600      	movs	r6, #0
    3188:	e7d9      	b.n	313e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    318a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    318e:	d05c      	beq.n	324a <uarte_nrfx_configure+0x11a>
    3190:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3194:	d1f4      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3196:	4b37      	ldr	r3, [pc, #220]	; (3274 <uarte_nrfx_configure+0x144>)
    3198:	e03c      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    319a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    319e:	d057      	beq.n	3250 <uarte_nrfx_configure+0x120>
    31a0:	d807      	bhi.n	31b2 <uarte_nrfx_configure+0x82>
    31a2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    31a6:	d055      	beq.n	3254 <uarte_nrfx_configure+0x124>
    31a8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    31ac:	d1e8      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    31ae:	4b32      	ldr	r3, [pc, #200]	; (3278 <uarte_nrfx_configure+0x148>)
    31b0:	e030      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31b2:	f647 2712 	movw	r7, #31250	; 0x7a12
    31b6:	42bb      	cmp	r3, r7
    31b8:	d1e2      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    31ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    31be:	e029      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31c0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    31c4:	d048      	beq.n	3258 <uarte_nrfx_configure+0x128>
    31c6:	d813      	bhi.n	31f0 <uarte_nrfx_configure+0xc0>
    31c8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    31cc:	d047      	beq.n	325e <uarte_nrfx_configure+0x12e>
    31ce:	d809      	bhi.n	31e4 <uarte_nrfx_configure+0xb4>
    31d0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    31d4:	42bb      	cmp	r3, r7
    31d6:	d044      	beq.n	3262 <uarte_nrfx_configure+0x132>
    31d8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    31dc:	d1d0      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    31de:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    31e2:	e017      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31e4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    31e8:	d1ca      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    31ea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    31ee:	e011      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    31f0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    31f4:	d038      	beq.n	3268 <uarte_nrfx_configure+0x138>
    31f6:	d808      	bhi.n	320a <uarte_nrfx_configure+0xda>
    31f8:	4f20      	ldr	r7, [pc, #128]	; (327c <uarte_nrfx_configure+0x14c>)
    31fa:	42bb      	cmp	r3, r7
    31fc:	d037      	beq.n	326e <uarte_nrfx_configure+0x13e>
    31fe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3202:	d1bd      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3204:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3208:	e004      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    320a:	4f1d      	ldr	r7, [pc, #116]	; (3280 <uarte_nrfx_configure+0x150>)
    320c:	42bb      	cmp	r3, r7
    320e:	d1b7      	bne.n	3180 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3214:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3218:	6903      	ldr	r3, [r0, #16]
    321a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    321c:	4334      	orrs	r4, r6
    321e:	4322      	orrs	r2, r4
    3220:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3222:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3226:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    322a:	2000      	movs	r0, #0
}
    322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    322e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3232:	e7ef      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3234:	4b13      	ldr	r3, [pc, #76]	; (3284 <uarte_nrfx_configure+0x154>)
    3236:	e7ed      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3238:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    323c:	e7ea      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    323e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3242:	e7e7      	b.n	3214 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3244:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3248:	e7e4      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    324a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    324e:	e7e1      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3250:	4b0d      	ldr	r3, [pc, #52]	; (3288 <uarte_nrfx_configure+0x158>)
    3252:	e7df      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3254:	4b0d      	ldr	r3, [pc, #52]	; (328c <uarte_nrfx_configure+0x15c>)
    3256:	e7dd      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3258:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    325c:	e7da      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    325e:	4b0c      	ldr	r3, [pc, #48]	; (3290 <uarte_nrfx_configure+0x160>)
    3260:	e7d8      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3262:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3266:	e7d5      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3268:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    326c:	e7d2      	b.n	3214 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    326e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3272:	e7cf      	b.n	3214 <uarte_nrfx_configure+0xe4>
    3274:	0013b000 	.word	0x0013b000
    3278:	004ea000 	.word	0x004ea000
    327c:	0003d090 	.word	0x0003d090
    3280:	000f4240 	.word	0x000f4240
    3284:	00275000 	.word	0x00275000
    3288:	0075c000 	.word	0x0075c000
    328c:	003af000 	.word	0x003af000
    3290:	013a9000 	.word	0x013a9000

00003294 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3294:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3296:	0953      	lsrs	r3, r2, #5
{
    3298:	b510      	push	{r4, lr}
    329a:	4604      	mov	r4, r0
    switch (port)
    329c:	d02c      	beq.n	32f8 <nrf_gpio_pin_port_decode+0x64>
    329e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    32a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    32a4:	bf18      	it	ne
    32a6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    32a8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    32ac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32ae:	07db      	lsls	r3, r3, #31
    32b0:	d40b      	bmi.n	32ca <nrf_gpio_pin_port_decode+0x36>
    32b2:	4914      	ldr	r1, [pc, #80]	; (3304 <nrf_gpio_pin_port_decode+0x70>)
    32b4:	4814      	ldr	r0, [pc, #80]	; (3308 <nrf_gpio_pin_port_decode+0x74>)
    32b6:	4a15      	ldr	r2, [pc, #84]	; (330c <nrf_gpio_pin_port_decode+0x78>)
    32b8:	f240 2329 	movw	r3, #553	; 0x229
    32bc:	f004 ff97 	bl	81ee <printk>
    32c0:	4812      	ldr	r0, [pc, #72]	; (330c <nrf_gpio_pin_port_decode+0x78>)
    32c2:	f240 2129 	movw	r1, #553	; 0x229
    32c6:	f004 febb 	bl	8040 <assert_post_action>
    uint32_t pin_number = *p_pin;
    32ca:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    32cc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32d0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    32d2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32d4:	d00d      	beq.n	32f2 <nrf_gpio_pin_port_decode+0x5e>
    32d6:	2b01      	cmp	r3, #1
    32d8:	d011      	beq.n	32fe <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    32da:	490d      	ldr	r1, [pc, #52]	; (3310 <nrf_gpio_pin_port_decode+0x7c>)
    32dc:	480a      	ldr	r0, [pc, #40]	; (3308 <nrf_gpio_pin_port_decode+0x74>)
    32de:	4a0b      	ldr	r2, [pc, #44]	; (330c <nrf_gpio_pin_port_decode+0x78>)
    32e0:	f240 232e 	movw	r3, #558	; 0x22e
    32e4:	f004 ff83 	bl	81ee <printk>
    32e8:	4808      	ldr	r0, [pc, #32]	; (330c <nrf_gpio_pin_port_decode+0x78>)
    32ea:	f240 212e 	movw	r1, #558	; 0x22e
    32ee:	f004 fea7 	bl	8040 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    32f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    32f6:	bd10      	pop	{r4, pc}
    switch (port)
    32f8:	f04f 33ff 	mov.w	r3, #4294967295
    32fc:	e7d4      	b.n	32a8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    32fe:	4805      	ldr	r0, [pc, #20]	; (3314 <nrf_gpio_pin_port_decode+0x80>)
    3300:	e7f9      	b.n	32f6 <nrf_gpio_pin_port_decode+0x62>
    3302:	bf00      	nop
    3304:	00009716 	.word	0x00009716
    3308:	00009117 	.word	0x00009117
    330c:	000096e3 	.word	0x000096e3
    3310:	000098f6 	.word	0x000098f6
    3314:	50000300 	.word	0x50000300

00003318 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    331a:	6906      	ldr	r6, [r0, #16]
{
    331c:	4605      	mov	r5, r0
    331e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3320:	f005 faf0 	bl	8904 <k_is_in_isr>
    3324:	b910      	cbnz	r0, 332c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3326:	4b2c      	ldr	r3, [pc, #176]	; (33d8 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	b983      	cbnz	r3, 334e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    332c:	f04f 0320 	mov.w	r3, #32
    3330:	f3ef 8411 	mrs	r4, BASEPRI
    3334:	f383 8812 	msr	BASEPRI_MAX, r3
    3338:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    333c:	4628      	mov	r0, r5
    333e:	f005 f988 	bl	8652 <is_tx_ready>
    3342:	bb28      	cbnz	r0, 3390 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3344:	f384 8811 	msr	BASEPRI, r4
    3348:	f3bf 8f6f 	isb	sy
}
    334c:	e7ee      	b.n	332c <uarte_nrfx_poll_out+0x14>
{
    334e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3350:	4628      	mov	r0, r5
    3352:	f005 f97e 	bl	8652 <is_tx_ready>
    3356:	b970      	cbnz	r0, 3376 <uarte_nrfx_poll_out+0x5e>
    3358:	2001      	movs	r0, #1
    335a:	f005 f9cc 	bl	86f6 <nrfx_busy_wait>
    335e:	3c01      	subs	r4, #1
    3360:	d1f6      	bne.n	3350 <uarte_nrfx_poll_out+0x38>
    3362:	2100      	movs	r1, #0
    3364:	2021      	movs	r0, #33	; 0x21
    3366:	f003 fa21 	bl	67ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    336a:	e7f0      	b.n	334e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    336c:	f384 8811 	msr	BASEPRI, r4
    3370:	f3bf 8f6f 	isb	sy
}
    3374:	e7f5      	b.n	3362 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3376:	f04f 0320 	mov.w	r3, #32
    337a:	f3ef 8411 	mrs	r4, BASEPRI
    337e:	f383 8812 	msr	BASEPRI_MAX, r3
    3382:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3386:	4628      	mov	r0, r5
    3388:	f005 f963 	bl	8652 <is_tx_ready>
    338c:	2800      	cmp	r0, #0
    338e:	d0ed      	beq.n	336c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3390:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3394:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3396:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3398:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    339a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    339e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33a2:	2200      	movs	r2, #0
    33a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    33a8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    33ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    33b0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    33b4:	684a      	ldr	r2, [r1, #4]
    33b6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    33b8:	bf41      	itttt	mi
    33ba:	2208      	movmi	r2, #8
    33bc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    33c0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    33c4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33c8:	2201      	movs	r2, #1
    33ca:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    33cc:	f384 8811 	msr	BASEPRI, r4
    33d0:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    33d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33d6:	bf00      	nop
    33d8:	20000c63 	.word	0x20000c63

000033dc <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    33dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    33e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    33e4:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    33e6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    33ea:	2300      	movs	r3, #0
    33ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    33f0:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    33f2:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    33f4:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    33f6:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    33f8:	1c58      	adds	r0, r3, #1
    33fa:	d013      	beq.n	3424 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    33fc:	a801      	add	r0, sp, #4
    33fe:	9301      	str	r3, [sp, #4]
    3400:	f7ff ff48 	bl	3294 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3404:	9a01      	ldr	r2, [sp, #4]
    3406:	2301      	movs	r3, #1
    3408:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    340a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    340e:	68eb      	ldr	r3, [r5, #12]
    3410:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3412:	a801      	add	r0, sp, #4
    3414:	f7ff ff3e 	bl	3294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3418:	9b01      	ldr	r3, [sp, #4]
    341a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    341e:	2203      	movs	r2, #3
    3420:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3424:	692b      	ldr	r3, [r5, #16]
    3426:	1c59      	adds	r1, r3, #1
    3428:	d011      	beq.n	344e <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    342a:	7f2a      	ldrb	r2, [r5, #28]
    342c:	9301      	str	r3, [sp, #4]
    342e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3430:	a801      	add	r0, sp, #4
    3432:	bf14      	ite	ne
    3434:	f04f 0903 	movne.w	r9, #3
    3438:	f04f 0900 	moveq.w	r9, #0
    343c:	f7ff ff2a 	bl	3294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3440:	9b01      	ldr	r3, [sp, #4]
    3442:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3446:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    344a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    344e:	696b      	ldr	r3, [r5, #20]
    3450:	1c5a      	adds	r2, r3, #1
    3452:	d013      	beq.n	347c <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3454:	a801      	add	r0, sp, #4
    3456:	9301      	str	r3, [sp, #4]
    3458:	f7ff ff1c 	bl	3294 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    345c:	9a01      	ldr	r2, [sp, #4]
    345e:	2301      	movs	r3, #1
    3460:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3462:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3466:	696b      	ldr	r3, [r5, #20]
    3468:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    346a:	a801      	add	r0, sp, #4
    346c:	f7ff ff12 	bl	3294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3476:	2203      	movs	r2, #3
    3478:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    347c:	69ab      	ldr	r3, [r5, #24]
    347e:	1c58      	adds	r0, r3, #1
    3480:	d011      	beq.n	34a6 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3482:	7f6a      	ldrb	r2, [r5, #29]
    3484:	9301      	str	r3, [sp, #4]
    3486:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3488:	a801      	add	r0, sp, #4
    348a:	bf14      	ite	ne
    348c:	f04f 0903 	movne.w	r9, #3
    3490:	f04f 0900 	moveq.w	r9, #0
    3494:	f7ff fefe 	bl	3294 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3498:	9b01      	ldr	r3, [sp, #4]
    349a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    349e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    34a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    34a6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    34aa:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    34ac:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    34b0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    34b4:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    34b8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    34bc:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    34be:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    34c2:	3104      	adds	r1, #4
    34c4:	4630      	mov	r0, r6
    34c6:	f7ff fe33 	bl	3130 <uarte_nrfx_configure>
	if (err) {
    34ca:	4605      	mov	r5, r0
    34cc:	2800      	cmp	r0, #0
    34ce:	d146      	bne.n	355e <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    34d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    34d4:	0799      	lsls	r1, r3, #30
    34d6:	d519      	bpl.n	350c <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    34d8:	f107 0012 	add.w	r0, r7, #18
    34dc:	f001 f820 	bl	4520 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    34e0:	4b22      	ldr	r3, [pc, #136]	; (356c <uarte_instance_init.isra.0+0x190>)
    34e2:	4298      	cmp	r0, r3
    34e4:	d13f      	bne.n	3566 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    34e6:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    34e8:	00c3      	lsls	r3, r0, #3
    34ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    34ee:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    34f2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    34f6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    34fa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    34fe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3502:	4a1b      	ldr	r2, [pc, #108]	; (3570 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3504:	2301      	movs	r3, #1
    3506:	4083      	lsls	r3, r0
    3508:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    350c:	2308      	movs	r3, #8
    350e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3512:	f898 3008 	ldrb.w	r3, [r8, #8]
    3516:	b95b      	cbnz	r3, 3530 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3518:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    351c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3520:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3524:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3528:	2301      	movs	r3, #1
    352a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    352e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3530:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3534:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3536:	bf5c      	itt	pl
    3538:	f44f 7280 	movpl.w	r2, #256	; 0x100
    353c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3540:	06db      	lsls	r3, r3, #27
    3542:	bf44      	itt	mi
    3544:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3548:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    354c:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    354e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3550:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3554:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3558:	2301      	movs	r3, #1
    355a:	60a3      	str	r3, [r4, #8]
    355c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    355e:	4628      	mov	r0, r5
    3560:	b003      	add	sp, #12
    3562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3566:	f06f 0504 	mvn.w	r5, #4
    356a:	e7f8      	b.n	355e <uarte_instance_init.isra.0+0x182>
    356c:	0bad0000 	.word	0x0bad0000
    3570:	4001f000 	.word	0x4001f000

00003574 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3574:	4919      	ldr	r1, [pc, #100]	; (35dc <sys_clock_timeout_handler+0x68>)
{
    3576:	b570      	push	{r4, r5, r6, lr}
    3578:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    357a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    357e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3580:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3584:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3588:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    358a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    358e:	f04f 0500 	mov.w	r5, #0
    3592:	d20a      	bcs.n	35aa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3594:	4b12      	ldr	r3, [pc, #72]	; (35e0 <sys_clock_timeout_handler+0x6c>)
    3596:	6819      	ldr	r1, [r3, #0]
    3598:	060a      	lsls	r2, r1, #24
    359a:	0a0b      	lsrs	r3, r1, #8
    359c:	1992      	adds	r2, r2, r6
    359e:	4911      	ldr	r1, [pc, #68]	; (35e4 <sys_clock_timeout_handler+0x70>)
    35a0:	f143 0300 	adc.w	r3, r3, #0
    35a4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    35a8:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    35aa:	f003 fec5 	bl	7338 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    35ae:	00a3      	lsls	r3, r4, #2
    35b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    35b4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    35b8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    35bc:	42b2      	cmp	r2, r6
    35be:	d10b      	bne.n	35d8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    35c0:	b91d      	cbnz	r5, 35ca <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    35c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    35c6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    35ca:	4b07      	ldr	r3, [pc, #28]	; (35e8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    35d0:	fa00 f404 	lsl.w	r4, r0, r4
    35d4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    35d8:	bd70      	pop	{r4, r5, r6, pc}
    35da:	bf00      	nop
    35dc:	200003f0 	.word	0x200003f0
    35e0:	20000bd4 	.word	0x20000bd4
    35e4:	200003d8 	.word	0x200003d8
    35e8:	40011000 	.word	0x40011000

000035ec <compare_int_lock>:
{
    35ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    35ee:	2301      	movs	r3, #1
    35f0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    35f2:	4a11      	ldr	r2, [pc, #68]	; (3638 <compare_int_lock+0x4c>)
    35f4:	f3bf 8f5b 	dmb	ish
    35f8:	43dc      	mvns	r4, r3
    35fa:	e852 1f00 	ldrex	r1, [r2]
    35fe:	ea01 0c04 	and.w	ip, r1, r4
    3602:	e842 ce00 	strex	lr, ip, [r2]
    3606:	f1be 0f00 	cmp.w	lr, #0
    360a:	d1f6      	bne.n	35fa <compare_int_lock+0xe>
    360c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3610:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3614:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3618:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    361c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3620:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3624:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3628:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    362c:	420b      	tst	r3, r1
}
    362e:	bf14      	ite	ne
    3630:	2001      	movne	r0, #1
    3632:	2000      	moveq	r0, #0
    3634:	bd10      	pop	{r4, pc}
    3636:	bf00      	nop
    3638:	20000bd0 	.word	0x20000bd0

0000363c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    363c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    363e:	4a12      	ldr	r2, [pc, #72]	; (3688 <compare_int_unlock.part.0+0x4c>)
    3640:	f3bf 8f5b 	dmb	ish
    3644:	4083      	lsls	r3, r0
    3646:	e852 1f00 	ldrex	r1, [r2]
    364a:	4319      	orrs	r1, r3
    364c:	e842 1c00 	strex	ip, r1, [r2]
    3650:	f1bc 0f00 	cmp.w	ip, #0
    3654:	d1f7      	bne.n	3646 <compare_int_unlock.part.0+0xa>
    3656:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    365a:	4a0c      	ldr	r2, [pc, #48]	; (368c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    365c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3660:	4083      	lsls	r3, r0
    3662:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3666:	4b0a      	ldr	r3, [pc, #40]	; (3690 <compare_int_unlock.part.0+0x54>)
    3668:	f3bf 8f5b 	dmb	ish
    366c:	681b      	ldr	r3, [r3, #0]
    366e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3672:	fa23 f000 	lsr.w	r0, r3, r0
    3676:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3678:	bf42      	ittt	mi
    367a:	4b06      	ldrmi	r3, [pc, #24]	; (3694 <compare_int_unlock.part.0+0x58>)
    367c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3680:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3684:	4770      	bx	lr
    3686:	bf00      	nop
    3688:	20000bd0 	.word	0x20000bd0
    368c:	40011000 	.word	0x40011000
    3690:	20000bcc 	.word	0x20000bcc
    3694:	e000e100 	.word	0xe000e100

00003698 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3698:	4b0d      	ldr	r3, [pc, #52]	; (36d0 <z_nrf_rtc_timer_read+0x38>)
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	0a19      	lsrs	r1, r3, #8
    369e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    36a0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    36a4:	4b0b      	ldr	r3, [pc, #44]	; (36d4 <z_nrf_rtc_timer_read+0x3c>)
    36a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    36aa:	18c0      	adds	r0, r0, r3
    36ac:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    36b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    36b4:	d20a      	bcs.n	36cc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    36b6:	4b08      	ldr	r3, [pc, #32]	; (36d8 <z_nrf_rtc_timer_read+0x40>)
    36b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    36bc:	4299      	cmp	r1, r3
    36be:	bf08      	it	eq
    36c0:	4290      	cmpeq	r0, r2
    36c2:	d203      	bcs.n	36cc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    36c4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    36c8:	f141 0100 	adc.w	r1, r1, #0
}
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop
    36d0:	20000bd4 	.word	0x20000bd4
    36d4:	40011000 	.word	0x40011000
    36d8:	200003d8 	.word	0x200003d8

000036dc <compare_set>:
{
    36dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36e0:	b085      	sub	sp, #20
    36e2:	4616      	mov	r6, r2
    36e4:	461f      	mov	r7, r3
    36e6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    36e8:	f7ff ff80 	bl	35ec <compare_int_lock>
    36ec:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    36ee:	f7ff ffd3 	bl	3698 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    36f2:	42b9      	cmp	r1, r7
    36f4:	bf08      	it	eq
    36f6:	42b0      	cmpeq	r0, r6
    36f8:	d27f      	bcs.n	37fa <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    36fa:	ebb6 0800 	subs.w	r8, r6, r0
    36fe:	eb67 0901 	sbc.w	r9, r7, r1
    3702:	2300      	movs	r3, #0
    3704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3708:	454b      	cmp	r3, r9
    370a:	bf08      	it	eq
    370c:	4542      	cmpeq	r2, r8
    370e:	f0c0 8085 	bcc.w	381c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3712:	4b44      	ldr	r3, [pc, #272]	; (3824 <compare_set+0x148>)
    3714:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3718:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    371c:	429f      	cmp	r7, r3
    371e:	bf08      	it	eq
    3720:	4296      	cmpeq	r6, r2
    3722:	d054      	beq.n	37ce <compare_set+0xf2>
    3724:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3728:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    372c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3730:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3734:	fa0b f205 	lsl.w	r2, fp, r5
    3738:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    373c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3740:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3744:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3746:	4a38      	ldr	r2, [pc, #224]	; (3828 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3748:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    374c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3750:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3754:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3758:	461c      	mov	r4, r3
    375a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    375c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3760:	eba0 000a 	sub.w	r0, r0, sl
    3764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3768:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    376c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    376e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3772:	d105      	bne.n	3780 <compare_set+0xa4>
    3774:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3776:	2013      	movs	r0, #19
    3778:	f005 f8d5 	bl	8926 <z_impl_k_busy_wait>
    377c:	4a2a      	ldr	r2, [pc, #168]	; (3828 <compare_set+0x14c>)
    377e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3780:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3782:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3786:	eba4 000c 	sub.w	r0, r4, ip
    378a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    378e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3792:	bf88      	it	hi
    3794:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3796:	2000      	movs	r0, #0
    3798:	f8c8 0000 	str.w	r0, [r8]
    379c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    37a0:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    37a4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    37a8:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    37ac:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    37b0:	4582      	cmp	sl, r0
    37b2:	d006      	beq.n	37c2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    37b4:	1a20      	subs	r0, r4, r0
    37b6:	3802      	subs	r0, #2
    37b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    37bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    37c0:	d819      	bhi.n	37f6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    37c2:	1ae4      	subs	r4, r4, r3
    37c4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    37c8:	1932      	adds	r2, r6, r4
    37ca:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    37ce:	4c15      	ldr	r4, [pc, #84]	; (3824 <compare_set+0x148>)
    37d0:	0129      	lsls	r1, r5, #4
    37d2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    37d6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    37da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    37dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    37de:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    37e0:	6043      	str	r3, [r0, #4]
	return ret;
    37e2:	2400      	movs	r4, #0
	if (key) {
    37e4:	9b01      	ldr	r3, [sp, #4]
    37e6:	b113      	cbz	r3, 37ee <compare_set+0x112>
    37e8:	4628      	mov	r0, r5
    37ea:	f7ff ff27 	bl	363c <compare_int_unlock.part.0>
}
    37ee:	4620      	mov	r0, r4
    37f0:	b005      	add	sp, #20
    37f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37f6:	4620      	mov	r0, r4
    37f8:	e7b0      	b.n	375c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    37fa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    37fc:	4a0b      	ldr	r2, [pc, #44]	; (382c <compare_set+0x150>)
    37fe:	f3bf 8f5b 	dmb	ish
    3802:	40ab      	lsls	r3, r5
    3804:	e852 1f00 	ldrex	r1, [r2]
    3808:	4319      	orrs	r1, r3
    380a:	e842 1000 	strex	r0, r1, [r2]
    380e:	2800      	cmp	r0, #0
    3810:	d1f8      	bne.n	3804 <compare_set+0x128>
    3812:	f3bf 8f5b 	dmb	ish
    3816:	4632      	mov	r2, r6
    3818:	463b      	mov	r3, r7
    381a:	e7d8      	b.n	37ce <compare_set+0xf2>
			return -EINVAL;
    381c:	f06f 0415 	mvn.w	r4, #21
    3820:	e7e0      	b.n	37e4 <compare_set+0x108>
    3822:	bf00      	nop
    3824:	200003e0 	.word	0x200003e0
    3828:	40011000 	.word	0x40011000
    382c:	20000bcc 	.word	0x20000bcc

00003830 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3830:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3832:	4b19      	ldr	r3, [pc, #100]	; (3898 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3834:	4d19      	ldr	r5, [pc, #100]	; (389c <sys_clock_driver_init+0x6c>)
    3836:	2400      	movs	r4, #0
    3838:	f04f 30ff 	mov.w	r0, #4294967295
    383c:	f04f 31ff 	mov.w	r1, #4294967295
    3840:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3844:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    384c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3850:	4b13      	ldr	r3, [pc, #76]	; (38a0 <sys_clock_driver_init+0x70>)
    3852:	2602      	movs	r6, #2
    3854:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3858:	2101      	movs	r1, #1
    385a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    385e:	2011      	movs	r0, #17
    3860:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3864:	4622      	mov	r2, r4
    3866:	f7fe f947 	bl	1af8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    386a:	2011      	movs	r0, #17
    386c:	f7fe f926 	bl	1abc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3870:	4a0c      	ldr	r2, [pc, #48]	; (38a4 <sys_clock_driver_init+0x74>)
    3872:	2301      	movs	r3, #1
    3874:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3876:	4a0c      	ldr	r2, [pc, #48]	; (38a8 <sys_clock_driver_init+0x78>)
    3878:	602b      	str	r3, [r5, #0]
    387a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    387c:	4b0b      	ldr	r3, [pc, #44]	; (38ac <sys_clock_driver_init+0x7c>)
    387e:	4a0c      	ldr	r2, [pc, #48]	; (38b0 <sys_clock_driver_init+0x80>)
    3880:	9300      	str	r3, [sp, #0]
    3882:	9401      	str	r4, [sp, #4]
    3884:	2300      	movs	r3, #0
    3886:	4620      	mov	r0, r4
    3888:	f7ff ff28 	bl	36dc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    388c:	4630      	mov	r0, r6
    388e:	f7ff f907 	bl	2aa0 <z_nrf_clock_control_lf_on>

	return 0;
}
    3892:	4620      	mov	r0, r4
    3894:	b002      	add	sp, #8
    3896:	bd70      	pop	{r4, r5, r6, pc}
    3898:	200003e0 	.word	0x200003e0
    389c:	40011000 	.word	0x40011000
    38a0:	e000e100 	.word	0xe000e100
    38a4:	40011008 	.word	0x40011008
    38a8:	20000bd0 	.word	0x20000bd0
    38ac:	00003575 	.word	0x00003575
    38b0:	007fffff 	.word	0x007fffff

000038b4 <rtc_nrf_isr>:
{
    38b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    38b8:	4c34      	ldr	r4, [pc, #208]	; (398c <rtc_nrf_isr+0xd8>)
    38ba:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    38be:	079a      	lsls	r2, r3, #30
    38c0:	d509      	bpl.n	38d6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38c2:	4b33      	ldr	r3, [pc, #204]	; (3990 <rtc_nrf_isr+0xdc>)
    38c4:	681a      	ldr	r2, [r3, #0]
    38c6:	b132      	cbz	r2, 38d6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    38c8:	2200      	movs	r2, #0
    38ca:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    38cc:	4a31      	ldr	r2, [pc, #196]	; (3994 <rtc_nrf_isr+0xe0>)
    38ce:	681b      	ldr	r3, [r3, #0]
    38d0:	6813      	ldr	r3, [r2, #0]
    38d2:	3301      	adds	r3, #1
    38d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    38d6:	f04f 0320 	mov.w	r3, #32
    38da:	f3ef 8211 	mrs	r2, BASEPRI
    38de:	f383 8812 	msr	BASEPRI_MAX, r3
    38e2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    38e6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    38ea:	03db      	lsls	r3, r3, #15
    38ec:	d512      	bpl.n	3914 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    38ee:	f3bf 8f5b 	dmb	ish
    38f2:	4b29      	ldr	r3, [pc, #164]	; (3998 <rtc_nrf_isr+0xe4>)
    38f4:	e853 1f00 	ldrex	r1, [r3]
    38f8:	f021 0001 	bic.w	r0, r1, #1
    38fc:	e843 0600 	strex	r6, r0, [r3]
    3900:	2e00      	cmp	r6, #0
    3902:	d1f7      	bne.n	38f4 <rtc_nrf_isr+0x40>
    3904:	f3bf 8f5b 	dmb	ish
    3908:	4b24      	ldr	r3, [pc, #144]	; (399c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    390a:	2900      	cmp	r1, #0
    390c:	d136      	bne.n	397c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    390e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3910:	2900      	cmp	r1, #0
    3912:	d133      	bne.n	397c <rtc_nrf_isr+0xc8>
{
    3914:	2300      	movs	r3, #0
	__asm__ volatile(
    3916:	f382 8811 	msr	BASEPRI, r2
    391a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    391e:	b353      	cbz	r3, 3976 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3920:	f7ff feba 	bl	3698 <z_nrf_rtc_timer_read>
    3924:	4606      	mov	r6, r0
	__asm__ volatile(
    3926:	f04f 0320 	mov.w	r3, #32
    392a:	f3ef 8011 	mrs	r0, BASEPRI
    392e:	f383 8812 	msr	BASEPRI_MAX, r3
    3932:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3936:	4b1a      	ldr	r3, [pc, #104]	; (39a0 <rtc_nrf_isr+0xec>)
    3938:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    393c:	4549      	cmp	r1, r9
    393e:	bf08      	it	eq
    3940:	4546      	cmpeq	r6, r8
    3942:	f04f 0200 	mov.w	r2, #0
    3946:	d31e      	bcc.n	3986 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3948:	f04f 36ff 	mov.w	r6, #4294967295
    394c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3950:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3954:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3958:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    395a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    395e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3962:	f380 8811 	msr	BASEPRI, r0
    3966:	f3bf 8f6f 	isb	sy
		if (handler) {
    396a:	b121      	cbz	r1, 3976 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    396c:	9500      	str	r5, [sp, #0]
    396e:	4642      	mov	r2, r8
    3970:	464b      	mov	r3, r9
    3972:	2000      	movs	r0, #0
    3974:	4788      	blx	r1
}
    3976:	b003      	add	sp, #12
    3978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    397c:	2100      	movs	r1, #0
    397e:	6019      	str	r1, [r3, #0]
    3980:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3982:	2301      	movs	r3, #1
}
    3984:	e7c7      	b.n	3916 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3986:	4611      	mov	r1, r2
    3988:	e7eb      	b.n	3962 <rtc_nrf_isr+0xae>
    398a:	bf00      	nop
    398c:	40011000 	.word	0x40011000
    3990:	40011104 	.word	0x40011104
    3994:	20000bd4 	.word	0x20000bd4
    3998:	20000bcc 	.word	0x20000bcc
    399c:	40011140 	.word	0x40011140
    39a0:	200003e0 	.word	0x200003e0

000039a4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    39a4:	4b14      	ldr	r3, [pc, #80]	; (39f8 <sys_clock_set_timeout+0x54>)
{
    39a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    39a8:	f1b0 3fff 	cmp.w	r0, #4294967295
    39ac:	bf08      	it	eq
    39ae:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39b0:	1e44      	subs	r4, r0, #1
    39b2:	2c00      	cmp	r4, #0
    39b4:	dd1e      	ble.n	39f4 <sys_clock_set_timeout+0x50>
    39b6:	429c      	cmp	r4, r3
    39b8:	bfa8      	it	ge
    39ba:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    39bc:	f7ff fe6c 	bl	3698 <z_nrf_rtc_timer_read>
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    39c2:	490f      	ldr	r1, [pc, #60]	; (3a00 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    39c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    39c8:	1a80      	subs	r0, r0, r2
		ticks = 0;
    39ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    39ce:	bf28      	it	cs
    39d0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    39d2:	3001      	adds	r0, #1
    39d4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    39d6:	4808      	ldr	r0, [pc, #32]	; (39f8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    39d8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    39da:	4284      	cmp	r4, r0
    39dc:	bf28      	it	cs
    39de:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    39e0:	1912      	adds	r2, r2, r4
    39e2:	f04f 0000 	mov.w	r0, #0
    39e6:	9001      	str	r0, [sp, #4]
    39e8:	f143 0300 	adc.w	r3, r3, #0
    39ec:	f7ff fe76 	bl	36dc <compare_set>
}
    39f0:	b002      	add	sp, #8
    39f2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    39f4:	2400      	movs	r4, #0
    39f6:	e7e1      	b.n	39bc <sys_clock_set_timeout+0x18>
    39f8:	007fffff 	.word	0x007fffff
    39fc:	200003f0 	.word	0x200003f0
    3a00:	00003575 	.word	0x00003575

00003a04 <sys_clock_elapsed>:
{
    3a04:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3a06:	f7ff fe47 	bl	3698 <z_nrf_rtc_timer_read>
    3a0a:	4b02      	ldr	r3, [pc, #8]	; (3a14 <sys_clock_elapsed+0x10>)
    3a0c:	681b      	ldr	r3, [r3, #0]
}
    3a0e:	1ac0      	subs	r0, r0, r3
    3a10:	bd08      	pop	{r3, pc}
    3a12:	bf00      	nop
    3a14:	200003f0 	.word	0x200003f0

00003a18 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3a18:	b508      	push	{r3, lr}
    switch (domain)
    3a1a:	b178      	cbz	r0, 3a3c <nrf_clock_is_running.constprop.0+0x24>
    3a1c:	2801      	cmp	r0, #1
    3a1e:	d01c      	beq.n	3a5a <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    3a20:	4a14      	ldr	r2, [pc, #80]	; (3a74 <nrf_clock_is_running.constprop.0+0x5c>)
    3a22:	4915      	ldr	r1, [pc, #84]	; (3a78 <nrf_clock_is_running.constprop.0+0x60>)
    3a24:	4815      	ldr	r0, [pc, #84]	; (3a7c <nrf_clock_is_running.constprop.0+0x64>)
    3a26:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3a2a:	f004 fbe0 	bl	81ee <printk>
    3a2e:	4811      	ldr	r0, [pc, #68]	; (3a74 <nrf_clock_is_running.constprop.0+0x5c>)
    3a30:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3a34:	f004 fb04 	bl	8040 <assert_post_action>
            return false;
    3a38:	2000      	movs	r0, #0
    3a3a:	e00d      	b.n	3a58 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3a3c:	b131      	cbz	r1, 3a4c <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a42:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3a46:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3a4a:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a50:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3a54:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3a58:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3a5a:	b131      	cbz	r1, 3a6a <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a60:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3a64:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3a68:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a6e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3a72:	e7ef      	b.n	3a54 <nrf_clock_is_running.constprop.0+0x3c>
    3a74:	0000974e 	.word	0x0000974e
    3a78:	000098f6 	.word	0x000098f6
    3a7c:	00009117 	.word	0x00009117

00003a80 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3a80:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3a82:	4604      	mov	r4, r0
    3a84:	b948      	cbnz	r0, 3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a86:	490a      	ldr	r1, [pc, #40]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a88:	480a      	ldr	r0, [pc, #40]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a8a:	4a0b      	ldr	r2, [pc, #44]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a8c:	23bd      	movs	r3, #189	; 0xbd
    3a8e:	f004 fbae 	bl	81ee <printk>
    3a92:	4809      	ldr	r0, [pc, #36]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a94:	21bd      	movs	r1, #189	; 0xbd
    3a96:	f004 fad3 	bl	8040 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3a9a:	4b08      	ldr	r3, [pc, #32]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a9c:	791a      	ldrb	r2, [r3, #4]
    3a9e:	b922      	cbnz	r2, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3aa0:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3aa2:	4807      	ldr	r0, [pc, #28]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
        m_clock_cb.event_handler = event_handler;
    3aa4:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3aa6:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3aa8:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3aaa:	4806      	ldr	r0, [pc, #24]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    return err_code;
    3aac:	e7fc      	b.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3aae:	bf00      	nop
    3ab0:	000097bf 	.word	0x000097bf
    3ab4:	00009117 	.word	0x00009117
    3ab8:	00009782 	.word	0x00009782
    3abc:	20000bd8 	.word	0x20000bd8
    3ac0:	0bad0000 	.word	0x0bad0000
    3ac4:	0bad000c 	.word	0x0bad000c

00003ac8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3ac8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3aca:	4b0b      	ldr	r3, [pc, #44]	; (3af8 <nrfx_clock_enable+0x30>)
    3acc:	791b      	ldrb	r3, [r3, #4]
    3ace:	b94b      	cbnz	r3, 3ae4 <nrfx_clock_enable+0x1c>
    3ad0:	490a      	ldr	r1, [pc, #40]	; (3afc <nrfx_clock_enable+0x34>)
    3ad2:	480b      	ldr	r0, [pc, #44]	; (3b00 <nrfx_clock_enable+0x38>)
    3ad4:	4a0b      	ldr	r2, [pc, #44]	; (3b04 <nrfx_clock_enable+0x3c>)
    3ad6:	23d6      	movs	r3, #214	; 0xd6
    3ad8:	f004 fb89 	bl	81ee <printk>
    3adc:	4809      	ldr	r0, [pc, #36]	; (3b04 <nrfx_clock_enable+0x3c>)
    3ade:	21d6      	movs	r1, #214	; 0xd6
    3ae0:	f004 faae 	bl	8040 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3ae4:	2000      	movs	r0, #0
    3ae6:	f7fd fff9 	bl	1adc <arch_irq_is_enabled>
    3aea:	b918      	cbnz	r0, 3af4 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3af0:	f7fd bfe4 	b.w	1abc <arch_irq_enable>
    3af4:	bd08      	pop	{r3, pc}
    3af6:	bf00      	nop
    3af8:	20000bd8 	.word	0x20000bd8
    3afc:	000097cd 	.word	0x000097cd
    3b00:	00009117 	.word	0x00009117
    3b04:	00009782 	.word	0x00009782

00003b08 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3b08:	4b22      	ldr	r3, [pc, #136]	; (3b94 <nrfx_clock_start+0x8c>)
    3b0a:	791b      	ldrb	r3, [r3, #4]
{
    3b0c:	b513      	push	{r0, r1, r4, lr}
    3b0e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3b10:	b95b      	cbnz	r3, 3b2a <nrfx_clock_start+0x22>
    3b12:	4921      	ldr	r1, [pc, #132]	; (3b98 <nrfx_clock_start+0x90>)
    3b14:	4821      	ldr	r0, [pc, #132]	; (3b9c <nrfx_clock_start+0x94>)
    3b16:	4a22      	ldr	r2, [pc, #136]	; (3ba0 <nrfx_clock_start+0x98>)
    3b18:	f44f 7389 	mov.w	r3, #274	; 0x112
    3b1c:	f004 fb67 	bl	81ee <printk>
    3b20:	481f      	ldr	r0, [pc, #124]	; (3ba0 <nrfx_clock_start+0x98>)
    3b22:	f44f 7189 	mov.w	r1, #274	; 0x112
    3b26:	f004 fa8b 	bl	8040 <assert_post_action>
    switch (domain)
    3b2a:	b174      	cbz	r4, 3b4a <nrfx_clock_start+0x42>
    3b2c:	2c01      	cmp	r4, #1
    3b2e:	d027      	beq.n	3b80 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3b30:	4a1b      	ldr	r2, [pc, #108]	; (3ba0 <nrfx_clock_start+0x98>)
    3b32:	491c      	ldr	r1, [pc, #112]	; (3ba4 <nrfx_clock_start+0x9c>)
    3b34:	4819      	ldr	r0, [pc, #100]	; (3b9c <nrfx_clock_start+0x94>)
    3b36:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3b3a:	f004 fb58 	bl	81ee <printk>
    3b3e:	4818      	ldr	r0, [pc, #96]	; (3ba0 <nrfx_clock_start+0x98>)
    3b40:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3b44:	f004 fa7c 	bl	8040 <assert_post_action>
            break;
    }
}
    3b48:	e016      	b.n	3b78 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3b4a:	a901      	add	r1, sp, #4
    3b4c:	4620      	mov	r0, r4
    3b4e:	f7ff ff63 	bl	3a18 <nrf_clock_is_running.constprop.0>
    3b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b56:	b188      	cbz	r0, 3b7c <nrfx_clock_start+0x74>
    3b58:	9a01      	ldr	r2, [sp, #4]
    3b5a:	2a01      	cmp	r2, #1
    3b5c:	d10e      	bne.n	3b7c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3b5e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b62:	4b11      	ldr	r3, [pc, #68]	; (3ba8 <nrfx_clock_start+0xa0>)
    3b64:	2200      	movs	r2, #0
    3b66:	601a      	str	r2, [r3, #0]
    3b68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b6e:	2202      	movs	r2, #2
    3b70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b74:	2201      	movs	r2, #1
    3b76:	609a      	str	r2, [r3, #8]
}
    3b78:	b002      	add	sp, #8
    3b7a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3b7c:	2200      	movs	r2, #0
    3b7e:	e7ee      	b.n	3b5e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b80:	4b0a      	ldr	r3, [pc, #40]	; (3bac <nrfx_clock_start+0xa4>)
    3b82:	2200      	movs	r2, #0
    3b84:	601a      	str	r2, [r3, #0]
    3b86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b8c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b90:	601c      	str	r4, [r3, #0]
}
    3b92:	e7f1      	b.n	3b78 <nrfx_clock_start+0x70>
    3b94:	20000bd8 	.word	0x20000bd8
    3b98:	000097cd 	.word	0x000097cd
    3b9c:	00009117 	.word	0x00009117
    3ba0:	00009782 	.word	0x00009782
    3ba4:	000098f6 	.word	0x000098f6
    3ba8:	40000104 	.word	0x40000104
    3bac:	40000100 	.word	0x40000100

00003bb0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3bb2:	4d2f      	ldr	r5, [pc, #188]	; (3c70 <nrfx_clock_stop+0xc0>)
    3bb4:	792a      	ldrb	r2, [r5, #4]
{
    3bb6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3bb8:	b95a      	cbnz	r2, 3bd2 <nrfx_clock_stop+0x22>
    3bba:	492e      	ldr	r1, [pc, #184]	; (3c74 <nrfx_clock_stop+0xc4>)
    3bbc:	482e      	ldr	r0, [pc, #184]	; (3c78 <nrfx_clock_stop+0xc8>)
    3bbe:	4a2f      	ldr	r2, [pc, #188]	; (3c7c <nrfx_clock_stop+0xcc>)
    3bc0:	f240 134b 	movw	r3, #331	; 0x14b
    3bc4:	f004 fb13 	bl	81ee <printk>
    3bc8:	482c      	ldr	r0, [pc, #176]	; (3c7c <nrfx_clock_stop+0xcc>)
    3bca:	f240 114b 	movw	r1, #331	; 0x14b
    3bce:	f004 fa37 	bl	8040 <assert_post_action>
    switch (domain)
    3bd2:	b17c      	cbz	r4, 3bf4 <nrfx_clock_stop+0x44>
    3bd4:	2c01      	cmp	r4, #1
    3bd6:	d028      	beq.n	3c2a <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3bd8:	4929      	ldr	r1, [pc, #164]	; (3c80 <nrfx_clock_stop+0xd0>)
    3bda:	4827      	ldr	r0, [pc, #156]	; (3c78 <nrfx_clock_stop+0xc8>)
    3bdc:	4a27      	ldr	r2, [pc, #156]	; (3c7c <nrfx_clock_stop+0xcc>)
    3bde:	f240 1367 	movw	r3, #359	; 0x167
    3be2:	f004 fb04 	bl	81ee <printk>
    3be6:	4825      	ldr	r0, [pc, #148]	; (3c7c <nrfx_clock_stop+0xcc>)
    3be8:	f240 1167 	movw	r1, #359	; 0x167
    3bec:	f004 fa28 	bl	8040 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3bf0:	b003      	add	sp, #12
    3bf2:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3bf8:	2202      	movs	r2, #2
    3bfa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bfe:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    3c02:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c06:	2201      	movs	r2, #1
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	4b1e      	ldr	r3, [pc, #120]	; (3c84 <nrfx_clock_stop+0xd4>)
    3c0c:	f242 7410 	movw	r4, #10000	; 0x2710
    3c10:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3c12:	2100      	movs	r1, #0
    3c14:	4608      	mov	r0, r1
    3c16:	f7ff feff 	bl	3a18 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3c1a:	2800      	cmp	r0, #0
    3c1c:	d0e8      	beq.n	3bf0 <nrfx_clock_stop+0x40>
    3c1e:	2001      	movs	r0, #1
    3c20:	f004 fd69 	bl	86f6 <nrfx_busy_wait>
    3c24:	3c01      	subs	r4, #1
    3c26:	d1f4      	bne.n	3c12 <nrfx_clock_stop+0x62>
    3c28:	e7e2      	b.n	3bf0 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c2e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3c30:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3c38:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3c3c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c3e:	4b12      	ldr	r3, [pc, #72]	; (3c88 <nrfx_clock_stop+0xd8>)
    3c40:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3c42:	f88d 4007 	strb.w	r4, [sp, #7]
    3c46:	f242 7410 	movw	r4, #10000	; 0x2710
    3c4a:	f10d 0107 	add.w	r1, sp, #7
    3c4e:	2001      	movs	r0, #1
    3c50:	f7ff fee2 	bl	3a18 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3c54:	b910      	cbnz	r0, 3c5c <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3c56:	2300      	movs	r3, #0
    3c58:	716b      	strb	r3, [r5, #5]
    3c5a:	e7c9      	b.n	3bf0 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3c5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3c60:	2801      	cmp	r0, #1
    3c62:	d1f8      	bne.n	3c56 <nrfx_clock_stop+0xa6>
    3c64:	f004 fd47 	bl	86f6 <nrfx_busy_wait>
    3c68:	3c01      	subs	r4, #1
    3c6a:	d1ee      	bne.n	3c4a <nrfx_clock_stop+0x9a>
    3c6c:	e7f3      	b.n	3c56 <nrfx_clock_stop+0xa6>
    3c6e:	bf00      	nop
    3c70:	20000bd8 	.word	0x20000bd8
    3c74:	000097cd 	.word	0x000097cd
    3c78:	00009117 	.word	0x00009117
    3c7c:	00009782 	.word	0x00009782
    3c80:	000098f6 	.word	0x000098f6
    3c84:	4000000c 	.word	0x4000000c
    3c88:	40000004 	.word	0x40000004

00003c8c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3c8c:	4b16      	ldr	r3, [pc, #88]	; (3ce8 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3c8e:	b507      	push	{r0, r1, r2, lr}
    3c90:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3c92:	b16a      	cbz	r2, 3cb0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c94:	2200      	movs	r2, #0
    3c96:	601a      	str	r2, [r3, #0]
    3c98:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c9e:	2201      	movs	r2, #1
    3ca0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3ca4:	4b11      	ldr	r3, [pc, #68]	; (3cec <nrfx_power_clock_irq_handler+0x60>)
    3ca6:	7958      	ldrb	r0, [r3, #5]
    3ca8:	b910      	cbnz	r0, 3cb0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3caa:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3cb0:	4b0f      	ldr	r3, [pc, #60]	; (3cf0 <nrfx_power_clock_irq_handler+0x64>)
    3cb2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3cb4:	b16a      	cbz	r2, 3cd2 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cb6:	2000      	movs	r0, #0
    3cb8:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3cba:	a901      	add	r1, sp, #4
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	f7ff feab 	bl	3a18 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3cc2:	9a01      	ldr	r2, [sp, #4]
    3cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cc8:	b932      	cbnz	r2, 3cd8 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3cca:	2201      	movs	r2, #1
    3ccc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cd0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3cd2:	b003      	add	sp, #12
    3cd4:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3cd8:	2202      	movs	r2, #2
    3cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3cde:	4b03      	ldr	r3, [pc, #12]	; (3cec <nrfx_power_clock_irq_handler+0x60>)
    3ce0:	2001      	movs	r0, #1
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	4798      	blx	r3
}
    3ce6:	e7f4      	b.n	3cd2 <nrfx_power_clock_irq_handler+0x46>
    3ce8:	40000100 	.word	0x40000100
    3cec:	20000bd8 	.word	0x20000bd8
    3cf0:	40000104 	.word	0x40000104

00003cf4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3cf4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3cf6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3cf8:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3cfa:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3cfe:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3d00:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3d04:	d014      	beq.n	3d30 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3d06:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3d0a:	fa05 f204 	lsl.w	r2, r5, r4
    3d0e:	ea23 0202 	bic.w	r2, r3, r2
    3d12:	e850 6f00 	ldrex	r6, [r0]
    3d16:	429e      	cmp	r6, r3
    3d18:	d104      	bne.n	3d24 <nrfx_flag32_alloc+0x30>
    3d1a:	e840 2c00 	strex	ip, r2, [r0]
    3d1e:	f1bc 0f00 	cmp.w	ip, #0
    3d22:	d1f6      	bne.n	3d12 <nrfx_flag32_alloc+0x1e>
    3d24:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3d28:	d1e6      	bne.n	3cf8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3d2a:	4802      	ldr	r0, [pc, #8]	; (3d34 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3d2c:	700c      	strb	r4, [r1, #0]
}
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3d30:	4801      	ldr	r0, [pc, #4]	; (3d38 <nrfx_flag32_alloc+0x44>)
    3d32:	e7fc      	b.n	3d2e <nrfx_flag32_alloc+0x3a>
    3d34:	0bad0000 	.word	0x0bad0000
    3d38:	0bad0002 	.word	0x0bad0002

00003d3c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3d3c:	6803      	ldr	r3, [r0, #0]
    3d3e:	40cb      	lsrs	r3, r1
    3d40:	07db      	lsls	r3, r3, #31
{
    3d42:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3d44:	d415      	bmi.n	3d72 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3d46:	2301      	movs	r3, #1
    3d48:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3d4c:	6803      	ldr	r3, [r0, #0]
    3d4e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3d52:	ea41 0203 	orr.w	r2, r1, r3
    3d56:	e850 4f00 	ldrex	r4, [r0]
    3d5a:	429c      	cmp	r4, r3
    3d5c:	d104      	bne.n	3d68 <nrfx_flag32_free+0x2c>
    3d5e:	e840 2c00 	strex	ip, r2, [r0]
    3d62:	f1bc 0f00 	cmp.w	ip, #0
    3d66:	d1f6      	bne.n	3d56 <nrfx_flag32_free+0x1a>
    3d68:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3d6c:	d1ee      	bne.n	3d4c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3d6e:	4802      	ldr	r0, [pc, #8]	; (3d78 <nrfx_flag32_free+0x3c>)
}
    3d70:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3d72:	4802      	ldr	r0, [pc, #8]	; (3d7c <nrfx_flag32_free+0x40>)
    3d74:	e7fc      	b.n	3d70 <nrfx_flag32_free+0x34>
    3d76:	bf00      	nop
    3d78:	0bad0000 	.word	0x0bad0000
    3d7c:	0bad0004 	.word	0x0bad0004

00003d80 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3d80:	4b05      	ldr	r3, [pc, #20]	; (3d98 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d82:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3d84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3d88:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3d8c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3d90:	4258      	negs	r0, r3
    3d92:	4158      	adcs	r0, r3
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	20000100 	.word	0x20000100

00003d9c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3d9c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3d9e:	f100 0308 	add.w	r3, r0, #8
    3da2:	4c0c      	ldr	r4, [pc, #48]	; (3dd4 <call_handler+0x38>)
    3da4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3da8:	05da      	lsls	r2, r3, #23
{
    3daa:	4605      	mov	r5, r0
    3dac:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dae:	d507      	bpl.n	3dc0 <call_handler+0x24>
    3db0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3db4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3db8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3dbc:	6852      	ldr	r2, [r2, #4]
    3dbe:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3dc0:	68a3      	ldr	r3, [r4, #8]
    3dc2:	b12b      	cbz	r3, 3dd0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3dc4:	68e2      	ldr	r2, [r4, #12]
    3dc6:	4631      	mov	r1, r6
    3dc8:	4628      	mov	r0, r5
    }
}
    3dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3dce:	4718      	bx	r3
}
    3dd0:	bd70      	pop	{r4, r5, r6, pc}
    3dd2:	bf00      	nop
    3dd4:	20000100 	.word	0x20000100

00003dd8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dd8:	4b19      	ldr	r3, [pc, #100]	; (3e40 <release_handler+0x68>)
    3dda:	3008      	adds	r0, #8
{
    3ddc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3dde:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3de2:	05d1      	lsls	r1, r2, #23
    3de4:	d51d      	bpl.n	3e22 <release_handler+0x4a>
    3de6:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3dea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3dee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3df2:	f103 0410 	add.w	r4, r3, #16
    3df6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3df8:	f834 2b02 	ldrh.w	r2, [r4], #2
    3dfc:	f412 7f80 	tst.w	r2, #256	; 0x100
    3e00:	d003      	beq.n	3e0a <release_handler+0x32>
    3e02:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3e06:	4291      	cmp	r1, r2
    3e08:	d00b      	beq.n	3e22 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3e0a:	3001      	adds	r0, #1
    3e0c:	2830      	cmp	r0, #48	; 0x30
    3e0e:	d1f3      	bne.n	3df8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3e10:	2200      	movs	r2, #0
    3e12:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3e16:	480b      	ldr	r0, [pc, #44]	; (3e44 <release_handler+0x6c>)
    3e18:	f7ff ff90 	bl	3d3c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3e1c:	4b0a      	ldr	r3, [pc, #40]	; (3e48 <release_handler+0x70>)
    3e1e:	4298      	cmp	r0, r3
    3e20:	d100      	bne.n	3e24 <release_handler+0x4c>
}
    3e22:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3e24:	4909      	ldr	r1, [pc, #36]	; (3e4c <release_handler+0x74>)
    3e26:	480a      	ldr	r0, [pc, #40]	; (3e50 <release_handler+0x78>)
    3e28:	4a0a      	ldr	r2, [pc, #40]	; (3e54 <release_handler+0x7c>)
    3e2a:	f44f 7399 	mov.w	r3, #306	; 0x132
    3e2e:	f004 f9de 	bl	81ee <printk>
}
    3e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3e36:	4807      	ldr	r0, [pc, #28]	; (3e54 <release_handler+0x7c>)
    3e38:	f44f 7199 	mov.w	r1, #306	; 0x132
    3e3c:	f004 b900 	b.w	8040 <assert_post_action>
    3e40:	20000100 	.word	0x20000100
    3e44:	20000174 	.word	0x20000174
    3e48:	0bad0000 	.word	0x0bad0000
    3e4c:	0000984f 	.word	0x0000984f
    3e50:	00009117 	.word	0x00009117
    3e54:	000097eb 	.word	0x000097eb

00003e58 <pin_handler_trigger_uninit>:
{
    3e58:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3e5a:	4c0a      	ldr	r4, [pc, #40]	; (3e84 <pin_handler_trigger_uninit+0x2c>)
    3e5c:	f100 0508 	add.w	r5, r0, #8
    3e60:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3e64:	069a      	lsls	r2, r3, #26
    3e66:	d506      	bpl.n	3e76 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3e68:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3e6a:	4a07      	ldr	r2, [pc, #28]	; (3e88 <pin_handler_trigger_uninit+0x30>)
    3e6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3e70:	2100      	movs	r1, #0
    3e72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3e76:	f7ff ffaf 	bl	3dd8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3e7a:	2300      	movs	r3, #0
    3e7c:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3e80:	bd38      	pop	{r3, r4, r5, pc}
    3e82:	bf00      	nop
    3e84:	20000100 	.word	0x20000100
    3e88:	40006000 	.word	0x40006000

00003e8c <nrf_gpio_pin_port_decode>:
{
    3e8c:	b510      	push	{r4, lr}
    3e8e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e90:	6800      	ldr	r0, [r0, #0]
    3e92:	f004 fc32 	bl	86fa <nrf_gpio_pin_present_check>
    3e96:	b958      	cbnz	r0, 3eb0 <nrf_gpio_pin_port_decode+0x24>
    3e98:	4912      	ldr	r1, [pc, #72]	; (3ee4 <nrf_gpio_pin_port_decode+0x58>)
    3e9a:	4813      	ldr	r0, [pc, #76]	; (3ee8 <nrf_gpio_pin_port_decode+0x5c>)
    3e9c:	4a13      	ldr	r2, [pc, #76]	; (3eec <nrf_gpio_pin_port_decode+0x60>)
    3e9e:	f240 2329 	movw	r3, #553	; 0x229
    3ea2:	f004 f9a4 	bl	81ee <printk>
    3ea6:	4811      	ldr	r0, [pc, #68]	; (3eec <nrf_gpio_pin_port_decode+0x60>)
    3ea8:	f240 2129 	movw	r1, #553	; 0x229
    3eac:	f004 f8c8 	bl	8040 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3eb0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3eb2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3eb6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3eb8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3eba:	d00d      	beq.n	3ed8 <nrf_gpio_pin_port_decode+0x4c>
    3ebc:	2b01      	cmp	r3, #1
    3ebe:	d00e      	beq.n	3ede <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    3ec0:	490b      	ldr	r1, [pc, #44]	; (3ef0 <nrf_gpio_pin_port_decode+0x64>)
    3ec2:	4809      	ldr	r0, [pc, #36]	; (3ee8 <nrf_gpio_pin_port_decode+0x5c>)
    3ec4:	4a09      	ldr	r2, [pc, #36]	; (3eec <nrf_gpio_pin_port_decode+0x60>)
    3ec6:	f240 232e 	movw	r3, #558	; 0x22e
    3eca:	f004 f990 	bl	81ee <printk>
    3ece:	4807      	ldr	r0, [pc, #28]	; (3eec <nrf_gpio_pin_port_decode+0x60>)
    3ed0:	f240 212e 	movw	r1, #558	; 0x22e
    3ed4:	f004 f8b4 	bl	8040 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3ed8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3edc:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    3ede:	4805      	ldr	r0, [pc, #20]	; (3ef4 <nrf_gpio_pin_port_decode+0x68>)
    3ee0:	e7fc      	b.n	3edc <nrf_gpio_pin_port_decode+0x50>
    3ee2:	bf00      	nop
    3ee4:	00009716 	.word	0x00009716
    3ee8:	00009117 	.word	0x00009117
    3eec:	000096e3 	.word	0x000096e3
    3ef0:	000098f6 	.word	0x000098f6
    3ef4:	50000300 	.word	0x50000300

00003ef8 <nrfx_gpiote_input_configure>:
{
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	4604      	mov	r4, r0
    3efc:	b085      	sub	sp, #20
    3efe:	4617      	mov	r7, r2
    3f00:	461d      	mov	r5, r3
    if (p_input_config)
    3f02:	b1f1      	cbz	r1, 3f42 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3f04:	f7ff ff3c 	bl	3d80 <pin_is_task_output>
    3f08:	b110      	cbz	r0, 3f10 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3f0a:	484a      	ldr	r0, [pc, #296]	; (4034 <nrfx_gpiote_input_configure+0x13c>)
}
    3f0c:	b005      	add	sp, #20
    3f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3f10:	460b      	mov	r3, r1
    3f12:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3f16:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3f1a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3f1e:	f10d 020f 	add.w	r2, sp, #15
    3f22:	f10d 010e 	add.w	r1, sp, #14
    3f26:	4620      	mov	r0, r4
    3f28:	f004 fbfc 	bl	8724 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3f2c:	4a42      	ldr	r2, [pc, #264]	; (4038 <nrfx_gpiote_input_configure+0x140>)
    3f2e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3f32:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3f36:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3f3a:	f043 0301 	orr.w	r3, r3, #1
    3f3e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3f42:	b197      	cbz	r7, 3f6a <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3f44:	4b3c      	ldr	r3, [pc, #240]	; (4038 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3f46:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3f48:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3f4a:	f104 0008 	add.w	r0, r4, #8
    3f4e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3f52:	078f      	lsls	r7, r1, #30
    3f54:	d50c      	bpl.n	3f70 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    3f56:	2a00      	cmp	r2, #0
    3f58:	d1d7      	bne.n	3f0a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3f5a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3f5e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3f62:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3f66:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3f6a:	bbcd      	cbnz	r5, 3fe0 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    3f6c:	4833      	ldr	r0, [pc, #204]	; (403c <nrfx_gpiote_input_configure+0x144>)
    3f6e:	e7cd      	b.n	3f0c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3f70:	f021 0120 	bic.w	r1, r1, #32
    3f74:	04c9      	lsls	r1, r1, #19
    3f76:	0cc9      	lsrs	r1, r1, #19
    3f78:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3f7c:	2a00      	cmp	r2, #0
    3f7e:	d0ec      	beq.n	3f5a <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    3f80:	2e03      	cmp	r6, #3
    3f82:	d8c2      	bhi.n	3f0a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3f84:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3f86:	b92e      	cbnz	r6, 3f94 <nrfx_gpiote_input_configure+0x9c>
    3f88:	4a2d      	ldr	r2, [pc, #180]	; (4040 <nrfx_gpiote_input_configure+0x148>)
    3f8a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3f8e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3f92:	e7e2      	b.n	3f5a <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3f94:	00ba      	lsls	r2, r7, #2
    3f96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3f9a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3f9e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3fa2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3fa6:	f02c 0c03 	bic.w	ip, ip, #3
    3faa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3fae:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3fb2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3fb6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3fba:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3fbe:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3fc2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3fc6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3fca:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3fce:	ea4c 0c0e 	orr.w	ip, ip, lr
    3fd2:	f041 0120 	orr.w	r1, r1, #32
    3fd6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3fda:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3fde:	e7bc      	b.n	3f5a <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3fe0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3fe4:	4620      	mov	r0, r4
    3fe6:	f7ff fef7 	bl	3dd8 <release_handler>
    if (!handler)
    3fea:	2e00      	cmp	r6, #0
    3fec:	d0be      	beq.n	3f6c <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3fee:	4d12      	ldr	r5, [pc, #72]	; (4038 <nrfx_gpiote_input_configure+0x140>)
    3ff0:	682b      	ldr	r3, [r5, #0]
    3ff2:	429e      	cmp	r6, r3
    3ff4:	d104      	bne.n	4000 <nrfx_gpiote_input_configure+0x108>
    3ff6:	686b      	ldr	r3, [r5, #4]
    3ff8:	429f      	cmp	r7, r3
    3ffa:	d101      	bne.n	4000 <nrfx_gpiote_input_configure+0x108>
    3ffc:	2200      	movs	r2, #0
    3ffe:	e00a      	b.n	4016 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4000:	4810      	ldr	r0, [pc, #64]	; (4044 <nrfx_gpiote_input_configure+0x14c>)
    4002:	f10d 010f 	add.w	r1, sp, #15
    4006:	f7ff fe75 	bl	3cf4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    400a:	4b0c      	ldr	r3, [pc, #48]	; (403c <nrfx_gpiote_input_configure+0x144>)
    400c:	4298      	cmp	r0, r3
    400e:	f47f af7d 	bne.w	3f0c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4012:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4016:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    401a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    401e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4020:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4022:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4026:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    402a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    402e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4032:	e79b      	b.n	3f6c <nrfx_gpiote_input_configure+0x74>
    4034:	0bad0004 	.word	0x0bad0004
    4038:	20000100 	.word	0x20000100
    403c:	0bad0000 	.word	0x0bad0000
    4040:	40006000 	.word	0x40006000
    4044:	20000174 	.word	0x20000174

00004048 <nrfx_gpiote_output_configure>:
{
    4048:	b5f0      	push	{r4, r5, r6, r7, lr}
    404a:	4604      	mov	r4, r0
    404c:	b085      	sub	sp, #20
    404e:	4615      	mov	r5, r2
    if (p_config)
    4050:	b309      	cbz	r1, 4096 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4052:	f100 0708 	add.w	r7, r0, #8
    4056:	4e31      	ldr	r6, [pc, #196]	; (411c <nrfx_gpiote_output_configure+0xd4>)
    4058:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    405c:	0798      	lsls	r0, r3, #30
    405e:	d401      	bmi.n	4064 <nrfx_gpiote_output_configure+0x1c>
    4060:	069a      	lsls	r2, r3, #26
    4062:	d458      	bmi.n	4116 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4064:	f013 0f1c 	tst.w	r3, #28
    4068:	d002      	beq.n	4070 <nrfx_gpiote_output_configure+0x28>
    406a:	784b      	ldrb	r3, [r1, #1]
    406c:	2b01      	cmp	r3, #1
    406e:	d052      	beq.n	4116 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4070:	2301      	movs	r3, #1
    4072:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4076:	2300      	movs	r3, #0
    4078:	e9cd 1300 	strd	r1, r3, [sp]
    407c:	1c4a      	adds	r2, r1, #1
    407e:	1c8b      	adds	r3, r1, #2
    4080:	4620      	mov	r0, r4
    4082:	f10d 010f 	add.w	r1, sp, #15
    4086:	f004 fb4d 	bl	8724 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    408a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    408e:	f043 0303 	orr.w	r3, r3, #3
    4092:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4096:	b915      	cbnz	r5, 409e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4098:	4821      	ldr	r0, [pc, #132]	; (4120 <nrfx_gpiote_output_configure+0xd8>)
}
    409a:	b005      	add	sp, #20
    409c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    409e:	4e1f      	ldr	r6, [pc, #124]	; (411c <nrfx_gpiote_output_configure+0xd4>)
    40a0:	f104 0708 	add.w	r7, r4, #8
    40a4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    40a8:	0783      	lsls	r3, r0, #30
    40aa:	d534      	bpl.n	4116 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    40ac:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    40b0:	4661      	mov	r1, ip
    40b2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    40b4:	f020 0020 	bic.w	r0, r0, #32
    40b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    40bc:	04c0      	lsls	r0, r0, #19
    40be:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    40c2:	0cc0      	lsrs	r0, r0, #19
    40c4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    40c8:	2300      	movs	r3, #0
    40ca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    40ce:	786a      	ldrb	r2, [r5, #1]
    40d0:	2a00      	cmp	r2, #0
    40d2:	d0e1      	beq.n	4098 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    40d4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    40d8:	78ad      	ldrb	r5, [r5, #2]
    40da:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    40de:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    40e2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    40e6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    40ea:	0223      	lsls	r3, r4, #8
    40ec:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    40f0:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    40f2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    40f6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    40fa:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    40fc:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    40fe:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4102:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4106:	432b      	orrs	r3, r5
    4108:	f040 0020 	orr.w	r0, r0, #32
    410c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4110:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4114:	e7c0      	b.n	4098 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4116:	4803      	ldr	r0, [pc, #12]	; (4124 <nrfx_gpiote_output_configure+0xdc>)
    4118:	e7bf      	b.n	409a <nrfx_gpiote_output_configure+0x52>
    411a:	bf00      	nop
    411c:	20000100 	.word	0x20000100
    4120:	0bad0000 	.word	0x0bad0000
    4124:	0bad0004 	.word	0x0bad0004

00004128 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4128:	4b01      	ldr	r3, [pc, #4]	; (4130 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    412a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    412e:	4770      	bx	lr
    4130:	20000100 	.word	0x20000100

00004134 <nrfx_gpiote_channel_get>:
{
    4134:	b538      	push	{r3, r4, r5, lr}
    4136:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4138:	460d      	mov	r5, r1
    413a:	b959      	cbnz	r1, 4154 <nrfx_gpiote_channel_get+0x20>
    413c:	490b      	ldr	r1, [pc, #44]	; (416c <nrfx_gpiote_channel_get+0x38>)
    413e:	480c      	ldr	r0, [pc, #48]	; (4170 <nrfx_gpiote_channel_get+0x3c>)
    4140:	4a0c      	ldr	r2, [pc, #48]	; (4174 <nrfx_gpiote_channel_get+0x40>)
    4142:	f240 2335 	movw	r3, #565	; 0x235
    4146:	f004 f852 	bl	81ee <printk>
    414a:	480a      	ldr	r0, [pc, #40]	; (4174 <nrfx_gpiote_channel_get+0x40>)
    414c:	f240 2135 	movw	r1, #565	; 0x235
    4150:	f003 ff76 	bl	8040 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4154:	3408      	adds	r4, #8
    4156:	4b08      	ldr	r3, [pc, #32]	; (4178 <nrfx_gpiote_channel_get+0x44>)
    4158:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    415c:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    415e:	bf43      	ittte	mi
    4160:	0b5b      	lsrmi	r3, r3, #13
    4162:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4164:	4805      	ldrmi	r0, [pc, #20]	; (417c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4166:	4806      	ldrpl	r0, [pc, #24]	; (4180 <nrfx_gpiote_channel_get+0x4c>)
}
    4168:	bd38      	pop	{r3, r4, r5, pc}
    416a:	bf00      	nop
    416c:	00009863 	.word	0x00009863
    4170:	00009117 	.word	0x00009117
    4174:	000097eb 	.word	0x000097eb
    4178:	20000100 	.word	0x20000100
    417c:	0bad0000 	.word	0x0bad0000
    4180:	0bad0004 	.word	0x0bad0004

00004184 <nrfx_gpiote_init>:
{
    4184:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4186:	4c0e      	ldr	r4, [pc, #56]	; (41c0 <nrfx_gpiote_init+0x3c>)
    4188:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    418c:	b9b5      	cbnz	r5, 41bc <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    418e:	2260      	movs	r2, #96	; 0x60
    4190:	4629      	mov	r1, r5
    4192:	f104 0010 	add.w	r0, r4, #16
    4196:	f004 f883 	bl	82a0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    419a:	2006      	movs	r0, #6
    419c:	f7fd fc8e 	bl	1abc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    41a0:	4b08      	ldr	r3, [pc, #32]	; (41c4 <nrfx_gpiote_init+0x40>)
    return err_code;
    41a2:	4809      	ldr	r0, [pc, #36]	; (41c8 <nrfx_gpiote_init+0x44>)
    41a4:	601d      	str	r5, [r3, #0]
    41a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    41a8:	4b08      	ldr	r3, [pc, #32]	; (41cc <nrfx_gpiote_init+0x48>)
    41aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    41ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    41b2:	2301      	movs	r3, #1
    41b4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    41b8:	6763      	str	r3, [r4, #116]	; 0x74
}
    41ba:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    41bc:	4804      	ldr	r0, [pc, #16]	; (41d0 <nrfx_gpiote_init+0x4c>)
    41be:	e7fc      	b.n	41ba <nrfx_gpiote_init+0x36>
    41c0:	20000100 	.word	0x20000100
    41c4:	4000617c 	.word	0x4000617c
    41c8:	0bad0000 	.word	0x0bad0000
    41cc:	40006000 	.word	0x40006000
    41d0:	0bad0005 	.word	0x0bad0005

000041d4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    41d4:	4b03      	ldr	r3, [pc, #12]	; (41e4 <nrfx_gpiote_is_init+0x10>)
    41d6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    41da:	3800      	subs	r0, #0
    41dc:	bf18      	it	ne
    41de:	2001      	movne	r0, #1
    41e0:	4770      	bx	lr
    41e2:	bf00      	nop
    41e4:	20000100 	.word	0x20000100

000041e8 <nrfx_gpiote_channel_free>:
{
    41e8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    41ea:	4801      	ldr	r0, [pc, #4]	; (41f0 <nrfx_gpiote_channel_free+0x8>)
    41ec:	f7ff bda6 	b.w	3d3c <nrfx_flag32_free>
    41f0:	20000170 	.word	0x20000170

000041f4 <nrfx_gpiote_channel_alloc>:
{
    41f4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    41f6:	4801      	ldr	r0, [pc, #4]	; (41fc <nrfx_gpiote_channel_alloc+0x8>)
    41f8:	f7ff bd7c 	b.w	3cf4 <nrfx_flag32_alloc>
    41fc:	20000170 	.word	0x20000170

00004200 <nrfx_gpiote_trigger_enable>:
{
    4200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4202:	4d31      	ldr	r5, [pc, #196]	; (42c8 <nrfx_gpiote_trigger_enable+0xc8>)
    4204:	f100 0708 	add.w	r7, r0, #8
{
    4208:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    420a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    420e:	f013 0f1c 	tst.w	r3, #28
{
    4212:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4214:	d10b      	bne.n	422e <nrfx_gpiote_trigger_enable+0x2e>
    4216:	492d      	ldr	r1, [pc, #180]	; (42cc <nrfx_gpiote_trigger_enable+0xcc>)
    4218:	482d      	ldr	r0, [pc, #180]	; (42d0 <nrfx_gpiote_trigger_enable+0xd0>)
    421a:	4a2e      	ldr	r2, [pc, #184]	; (42d4 <nrfx_gpiote_trigger_enable+0xd4>)
    421c:	f240 33df 	movw	r3, #991	; 0x3df
    4220:	f003 ffe5 	bl	81ee <printk>
    4224:	482b      	ldr	r0, [pc, #172]	; (42d4 <nrfx_gpiote_trigger_enable+0xd4>)
    4226:	f240 31df 	movw	r1, #991	; 0x3df
    422a:	f003 ff09 	bl	8040 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    422e:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4232:	0683      	lsls	r3, r0, #26
    4234:	d51f      	bpl.n	4276 <nrfx_gpiote_trigger_enable+0x76>
    4236:	f010 0302 	ands.w	r3, r0, #2
    423a:	d11c      	bne.n	4276 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    423c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    423e:	4608      	mov	r0, r1
    4240:	f004 fa6c 	bl	871c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4244:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4248:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    424c:	6003      	str	r3, [r0, #0]
    424e:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4250:	008b      	lsls	r3, r1, #2
    4252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4256:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    425a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    425e:	f042 0201 	orr.w	r2, r2, #1
    4262:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4266:	b126      	cbz	r6, 4272 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    4268:	4a1b      	ldr	r2, [pc, #108]	; (42d8 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    426a:	2301      	movs	r3, #1
    426c:	408b      	lsls	r3, r1
    426e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4272:	b003      	add	sp, #12
    4274:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4276:	b95e      	cbnz	r6, 4290 <nrfx_gpiote_trigger_enable+0x90>
    4278:	4918      	ldr	r1, [pc, #96]	; (42dc <nrfx_gpiote_trigger_enable+0xdc>)
    427a:	4815      	ldr	r0, [pc, #84]	; (42d0 <nrfx_gpiote_trigger_enable+0xd0>)
    427c:	4a15      	ldr	r2, [pc, #84]	; (42d4 <nrfx_gpiote_trigger_enable+0xd4>)
    427e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4282:	f003 ffb4 	bl	81ee <printk>
    4286:	4813      	ldr	r0, [pc, #76]	; (42d4 <nrfx_gpiote_trigger_enable+0xd4>)
    4288:	f240 31ee 	movw	r1, #1006	; 0x3ee
    428c:	f003 fed8 	bl	8040 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4290:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4294:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4298:	2b04      	cmp	r3, #4
    429a:	d010      	beq.n	42be <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    429c:	2b05      	cmp	r3, #5
    429e:	d010      	beq.n	42c2 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42a0:	a801      	add	r0, sp, #4
    42a2:	9401      	str	r4, [sp, #4]
    42a4:	f7ff fdf2 	bl	3e8c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    42a8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    42aa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    42ae:	40d9      	lsrs	r1, r3
    42b0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    42b4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    42b6:	4620      	mov	r0, r4
    42b8:	f004 fa7f 	bl	87ba <nrf_gpio_cfg_sense_set>
}
    42bc:	e7d9      	b.n	4272 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    42be:	2103      	movs	r1, #3
    42c0:	e7f9      	b.n	42b6 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    42c2:	2102      	movs	r1, #2
    42c4:	e7f7      	b.n	42b6 <nrfx_gpiote_trigger_enable+0xb6>
    42c6:	bf00      	nop
    42c8:	20000100 	.word	0x20000100
    42cc:	0000986d 	.word	0x0000986d
    42d0:	00009117 	.word	0x00009117
    42d4:	000097eb 	.word	0x000097eb
    42d8:	40006000 	.word	0x40006000
    42dc:	00009882 	.word	0x00009882

000042e0 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    42e0:	4b0e      	ldr	r3, [pc, #56]	; (431c <nrfx_gpiote_trigger_disable+0x3c>)
    42e2:	f100 0208 	add.w	r2, r0, #8
    42e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    42ea:	0699      	lsls	r1, r3, #26
    42ec:	d513      	bpl.n	4316 <nrfx_gpiote_trigger_disable+0x36>
    42ee:	079a      	lsls	r2, r3, #30
    42f0:	d411      	bmi.n	4316 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    42f2:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    42f4:	2201      	movs	r2, #1
    42f6:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    42f8:	009b      	lsls	r3, r3, #2
    42fa:	4909      	ldr	r1, [pc, #36]	; (4320 <nrfx_gpiote_trigger_disable+0x40>)
    42fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4300:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4304:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4308:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    430c:	f022 0203 	bic.w	r2, r2, #3
    4310:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4314:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4316:	2100      	movs	r1, #0
    4318:	f004 ba4f 	b.w	87ba <nrf_gpio_cfg_sense_set>
    431c:	20000100 	.word	0x20000100
    4320:	40006000 	.word	0x40006000

00004324 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4324:	4b0e      	ldr	r3, [pc, #56]	; (4360 <nrfx_gpiote_pin_uninit+0x3c>)
    4326:	f100 0208 	add.w	r2, r0, #8
{
    432a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    432c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4330:	07db      	lsls	r3, r3, #31
{
    4332:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4334:	d511      	bpl.n	435a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4336:	f7ff ffd3 	bl	42e0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    433a:	4620      	mov	r0, r4
    433c:	f7ff fd8c 	bl	3e58 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4340:	a801      	add	r0, sp, #4
    4342:	9401      	str	r4, [sp, #4]
    4344:	f7ff fda2 	bl	3e8c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4348:	9b01      	ldr	r3, [sp, #4]
    434a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    434e:	2202      	movs	r2, #2
    4350:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4354:	4803      	ldr	r0, [pc, #12]	; (4364 <nrfx_gpiote_pin_uninit+0x40>)
}
    4356:	b002      	add	sp, #8
    4358:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    435a:	4803      	ldr	r0, [pc, #12]	; (4368 <nrfx_gpiote_pin_uninit+0x44>)
    435c:	e7fb      	b.n	4356 <nrfx_gpiote_pin_uninit+0x32>
    435e:	bf00      	nop
    4360:	20000100 	.word	0x20000100
    4364:	0bad0000 	.word	0x0bad0000
    4368:	0bad0004 	.word	0x0bad0004

0000436c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4370:	4b65      	ldr	r3, [pc, #404]	; (4508 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4372:	4866      	ldr	r0, [pc, #408]	; (450c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4374:	4966      	ldr	r1, [pc, #408]	; (4510 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4376:	2500      	movs	r5, #0
{
    4378:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    437a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    437c:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    437e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4380:	b136      	cbz	r6, 4390 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4382:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4386:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4388:	bf1e      	ittt	ne
    438a:	601c      	strne	r4, [r3, #0]
    438c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    438e:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4390:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4392:	428b      	cmp	r3, r1
        mask <<= 1;
    4394:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4398:	d1f1      	bne.n	437e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    439a:	4f5e      	ldr	r7, [pc, #376]	; (4514 <nrfx_gpiote_irq_handler+0x1a8>)
    439c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    439e:	b37b      	cbz	r3, 4400 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    43a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    43a4:	4e5c      	ldr	r6, [pc, #368]	; (4518 <nrfx_gpiote_irq_handler+0x1ac>)
    43a6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    43aa:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    43ac:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    43b0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    43b4:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    43b6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    43ba:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    43bc:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    43c0:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    43c4:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    43c8:	f8d9 3000 	ldr.w	r3, [r9]
    43cc:	b9f3      	cbnz	r3, 440c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    43ce:	f108 0820 	add.w	r8, r8, #32
    43d2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    43d6:	f109 0904 	add.w	r9, r9, #4
    43da:	d1f5      	bne.n	43c8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    43dc:	603b      	str	r3, [r7, #0]
    43de:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    43e0:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    43e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    43e6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    43ea:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    43ec:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    43f0:	9b01      	ldr	r3, [sp, #4]
    43f2:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    43f6:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    43f8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    43fc:	4313      	orrs	r3, r2
    43fe:	d1dd      	bne.n	43bc <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4400:	2401      	movs	r4, #1
    while (mask)
    4402:	2d00      	cmp	r5, #0
    4404:	d168      	bne.n	44d8 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4406:	b009      	add	sp, #36	; 0x24
    4408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    440c:	fa93 f3a3 	rbit	r3, r3
    4410:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4414:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4418:	f106 0208 	add.w	r2, r6, #8
    441c:	4b3f      	ldr	r3, [pc, #252]	; (451c <nrfx_gpiote_irq_handler+0x1b0>)
    441e:	9605      	str	r6, [sp, #20]
    4420:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4424:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4428:	08f4      	lsrs	r4, r6, #3
    442a:	9302      	str	r3, [sp, #8]
    442c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    442e:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4430:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4434:	fa0b fc00 	lsl.w	ip, fp, r0
    4438:	5d18      	ldrb	r0, [r3, r4]
    443a:	ea20 000c 	bic.w	r0, r0, ip
    443e:	5518      	strb	r0, [r3, r4]
    4440:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4442:	a805      	add	r0, sp, #20
    4444:	9103      	str	r1, [sp, #12]
    4446:	f7ff fd21 	bl	3e8c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    444a:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    444c:	9903      	ldr	r1, [sp, #12]
    444e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4452:	074b      	lsls	r3, r1, #29
    4454:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4458:	f3c4 4401 	ubfx	r4, r4, #16, #2
    445c:	d523      	bpl.n	44a6 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    445e:	4651      	mov	r1, sl
    4460:	4630      	mov	r0, r6
    4462:	f7ff fc9b 	bl	3d9c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4466:	a805      	add	r0, sp, #20
    4468:	9605      	str	r6, [sp, #20]
    446a:	f7ff fd0f 	bl	3e8c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    446e:	9a05      	ldr	r2, [sp, #20]
    4470:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4474:	b2e4      	uxtb	r4, r4
    4476:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    447a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    447e:	4294      	cmp	r4, r2
    4480:	d107      	bne.n	4492 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4482:	2100      	movs	r1, #0
    4484:	4630      	mov	r0, r6
    4486:	f004 f998 	bl	87ba <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    448a:	4621      	mov	r1, r4
    448c:	4630      	mov	r0, r6
    448e:	f004 f994 	bl	87ba <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4492:	a805      	add	r0, sp, #20
    4494:	9605      	str	r6, [sp, #20]
    4496:	f7ff fcf9 	bl	3e8c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    449a:	9b05      	ldr	r3, [sp, #20]
    449c:	fa0b f303 	lsl.w	r3, fp, r3
    44a0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    44a4:	e790      	b.n	43c8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    44a6:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    44a8:	bf0c      	ite	eq
    44aa:	2103      	moveq	r1, #3
    44ac:	2102      	movne	r1, #2
    44ae:	4630      	mov	r0, r6
    44b0:	f004 f983 	bl	87ba <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    44b4:	9b02      	ldr	r3, [sp, #8]
    44b6:	2b03      	cmp	r3, #3
    44b8:	d004      	beq.n	44c4 <nrfx_gpiote_irq_handler+0x158>
    44ba:	2c02      	cmp	r4, #2
    44bc:	d107      	bne.n	44ce <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    44be:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    44c2:	d1e6      	bne.n	4492 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    44c4:	4651      	mov	r1, sl
    44c6:	4630      	mov	r0, r6
    44c8:	f7ff fc68 	bl	3d9c <call_handler>
    44cc:	e7e1      	b.n	4492 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    44ce:	2c03      	cmp	r4, #3
    44d0:	d1df      	bne.n	4492 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    44d2:	f1ba 0f02 	cmp.w	sl, #2
    44d6:	e7f4      	b.n	44c2 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    44d8:	fa95 f3a5 	rbit	r3, r5
    44dc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    44e0:	fa04 f203 	lsl.w	r2, r4, r3
    44e4:	009b      	lsls	r3, r3, #2
    44e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    44ea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    44ee:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    44f2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    44f6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    44fa:	f3c0 2005 	ubfx	r0, r0, #8, #6
    44fe:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4502:	f7ff fc4b 	bl	3d9c <call_handler>
    4506:	e77c      	b.n	4402 <nrfx_gpiote_irq_handler+0x96>
    4508:	40006100 	.word	0x40006100
    450c:	40006000 	.word	0x40006000
    4510:	40006120 	.word	0x40006120
    4514:	4000617c 	.word	0x4000617c
    4518:	50000300 	.word	0x50000300
    451c:	20000100 	.word	0x20000100

00004520 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4520:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4522:	4801      	ldr	r0, [pc, #4]	; (4528 <nrfx_ppi_channel_alloc+0x8>)
    4524:	f7ff bbe6 	b.w	3cf4 <nrfx_flag32_alloc>
    4528:	2000017c 	.word	0x2000017c

0000452c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4530:	4604      	mov	r4, r0
    4532:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    4534:	4615      	mov	r5, r2
    4536:	b95a      	cbnz	r2, 4550 <nrf_pwm_sequence_set+0x24>
    4538:	4932      	ldr	r1, [pc, #200]	; (4604 <nrf_pwm_sequence_set+0xd8>)
    453a:	4833      	ldr	r0, [pc, #204]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    453c:	4a33      	ldr	r2, [pc, #204]	; (460c <nrf_pwm_sequence_set+0xe0>)
    453e:	f240 23a7 	movw	r3, #679	; 0x2a7
    4542:	f003 fe54 	bl	81ee <printk>
    4546:	4831      	ldr	r0, [pc, #196]	; (460c <nrf_pwm_sequence_set+0xe0>)
    4548:	f240 21a7 	movw	r1, #679	; 0x2a7
    454c:	f003 fd78 	bl	8040 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    4550:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    4552:	b95f      	cbnz	r7, 456c <nrf_pwm_sequence_set+0x40>
    4554:	492e      	ldr	r1, [pc, #184]	; (4610 <nrf_pwm_sequence_set+0xe4>)
    4556:	482c      	ldr	r0, [pc, #176]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    4558:	4a2c      	ldr	r2, [pc, #176]	; (460c <nrf_pwm_sequence_set+0xe0>)
    455a:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    455e:	f003 fe46 	bl	81ee <printk>
    4562:	482a      	ldr	r0, [pc, #168]	; (460c <nrf_pwm_sequence_set+0xe0>)
    4564:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    4568:	f003 fd6a 	bl	8040 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    456c:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    4570:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    4574:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    4576:	2f00      	cmp	r7, #0
    4578:	d138      	bne.n	45ec <nrf_pwm_sequence_set+0xc0>
    457a:	4926      	ldr	r1, [pc, #152]	; (4614 <nrf_pwm_sequence_set+0xe8>)
    457c:	4a23      	ldr	r2, [pc, #140]	; (460c <nrf_pwm_sequence_set+0xe0>)
    457e:	4822      	ldr	r0, [pc, #136]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    4580:	f240 23bd 	movw	r3, #701	; 0x2bd
    4584:	f003 fe33 	bl	81ee <printk>
    4588:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    458c:	481f      	ldr	r0, [pc, #124]	; (460c <nrf_pwm_sequence_set+0xe0>)
    458e:	f003 fd57 	bl	8040 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    4592:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    4596:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    4598:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    459c:	d30b      	bcc.n	45b6 <nrf_pwm_sequence_set+0x8a>
    459e:	491e      	ldr	r1, [pc, #120]	; (4618 <nrf_pwm_sequence_set+0xec>)
    45a0:	4819      	ldr	r0, [pc, #100]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    45a2:	4a1a      	ldr	r2, [pc, #104]	; (460c <nrf_pwm_sequence_set+0xe0>)
    45a4:	f240 23c7 	movw	r3, #711	; 0x2c7
    45a8:	f003 fe21 	bl	81ee <printk>
    45ac:	4817      	ldr	r0, [pc, #92]	; (460c <nrf_pwm_sequence_set+0xe0>)
    45ae:	f240 21c7 	movw	r1, #711	; 0x2c7
    45b2:	f003 fd45 	bl	8040 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    45b6:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    45b8:	ea4f 1846 	mov.w	r8, r6, lsl #5
    45bc:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    45c0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    45c4:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    45c8:	d30b      	bcc.n	45e2 <nrf_pwm_sequence_set+0xb6>
    45ca:	4914      	ldr	r1, [pc, #80]	; (461c <nrf_pwm_sequence_set+0xf0>)
    45cc:	480e      	ldr	r0, [pc, #56]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    45ce:	4a0f      	ldr	r2, [pc, #60]	; (460c <nrf_pwm_sequence_set+0xe0>)
    45d0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    45d4:	f003 fe0b 	bl	81ee <printk>
    45d8:	480c      	ldr	r0, [pc, #48]	; (460c <nrf_pwm_sequence_set+0xe0>)
    45da:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    45de:	f003 fd2f 	bl	8040 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    45e2:	4444      	add	r4, r8
    45e4:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    45e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    45ec:	043b      	lsls	r3, r7, #16
    45ee:	d5d0      	bpl.n	4592 <nrf_pwm_sequence_set+0x66>
    45f0:	490b      	ldr	r1, [pc, #44]	; (4620 <nrf_pwm_sequence_set+0xf4>)
    45f2:	4a06      	ldr	r2, [pc, #24]	; (460c <nrf_pwm_sequence_set+0xe0>)
    45f4:	4804      	ldr	r0, [pc, #16]	; (4608 <nrf_pwm_sequence_set+0xdc>)
    45f6:	f240 23be 	movw	r3, #702	; 0x2be
    45fa:	f003 fdf8 	bl	81ee <printk>
    45fe:	f240 21be 	movw	r1, #702	; 0x2be
    4602:	e7c3      	b.n	458c <nrf_pwm_sequence_set+0x60>
    4604:	000098bf 	.word	0x000098bf
    4608:	00009117 	.word	0x00009117
    460c:	0000988d 	.word	0x0000988d
    4610:	000098d4 	.word	0x000098d4
    4614:	000098ec 	.word	0x000098ec
    4618:	00009916 	.word	0x00009916
    461c:	00009937 	.word	0x00009937
    4620:	000098f8 	.word	0x000098f8

00004624 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4624:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4626:	0953      	lsrs	r3, r2, #5
{
    4628:	b510      	push	{r4, lr}
    462a:	4604      	mov	r4, r0
    switch (port)
    462c:	d02c      	beq.n	4688 <nrf_gpio_pin_port_decode+0x64>
    462e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4630:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4634:	bf18      	it	ne
    4636:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4638:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    463c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    463e:	07db      	lsls	r3, r3, #31
    4640:	d40b      	bmi.n	465a <nrf_gpio_pin_port_decode+0x36>
    4642:	4914      	ldr	r1, [pc, #80]	; (4694 <nrf_gpio_pin_port_decode+0x70>)
    4644:	4814      	ldr	r0, [pc, #80]	; (4698 <nrf_gpio_pin_port_decode+0x74>)
    4646:	4a15      	ldr	r2, [pc, #84]	; (469c <nrf_gpio_pin_port_decode+0x78>)
    4648:	f240 2329 	movw	r3, #553	; 0x229
    464c:	f003 fdcf 	bl	81ee <printk>
    4650:	4812      	ldr	r0, [pc, #72]	; (469c <nrf_gpio_pin_port_decode+0x78>)
    4652:	f240 2129 	movw	r1, #553	; 0x229
    4656:	f003 fcf3 	bl	8040 <assert_post_action>
    uint32_t pin_number = *p_pin;
    465a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    465c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4660:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4662:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4664:	d00d      	beq.n	4682 <nrf_gpio_pin_port_decode+0x5e>
    4666:	2b01      	cmp	r3, #1
    4668:	d011      	beq.n	468e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    466a:	490d      	ldr	r1, [pc, #52]	; (46a0 <nrf_gpio_pin_port_decode+0x7c>)
    466c:	480a      	ldr	r0, [pc, #40]	; (4698 <nrf_gpio_pin_port_decode+0x74>)
    466e:	4a0b      	ldr	r2, [pc, #44]	; (469c <nrf_gpio_pin_port_decode+0x78>)
    4670:	f240 232e 	movw	r3, #558	; 0x22e
    4674:	f003 fdbb 	bl	81ee <printk>
    4678:	4808      	ldr	r0, [pc, #32]	; (469c <nrf_gpio_pin_port_decode+0x78>)
    467a:	f240 212e 	movw	r1, #558	; 0x22e
    467e:	f003 fcdf 	bl	8040 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4682:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4686:	bd10      	pop	{r4, pc}
    switch (port)
    4688:	f04f 33ff 	mov.w	r3, #4294967295
    468c:	e7d4      	b.n	4638 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    468e:	4805      	ldr	r0, [pc, #20]	; (46a4 <nrf_gpio_pin_port_decode+0x80>)
    4690:	e7f9      	b.n	4686 <nrf_gpio_pin_port_decode+0x62>
    4692:	bf00      	nop
    4694:	00009716 	.word	0x00009716
    4698:	00009117 	.word	0x00009117
    469c:	000096e3 	.word	0x000096e3
    46a0:	000098f6 	.word	0x000098f6
    46a4:	50000300 	.word	0x50000300

000046a8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    46a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46ac:	4606      	mov	r6, r0
    46ae:	b087      	sub	sp, #28
    46b0:	4691      	mov	r9, r2
    46b2:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    46b4:	460c      	mov	r4, r1
    46b6:	b949      	cbnz	r1, 46cc <nrfx_pwm_init+0x24>
    46b8:	4959      	ldr	r1, [pc, #356]	; (4820 <nrfx_pwm_init+0x178>)
    46ba:	485a      	ldr	r0, [pc, #360]	; (4824 <nrfx_pwm_init+0x17c>)
    46bc:	4a5a      	ldr	r2, [pc, #360]	; (4828 <nrfx_pwm_init+0x180>)
    46be:	238c      	movs	r3, #140	; 0x8c
    46c0:	f003 fd95 	bl	81ee <printk>
    46c4:	4858      	ldr	r0, [pc, #352]	; (4828 <nrfx_pwm_init+0x180>)
    46c6:	218c      	movs	r1, #140	; 0x8c
    46c8:	f003 fcba 	bl	8040 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    46cc:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    46ce:	4d57      	ldr	r5, [pc, #348]	; (482c <nrfx_pwm_init+0x184>)
    46d0:	210c      	movs	r1, #12
    46d2:	4379      	muls	r1, r7
    46d4:	186b      	adds	r3, r5, r1
    46d6:	7a1a      	ldrb	r2, [r3, #8]
    46d8:	2a00      	cmp	r2, #0
    46da:	f040 809f 	bne.w	481c <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    46de:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    46e0:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    46e4:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    46e8:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    46ea:	2a00      	cmp	r2, #0
    46ec:	d04d      	beq.n	478a <nrfx_pwm_init+0xe2>
    46ee:	7b63      	ldrb	r3, [r4, #13]
    46f0:	2b00      	cmp	r3, #0
    46f2:	d04a      	beq.n	478a <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    46f4:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    46f8:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    46fc:	2301      	movs	r3, #1
    46fe:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    4702:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    4706:	f894 b005 	ldrb.w	fp, [r4, #5]
    470a:	f894 a006 	ldrb.w	sl, [r4, #6]
    470e:	2b00      	cmp	r3, #0
    4710:	da0b      	bge.n	472a <nrfx_pwm_init+0x82>
    4712:	4947      	ldr	r1, [pc, #284]	; (4830 <nrfx_pwm_init+0x188>)
    4714:	4843      	ldr	r0, [pc, #268]	; (4824 <nrfx_pwm_init+0x17c>)
    4716:	4a47      	ldr	r2, [pc, #284]	; (4834 <nrfx_pwm_init+0x18c>)
    4718:	f44f 7327 	mov.w	r3, #668	; 0x29c
    471c:	f003 fd67 	bl	81ee <printk>
    4720:	4844      	ldr	r0, [pc, #272]	; (4834 <nrfx_pwm_init+0x18c>)
    4722:	f44f 7127 	mov.w	r1, #668	; 0x29c
    4726:	f003 fc8b 	bl	8040 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    472a:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    472e:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    4730:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4734:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4738:	8963      	ldrh	r3, [r4, #10]
    473a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    473e:	2300      	movs	r3, #0
    4740:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    4744:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4748:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    474c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4750:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    4754:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    4758:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    475c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4760:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4764:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    4768:	230c      	movs	r3, #12
    476a:	437b      	muls	r3, r7
    476c:	58eb      	ldr	r3, [r5, r3]
    476e:	b11b      	cbz	r3, 4778 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4770:	f340 3007 	sbfx	r0, r0, #12, #8
    4774:	f7fd f9a2 	bl	1abc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4778:	230c      	movs	r3, #12
    477a:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    477e:	482e      	ldr	r0, [pc, #184]	; (4838 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4780:	2301      	movs	r3, #1
    4782:	722b      	strb	r3, [r5, #8]
}
    4784:	b007      	add	sp, #28
    4786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    478a:	f104 39ff 	add.w	r9, r4, #4294967295
    478e:	f10d 0808 	add.w	r8, sp, #8
    4792:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    4796:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    479a:	2aff      	cmp	r2, #255	; 0xff
    479c:	d039      	beq.n	4812 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    479e:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    47a0:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    47a4:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    47a8:	b9b1      	cbnz	r1, 47d8 <nrfx_pwm_init+0x130>
    if (value == 0)
    47aa:	0613      	lsls	r3, r2, #24
    47ac:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47b0:	a801      	add	r0, sp, #4
    if (value == 0)
    47b2:	d426      	bmi.n	4802 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47b4:	f7ff ff36 	bl	4624 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    47b8:	9901      	ldr	r1, [sp, #4]
    47ba:	2201      	movs	r2, #1
    47bc:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    47be:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    47c2:	a801      	add	r0, sp, #4
    47c4:	f8cd b004 	str.w	fp, [sp, #4]
    47c8:	f7ff ff2c 	bl	4624 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    47cc:	9b01      	ldr	r3, [sp, #4]
    47ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    47d2:	2203      	movs	r2, #3
    47d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    47d8:	45d1      	cmp	r9, sl
    47da:	f108 0804 	add.w	r8, r8, #4
    47de:	d1da      	bne.n	4796 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    47e0:	7b63      	ldrb	r3, [r4, #13]
    47e2:	2b00      	cmp	r3, #0
    47e4:	d186      	bne.n	46f4 <nrfx_pwm_init+0x4c>
    47e6:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    47e8:	9a02      	ldr	r2, [sp, #8]
    47ea:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    47ee:	9a03      	ldr	r2, [sp, #12]
    47f0:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    47f4:	9a04      	ldr	r2, [sp, #16]
    47f6:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    47fa:	9a05      	ldr	r2, [sp, #20]
    47fc:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4800:	e778      	b.n	46f4 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4802:	f7ff ff0f 	bl	4624 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4806:	9901      	ldr	r1, [sp, #4]
    4808:	2201      	movs	r2, #1
    480a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    480c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4810:	e7d7      	b.n	47c2 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4812:	f04f 33ff 	mov.w	r3, #4294967295
    4816:	f8c8 3000 	str.w	r3, [r8]
    481a:	e7dd      	b.n	47d8 <nrfx_pwm_init+0x130>
        return err_code;
    481c:	4807      	ldr	r0, [pc, #28]	; (483c <nrfx_pwm_init+0x194>)
    481e:	e7b1      	b.n	4784 <nrfx_pwm_init+0xdc>
    4820:	00009995 	.word	0x00009995
    4824:	00009117 	.word	0x00009117
    4828:	0000995a 	.word	0x0000995a
    482c:	20000be0 	.word	0x20000be0
    4830:	0000999e 	.word	0x0000999e
    4834:	0000988d 	.word	0x0000988d
    4838:	0bad0000 	.word	0x0bad0000
    483c:	0bad0005 	.word	0x0bad0005

00004840 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4846:	7903      	ldrb	r3, [r0, #4]
{
    4848:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    484a:	4a31      	ldr	r2, [pc, #196]	; (4910 <nrfx_pwm_simple_playback+0xd0>)
{
    484c:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    484e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4852:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4856:	210c      	movs	r1, #12
    4858:	fb01 2303 	mla	r3, r1, r3, r2
{
    485c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    485e:	7a1b      	ldrb	r3, [r3, #8]
    4860:	b95b      	cbnz	r3, 487a <nrfx_pwm_simple_playback+0x3a>
    4862:	492c      	ldr	r1, [pc, #176]	; (4914 <nrfx_pwm_simple_playback+0xd4>)
    4864:	482c      	ldr	r0, [pc, #176]	; (4918 <nrfx_pwm_simple_playback+0xd8>)
    4866:	4a2d      	ldr	r2, [pc, #180]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    4868:	f44f 7396 	mov.w	r3, #300	; 0x12c
    486c:	f003 fcbf 	bl	81ee <printk>
    4870:	482a      	ldr	r0, [pc, #168]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    4872:	f44f 7196 	mov.w	r1, #300	; 0x12c
    4876:	f003 fbe3 	bl	8040 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    487a:	b95c      	cbnz	r4, 4894 <nrfx_pwm_simple_playback+0x54>
    487c:	4928      	ldr	r1, [pc, #160]	; (4920 <nrfx_pwm_simple_playback+0xe0>)
    487e:	4826      	ldr	r0, [pc, #152]	; (4918 <nrfx_pwm_simple_playback+0xd8>)
    4880:	4a26      	ldr	r2, [pc, #152]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    4882:	f240 132d 	movw	r3, #301	; 0x12d
    4886:	f003 fcb2 	bl	81ee <printk>
    488a:	4824      	ldr	r0, [pc, #144]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    488c:	f240 112d 	movw	r1, #301	; 0x12d
    4890:	f003 fbd6 	bl	8040 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4894:	6833      	ldr	r3, [r6, #0]
    4896:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    489a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    489e:	d00b      	beq.n	48b8 <nrfx_pwm_simple_playback+0x78>
    48a0:	4920      	ldr	r1, [pc, #128]	; (4924 <nrfx_pwm_simple_playback+0xe4>)
    48a2:	481d      	ldr	r0, [pc, #116]	; (4918 <nrfx_pwm_simple_playback+0xd8>)
    48a4:	4a1d      	ldr	r2, [pc, #116]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    48a6:	f44f 7397 	mov.w	r3, #302	; 0x12e
    48aa:	f003 fca0 	bl	81ee <printk>
    48ae:	481b      	ldr	r0, [pc, #108]	; (491c <nrfx_pwm_simple_playback+0xdc>)
    48b0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    48b4:	f003 fbc4 	bl	8040 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    48b8:	6828      	ldr	r0, [r5, #0]
    48ba:	4632      	mov	r2, r6
    48bc:	2100      	movs	r1, #0
    48be:	f7ff fe35 	bl	452c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    48c2:	6828      	ldr	r0, [r5, #0]
    48c4:	4632      	mov	r2, r6
    48c6:	2101      	movs	r1, #1
    48c8:	f7ff fe30 	bl	452c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    48cc:	6828      	ldr	r0, [r5, #0]
    48ce:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    48d2:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    48d6:	f018 0f01 	tst.w	r8, #1
    48da:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    48de:	d114      	bne.n	490a <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    48e0:	f018 0202 	ands.w	r2, r8, #2
    48e4:	d003      	beq.n	48ee <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    48e6:	2b00      	cmp	r3, #0
    48e8:	bf14      	ite	ne
    48ea:	2208      	movne	r2, #8
    48ec:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    48ee:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    48f0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    48f4:	4639      	mov	r1, r7
    48f6:	fa5f f288 	uxtb.w	r2, r8
    48fa:	bf18      	it	ne
    48fc:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    48fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    4902:	bf08      	it	eq
    4904:	2308      	moveq	r3, #8
    4906:	f003 bf67 	b.w	87d8 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    490a:	2210      	movs	r2, #16
    490c:	e7ef      	b.n	48ee <nrfx_pwm_simple_playback+0xae>
    490e:	bf00      	nop
    4910:	20000be0 	.word	0x20000be0
    4914:	000099bf 	.word	0x000099bf
    4918:	00009117 	.word	0x00009117
    491c:	0000995a 	.word	0x0000995a
    4920:	000099eb 	.word	0x000099eb
    4924:	000099fe 	.word	0x000099fe

00004928 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    4928:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    492a:	4e12      	ldr	r6, [pc, #72]	; (4974 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    492c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    492e:	220c      	movs	r2, #12
    4930:	fb02 6204 	mla	r2, r2, r4, r6
{
    4934:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4936:	7a12      	ldrb	r2, [r2, #8]
    4938:	b95a      	cbnz	r2, 4952 <nrfx_pwm_is_stopped+0x2a>
    493a:	490f      	ldr	r1, [pc, #60]	; (4978 <nrfx_pwm_is_stopped+0x50>)
    493c:	480f      	ldr	r0, [pc, #60]	; (497c <nrfx_pwm_is_stopped+0x54>)
    493e:	4a10      	ldr	r2, [pc, #64]	; (4980 <nrfx_pwm_is_stopped+0x58>)
    4940:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    4944:	f003 fc53 	bl	81ee <printk>
    4948:	480d      	ldr	r0, [pc, #52]	; (4980 <nrfx_pwm_is_stopped+0x58>)
    494a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    494e:	f003 fb77 	bl	8040 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4952:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4954:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4956:	fb03 6404 	mla	r4, r3, r4, r6
    495a:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    495c:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    4960:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4962:	b91a      	cbnz	r2, 496c <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4964:	1e98      	subs	r0, r3, #2
    4966:	bf18      	it	ne
    4968:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    496a:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    496c:	2001      	movs	r0, #1
    496e:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    4970:	e7fb      	b.n	496a <nrfx_pwm_is_stopped+0x42>
    4972:	bf00      	nop
    4974:	20000be0 	.word	0x20000be0
    4978:	000099bf 	.word	0x000099bf
    497c:	00009117 	.word	0x00009117
    4980:	0000995a 	.word	0x0000995a

00004984 <nrfx_pwm_stop>:
{
    4984:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4986:	4a14      	ldr	r2, [pc, #80]	; (49d8 <nrfx_pwm_stop+0x54>)
    4988:	7903      	ldrb	r3, [r0, #4]
{
    498a:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    498c:	210c      	movs	r1, #12
    498e:	fb01 2303 	mla	r3, r1, r3, r2
{
    4992:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    4994:	7a1b      	ldrb	r3, [r3, #8]
    4996:	b95b      	cbnz	r3, 49b0 <nrfx_pwm_stop+0x2c>
    4998:	4910      	ldr	r1, [pc, #64]	; (49dc <nrfx_pwm_stop+0x58>)
    499a:	4811      	ldr	r0, [pc, #68]	; (49e0 <nrfx_pwm_stop+0x5c>)
    499c:	4a11      	ldr	r2, [pc, #68]	; (49e4 <nrfx_pwm_stop+0x60>)
    499e:	f240 1385 	movw	r3, #389	; 0x185
    49a2:	f003 fc24 	bl	81ee <printk>
    49a6:	480f      	ldr	r0, [pc, #60]	; (49e4 <nrfx_pwm_stop+0x60>)
    49a8:	f240 1185 	movw	r1, #389	; 0x185
    49ac:	f003 fb48 	bl	8040 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    49b0:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    49b2:	2200      	movs	r2, #0
    49b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49b8:	2201      	movs	r2, #1
    49ba:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    49bc:	4620      	mov	r0, r4
    49be:	f7ff ffb3 	bl	4928 <nrfx_pwm_is_stopped>
    49c2:	b938      	cbnz	r0, 49d4 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    49c4:	4620      	mov	r0, r4
    49c6:	f7ff ffaf 	bl	4928 <nrfx_pwm_is_stopped>
    49ca:	b918      	cbnz	r0, 49d4 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    49cc:	2d00      	cmp	r5, #0
    49ce:	d1f9      	bne.n	49c4 <nrfx_pwm_stop+0x40>
}
    49d0:	4628      	mov	r0, r5
    49d2:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    49d4:	2501      	movs	r5, #1
    49d6:	e7fb      	b.n	49d0 <nrfx_pwm_stop+0x4c>
    49d8:	20000be0 	.word	0x20000be0
    49dc:	00009a27 	.word	0x00009a27
    49e0:	00009117 	.word	0x00009117
    49e4:	0000995a 	.word	0x0000995a

000049e8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    49e8:	4b03      	ldr	r3, [pc, #12]	; (49f8 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    49ea:	6818      	ldr	r0, [r3, #0]
}
    49ec:	f1a0 0308 	sub.w	r3, r0, #8
    49f0:	4258      	negs	r0, r3
    49f2:	4158      	adcs	r0, r3
    49f4:	4770      	bx	lr
    49f6:	bf00      	nop
    49f8:	10000130 	.word	0x10000130

000049fc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    49fc:	4b06      	ldr	r3, [pc, #24]	; (4a18 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    49fe:	681b      	ldr	r3, [r3, #0]
    4a00:	2b08      	cmp	r3, #8
    4a02:	d106      	bne.n	4a12 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4a04:	4b05      	ldr	r3, [pc, #20]	; (4a1c <nrf52_errata_103+0x20>)
    4a06:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4a08:	2b05      	cmp	r3, #5
    4a0a:	d802      	bhi.n	4a12 <nrf52_errata_103+0x16>
    4a0c:	4a04      	ldr	r2, [pc, #16]	; (4a20 <nrf52_errata_103+0x24>)
    4a0e:	5cd0      	ldrb	r0, [r2, r3]
    4a10:	4770      	bx	lr
        return false;
    4a12:	2000      	movs	r0, #0
}
    4a14:	4770      	bx	lr
    4a16:	bf00      	nop
    4a18:	10000130 	.word	0x10000130
    4a1c:	10000134 	.word	0x10000134
    4a20:	00009a72 	.word	0x00009a72

00004a24 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4a24:	4a02      	ldr	r2, [pc, #8]	; (4a30 <nvmc_wait+0xc>)
    4a26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d0fb      	beq.n	4a26 <nvmc_wait+0x2>
}
    4a2e:	4770      	bx	lr
    4a30:	4001e000 	.word	0x4001e000

00004a34 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4a34:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4a36:	f7ff ffd7 	bl	49e8 <nrf52_errata_136>
    4a3a:	b140      	cbz	r0, 4a4e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a40:	2200      	movs	r2, #0
    4a42:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4a46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4a4a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4a4e:	f7ff ffcb 	bl	49e8 <nrf52_errata_136>
    4a52:	2800      	cmp	r0, #0
    4a54:	d046      	beq.n	4ae4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a5a:	4b5b      	ldr	r3, [pc, #364]	; (4bc8 <SystemInit+0x194>)
    4a5c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4a60:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4a64:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4a68:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4a6c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4a70:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4a74:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4a78:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4a7c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4a80:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4a84:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4a88:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4a8c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4a90:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4a94:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4a98:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4a9c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4aa0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4aa4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4aa8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4aac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4ab0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4ab4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4ab8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4abc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4ac0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4ac4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4ac8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4acc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4ad0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4ad4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4ad8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4adc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4ae0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4ae4:	f7ff ff8a 	bl	49fc <nrf52_errata_103>
    4ae8:	b110      	cbz	r0, 4af0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4aea:	4b38      	ldr	r3, [pc, #224]	; (4bcc <SystemInit+0x198>)
    4aec:	4a38      	ldr	r2, [pc, #224]	; (4bd0 <SystemInit+0x19c>)
    4aee:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4af0:	f7ff ff84 	bl	49fc <nrf52_errata_103>
    4af4:	b118      	cbz	r0, 4afe <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4af6:	4b37      	ldr	r3, [pc, #220]	; (4bd4 <SystemInit+0x1a0>)
    4af8:	22fb      	movs	r2, #251	; 0xfb
    4afa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4afe:	f7ff ff7d 	bl	49fc <nrf52_errata_103>
    4b02:	b148      	cbz	r0, 4b18 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4b04:	4934      	ldr	r1, [pc, #208]	; (4bd8 <SystemInit+0x1a4>)
    4b06:	4b35      	ldr	r3, [pc, #212]	; (4bdc <SystemInit+0x1a8>)
    4b08:	680a      	ldr	r2, [r1, #0]
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	f022 020f 	bic.w	r2, r2, #15
    4b10:	f003 030f 	and.w	r3, r3, #15
    4b14:	4313      	orrs	r3, r2
    4b16:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4b18:	f7ff ff70 	bl	49fc <nrf52_errata_103>
    4b1c:	b118      	cbz	r0, 4b26 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4b1e:	4b30      	ldr	r3, [pc, #192]	; (4be0 <SystemInit+0x1ac>)
    4b20:	f44f 7200 	mov.w	r2, #512	; 0x200
    4b24:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4b26:	f7ff ff5f 	bl	49e8 <nrf52_errata_136>
    4b2a:	b148      	cbz	r0, 4b40 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4b34:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4b36:	bf44      	itt	mi
    4b38:	f06f 0201 	mvnmi.w	r2, #1
    4b3c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4b40:	4b28      	ldr	r3, [pc, #160]	; (4be4 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	2b08      	cmp	r3, #8
    4b46:	d10e      	bne.n	4b66 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4b48:	4b27      	ldr	r3, [pc, #156]	; (4be8 <SystemInit+0x1b4>)
    4b4a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4b4c:	2b05      	cmp	r3, #5
    4b4e:	d802      	bhi.n	4b56 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4b50:	4a26      	ldr	r2, [pc, #152]	; (4bec <SystemInit+0x1b8>)
    4b52:	5cd3      	ldrb	r3, [r2, r3]
    4b54:	b13b      	cbz	r3, 4b66 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4b56:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4b5a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b62:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4b66:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4b6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4b6e:	2a00      	cmp	r2, #0
    4b70:	db03      	blt.n	4b7a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4b72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4b76:	2b00      	cmp	r3, #0
    4b78:	da22      	bge.n	4bc0 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4b7a:	491d      	ldr	r1, [pc, #116]	; (4bf0 <SystemInit+0x1bc>)
    4b7c:	2301      	movs	r3, #1
    4b7e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4b82:	f7ff ff4f 	bl	4a24 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4b86:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4b8a:	2412      	movs	r4, #18
    4b8c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4b90:	f7ff ff48 	bl	4a24 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4b94:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4b98:	f7ff ff44 	bl	4a24 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4b9c:	2300      	movs	r3, #0
    4b9e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4ba2:	f7ff ff3f 	bl	4a24 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4ba6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4baa:	4912      	ldr	r1, [pc, #72]	; (4bf4 <SystemInit+0x1c0>)
    4bac:	4b12      	ldr	r3, [pc, #72]	; (4bf8 <SystemInit+0x1c4>)
    4bae:	68ca      	ldr	r2, [r1, #12]
    4bb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4bb4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4bb6:	60cb      	str	r3, [r1, #12]
    4bb8:	f3bf 8f4f 	dsb	sy
    __NOP();
    4bbc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4bbe:	e7fd      	b.n	4bbc <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4bc0:	4b0e      	ldr	r3, [pc, #56]	; (4bfc <SystemInit+0x1c8>)
    4bc2:	4a0f      	ldr	r2, [pc, #60]	; (4c00 <SystemInit+0x1cc>)
    4bc4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4bc6:	bd10      	pop	{r4, pc}
    4bc8:	4000c000 	.word	0x4000c000
    4bcc:	4000568c 	.word	0x4000568c
    4bd0:	00038148 	.word	0x00038148
    4bd4:	4000f000 	.word	0x4000f000
    4bd8:	40000ee4 	.word	0x40000ee4
    4bdc:	10000258 	.word	0x10000258
    4be0:	40029640 	.word	0x40029640
    4be4:	10000130 	.word	0x10000130
    4be8:	10000134 	.word	0x10000134
    4bec:	00009a6c 	.word	0x00009a6c
    4bf0:	4001e000 	.word	0x4001e000
    4bf4:	e000ed00 	.word	0xe000ed00
    4bf8:	05fa0004 	.word	0x05fa0004
    4bfc:	20000180 	.word	0x20000180
    4c00:	03d09000 	.word	0x03d09000

00004c04 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c04:	4b0e      	ldr	r3, [pc, #56]	; (4c40 <z_sys_init_run_level+0x3c>)
{
    4c06:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c08:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4c0c:	3001      	adds	r0, #1
    4c0e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4c12:	42a6      	cmp	r6, r4
    4c14:	d800      	bhi.n	4c18 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4c16:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4c18:	e9d4 3500 	ldrd	r3, r5, [r4]
    4c1c:	4628      	mov	r0, r5
    4c1e:	4798      	blx	r3
		if (dev != NULL) {
    4c20:	b165      	cbz	r5, 4c3c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4c22:	68eb      	ldr	r3, [r5, #12]
    4c24:	b130      	cbz	r0, 4c34 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4c26:	2800      	cmp	r0, #0
    4c28:	bfb8      	it	lt
    4c2a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4c2c:	28ff      	cmp	r0, #255	; 0xff
    4c2e:	bfa8      	it	ge
    4c30:	20ff      	movge	r0, #255	; 0xff
    4c32:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4c34:	785a      	ldrb	r2, [r3, #1]
    4c36:	f042 0201 	orr.w	r2, r2, #1
    4c3a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4c3c:	3408      	adds	r4, #8
    4c3e:	e7e8      	b.n	4c12 <z_sys_init_run_level+0xe>
    4c40:	00008dbc 	.word	0x00008dbc

00004c44 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4c44:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4c46:	4605      	mov	r5, r0
    4c48:	b910      	cbnz	r0, 4c50 <z_impl_device_get_binding+0xc>
		return NULL;
    4c4a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4c4c:	4620      	mov	r0, r4
    4c4e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4c50:	7803      	ldrb	r3, [r0, #0]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d0f9      	beq.n	4c4a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c56:	4a0f      	ldr	r2, [pc, #60]	; (4c94 <z_impl_device_get_binding+0x50>)
    4c58:	4c0f      	ldr	r4, [pc, #60]	; (4c98 <z_impl_device_get_binding+0x54>)
    4c5a:	4616      	mov	r6, r2
    4c5c:	4294      	cmp	r4, r2
    4c5e:	d108      	bne.n	4c72 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c60:	4c0d      	ldr	r4, [pc, #52]	; (4c98 <z_impl_device_get_binding+0x54>)
    4c62:	42b4      	cmp	r4, r6
    4c64:	d0f1      	beq.n	4c4a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4c66:	4620      	mov	r0, r4
    4c68:	f003 fdda 	bl	8820 <z_device_ready>
    4c6c:	b950      	cbnz	r0, 4c84 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c6e:	3418      	adds	r4, #24
    4c70:	e7f7      	b.n	4c62 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4c72:	4620      	mov	r0, r4
    4c74:	f003 fdd4 	bl	8820 <z_device_ready>
    4c78:	b110      	cbz	r0, 4c80 <z_impl_device_get_binding+0x3c>
    4c7a:	6823      	ldr	r3, [r4, #0]
    4c7c:	42ab      	cmp	r3, r5
    4c7e:	d0e5      	beq.n	4c4c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4c80:	3418      	adds	r4, #24
    4c82:	e7eb      	b.n	4c5c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4c84:	6821      	ldr	r1, [r4, #0]
    4c86:	4628      	mov	r0, r5
    4c88:	f003 faf3 	bl	8272 <strcmp>
    4c8c:	2800      	cmp	r0, #0
    4c8e:	d1ee      	bne.n	4c6e <z_impl_device_get_binding+0x2a>
    4c90:	e7dc      	b.n	4c4c <z_impl_device_get_binding+0x8>
    4c92:	bf00      	nop
    4c94:	00008a9c 	.word	0x00008a9c
    4c98:	000089f4 	.word	0x000089f4

00004c9c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c9e:	4604      	mov	r4, r0
    4ca0:	460e      	mov	r6, r1
	__asm__ volatile(
    4ca2:	f04f 0320 	mov.w	r3, #32
    4ca6:	f3ef 8711 	mrs	r7, BASEPRI
    4caa:	f383 8812 	msr	BASEPRI_MAX, r3
    4cae:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4cb2:	f001 fdb3 	bl	681c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4cb6:	4631      	mov	r1, r6
    4cb8:	4605      	mov	r5, r0
    4cba:	4620      	mov	r0, r4
    4cbc:	f003 fd0b 	bl	86d6 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4cc0:	2c04      	cmp	r4, #4
    4cc2:	d10c      	bne.n	4cde <z_fatal_error+0x42>
    4cc4:	490a      	ldr	r1, [pc, #40]	; (4cf0 <z_fatal_error+0x54>)
    4cc6:	4a0b      	ldr	r2, [pc, #44]	; (4cf4 <z_fatal_error+0x58>)
    4cc8:	480b      	ldr	r0, [pc, #44]	; (4cf8 <z_fatal_error+0x5c>)
    4cca:	238f      	movs	r3, #143	; 0x8f
    4ccc:	f003 fa8f 	bl	81ee <printk>
    4cd0:	480a      	ldr	r0, [pc, #40]	; (4cfc <z_fatal_error+0x60>)
    4cd2:	f003 fa8c 	bl	81ee <printk>
    4cd6:	4807      	ldr	r0, [pc, #28]	; (4cf4 <z_fatal_error+0x58>)
    4cd8:	218f      	movs	r1, #143	; 0x8f
    4cda:	f003 f9b1 	bl	8040 <assert_post_action>
	__asm__ volatile(
    4cde:	f387 8811 	msr	BASEPRI, r7
    4ce2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4ce6:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4cec:	f7fd b992 	b.w	2014 <z_impl_k_thread_abort>
    4cf0:	00009a9a 	.word	0x00009a9a
    4cf4:	00009a78 	.word	0x00009a78
    4cf8:	00009117 	.word	0x00009117
    4cfc:	00009ab7 	.word	0x00009ab7

00004d00 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4d00:	4c11      	ldr	r4, [pc, #68]	; (4d48 <idle+0x48>)
    4d02:	68a2      	ldr	r2, [r4, #8]
    4d04:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4d08:	2a00      	cmp	r2, #0
{
    4d0a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4d0c:	da09      	bge.n	4d22 <idle+0x22>
    4d0e:	490f      	ldr	r1, [pc, #60]	; (4d4c <idle+0x4c>)
    4d10:	480f      	ldr	r0, [pc, #60]	; (4d50 <idle+0x50>)
    4d12:	4a10      	ldr	r2, [pc, #64]	; (4d54 <idle+0x54>)
    4d14:	2327      	movs	r3, #39	; 0x27
    4d16:	f003 fa6a 	bl	81ee <printk>
    4d1a:	480e      	ldr	r0, [pc, #56]	; (4d54 <idle+0x54>)
    4d1c:	2127      	movs	r1, #39	; 0x27
    4d1e:	f003 f98f 	bl	8040 <assert_post_action>
	__asm__ volatile(
    4d22:	f04f 0220 	mov.w	r2, #32
    4d26:	f3ef 8311 	mrs	r3, BASEPRI
    4d2a:	f382 8812 	msr	BASEPRI_MAX, r2
    4d2e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4d32:	f002 fa69 	bl	7208 <z_get_next_timeout_expiry>
    4d36:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4d38:	f7fc fd94 	bl	1864 <pm_system_suspend>
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d1f0      	bne.n	4d22 <idle+0x22>
	arch_cpu_idle();
    4d40:	f7fc fe46 	bl	19d0 <arch_cpu_idle>
}
    4d44:	e7ed      	b.n	4d22 <idle+0x22>
    4d46:	bf00      	nop
    4d48:	20000bec 	.word	0x20000bec
    4d4c:	00009b0d 	.word	0x00009b0d
    4d50:	00009117 	.word	0x00009117
    4d54:	00009aec 	.word	0x00009aec

00004d58 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4d58:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4d5a:	2300      	movs	r3, #0
{
    4d5c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4d5e:	2201      	movs	r2, #1
    4d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4d64:	220f      	movs	r2, #15
    4d66:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4d6a:	4c0d      	ldr	r4, [pc, #52]	; (4da0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d6c:	4a0d      	ldr	r2, [pc, #52]	; (4da4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4d6e:	9301      	str	r3, [sp, #4]
    4d70:	490d      	ldr	r1, [pc, #52]	; (4da8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d72:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4d74:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4d78:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4d7c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4d80:	9300      	str	r3, [sp, #0]
    4d82:	fb05 1100 	mla	r1, r5, r0, r1
    4d86:	4b09      	ldr	r3, [pc, #36]	; (4dac <init_idle_thread+0x54>)
    4d88:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4d8c:	4620      	mov	r0, r4
    4d8e:	f001 ff61 	bl	6c54 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4d92:	7b63      	ldrb	r3, [r4, #13]
    4d94:	f023 0304 	bic.w	r3, r3, #4
    4d98:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4d9a:	b007      	add	sp, #28
    4d9c:	bd30      	pop	{r4, r5, pc}
    4d9e:	bf00      	nop
    4da0:	200003f8 	.word	0x200003f8
    4da4:	20000bec 	.word	0x20000bec
    4da8:	20001ea0 	.word	0x20001ea0
    4dac:	00004d01 	.word	0x00004d01

00004db0 <bg_thread_main>:
{
    4db0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4db2:	4b0a      	ldr	r3, [pc, #40]	; (4ddc <bg_thread_main+0x2c>)
    4db4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4db6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4db8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4dba:	f7ff ff23 	bl	4c04 <z_sys_init_run_level>
	boot_banner();
    4dbe:	f002 ff53 	bl	7c68 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4dc2:	2003      	movs	r0, #3
    4dc4:	f7ff ff1e 	bl	4c04 <z_sys_init_run_level>
	z_init_static_threads();
    4dc8:	f001 fff6 	bl	6db8 <z_init_static_threads>
	main();
    4dcc:	f7fb fca0 	bl	710 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4dd0:	4a03      	ldr	r2, [pc, #12]	; (4de0 <bg_thread_main+0x30>)
    4dd2:	7b13      	ldrb	r3, [r2, #12]
    4dd4:	f023 0301 	bic.w	r3, r3, #1
    4dd8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4dda:	bd08      	pop	{r3, pc}
    4ddc:	20000c63 	.word	0x20000c63
    4de0:	20000478 	.word	0x20000478

00004de4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4de4:	4802      	ldr	r0, [pc, #8]	; (4df0 <z_bss_zero+0xc>)
    4de6:	4a03      	ldr	r2, [pc, #12]	; (4df4 <z_bss_zero+0x10>)
    4de8:	2100      	movs	r1, #0
    4dea:	1a12      	subs	r2, r2, r0
    4dec:	f003 ba58 	b.w	82a0 <memset>
    4df0:	20000258 	.word	0x20000258
    4df4:	20000e20 	.word	0x20000e20

00004df8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4df8:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4dfa:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4ed4 <z_cstart+0xdc>
    4dfe:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4e00:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4e04:	4d2d      	ldr	r5, [pc, #180]	; (4ebc <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4e06:	4e2e      	ldr	r6, [pc, #184]	; (4ec0 <z_cstart+0xc8>)
    4e08:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e0a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4ed8 <z_cstart+0xe0>
    4e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e12:	2400      	movs	r4, #0
    4e14:	616b      	str	r3, [r5, #20]
    4e16:	23e0      	movs	r3, #224	; 0xe0
    4e18:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4e1c:	77ec      	strb	r4, [r5, #31]
    4e1e:	762c      	strb	r4, [r5, #24]
    4e20:	766c      	strb	r4, [r5, #25]
    4e22:	76ac      	strb	r4, [r5, #26]
    4e24:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4e28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e2a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4e2e:	626b      	str	r3, [r5, #36]	; 0x24
    4e30:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4e34:	f7fd f898 	bl	1f68 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4e38:	f7fc fdc4 	bl	19c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4e3c:	f04f 33ff 	mov.w	r3, #4294967295
    4e40:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4e42:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4e44:	f7fd f9c0 	bl	21c8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4e48:	f7fd f8f6 	bl	2038 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4e4c:	f240 1301 	movw	r3, #257	; 0x101
    4e50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4e54:	ab06      	add	r3, sp, #24
    4e56:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4e58:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4e5c:	f003 fcdf 	bl	881e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4e60:	4620      	mov	r0, r4
    4e62:	f7ff fecf 	bl	4c04 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4e66:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4e68:	4d16      	ldr	r5, [pc, #88]	; (4ec4 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4e6a:	f7ff fecb 	bl	4c04 <z_sys_init_run_level>
	z_sched_init();
    4e6e:	f001 fb3f 	bl	64f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e72:	4b15      	ldr	r3, [pc, #84]	; (4ec8 <z_cstart+0xd0>)
    4e74:	9305      	str	r3, [sp, #20]
    4e76:	2301      	movs	r3, #1
    4e78:	4914      	ldr	r1, [pc, #80]	; (4ecc <z_cstart+0xd4>)
    4e7a:	9400      	str	r4, [sp, #0]
    4e7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4e84:	464b      	mov	r3, r9
    4e86:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4e8a:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    4e8c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e8e:	f001 fee1 	bl	6c54 <z_setup_new_thread>
    4e92:	7b6a      	ldrb	r2, [r5, #13]
    4e94:	f022 0204 	bic.w	r2, r2, #4
    4e98:	736a      	strb	r2, [r5, #13]
    4e9a:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    4e9c:	4628      	mov	r0, r5
    4e9e:	f000 ff27 	bl	5cf0 <z_ready_thread>
		init_idle_thread(i);
    4ea2:	4620      	mov	r0, r4
    4ea4:	f7ff ff58 	bl	4d58 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4ea8:	4b09      	ldr	r3, [pc, #36]	; (4ed0 <z_cstart+0xd8>)
    4eaa:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4eac:	464a      	mov	r2, r9
    4eae:	4639      	mov	r1, r7
    4eb0:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4eb2:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4eb4:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4eb8:	f7fc febe 	bl	1c38 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4ebc:	e000ed00 	.word	0xe000ed00
    4ec0:	20000bec 	.word	0x20000bec
    4ec4:	20000478 	.word	0x20000478
    4ec8:	00009b35 	.word	0x00009b35
    4ecc:	20001a80 	.word	0x20001a80
    4ed0:	200003f8 	.word	0x200003f8
    4ed4:	20002820 	.word	0x20002820
    4ed8:	00004db1 	.word	0x00004db1

00004edc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4ee0:	4d16      	ldr	r5, [pc, #88]	; (4f3c <init_mem_slab_module+0x60>)
    4ee2:	4c17      	ldr	r4, [pc, #92]	; (4f40 <init_mem_slab_module+0x64>)
    4ee4:	4e17      	ldr	r6, [pc, #92]	; (4f44 <init_mem_slab_module+0x68>)
    4ee6:	46a8      	mov	r8, r5
    4ee8:	42ac      	cmp	r4, r5
    4eea:	d90c      	bls.n	4f06 <init_mem_slab_module+0x2a>
    4eec:	4916      	ldr	r1, [pc, #88]	; (4f48 <init_mem_slab_module+0x6c>)
    4eee:	4817      	ldr	r0, [pc, #92]	; (4f4c <init_mem_slab_module+0x70>)
    4ef0:	233c      	movs	r3, #60	; 0x3c
    4ef2:	4632      	mov	r2, r6
    4ef4:	f003 f97b 	bl	81ee <printk>
    4ef8:	4815      	ldr	r0, [pc, #84]	; (4f50 <init_mem_slab_module+0x74>)
    4efa:	f003 f978 	bl	81ee <printk>
    4efe:	213c      	movs	r1, #60	; 0x3c
    4f00:	4630      	mov	r0, r6
    4f02:	f003 f89d 	bl	8040 <assert_post_action>
    4f06:	4544      	cmp	r4, r8
    4f08:	d302      	bcc.n	4f10 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4f0a:	2000      	movs	r0, #0
	return rc;
}
    4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4f10:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4f14:	ea41 0302 	orr.w	r3, r1, r2
    4f18:	f013 0303 	ands.w	r3, r3, #3
    4f1c:	d10b      	bne.n	4f36 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4f1e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4f20:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4f22:	4283      	cmp	r3, r0
    4f24:	d101      	bne.n	4f2a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4f26:	3420      	adds	r4, #32
    4f28:	e7de      	b.n	4ee8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4f2a:	69a7      	ldr	r7, [r4, #24]
    4f2c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4f2e:	3301      	adds	r3, #1
		slab->free_list = p;
    4f30:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4f32:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4f34:	e7f5      	b.n	4f22 <init_mem_slab_module+0x46>
		return -EINVAL;
    4f36:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4f3a:	e7e7      	b.n	4f0c <init_mem_slab_module+0x30>
    4f3c:	20000208 	.word	0x20000208
    4f40:	20000208 	.word	0x20000208
    4f44:	00009b3a 	.word	0x00009b3a
    4f48:	00009b5f 	.word	0x00009b5f
    4f4c:	00009117 	.word	0x00009117
    4f50:	00009b7c 	.word	0x00009b7c

00004f54 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4f58:	4604      	mov	r4, r0
    4f5a:	460e      	mov	r6, r1
    4f5c:	4690      	mov	r8, r2
    4f5e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4f60:	f100 0508 	add.w	r5, r0, #8
    4f64:	f04f 0320 	mov.w	r3, #32
    4f68:	f3ef 8711 	mrs	r7, BASEPRI
    4f6c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f74:	4628      	mov	r0, r5
    4f76:	f001 ffaf 	bl	6ed8 <z_spin_lock_valid>
    4f7a:	b968      	cbnz	r0, 4f98 <k_mem_slab_alloc+0x44>
    4f7c:	4a24      	ldr	r2, [pc, #144]	; (5010 <k_mem_slab_alloc+0xbc>)
    4f7e:	4925      	ldr	r1, [pc, #148]	; (5014 <k_mem_slab_alloc+0xc0>)
    4f80:	4825      	ldr	r0, [pc, #148]	; (5018 <k_mem_slab_alloc+0xc4>)
    4f82:	2381      	movs	r3, #129	; 0x81
    4f84:	f003 f933 	bl	81ee <printk>
    4f88:	4824      	ldr	r0, [pc, #144]	; (501c <k_mem_slab_alloc+0xc8>)
    4f8a:	4629      	mov	r1, r5
    4f8c:	f003 f92f 	bl	81ee <printk>
    4f90:	481f      	ldr	r0, [pc, #124]	; (5010 <k_mem_slab_alloc+0xbc>)
    4f92:	2181      	movs	r1, #129	; 0x81
    4f94:	f003 f854 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f98:	4628      	mov	r0, r5
    4f9a:	f001 ffbb 	bl	6f14 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4f9e:	69a3      	ldr	r3, [r4, #24]
    4fa0:	b1eb      	cbz	r3, 4fde <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    4fa2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4fa4:	681b      	ldr	r3, [r3, #0]
    4fa6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4fa8:	69e3      	ldr	r3, [r4, #28]
    4faa:	3301      	adds	r3, #1
    4fac:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4fae:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fb0:	4628      	mov	r0, r5
    4fb2:	f001 ff9f 	bl	6ef4 <z_spin_unlock_valid>
    4fb6:	b968      	cbnz	r0, 4fd4 <k_mem_slab_alloc+0x80>
    4fb8:	4a15      	ldr	r2, [pc, #84]	; (5010 <k_mem_slab_alloc+0xbc>)
    4fba:	4919      	ldr	r1, [pc, #100]	; (5020 <k_mem_slab_alloc+0xcc>)
    4fbc:	4816      	ldr	r0, [pc, #88]	; (5018 <k_mem_slab_alloc+0xc4>)
    4fbe:	23ac      	movs	r3, #172	; 0xac
    4fc0:	f003 f915 	bl	81ee <printk>
    4fc4:	4817      	ldr	r0, [pc, #92]	; (5024 <k_mem_slab_alloc+0xd0>)
    4fc6:	4629      	mov	r1, r5
    4fc8:	f003 f911 	bl	81ee <printk>
    4fcc:	4810      	ldr	r0, [pc, #64]	; (5010 <k_mem_slab_alloc+0xbc>)
    4fce:	21ac      	movs	r1, #172	; 0xac
    4fd0:	f003 f836 	bl	8040 <assert_post_action>
	__asm__ volatile(
    4fd4:	f387 8811 	msr	BASEPRI, r7
    4fd8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4fdc:	e013      	b.n	5006 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4fde:	ea58 0209 	orrs.w	r2, r8, r9
    4fe2:	d103      	bne.n	4fec <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4fe4:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4fe6:	f06f 040b 	mvn.w	r4, #11
    4fea:	e7e1      	b.n	4fb0 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4fec:	4622      	mov	r2, r4
    4fee:	e9cd 8900 	strd	r8, r9, [sp]
    4ff2:	4639      	mov	r1, r7
    4ff4:	4628      	mov	r0, r5
    4ff6:	f001 f82d 	bl	6054 <z_pend_curr>
		if (result == 0) {
    4ffa:	4604      	mov	r4, r0
    4ffc:	b918      	cbnz	r0, 5006 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4ffe:	4b0a      	ldr	r3, [pc, #40]	; (5028 <k_mem_slab_alloc+0xd4>)
    5000:	689b      	ldr	r3, [r3, #8]
    5002:	695b      	ldr	r3, [r3, #20]
    5004:	6033      	str	r3, [r6, #0]
}
    5006:	4620      	mov	r0, r4
    5008:	b003      	add	sp, #12
    500a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    500e:	bf00      	nop
    5010:	0000922a 	.word	0x0000922a
    5014:	0000927c 	.word	0x0000927c
    5018:	00009117 	.word	0x00009117
    501c:	00009291 	.word	0x00009291
    5020:	00009250 	.word	0x00009250
    5024:	00009267 	.word	0x00009267
    5028:	20000bec 	.word	0x20000bec

0000502c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5030:	4604      	mov	r4, r0
    5032:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5034:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5038:	f04f 0320 	mov.w	r3, #32
    503c:	f3ef 8711 	mrs	r7, BASEPRI
    5040:	f383 8812 	msr	BASEPRI_MAX, r3
    5044:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5048:	4628      	mov	r0, r5
    504a:	f001 ff45 	bl	6ed8 <z_spin_lock_valid>
    504e:	b968      	cbnz	r0, 506c <k_mem_slab_free+0x40>
    5050:	4a22      	ldr	r2, [pc, #136]	; (50dc <k_mem_slab_free+0xb0>)
    5052:	4923      	ldr	r1, [pc, #140]	; (50e0 <k_mem_slab_free+0xb4>)
    5054:	4823      	ldr	r0, [pc, #140]	; (50e4 <k_mem_slab_free+0xb8>)
    5056:	2381      	movs	r3, #129	; 0x81
    5058:	f003 f8c9 	bl	81ee <printk>
    505c:	4822      	ldr	r0, [pc, #136]	; (50e8 <k_mem_slab_free+0xbc>)
    505e:	4629      	mov	r1, r5
    5060:	f003 f8c5 	bl	81ee <printk>
    5064:	481d      	ldr	r0, [pc, #116]	; (50dc <k_mem_slab_free+0xb0>)
    5066:	2181      	movs	r1, #129	; 0x81
    5068:	f002 ffea 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    506c:	4628      	mov	r0, r5
    506e:	f001 ff51 	bl	6f14 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5072:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5076:	f1b8 0f00 	cmp.w	r8, #0
    507a:	d10f      	bne.n	509c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    507c:	4620      	mov	r0, r4
    507e:	f001 f9e7 	bl	6450 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5082:	b158      	cbz	r0, 509c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5084:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5086:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5088:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    508c:	f000 fe30 	bl	5cf0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5090:	4639      	mov	r1, r7
    5092:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5098:	f000 bb8a 	b.w	57b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    509c:	6833      	ldr	r3, [r6, #0]
    509e:	69a2      	ldr	r2, [r4, #24]
    50a0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    50a2:	6833      	ldr	r3, [r6, #0]
    50a4:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    50a6:	69e3      	ldr	r3, [r4, #28]
    50a8:	3b01      	subs	r3, #1
    50aa:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50ac:	4628      	mov	r0, r5
    50ae:	f001 ff21 	bl	6ef4 <z_spin_unlock_valid>
    50b2:	b968      	cbnz	r0, 50d0 <k_mem_slab_free+0xa4>
    50b4:	4a09      	ldr	r2, [pc, #36]	; (50dc <k_mem_slab_free+0xb0>)
    50b6:	490d      	ldr	r1, [pc, #52]	; (50ec <k_mem_slab_free+0xc0>)
    50b8:	480a      	ldr	r0, [pc, #40]	; (50e4 <k_mem_slab_free+0xb8>)
    50ba:	23ac      	movs	r3, #172	; 0xac
    50bc:	f003 f897 	bl	81ee <printk>
    50c0:	480b      	ldr	r0, [pc, #44]	; (50f0 <k_mem_slab_free+0xc4>)
    50c2:	4629      	mov	r1, r5
    50c4:	f003 f893 	bl	81ee <printk>
    50c8:	4804      	ldr	r0, [pc, #16]	; (50dc <k_mem_slab_free+0xb0>)
    50ca:	21ac      	movs	r1, #172	; 0xac
    50cc:	f002 ffb8 	bl	8040 <assert_post_action>
	__asm__ volatile(
    50d0:	f387 8811 	msr	BASEPRI, r7
    50d4:	f3bf 8f6f 	isb	sy
}
    50d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50dc:	0000922a 	.word	0x0000922a
    50e0:	0000927c 	.word	0x0000927c
    50e4:	00009117 	.word	0x00009117
    50e8:	00009291 	.word	0x00009291
    50ec:	00009250 	.word	0x00009250
    50f0:	00009267 	.word	0x00009267

000050f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    50f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    50f8:	4604      	mov	r4, r0
    50fa:	4616      	mov	r6, r2
    50fc:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50fe:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5102:	b163      	cbz	r3, 511e <z_impl_k_mutex_lock+0x2a>
    5104:	4970      	ldr	r1, [pc, #448]	; (52c8 <z_impl_k_mutex_lock+0x1d4>)
    5106:	4a71      	ldr	r2, [pc, #452]	; (52cc <z_impl_k_mutex_lock+0x1d8>)
    5108:	4871      	ldr	r0, [pc, #452]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    510a:	2365      	movs	r3, #101	; 0x65
    510c:	f003 f86f 	bl	81ee <printk>
    5110:	4870      	ldr	r0, [pc, #448]	; (52d4 <z_impl_k_mutex_lock+0x1e0>)
    5112:	f003 f86c 	bl	81ee <printk>
    5116:	486d      	ldr	r0, [pc, #436]	; (52cc <z_impl_k_mutex_lock+0x1d8>)
    5118:	2165      	movs	r1, #101	; 0x65
    511a:	f002 ff91 	bl	8040 <assert_post_action>
	__asm__ volatile(
    511e:	f04f 0320 	mov.w	r3, #32
    5122:	f3ef 8811 	mrs	r8, BASEPRI
    5126:	f383 8812 	msr	BASEPRI_MAX, r3
    512a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    512e:	486a      	ldr	r0, [pc, #424]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5130:	f001 fed2 	bl	6ed8 <z_spin_lock_valid>
    5134:	b968      	cbnz	r0, 5152 <z_impl_k_mutex_lock+0x5e>
    5136:	4a69      	ldr	r2, [pc, #420]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    5138:	4969      	ldr	r1, [pc, #420]	; (52e0 <z_impl_k_mutex_lock+0x1ec>)
    513a:	4865      	ldr	r0, [pc, #404]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    513c:	2381      	movs	r3, #129	; 0x81
    513e:	f003 f856 	bl	81ee <printk>
    5142:	4965      	ldr	r1, [pc, #404]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5144:	4867      	ldr	r0, [pc, #412]	; (52e4 <z_impl_k_mutex_lock+0x1f0>)
    5146:	f003 f852 	bl	81ee <printk>
    514a:	4864      	ldr	r0, [pc, #400]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    514c:	2181      	movs	r1, #129	; 0x81
    514e:	f002 ff77 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5152:	4861      	ldr	r0, [pc, #388]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5154:	f001 fede 	bl	6f14 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5158:	68e3      	ldr	r3, [r4, #12]
    515a:	4a63      	ldr	r2, [pc, #396]	; (52e8 <z_impl_k_mutex_lock+0x1f4>)
    515c:	b1fb      	cbz	r3, 519e <z_impl_k_mutex_lock+0xaa>
    515e:	68a0      	ldr	r0, [r4, #8]
    5160:	6891      	ldr	r1, [r2, #8]
    5162:	4288      	cmp	r0, r1
    5164:	d03d      	beq.n	51e2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5166:	ea56 0307 	orrs.w	r3, r6, r7
    516a:	d13c      	bne.n	51e6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    516c:	485a      	ldr	r0, [pc, #360]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    516e:	f001 fec1 	bl	6ef4 <z_spin_unlock_valid>
    5172:	b968      	cbnz	r0, 5190 <z_impl_k_mutex_lock+0x9c>
    5174:	4a59      	ldr	r2, [pc, #356]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    5176:	495d      	ldr	r1, [pc, #372]	; (52ec <z_impl_k_mutex_lock+0x1f8>)
    5178:	4855      	ldr	r0, [pc, #340]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    517a:	23ac      	movs	r3, #172	; 0xac
    517c:	f003 f837 	bl	81ee <printk>
    5180:	4955      	ldr	r1, [pc, #340]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5182:	485b      	ldr	r0, [pc, #364]	; (52f0 <z_impl_k_mutex_lock+0x1fc>)
    5184:	f003 f833 	bl	81ee <printk>
    5188:	4854      	ldr	r0, [pc, #336]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    518a:	21ac      	movs	r1, #172	; 0xac
    518c:	f002 ff58 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5190:	f388 8811 	msr	BASEPRI, r8
    5194:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5198:	f06f 000f 	mvn.w	r0, #15
    519c:	e01e      	b.n	51dc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    519e:	6891      	ldr	r1, [r2, #8]
    51a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    51a4:	484c      	ldr	r0, [pc, #304]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    51a6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    51a8:	3301      	adds	r3, #1
    51aa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    51ac:	6893      	ldr	r3, [r2, #8]
    51ae:	60a3      	str	r3, [r4, #8]
    51b0:	f001 fea0 	bl	6ef4 <z_spin_unlock_valid>
    51b4:	b968      	cbnz	r0, 51d2 <z_impl_k_mutex_lock+0xde>
    51b6:	4a49      	ldr	r2, [pc, #292]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    51b8:	494c      	ldr	r1, [pc, #304]	; (52ec <z_impl_k_mutex_lock+0x1f8>)
    51ba:	4845      	ldr	r0, [pc, #276]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    51bc:	23ac      	movs	r3, #172	; 0xac
    51be:	f003 f816 	bl	81ee <printk>
    51c2:	4945      	ldr	r1, [pc, #276]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    51c4:	484a      	ldr	r0, [pc, #296]	; (52f0 <z_impl_k_mutex_lock+0x1fc>)
    51c6:	f003 f812 	bl	81ee <printk>
    51ca:	4844      	ldr	r0, [pc, #272]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    51cc:	21ac      	movs	r1, #172	; 0xac
    51ce:	f002 ff37 	bl	8040 <assert_post_action>
    51d2:	f388 8811 	msr	BASEPRI, r8
    51d6:	f3bf 8f6f 	isb	sy
		return 0;
    51da:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    51dc:	b002      	add	sp, #8
    51de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    51e2:	6921      	ldr	r1, [r4, #16]
    51e4:	e7de      	b.n	51a4 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    51e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
    51ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    51ee:	4299      	cmp	r1, r3
    51f0:	bfa8      	it	ge
    51f2:	4619      	movge	r1, r3
    51f4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    51f8:	4291      	cmp	r1, r2
    51fa:	bfb8      	it	lt
    51fc:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    51fe:	428b      	cmp	r3, r1
    5200:	dd44      	ble.n	528c <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5202:	f000 ff57 	bl	60b4 <z_set_prio>
    5206:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5208:	e9cd 6700 	strd	r6, r7, [sp]
    520c:	4832      	ldr	r0, [pc, #200]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    520e:	4622      	mov	r2, r4
    5210:	4641      	mov	r1, r8
    5212:	f000 ff1f 	bl	6054 <z_pend_curr>
	if (got_mutex == 0) {
    5216:	2800      	cmp	r0, #0
    5218:	d0e0      	beq.n	51dc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    521a:	f04f 0320 	mov.w	r3, #32
    521e:	f3ef 8611 	mrs	r6, BASEPRI
    5222:	f383 8812 	msr	BASEPRI_MAX, r3
    5226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    522a:	482b      	ldr	r0, [pc, #172]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    522c:	f001 fe54 	bl	6ed8 <z_spin_lock_valid>
    5230:	b968      	cbnz	r0, 524e <z_impl_k_mutex_lock+0x15a>
    5232:	4a2a      	ldr	r2, [pc, #168]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    5234:	492a      	ldr	r1, [pc, #168]	; (52e0 <z_impl_k_mutex_lock+0x1ec>)
    5236:	4826      	ldr	r0, [pc, #152]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    5238:	2381      	movs	r3, #129	; 0x81
    523a:	f002 ffd8 	bl	81ee <printk>
    523e:	4926      	ldr	r1, [pc, #152]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5240:	4828      	ldr	r0, [pc, #160]	; (52e4 <z_impl_k_mutex_lock+0x1f0>)
    5242:	f002 ffd4 	bl	81ee <printk>
    5246:	4825      	ldr	r0, [pc, #148]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    5248:	2181      	movs	r1, #129	; 0x81
    524a:	f002 fef9 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    524e:	4822      	ldr	r0, [pc, #136]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5250:	f001 fe60 	bl	6f14 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5254:	6823      	ldr	r3, [r4, #0]
    5256:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5258:	429c      	cmp	r4, r3
    525a:	d00a      	beq.n	5272 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    525c:	b14b      	cbz	r3, 5272 <z_impl_k_mutex_lock+0x17e>
    525e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5262:	4299      	cmp	r1, r3
    5264:	bfa8      	it	ge
    5266:	4619      	movge	r1, r3
    5268:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    526c:	4299      	cmp	r1, r3
    526e:	bfb8      	it	lt
    5270:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5272:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5274:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5278:	4299      	cmp	r1, r3
    527a:	d109      	bne.n	5290 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    527c:	b16d      	cbz	r5, 529a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    527e:	4816      	ldr	r0, [pc, #88]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    5280:	4631      	mov	r1, r6
    5282:	f000 fa95 	bl	57b0 <z_reschedule>
	return -EAGAIN;
    5286:	f06f 000a 	mvn.w	r0, #10
    528a:	e7a7      	b.n	51dc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    528c:	2500      	movs	r5, #0
    528e:	e7bb      	b.n	5208 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5290:	f000 ff10 	bl	60b4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5294:	2800      	cmp	r0, #0
    5296:	d1f2      	bne.n	527e <z_impl_k_mutex_lock+0x18a>
    5298:	e7f0      	b.n	527c <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    529a:	480f      	ldr	r0, [pc, #60]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    529c:	f001 fe2a 	bl	6ef4 <z_spin_unlock_valid>
    52a0:	b968      	cbnz	r0, 52be <z_impl_k_mutex_lock+0x1ca>
    52a2:	4a0e      	ldr	r2, [pc, #56]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    52a4:	4911      	ldr	r1, [pc, #68]	; (52ec <z_impl_k_mutex_lock+0x1f8>)
    52a6:	480a      	ldr	r0, [pc, #40]	; (52d0 <z_impl_k_mutex_lock+0x1dc>)
    52a8:	23ac      	movs	r3, #172	; 0xac
    52aa:	f002 ffa0 	bl	81ee <printk>
    52ae:	490a      	ldr	r1, [pc, #40]	; (52d8 <z_impl_k_mutex_lock+0x1e4>)
    52b0:	480f      	ldr	r0, [pc, #60]	; (52f0 <z_impl_k_mutex_lock+0x1fc>)
    52b2:	f002 ff9c 	bl	81ee <printk>
    52b6:	4809      	ldr	r0, [pc, #36]	; (52dc <z_impl_k_mutex_lock+0x1e8>)
    52b8:	21ac      	movs	r1, #172	; 0xac
    52ba:	f002 fec1 	bl	8040 <assert_post_action>
	__asm__ volatile(
    52be:	f386 8811 	msr	BASEPRI, r6
    52c2:	f3bf 8f6f 	isb	sy
    52c6:	e7de      	b.n	5286 <z_impl_k_mutex_lock+0x192>
    52c8:	00009bbd 	.word	0x00009bbd
    52cc:	00009b9b 	.word	0x00009b9b
    52d0:	00009117 	.word	0x00009117
    52d4:	00009bcf 	.word	0x00009bcf
    52d8:	20000c14 	.word	0x20000c14
    52dc:	0000922a 	.word	0x0000922a
    52e0:	0000927c 	.word	0x0000927c
    52e4:	00009291 	.word	0x00009291
    52e8:	20000bec 	.word	0x20000bec
    52ec:	00009250 	.word	0x00009250
    52f0:	00009267 	.word	0x00009267

000052f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    52f4:	b538      	push	{r3, r4, r5, lr}
    52f6:	4604      	mov	r4, r0
    52f8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    52fc:	b163      	cbz	r3, 5318 <z_impl_k_mutex_unlock+0x24>
    52fe:	4952      	ldr	r1, [pc, #328]	; (5448 <z_impl_k_mutex_unlock+0x154>)
    5300:	4a52      	ldr	r2, [pc, #328]	; (544c <z_impl_k_mutex_unlock+0x158>)
    5302:	4853      	ldr	r0, [pc, #332]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    5304:	23c7      	movs	r3, #199	; 0xc7
    5306:	f002 ff72 	bl	81ee <printk>
    530a:	4852      	ldr	r0, [pc, #328]	; (5454 <z_impl_k_mutex_unlock+0x160>)
    530c:	f002 ff6f 	bl	81ee <printk>
    5310:	484e      	ldr	r0, [pc, #312]	; (544c <z_impl_k_mutex_unlock+0x158>)
    5312:	21c7      	movs	r1, #199	; 0xc7
    5314:	f002 fe94 	bl	8040 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5318:	68a3      	ldr	r3, [r4, #8]
    531a:	2b00      	cmp	r3, #0
    531c:	f000 808d 	beq.w	543a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5320:	4d4d      	ldr	r5, [pc, #308]	; (5458 <z_impl_k_mutex_unlock+0x164>)
    5322:	68aa      	ldr	r2, [r5, #8]
    5324:	4293      	cmp	r3, r2
    5326:	f040 808b 	bne.w	5440 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    532a:	68e3      	ldr	r3, [r4, #12]
    532c:	b94b      	cbnz	r3, 5342 <z_impl_k_mutex_unlock+0x4e>
    532e:	494b      	ldr	r1, [pc, #300]	; (545c <z_impl_k_mutex_unlock+0x168>)
    5330:	4847      	ldr	r0, [pc, #284]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    5332:	4a46      	ldr	r2, [pc, #280]	; (544c <z_impl_k_mutex_unlock+0x158>)
    5334:	23df      	movs	r3, #223	; 0xdf
    5336:	f002 ff5a 	bl	81ee <printk>
    533a:	4844      	ldr	r0, [pc, #272]	; (544c <z_impl_k_mutex_unlock+0x158>)
    533c:	21df      	movs	r1, #223	; 0xdf
    533e:	f002 fe7f 	bl	8040 <assert_post_action>
    5342:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5346:	b163      	cbz	r3, 5362 <z_impl_k_mutex_unlock+0x6e>
    5348:	493f      	ldr	r1, [pc, #252]	; (5448 <z_impl_k_mutex_unlock+0x154>)
    534a:	4a45      	ldr	r2, [pc, #276]	; (5460 <z_impl_k_mutex_unlock+0x16c>)
    534c:	4840      	ldr	r0, [pc, #256]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    534e:	23fd      	movs	r3, #253	; 0xfd
    5350:	f002 ff4d 	bl	81ee <printk>
    5354:	4843      	ldr	r0, [pc, #268]	; (5464 <z_impl_k_mutex_unlock+0x170>)
    5356:	f002 ff4a 	bl	81ee <printk>
    535a:	4841      	ldr	r0, [pc, #260]	; (5460 <z_impl_k_mutex_unlock+0x16c>)
    535c:	21fd      	movs	r1, #253	; 0xfd
    535e:	f002 fe6f 	bl	8040 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5362:	68ab      	ldr	r3, [r5, #8]
    5364:	7bdb      	ldrb	r3, [r3, #15]
    5366:	2b01      	cmp	r3, #1
    5368:	d10c      	bne.n	5384 <z_impl_k_mutex_unlock+0x90>
    536a:	493f      	ldr	r1, [pc, #252]	; (5468 <z_impl_k_mutex_unlock+0x174>)
    536c:	4a3c      	ldr	r2, [pc, #240]	; (5460 <z_impl_k_mutex_unlock+0x16c>)
    536e:	4838      	ldr	r0, [pc, #224]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    5370:	23fe      	movs	r3, #254	; 0xfe
    5372:	f002 ff3c 	bl	81ee <printk>
    5376:	483b      	ldr	r0, [pc, #236]	; (5464 <z_impl_k_mutex_unlock+0x170>)
    5378:	f002 ff39 	bl	81ee <printk>
    537c:	4838      	ldr	r0, [pc, #224]	; (5460 <z_impl_k_mutex_unlock+0x16c>)
    537e:	21fe      	movs	r1, #254	; 0xfe
    5380:	f002 fe5e 	bl	8040 <assert_post_action>

	--_current->base.sched_locked;
    5384:	68aa      	ldr	r2, [r5, #8]
    5386:	7bd3      	ldrb	r3, [r2, #15]
    5388:	3b01      	subs	r3, #1
    538a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    538c:	68e3      	ldr	r3, [r4, #12]
    538e:	2b01      	cmp	r3, #1
    5390:	d905      	bls.n	539e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5392:	3b01      	subs	r3, #1
    5394:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5396:	f000 ff93 	bl	62c0 <k_sched_unlock>

	return 0;
    539a:	2000      	movs	r0, #0
}
    539c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    539e:	f04f 0320 	mov.w	r3, #32
    53a2:	f3ef 8511 	mrs	r5, BASEPRI
    53a6:	f383 8812 	msr	BASEPRI_MAX, r3
    53aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53ae:	482f      	ldr	r0, [pc, #188]	; (546c <z_impl_k_mutex_unlock+0x178>)
    53b0:	f001 fd92 	bl	6ed8 <z_spin_lock_valid>
    53b4:	b968      	cbnz	r0, 53d2 <z_impl_k_mutex_unlock+0xde>
    53b6:	4a2e      	ldr	r2, [pc, #184]	; (5470 <z_impl_k_mutex_unlock+0x17c>)
    53b8:	492e      	ldr	r1, [pc, #184]	; (5474 <z_impl_k_mutex_unlock+0x180>)
    53ba:	4825      	ldr	r0, [pc, #148]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    53bc:	2381      	movs	r3, #129	; 0x81
    53be:	f002 ff16 	bl	81ee <printk>
    53c2:	492a      	ldr	r1, [pc, #168]	; (546c <z_impl_k_mutex_unlock+0x178>)
    53c4:	482c      	ldr	r0, [pc, #176]	; (5478 <z_impl_k_mutex_unlock+0x184>)
    53c6:	f002 ff12 	bl	81ee <printk>
    53ca:	4829      	ldr	r0, [pc, #164]	; (5470 <z_impl_k_mutex_unlock+0x17c>)
    53cc:	2181      	movs	r1, #129	; 0x81
    53ce:	f002 fe37 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    53d2:	4826      	ldr	r0, [pc, #152]	; (546c <z_impl_k_mutex_unlock+0x178>)
    53d4:	f001 fd9e 	bl	6f14 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    53d8:	68a0      	ldr	r0, [r4, #8]
    53da:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    53dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    53e0:	4299      	cmp	r1, r3
    53e2:	d001      	beq.n	53e8 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    53e4:	f000 fe66 	bl	60b4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    53e8:	4620      	mov	r0, r4
    53ea:	f001 f831 	bl	6450 <z_unpend_first_thread>
	mutex->owner = new_owner;
    53ee:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    53f0:	b158      	cbz	r0, 540a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    53f2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    53f6:	6122      	str	r2, [r4, #16]
    53f8:	2200      	movs	r2, #0
    53fa:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    53fc:	f000 fc78 	bl	5cf0 <z_ready_thread>
		z_reschedule(&lock, key);
    5400:	481a      	ldr	r0, [pc, #104]	; (546c <z_impl_k_mutex_unlock+0x178>)
    5402:	4629      	mov	r1, r5
    5404:	f000 f9d4 	bl	57b0 <z_reschedule>
    5408:	e7c5      	b.n	5396 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    540a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    540c:	4817      	ldr	r0, [pc, #92]	; (546c <z_impl_k_mutex_unlock+0x178>)
    540e:	f001 fd71 	bl	6ef4 <z_spin_unlock_valid>
    5412:	b968      	cbnz	r0, 5430 <z_impl_k_mutex_unlock+0x13c>
    5414:	4a16      	ldr	r2, [pc, #88]	; (5470 <z_impl_k_mutex_unlock+0x17c>)
    5416:	4919      	ldr	r1, [pc, #100]	; (547c <z_impl_k_mutex_unlock+0x188>)
    5418:	480d      	ldr	r0, [pc, #52]	; (5450 <z_impl_k_mutex_unlock+0x15c>)
    541a:	23ac      	movs	r3, #172	; 0xac
    541c:	f002 fee7 	bl	81ee <printk>
    5420:	4912      	ldr	r1, [pc, #72]	; (546c <z_impl_k_mutex_unlock+0x178>)
    5422:	4817      	ldr	r0, [pc, #92]	; (5480 <z_impl_k_mutex_unlock+0x18c>)
    5424:	f002 fee3 	bl	81ee <printk>
    5428:	4811      	ldr	r0, [pc, #68]	; (5470 <z_impl_k_mutex_unlock+0x17c>)
    542a:	21ac      	movs	r1, #172	; 0xac
    542c:	f002 fe08 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5430:	f385 8811 	msr	BASEPRI, r5
    5434:	f3bf 8f6f 	isb	sy
    5438:	e7ad      	b.n	5396 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    543a:	f06f 0015 	mvn.w	r0, #21
    543e:	e7ad      	b.n	539c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5440:	f04f 30ff 	mov.w	r0, #4294967295
    5444:	e7aa      	b.n	539c <z_impl_k_mutex_unlock+0xa8>
    5446:	bf00      	nop
    5448:	00009bbd 	.word	0x00009bbd
    544c:	00009b9b 	.word	0x00009b9b
    5450:	00009117 	.word	0x00009117
    5454:	00009bcf 	.word	0x00009bcf
    5458:	20000bec 	.word	0x20000bec
    545c:	00009bf4 	.word	0x00009bf4
    5460:	00009c0b 	.word	0x00009c0b
    5464:	00009c36 	.word	0x00009c36
    5468:	00009c39 	.word	0x00009c39
    546c:	20000c14 	.word	0x20000c14
    5470:	0000922a 	.word	0x0000922a
    5474:	0000927c 	.word	0x0000927c
    5478:	00009291 	.word	0x00009291
    547c:	00009250 	.word	0x00009250
    5480:	00009267 	.word	0x00009267

00005484 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    5484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    5488:	6884      	ldr	r4, [r0, #8]
{
    548a:	4605      	mov	r5, r0
    548c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    548e:	b1d4      	cbz	r4, 54c6 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    5490:	7863      	ldrb	r3, [r4, #1]
    5492:	2b01      	cmp	r3, #1
    5494:	d14b      	bne.n	552e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    5496:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    549a:	d10e      	bne.n	54ba <signal_poll_event+0x36>
    549c:	4a30      	ldr	r2, [pc, #192]	; (5560 <signal_poll_event+0xdc>)
    549e:	4931      	ldr	r1, [pc, #196]	; (5564 <signal_poll_event+0xe0>)
    54a0:	4831      	ldr	r0, [pc, #196]	; (5568 <signal_poll_event+0xe4>)
    54a2:	23f9      	movs	r3, #249	; 0xf9
    54a4:	f002 fea3 	bl	81ee <printk>
    54a8:	4830      	ldr	r0, [pc, #192]	; (556c <signal_poll_event+0xe8>)
    54aa:	f002 fea0 	bl	81ee <printk>
    54ae:	482c      	ldr	r0, [pc, #176]	; (5560 <signal_poll_event+0xdc>)
    54b0:	21f9      	movs	r1, #249	; 0xf9
    54b2:	f002 fdc5 	bl	8040 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    54b6:	7b7b      	ldrb	r3, [r7, #13]
    54b8:	deff      	udf	#255	; 0xff
    54ba:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    54be:	f013 0302 	ands.w	r3, r3, #2
    54c2:	d10a      	bne.n	54da <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    54c4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    54c6:	68eb      	ldr	r3, [r5, #12]
    54c8:	f3c3 3145 	ubfx	r1, r3, #13, #6
    54cc:	430e      	orrs	r6, r1
	event->poller = NULL;
    54ce:	2000      	movs	r0, #0
	event->state |= state;
    54d0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    54d4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    54d6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    54d8:	e00d      	b.n	54f6 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    54da:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    54de:	f04f 31ff 	mov.w	r1, #4294967295
    54e2:	f06f 0001 	mvn.w	r0, #1
    54e6:	428b      	cmp	r3, r1
    54e8:	bf08      	it	eq
    54ea:	4282      	cmpeq	r2, r0
    54ec:	d105      	bne.n	54fa <signal_poll_event+0x76>
		poller->is_polling = false;
    54ee:	2300      	movs	r3, #0
    54f0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    54f2:	f06f 000a 	mvn.w	r0, #10
}
    54f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    54fa:	4638      	mov	r0, r7
    54fc:	f000 fa54 	bl	59a8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    5500:	2e08      	cmp	r6, #8
    5502:	bf0c      	ite	eq
    5504:	f06f 0303 	mvneq.w	r3, #3
    5508:	2300      	movne	r3, #0
    550a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    550c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5510:	06db      	lsls	r3, r3, #27
    5512:	d104      	bne.n	551e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    5514:	f854 8c48 	ldr.w	r8, [r4, #-72]
    5518:	f1b8 0f00 	cmp.w	r8, #0
    551c:	d001      	beq.n	5522 <signal_poll_event+0x9e>
		poller->is_polling = false;
    551e:	2300      	movs	r3, #0
    5520:	e7d0      	b.n	54c4 <signal_poll_event+0x40>
	z_ready_thread(thread);
    5522:	4638      	mov	r0, r7
    5524:	f000 fbe4 	bl	5cf0 <z_ready_thread>
		poller->is_polling = false;
    5528:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    552c:	e7cb      	b.n	54c6 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    552e:	2b02      	cmp	r3, #2
    5530:	d1f5      	bne.n	551e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    5532:	7823      	ldrb	r3, [r4, #0]
    5534:	2b00      	cmp	r3, #0
    5536:	d0c6      	beq.n	54c6 <signal_poll_event+0x42>
    5538:	f854 7c04 	ldr.w	r7, [r4, #-4]
    553c:	b177      	cbz	r7, 555c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    553e:	f1a4 0914 	sub.w	r9, r4, #20
    5542:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    5546:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    554a:	f001 fe0f 	bl	716c <z_abort_timeout>
		twork->poll_result = 0;
    554e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    5552:	4649      	mov	r1, r9
    5554:	4638      	mov	r0, r7
    5556:	f002 fa97 	bl	7a88 <k_work_submit_to_queue>
    555a:	e7e5      	b.n	5528 <signal_poll_event+0xa4>
		poller->is_polling = false;
    555c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    555e:	e7b2      	b.n	54c6 <signal_poll_event+0x42>
    5560:	00009c6a 	.word	0x00009c6a
    5564:	00009d65 	.word	0x00009d65
    5568:	00009117 	.word	0x00009117
    556c:	00009d7b 	.word	0x00009d7b

00005570 <z_impl_k_poll_signal_raise>:
{
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	4604      	mov	r4, r0
    5574:	460d      	mov	r5, r1
	__asm__ volatile(
    5576:	f04f 0320 	mov.w	r3, #32
    557a:	f3ef 8611 	mrs	r6, BASEPRI
    557e:	f383 8812 	msr	BASEPRI_MAX, r3
    5582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5586:	4821      	ldr	r0, [pc, #132]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    5588:	f001 fca6 	bl	6ed8 <z_spin_lock_valid>
    558c:	b968      	cbnz	r0, 55aa <z_impl_k_poll_signal_raise+0x3a>
    558e:	4a20      	ldr	r2, [pc, #128]	; (5610 <z_impl_k_poll_signal_raise+0xa0>)
    5590:	4920      	ldr	r1, [pc, #128]	; (5614 <z_impl_k_poll_signal_raise+0xa4>)
    5592:	4821      	ldr	r0, [pc, #132]	; (5618 <z_impl_k_poll_signal_raise+0xa8>)
    5594:	2381      	movs	r3, #129	; 0x81
    5596:	f002 fe2a 	bl	81ee <printk>
    559a:	491c      	ldr	r1, [pc, #112]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    559c:	481f      	ldr	r0, [pc, #124]	; (561c <z_impl_k_poll_signal_raise+0xac>)
    559e:	f002 fe26 	bl	81ee <printk>
    55a2:	481b      	ldr	r0, [pc, #108]	; (5610 <z_impl_k_poll_signal_raise+0xa0>)
    55a4:	2181      	movs	r1, #129	; 0x81
    55a6:	f002 fd4b 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    55aa:	4818      	ldr	r0, [pc, #96]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    55ac:	f001 fcb2 	bl	6f14 <z_spin_lock_set_owner>
	return list->head == list;
    55b0:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    55b2:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    55b4:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    55b6:	4284      	cmp	r4, r0
    55b8:	60a1      	str	r1, [r4, #8]
    55ba:	d117      	bne.n	55ec <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55bc:	4813      	ldr	r0, [pc, #76]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    55be:	f001 fc99 	bl	6ef4 <z_spin_unlock_valid>
    55c2:	b968      	cbnz	r0, 55e0 <z_impl_k_poll_signal_raise+0x70>
    55c4:	4a12      	ldr	r2, [pc, #72]	; (5610 <z_impl_k_poll_signal_raise+0xa0>)
    55c6:	4916      	ldr	r1, [pc, #88]	; (5620 <z_impl_k_poll_signal_raise+0xb0>)
    55c8:	4813      	ldr	r0, [pc, #76]	; (5618 <z_impl_k_poll_signal_raise+0xa8>)
    55ca:	23ac      	movs	r3, #172	; 0xac
    55cc:	f002 fe0f 	bl	81ee <printk>
    55d0:	490e      	ldr	r1, [pc, #56]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    55d2:	4814      	ldr	r0, [pc, #80]	; (5624 <z_impl_k_poll_signal_raise+0xb4>)
    55d4:	f002 fe0b 	bl	81ee <printk>
    55d8:	480d      	ldr	r0, [pc, #52]	; (5610 <z_impl_k_poll_signal_raise+0xa0>)
    55da:	21ac      	movs	r1, #172	; 0xac
    55dc:	f002 fd30 	bl	8040 <assert_post_action>
	__asm__ volatile(
    55e0:	f386 8811 	msr	BASEPRI, r6
    55e4:	f3bf 8f6f 	isb	sy
		return 0;
    55e8:	2400      	movs	r4, #0
    55ea:	e00d      	b.n	5608 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    55ec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    55f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    55f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    55f4:	2300      	movs	r3, #0
	node->prev = NULL;
    55f6:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    55fa:	f7ff ff43 	bl	5484 <signal_poll_event>
	z_reschedule(&lock, key);
    55fe:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    5600:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    5602:	4802      	ldr	r0, [pc, #8]	; (560c <z_impl_k_poll_signal_raise+0x9c>)
    5604:	f000 f8d4 	bl	57b0 <z_reschedule>
}
    5608:	4620      	mov	r0, r4
    560a:	bd70      	pop	{r4, r5, r6, pc}
    560c:	20000c18 	.word	0x20000c18
    5610:	0000922a 	.word	0x0000922a
    5614:	0000927c 	.word	0x0000927c
    5618:	00009117 	.word	0x00009117
    561c:	00009291 	.word	0x00009291
    5620:	00009250 	.word	0x00009250
    5624:	00009267 	.word	0x00009267

00005628 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5628:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    562a:	4c08      	ldr	r4, [pc, #32]	; (564c <z_reset_time_slice+0x24>)
    562c:	6823      	ldr	r3, [r4, #0]
    562e:	b15b      	cbz	r3, 5648 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5630:	f7fe f9e8 	bl	3a04 <sys_clock_elapsed>
    5634:	4603      	mov	r3, r0
    5636:	6820      	ldr	r0, [r4, #0]
    5638:	4a05      	ldr	r2, [pc, #20]	; (5650 <z_reset_time_slice+0x28>)
    563a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5640:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5642:	2100      	movs	r1, #0
    5644:	f001 be28 	b.w	7298 <z_set_timeout_expiry>
}
    5648:	bd10      	pop	{r4, pc}
    564a:	bf00      	nop
    564c:	20000c28 	.word	0x20000c28
    5650:	20000bec 	.word	0x20000bec

00005654 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5656:	4604      	mov	r4, r0
    5658:	460d      	mov	r5, r1
	__asm__ volatile(
    565a:	f04f 0320 	mov.w	r3, #32
    565e:	f3ef 8611 	mrs	r6, BASEPRI
    5662:	f383 8812 	msr	BASEPRI_MAX, r3
    5666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    566a:	4823      	ldr	r0, [pc, #140]	; (56f8 <k_sched_time_slice_set+0xa4>)
    566c:	f001 fc34 	bl	6ed8 <z_spin_lock_valid>
    5670:	b968      	cbnz	r0, 568e <k_sched_time_slice_set+0x3a>
    5672:	4a22      	ldr	r2, [pc, #136]	; (56fc <k_sched_time_slice_set+0xa8>)
    5674:	4922      	ldr	r1, [pc, #136]	; (5700 <k_sched_time_slice_set+0xac>)
    5676:	4823      	ldr	r0, [pc, #140]	; (5704 <k_sched_time_slice_set+0xb0>)
    5678:	2381      	movs	r3, #129	; 0x81
    567a:	f002 fdb8 	bl	81ee <printk>
    567e:	491e      	ldr	r1, [pc, #120]	; (56f8 <k_sched_time_slice_set+0xa4>)
    5680:	4821      	ldr	r0, [pc, #132]	; (5708 <k_sched_time_slice_set+0xb4>)
    5682:	f002 fdb4 	bl	81ee <printk>
    5686:	481d      	ldr	r0, [pc, #116]	; (56fc <k_sched_time_slice_set+0xa8>)
    5688:	2181      	movs	r1, #129	; 0x81
    568a:	f002 fcd9 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    568e:	481a      	ldr	r0, [pc, #104]	; (56f8 <k_sched_time_slice_set+0xa4>)
    5690:	f001 fc40 	bl	6f14 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5694:	4b1d      	ldr	r3, [pc, #116]	; (570c <k_sched_time_slice_set+0xb8>)
    5696:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5698:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    569c:	f240 30e7 	movw	r0, #999	; 0x3e7
    56a0:	2100      	movs	r1, #0
    56a2:	611a      	str	r2, [r3, #16]
    56a4:	fbe7 0104 	umlal	r0, r1, r7, r4
    56a8:	2300      	movs	r3, #0
    56aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    56ae:	f7fa fd27 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    56b2:	2c00      	cmp	r4, #0
    56b4:	4b16      	ldr	r3, [pc, #88]	; (5710 <k_sched_time_slice_set+0xbc>)
    56b6:	dc1b      	bgt.n	56f0 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    56b8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    56ba:	4b16      	ldr	r3, [pc, #88]	; (5714 <k_sched_time_slice_set+0xc0>)
    56bc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    56be:	f7ff ffb3 	bl	5628 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56c2:	480d      	ldr	r0, [pc, #52]	; (56f8 <k_sched_time_slice_set+0xa4>)
    56c4:	f001 fc16 	bl	6ef4 <z_spin_unlock_valid>
    56c8:	b968      	cbnz	r0, 56e6 <k_sched_time_slice_set+0x92>
    56ca:	4a0c      	ldr	r2, [pc, #48]	; (56fc <k_sched_time_slice_set+0xa8>)
    56cc:	4912      	ldr	r1, [pc, #72]	; (5718 <k_sched_time_slice_set+0xc4>)
    56ce:	480d      	ldr	r0, [pc, #52]	; (5704 <k_sched_time_slice_set+0xb0>)
    56d0:	23ac      	movs	r3, #172	; 0xac
    56d2:	f002 fd8c 	bl	81ee <printk>
    56d6:	4908      	ldr	r1, [pc, #32]	; (56f8 <k_sched_time_slice_set+0xa4>)
    56d8:	4810      	ldr	r0, [pc, #64]	; (571c <k_sched_time_slice_set+0xc8>)
    56da:	f002 fd88 	bl	81ee <printk>
    56de:	4807      	ldr	r0, [pc, #28]	; (56fc <k_sched_time_slice_set+0xa8>)
    56e0:	21ac      	movs	r1, #172	; 0xac
    56e2:	f002 fcad 	bl	8040 <assert_post_action>
	__asm__ volatile(
    56e6:	f386 8811 	msr	BASEPRI, r6
    56ea:	f3bf 8f6f 	isb	sy
	}
}
    56ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    56f0:	2802      	cmp	r0, #2
    56f2:	bfb8      	it	lt
    56f4:	2002      	movlt	r0, #2
    56f6:	e7df      	b.n	56b8 <k_sched_time_slice_set+0x64>
    56f8:	20000c20 	.word	0x20000c20
    56fc:	0000922a 	.word	0x0000922a
    5700:	0000927c 	.word	0x0000927c
    5704:	00009117 	.word	0x00009117
    5708:	00009291 	.word	0x00009291
    570c:	20000bec 	.word	0x20000bec
    5710:	20000c28 	.word	0x20000c28
    5714:	20000c24 	.word	0x20000c24
    5718:	00009250 	.word	0x00009250
    571c:	00009267 	.word	0x00009267

00005720 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5720:	b538      	push	{r3, r4, r5, lr}
    5722:	4604      	mov	r4, r0
	__asm__ volatile(
    5724:	f04f 0320 	mov.w	r3, #32
    5728:	f3ef 8511 	mrs	r5, BASEPRI
    572c:	f383 8812 	msr	BASEPRI_MAX, r3
    5730:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5734:	4817      	ldr	r0, [pc, #92]	; (5794 <z_unpend_thread_no_timeout+0x74>)
    5736:	f001 fbcf 	bl	6ed8 <z_spin_lock_valid>
    573a:	b968      	cbnz	r0, 5758 <z_unpend_thread_no_timeout+0x38>
    573c:	4a16      	ldr	r2, [pc, #88]	; (5798 <z_unpend_thread_no_timeout+0x78>)
    573e:	4917      	ldr	r1, [pc, #92]	; (579c <z_unpend_thread_no_timeout+0x7c>)
    5740:	4817      	ldr	r0, [pc, #92]	; (57a0 <z_unpend_thread_no_timeout+0x80>)
    5742:	2381      	movs	r3, #129	; 0x81
    5744:	f002 fd53 	bl	81ee <printk>
    5748:	4912      	ldr	r1, [pc, #72]	; (5794 <z_unpend_thread_no_timeout+0x74>)
    574a:	4816      	ldr	r0, [pc, #88]	; (57a4 <z_unpend_thread_no_timeout+0x84>)
    574c:	f002 fd4f 	bl	81ee <printk>
    5750:	4811      	ldr	r0, [pc, #68]	; (5798 <z_unpend_thread_no_timeout+0x78>)
    5752:	2181      	movs	r1, #129	; 0x81
    5754:	f002 fc74 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5758:	480e      	ldr	r0, [pc, #56]	; (5794 <z_unpend_thread_no_timeout+0x74>)
    575a:	f001 fbdb 	bl	6f14 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    575e:	4620      	mov	r0, r4
    5760:	f000 f900 	bl	5964 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5764:	480b      	ldr	r0, [pc, #44]	; (5794 <z_unpend_thread_no_timeout+0x74>)
    5766:	f001 fbc5 	bl	6ef4 <z_spin_unlock_valid>
    576a:	b968      	cbnz	r0, 5788 <z_unpend_thread_no_timeout+0x68>
    576c:	4a0a      	ldr	r2, [pc, #40]	; (5798 <z_unpend_thread_no_timeout+0x78>)
    576e:	490e      	ldr	r1, [pc, #56]	; (57a8 <z_unpend_thread_no_timeout+0x88>)
    5770:	480b      	ldr	r0, [pc, #44]	; (57a0 <z_unpend_thread_no_timeout+0x80>)
    5772:	23ac      	movs	r3, #172	; 0xac
    5774:	f002 fd3b 	bl	81ee <printk>
    5778:	4906      	ldr	r1, [pc, #24]	; (5794 <z_unpend_thread_no_timeout+0x74>)
    577a:	480c      	ldr	r0, [pc, #48]	; (57ac <z_unpend_thread_no_timeout+0x8c>)
    577c:	f002 fd37 	bl	81ee <printk>
    5780:	4805      	ldr	r0, [pc, #20]	; (5798 <z_unpend_thread_no_timeout+0x78>)
    5782:	21ac      	movs	r1, #172	; 0xac
    5784:	f002 fc5c 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5788:	f385 8811 	msr	BASEPRI, r5
    578c:	f3bf 8f6f 	isb	sy
	}
}
    5790:	bd38      	pop	{r3, r4, r5, pc}
    5792:	bf00      	nop
    5794:	20000c20 	.word	0x20000c20
    5798:	0000922a 	.word	0x0000922a
    579c:	0000927c 	.word	0x0000927c
    57a0:	00009117 	.word	0x00009117
    57a4:	00009291 	.word	0x00009291
    57a8:	00009250 	.word	0x00009250
    57ac:	00009267 	.word	0x00009267

000057b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    57b0:	b538      	push	{r3, r4, r5, lr}
    57b2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    57b4:	460d      	mov	r5, r1
    57b6:	b9e9      	cbnz	r1, 57f4 <z_reschedule+0x44>
    57b8:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    57bc:	b9d3      	cbnz	r3, 57f4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    57be:	4b19      	ldr	r3, [pc, #100]	; (5824 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    57c0:	69da      	ldr	r2, [r3, #28]
    57c2:	689b      	ldr	r3, [r3, #8]
    57c4:	429a      	cmp	r2, r3
    57c6:	d015      	beq.n	57f4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57c8:	f001 fb94 	bl	6ef4 <z_spin_unlock_valid>
    57cc:	b968      	cbnz	r0, 57ea <z_reschedule+0x3a>
    57ce:	4a16      	ldr	r2, [pc, #88]	; (5828 <z_reschedule+0x78>)
    57d0:	4916      	ldr	r1, [pc, #88]	; (582c <z_reschedule+0x7c>)
    57d2:	4817      	ldr	r0, [pc, #92]	; (5830 <z_reschedule+0x80>)
    57d4:	23c3      	movs	r3, #195	; 0xc3
    57d6:	f002 fd0a 	bl	81ee <printk>
    57da:	4816      	ldr	r0, [pc, #88]	; (5834 <z_reschedule+0x84>)
    57dc:	4621      	mov	r1, r4
    57de:	f002 fd06 	bl	81ee <printk>
    57e2:	4811      	ldr	r0, [pc, #68]	; (5828 <z_reschedule+0x78>)
    57e4:	21c3      	movs	r1, #195	; 0xc3
    57e6:	f002 fc2b 	bl	8040 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    57ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    57ee:	2000      	movs	r0, #0
    57f0:	f7fc b9d2 	b.w	1b98 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57f4:	4620      	mov	r0, r4
    57f6:	f001 fb7d 	bl	6ef4 <z_spin_unlock_valid>
    57fa:	b968      	cbnz	r0, 5818 <z_reschedule+0x68>
    57fc:	4a0a      	ldr	r2, [pc, #40]	; (5828 <z_reschedule+0x78>)
    57fe:	490b      	ldr	r1, [pc, #44]	; (582c <z_reschedule+0x7c>)
    5800:	480b      	ldr	r0, [pc, #44]	; (5830 <z_reschedule+0x80>)
    5802:	23ac      	movs	r3, #172	; 0xac
    5804:	f002 fcf3 	bl	81ee <printk>
    5808:	480a      	ldr	r0, [pc, #40]	; (5834 <z_reschedule+0x84>)
    580a:	4621      	mov	r1, r4
    580c:	f002 fcef 	bl	81ee <printk>
    5810:	4805      	ldr	r0, [pc, #20]	; (5828 <z_reschedule+0x78>)
    5812:	21ac      	movs	r1, #172	; 0xac
    5814:	f002 fc14 	bl	8040 <assert_post_action>
    5818:	f385 8811 	msr	BASEPRI, r5
    581c:	f3bf 8f6f 	isb	sy
    5820:	bd38      	pop	{r3, r4, r5, pc}
    5822:	bf00      	nop
    5824:	20000bec 	.word	0x20000bec
    5828:	0000922a 	.word	0x0000922a
    582c:	00009250 	.word	0x00009250
    5830:	00009117 	.word	0x00009117
    5834:	00009267 	.word	0x00009267

00005838 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5838:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    583a:	f04f 0320 	mov.w	r3, #32
    583e:	f3ef 8511 	mrs	r5, BASEPRI
    5842:	f383 8812 	msr	BASEPRI_MAX, r3
    5846:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    584a:	4829      	ldr	r0, [pc, #164]	; (58f0 <k_sched_lock+0xb8>)
    584c:	f001 fb44 	bl	6ed8 <z_spin_lock_valid>
    5850:	b968      	cbnz	r0, 586e <k_sched_lock+0x36>
    5852:	4a28      	ldr	r2, [pc, #160]	; (58f4 <k_sched_lock+0xbc>)
    5854:	4928      	ldr	r1, [pc, #160]	; (58f8 <k_sched_lock+0xc0>)
    5856:	4829      	ldr	r0, [pc, #164]	; (58fc <k_sched_lock+0xc4>)
    5858:	2381      	movs	r3, #129	; 0x81
    585a:	f002 fcc8 	bl	81ee <printk>
    585e:	4924      	ldr	r1, [pc, #144]	; (58f0 <k_sched_lock+0xb8>)
    5860:	4827      	ldr	r0, [pc, #156]	; (5900 <k_sched_lock+0xc8>)
    5862:	f002 fcc4 	bl	81ee <printk>
    5866:	4823      	ldr	r0, [pc, #140]	; (58f4 <k_sched_lock+0xbc>)
    5868:	2181      	movs	r1, #129	; 0x81
    586a:	f002 fbe9 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    586e:	4820      	ldr	r0, [pc, #128]	; (58f0 <k_sched_lock+0xb8>)
    5870:	f001 fb50 	bl	6f14 <z_spin_lock_set_owner>
    5874:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5878:	b163      	cbz	r3, 5894 <k_sched_lock+0x5c>
    587a:	4922      	ldr	r1, [pc, #136]	; (5904 <k_sched_lock+0xcc>)
    587c:	4a22      	ldr	r2, [pc, #136]	; (5908 <k_sched_lock+0xd0>)
    587e:	481f      	ldr	r0, [pc, #124]	; (58fc <k_sched_lock+0xc4>)
    5880:	23fd      	movs	r3, #253	; 0xfd
    5882:	f002 fcb4 	bl	81ee <printk>
    5886:	4821      	ldr	r0, [pc, #132]	; (590c <k_sched_lock+0xd4>)
    5888:	f002 fcb1 	bl	81ee <printk>
    588c:	481e      	ldr	r0, [pc, #120]	; (5908 <k_sched_lock+0xd0>)
    588e:	21fd      	movs	r1, #253	; 0xfd
    5890:	f002 fbd6 	bl	8040 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5894:	4c1e      	ldr	r4, [pc, #120]	; (5910 <k_sched_lock+0xd8>)
    5896:	68a2      	ldr	r2, [r4, #8]
    5898:	7bd2      	ldrb	r2, [r2, #15]
    589a:	2a01      	cmp	r2, #1
    589c:	d10c      	bne.n	58b8 <k_sched_lock+0x80>
    589e:	491d      	ldr	r1, [pc, #116]	; (5914 <k_sched_lock+0xdc>)
    58a0:	4a19      	ldr	r2, [pc, #100]	; (5908 <k_sched_lock+0xd0>)
    58a2:	4816      	ldr	r0, [pc, #88]	; (58fc <k_sched_lock+0xc4>)
    58a4:	23fe      	movs	r3, #254	; 0xfe
    58a6:	f002 fca2 	bl	81ee <printk>
    58aa:	4818      	ldr	r0, [pc, #96]	; (590c <k_sched_lock+0xd4>)
    58ac:	f002 fc9f 	bl	81ee <printk>
    58b0:	4815      	ldr	r0, [pc, #84]	; (5908 <k_sched_lock+0xd0>)
    58b2:	21fe      	movs	r1, #254	; 0xfe
    58b4:	f002 fbc4 	bl	8040 <assert_post_action>
	--_current->base.sched_locked;
    58b8:	68a2      	ldr	r2, [r4, #8]
    58ba:	7bd3      	ldrb	r3, [r2, #15]
    58bc:	3b01      	subs	r3, #1
    58be:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58c0:	480b      	ldr	r0, [pc, #44]	; (58f0 <k_sched_lock+0xb8>)
    58c2:	f001 fb17 	bl	6ef4 <z_spin_unlock_valid>
    58c6:	b968      	cbnz	r0, 58e4 <k_sched_lock+0xac>
    58c8:	4a0a      	ldr	r2, [pc, #40]	; (58f4 <k_sched_lock+0xbc>)
    58ca:	4913      	ldr	r1, [pc, #76]	; (5918 <k_sched_lock+0xe0>)
    58cc:	480b      	ldr	r0, [pc, #44]	; (58fc <k_sched_lock+0xc4>)
    58ce:	23ac      	movs	r3, #172	; 0xac
    58d0:	f002 fc8d 	bl	81ee <printk>
    58d4:	4906      	ldr	r1, [pc, #24]	; (58f0 <k_sched_lock+0xb8>)
    58d6:	4811      	ldr	r0, [pc, #68]	; (591c <k_sched_lock+0xe4>)
    58d8:	f002 fc89 	bl	81ee <printk>
    58dc:	4805      	ldr	r0, [pc, #20]	; (58f4 <k_sched_lock+0xbc>)
    58de:	21ac      	movs	r1, #172	; 0xac
    58e0:	f002 fbae 	bl	8040 <assert_post_action>
	__asm__ volatile(
    58e4:	f385 8811 	msr	BASEPRI, r5
    58e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    58ec:	bd38      	pop	{r3, r4, r5, pc}
    58ee:	bf00      	nop
    58f0:	20000c20 	.word	0x20000c20
    58f4:	0000922a 	.word	0x0000922a
    58f8:	0000927c 	.word	0x0000927c
    58fc:	00009117 	.word	0x00009117
    5900:	00009291 	.word	0x00009291
    5904:	00009bbd 	.word	0x00009bbd
    5908:	00009c0b 	.word	0x00009c0b
    590c:	00009c36 	.word	0x00009c36
    5910:	20000bec 	.word	0x20000bec
    5914:	00009c39 	.word	0x00009c39
    5918:	00009250 	.word	0x00009250
    591c:	00009267 	.word	0x00009267

00005920 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5920:	4b0c      	ldr	r3, [pc, #48]	; (5954 <z_priq_dumb_remove+0x34>)
    5922:	4299      	cmp	r1, r3
{
    5924:	b510      	push	{r4, lr}
    5926:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5928:	d10b      	bne.n	5942 <z_priq_dumb_remove+0x22>
    592a:	490b      	ldr	r1, [pc, #44]	; (5958 <z_priq_dumb_remove+0x38>)
    592c:	480b      	ldr	r0, [pc, #44]	; (595c <z_priq_dumb_remove+0x3c>)
    592e:	4a0c      	ldr	r2, [pc, #48]	; (5960 <z_priq_dumb_remove+0x40>)
    5930:	f240 33e7 	movw	r3, #999	; 0x3e7
    5934:	f002 fc5b 	bl	81ee <printk>
    5938:	4809      	ldr	r0, [pc, #36]	; (5960 <z_priq_dumb_remove+0x40>)
    593a:	f240 31e7 	movw	r1, #999	; 0x3e7
    593e:	f002 fb7f 	bl	8040 <assert_post_action>
	sys_dnode_t *const next = node->next;
    5942:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    5946:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5948:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    594a:	2300      	movs	r3, #0
	node->prev = NULL;
    594c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5950:	bd10      	pop	{r4, pc}
    5952:	bf00      	nop
    5954:	200003f8 	.word	0x200003f8
    5958:	00009dbc 	.word	0x00009dbc
    595c:	00009117 	.word	0x00009117
    5960:	00009d9a 	.word	0x00009d9a

00005964 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5964:	6883      	ldr	r3, [r0, #8]
{
    5966:	b510      	push	{r4, lr}
    5968:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    596a:	b95b      	cbnz	r3, 5984 <unpend_thread_no_timeout+0x20>
    596c:	490b      	ldr	r1, [pc, #44]	; (599c <unpend_thread_no_timeout+0x38>)
    596e:	480c      	ldr	r0, [pc, #48]	; (59a0 <unpend_thread_no_timeout+0x3c>)
    5970:	4a0c      	ldr	r2, [pc, #48]	; (59a4 <unpend_thread_no_timeout+0x40>)
    5972:	f240 2383 	movw	r3, #643	; 0x283
    5976:	f002 fc3a 	bl	81ee <printk>
    597a:	480a      	ldr	r0, [pc, #40]	; (59a4 <unpend_thread_no_timeout+0x40>)
    597c:	f240 2183 	movw	r1, #643	; 0x283
    5980:	f002 fb5e 	bl	8040 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5984:	68a0      	ldr	r0, [r4, #8]
    5986:	4621      	mov	r1, r4
    5988:	f7ff ffca 	bl	5920 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    598c:	7b63      	ldrb	r3, [r4, #13]
    598e:	f023 0302 	bic.w	r3, r3, #2
    5992:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5994:	2300      	movs	r3, #0
    5996:	60a3      	str	r3, [r4, #8]
}
    5998:	bd10      	pop	{r4, pc}
    599a:	bf00      	nop
    599c:	00009ddd 	.word	0x00009ddd
    59a0:	00009117 	.word	0x00009117
    59a4:	00009d9a 	.word	0x00009d9a

000059a8 <z_unpend_thread>:
{
    59a8:	b538      	push	{r3, r4, r5, lr}
    59aa:	4604      	mov	r4, r0
	__asm__ volatile(
    59ac:	f04f 0320 	mov.w	r3, #32
    59b0:	f3ef 8511 	mrs	r5, BASEPRI
    59b4:	f383 8812 	msr	BASEPRI_MAX, r3
    59b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59bc:	4819      	ldr	r0, [pc, #100]	; (5a24 <z_unpend_thread+0x7c>)
    59be:	f001 fa8b 	bl	6ed8 <z_spin_lock_valid>
    59c2:	b968      	cbnz	r0, 59e0 <z_unpend_thread+0x38>
    59c4:	4a18      	ldr	r2, [pc, #96]	; (5a28 <z_unpend_thread+0x80>)
    59c6:	4919      	ldr	r1, [pc, #100]	; (5a2c <z_unpend_thread+0x84>)
    59c8:	4819      	ldr	r0, [pc, #100]	; (5a30 <z_unpend_thread+0x88>)
    59ca:	2381      	movs	r3, #129	; 0x81
    59cc:	f002 fc0f 	bl	81ee <printk>
    59d0:	4914      	ldr	r1, [pc, #80]	; (5a24 <z_unpend_thread+0x7c>)
    59d2:	4818      	ldr	r0, [pc, #96]	; (5a34 <z_unpend_thread+0x8c>)
    59d4:	f002 fc0b 	bl	81ee <printk>
    59d8:	4813      	ldr	r0, [pc, #76]	; (5a28 <z_unpend_thread+0x80>)
    59da:	2181      	movs	r1, #129	; 0x81
    59dc:	f002 fb30 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    59e0:	4810      	ldr	r0, [pc, #64]	; (5a24 <z_unpend_thread+0x7c>)
    59e2:	f001 fa97 	bl	6f14 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    59e6:	4620      	mov	r0, r4
    59e8:	f7ff ffbc 	bl	5964 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59ec:	480d      	ldr	r0, [pc, #52]	; (5a24 <z_unpend_thread+0x7c>)
    59ee:	f001 fa81 	bl	6ef4 <z_spin_unlock_valid>
    59f2:	b968      	cbnz	r0, 5a10 <z_unpend_thread+0x68>
    59f4:	4a0c      	ldr	r2, [pc, #48]	; (5a28 <z_unpend_thread+0x80>)
    59f6:	4910      	ldr	r1, [pc, #64]	; (5a38 <z_unpend_thread+0x90>)
    59f8:	480d      	ldr	r0, [pc, #52]	; (5a30 <z_unpend_thread+0x88>)
    59fa:	23ac      	movs	r3, #172	; 0xac
    59fc:	f002 fbf7 	bl	81ee <printk>
    5a00:	4908      	ldr	r1, [pc, #32]	; (5a24 <z_unpend_thread+0x7c>)
    5a02:	480e      	ldr	r0, [pc, #56]	; (5a3c <z_unpend_thread+0x94>)
    5a04:	f002 fbf3 	bl	81ee <printk>
    5a08:	4807      	ldr	r0, [pc, #28]	; (5a28 <z_unpend_thread+0x80>)
    5a0a:	21ac      	movs	r1, #172	; 0xac
    5a0c:	f002 fb18 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5a10:	f385 8811 	msr	BASEPRI, r5
    5a14:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5a18:	f104 0018 	add.w	r0, r4, #24
}
    5a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5a20:	f001 bba4 	b.w	716c <z_abort_timeout>
    5a24:	20000c20 	.word	0x20000c20
    5a28:	0000922a 	.word	0x0000922a
    5a2c:	0000927c 	.word	0x0000927c
    5a30:	00009117 	.word	0x00009117
    5a34:	00009291 	.word	0x00009291
    5a38:	00009250 	.word	0x00009250
    5a3c:	00009267 	.word	0x00009267

00005a40 <update_cache>:
{
    5a40:	b538      	push	{r3, r4, r5, lr}
    5a42:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5a44:	4814      	ldr	r0, [pc, #80]	; (5a98 <update_cache+0x58>)
    5a46:	4d15      	ldr	r5, [pc, #84]	; (5a9c <update_cache+0x5c>)
    5a48:	f002 ff42 	bl	88d0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5a4c:	4604      	mov	r4, r0
    5a4e:	b900      	cbnz	r0, 5a52 <update_cache+0x12>
    5a50:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5a52:	b9ca      	cbnz	r2, 5a88 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5a54:	68ab      	ldr	r3, [r5, #8]
    5a56:	b963      	cbnz	r3, 5a72 <update_cache+0x32>
    5a58:	4911      	ldr	r1, [pc, #68]	; (5aa0 <update_cache+0x60>)
    5a5a:	4a12      	ldr	r2, [pc, #72]	; (5aa4 <update_cache+0x64>)
    5a5c:	4812      	ldr	r0, [pc, #72]	; (5aa8 <update_cache+0x68>)
    5a5e:	2389      	movs	r3, #137	; 0x89
    5a60:	f002 fbc5 	bl	81ee <printk>
    5a64:	4811      	ldr	r0, [pc, #68]	; (5aac <update_cache+0x6c>)
    5a66:	f002 fbc2 	bl	81ee <printk>
    5a6a:	480e      	ldr	r0, [pc, #56]	; (5aa4 <update_cache+0x64>)
    5a6c:	2189      	movs	r1, #137	; 0x89
    5a6e:	f002 fae7 	bl	8040 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5a72:	68ab      	ldr	r3, [r5, #8]
    5a74:	7b5a      	ldrb	r2, [r3, #13]
    5a76:	06d2      	lsls	r2, r2, #27
    5a78:	d106      	bne.n	5a88 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5a7a:	69a2      	ldr	r2, [r4, #24]
    5a7c:	b922      	cbnz	r2, 5a88 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5a7e:	89da      	ldrh	r2, [r3, #14]
    5a80:	2a7f      	cmp	r2, #127	; 0x7f
    5a82:	d901      	bls.n	5a88 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5a84:	61eb      	str	r3, [r5, #28]
}
    5a86:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5a88:	68ab      	ldr	r3, [r5, #8]
    5a8a:	42a3      	cmp	r3, r4
    5a8c:	d001      	beq.n	5a92 <update_cache+0x52>
			z_reset_time_slice();
    5a8e:	f7ff fdcb 	bl	5628 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5a92:	61ec      	str	r4, [r5, #28]
}
    5a94:	e7f7      	b.n	5a86 <update_cache+0x46>
    5a96:	bf00      	nop
    5a98:	20000c0c 	.word	0x20000c0c
    5a9c:	20000bec 	.word	0x20000bec
    5aa0:	00009df4 	.word	0x00009df4
    5aa4:	00009d9a 	.word	0x00009d9a
    5aa8:	00009117 	.word	0x00009117
    5aac:	00009c36 	.word	0x00009c36

00005ab0 <move_thread_to_end_of_prio_q>:
{
    5ab0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5ab2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5ab6:	7b43      	ldrb	r3, [r0, #13]
    5ab8:	2a00      	cmp	r2, #0
{
    5aba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5abc:	da06      	bge.n	5acc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ac2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ac4:	4601      	mov	r1, r0
    5ac6:	481f      	ldr	r0, [pc, #124]	; (5b44 <move_thread_to_end_of_prio_q+0x94>)
    5ac8:	f7ff ff2a 	bl	5920 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5acc:	7b63      	ldrb	r3, [r4, #13]
    5ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ad2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5ad4:	4b1c      	ldr	r3, [pc, #112]	; (5b48 <move_thread_to_end_of_prio_q+0x98>)
    5ad6:	429c      	cmp	r4, r3
    5ad8:	d109      	bne.n	5aee <move_thread_to_end_of_prio_q+0x3e>
    5ada:	491c      	ldr	r1, [pc, #112]	; (5b4c <move_thread_to_end_of_prio_q+0x9c>)
    5adc:	481c      	ldr	r0, [pc, #112]	; (5b50 <move_thread_to_end_of_prio_q+0xa0>)
    5ade:	4a1d      	ldr	r2, [pc, #116]	; (5b54 <move_thread_to_end_of_prio_q+0xa4>)
    5ae0:	23ba      	movs	r3, #186	; 0xba
    5ae2:	f002 fb84 	bl	81ee <printk>
    5ae6:	481b      	ldr	r0, [pc, #108]	; (5b54 <move_thread_to_end_of_prio_q+0xa4>)
    5ae8:	21ba      	movs	r1, #186	; 0xba
    5aea:	f002 faa9 	bl	8040 <assert_post_action>
	return list->head == list;
    5aee:	4a1a      	ldr	r2, [pc, #104]	; (5b58 <move_thread_to_end_of_prio_q+0xa8>)
    5af0:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5af2:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5af4:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5af8:	428b      	cmp	r3, r1
    5afa:	bf08      	it	eq
    5afc:	2300      	moveq	r3, #0
    5afe:	2b00      	cmp	r3, #0
    5b00:	bf38      	it	cc
    5b02:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b04:	b1cb      	cbz	r3, 5b3a <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5b06:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5b0a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5b0e:	4286      	cmp	r6, r0
    5b10:	d00f      	beq.n	5b32 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    5b12:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b14:	2800      	cmp	r0, #0
    5b16:	dd0c      	ble.n	5b32 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5b18:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5b1a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5b1e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5b20:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5b22:	6890      	ldr	r0, [r2, #8]
    5b24:	1b03      	subs	r3, r0, r4
    5b26:	4258      	negs	r0, r3
}
    5b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5b2c:	4158      	adcs	r0, r3
    5b2e:	f7ff bf87 	b.w	5a40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5b32:	42ab      	cmp	r3, r5
    5b34:	d001      	beq.n	5b3a <move_thread_to_end_of_prio_q+0x8a>
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	e7e4      	b.n	5b04 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    5b3a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    5b3e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5b40:	6254      	str	r4, [r2, #36]	; 0x24
}
    5b42:	e7ee      	b.n	5b22 <move_thread_to_end_of_prio_q+0x72>
    5b44:	20000c0c 	.word	0x20000c0c
    5b48:	200003f8 	.word	0x200003f8
    5b4c:	00009dbc 	.word	0x00009dbc
    5b50:	00009117 	.word	0x00009117
    5b54:	00009d9a 	.word	0x00009d9a
    5b58:	20000bec 	.word	0x20000bec

00005b5c <z_time_slice>:
{
    5b5c:	b570      	push	{r4, r5, r6, lr}
    5b5e:	4604      	mov	r4, r0
	__asm__ volatile(
    5b60:	f04f 0320 	mov.w	r3, #32
    5b64:	f3ef 8511 	mrs	r5, BASEPRI
    5b68:	f383 8812 	msr	BASEPRI_MAX, r3
    5b6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b70:	482a      	ldr	r0, [pc, #168]	; (5c1c <z_time_slice+0xc0>)
    5b72:	f001 f9b1 	bl	6ed8 <z_spin_lock_valid>
    5b76:	b968      	cbnz	r0, 5b94 <z_time_slice+0x38>
    5b78:	4a29      	ldr	r2, [pc, #164]	; (5c20 <z_time_slice+0xc4>)
    5b7a:	492a      	ldr	r1, [pc, #168]	; (5c24 <z_time_slice+0xc8>)
    5b7c:	482a      	ldr	r0, [pc, #168]	; (5c28 <z_time_slice+0xcc>)
    5b7e:	2381      	movs	r3, #129	; 0x81
    5b80:	f002 fb35 	bl	81ee <printk>
    5b84:	4925      	ldr	r1, [pc, #148]	; (5c1c <z_time_slice+0xc0>)
    5b86:	4829      	ldr	r0, [pc, #164]	; (5c2c <z_time_slice+0xd0>)
    5b88:	f002 fb31 	bl	81ee <printk>
    5b8c:	4824      	ldr	r0, [pc, #144]	; (5c20 <z_time_slice+0xc4>)
    5b8e:	2181      	movs	r1, #129	; 0x81
    5b90:	f002 fa56 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b94:	4821      	ldr	r0, [pc, #132]	; (5c1c <z_time_slice+0xc0>)
    5b96:	f001 f9bd 	bl	6f14 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5b9a:	4b25      	ldr	r3, [pc, #148]	; (5c30 <z_time_slice+0xd4>)
    5b9c:	4a25      	ldr	r2, [pc, #148]	; (5c34 <z_time_slice+0xd8>)
    5b9e:	6898      	ldr	r0, [r3, #8]
    5ba0:	6811      	ldr	r1, [r2, #0]
    5ba2:	4288      	cmp	r0, r1
    5ba4:	4619      	mov	r1, r3
    5ba6:	d118      	bne.n	5bda <z_time_slice+0x7e>
			z_reset_time_slice();
    5ba8:	f7ff fd3e 	bl	5628 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bac:	481b      	ldr	r0, [pc, #108]	; (5c1c <z_time_slice+0xc0>)
    5bae:	f001 f9a1 	bl	6ef4 <z_spin_unlock_valid>
    5bb2:	b968      	cbnz	r0, 5bd0 <z_time_slice+0x74>
    5bb4:	4a1a      	ldr	r2, [pc, #104]	; (5c20 <z_time_slice+0xc4>)
    5bb6:	4920      	ldr	r1, [pc, #128]	; (5c38 <z_time_slice+0xdc>)
    5bb8:	481b      	ldr	r0, [pc, #108]	; (5c28 <z_time_slice+0xcc>)
    5bba:	23ac      	movs	r3, #172	; 0xac
    5bbc:	f002 fb17 	bl	81ee <printk>
    5bc0:	4916      	ldr	r1, [pc, #88]	; (5c1c <z_time_slice+0xc0>)
    5bc2:	481e      	ldr	r0, [pc, #120]	; (5c3c <z_time_slice+0xe0>)
    5bc4:	f002 fb13 	bl	81ee <printk>
    5bc8:	4815      	ldr	r0, [pc, #84]	; (5c20 <z_time_slice+0xc4>)
    5bca:	21ac      	movs	r1, #172	; 0xac
    5bcc:	f002 fa38 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5bd0:	f385 8811 	msr	BASEPRI, r5
    5bd4:	f3bf 8f6f 	isb	sy
}
    5bd8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5bda:	2600      	movs	r6, #0
    5bdc:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5bde:	4a18      	ldr	r2, [pc, #96]	; (5c40 <z_time_slice+0xe4>)
    5be0:	6812      	ldr	r2, [r2, #0]
    5be2:	b1ba      	cbz	r2, 5c14 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5be4:	89c2      	ldrh	r2, [r0, #14]
    5be6:	2a7f      	cmp	r2, #127	; 0x7f
    5be8:	d814      	bhi.n	5c14 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5bea:	7b42      	ldrb	r2, [r0, #13]
    5bec:	06d2      	lsls	r2, r2, #27
    5bee:	d111      	bne.n	5c14 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5bf0:	4a14      	ldr	r2, [pc, #80]	; (5c44 <z_time_slice+0xe8>)
    5bf2:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5bf6:	6812      	ldr	r2, [r2, #0]
    5bf8:	4296      	cmp	r6, r2
    5bfa:	db0b      	blt.n	5c14 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5bfc:	4a12      	ldr	r2, [pc, #72]	; (5c48 <z_time_slice+0xec>)
    5bfe:	4290      	cmp	r0, r2
    5c00:	d008      	beq.n	5c14 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    5c02:	691a      	ldr	r2, [r3, #16]
    5c04:	42a2      	cmp	r2, r4
    5c06:	dc02      	bgt.n	5c0e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5c08:	f7ff ff52 	bl	5ab0 <move_thread_to_end_of_prio_q>
    5c0c:	e7cc      	b.n	5ba8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    5c0e:	1b12      	subs	r2, r2, r4
    5c10:	611a      	str	r2, [r3, #16]
    5c12:	e7cb      	b.n	5bac <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5c14:	2300      	movs	r3, #0
    5c16:	610b      	str	r3, [r1, #16]
    5c18:	e7c8      	b.n	5bac <z_time_slice+0x50>
    5c1a:	bf00      	nop
    5c1c:	20000c20 	.word	0x20000c20
    5c20:	0000922a 	.word	0x0000922a
    5c24:	0000927c 	.word	0x0000927c
    5c28:	00009117 	.word	0x00009117
    5c2c:	00009291 	.word	0x00009291
    5c30:	20000bec 	.word	0x20000bec
    5c34:	20000c1c 	.word	0x20000c1c
    5c38:	00009250 	.word	0x00009250
    5c3c:	00009267 	.word	0x00009267
    5c40:	20000c28 	.word	0x20000c28
    5c44:	20000c24 	.word	0x20000c24
    5c48:	200003f8 	.word	0x200003f8

00005c4c <ready_thread>:
{
    5c4c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5c4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5c52:	7b43      	ldrb	r3, [r0, #13]
    5c54:	2a00      	cmp	r2, #0
{
    5c56:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5c58:	db3e      	blt.n	5cd8 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5c5a:	06da      	lsls	r2, r3, #27
    5c5c:	d13c      	bne.n	5cd8 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    5c5e:	6985      	ldr	r5, [r0, #24]
    5c60:	2d00      	cmp	r5, #0
    5c62:	d139      	bne.n	5cd8 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    5c64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c68:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c6a:	4b1c      	ldr	r3, [pc, #112]	; (5cdc <ready_thread+0x90>)
    5c6c:	4298      	cmp	r0, r3
    5c6e:	d109      	bne.n	5c84 <ready_thread+0x38>
    5c70:	491b      	ldr	r1, [pc, #108]	; (5ce0 <ready_thread+0x94>)
    5c72:	481c      	ldr	r0, [pc, #112]	; (5ce4 <ready_thread+0x98>)
    5c74:	4a1c      	ldr	r2, [pc, #112]	; (5ce8 <ready_thread+0x9c>)
    5c76:	23ba      	movs	r3, #186	; 0xba
    5c78:	f002 fab9 	bl	81ee <printk>
    5c7c:	481a      	ldr	r0, [pc, #104]	; (5ce8 <ready_thread+0x9c>)
    5c7e:	21ba      	movs	r1, #186	; 0xba
    5c80:	f002 f9de 	bl	8040 <assert_post_action>
	return list->head == list;
    5c84:	4919      	ldr	r1, [pc, #100]	; (5cec <ready_thread+0xa0>)
    5c86:	460b      	mov	r3, r1
    5c88:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c8c:	4298      	cmp	r0, r3
    5c8e:	bf18      	it	ne
    5c90:	4605      	movne	r5, r0
    5c92:	2d00      	cmp	r5, #0
    5c94:	461a      	mov	r2, r3
    5c96:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5c98:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5c9a:	bf38      	it	cc
    5c9c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c9e:	b1b3      	cbz	r3, 5cce <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    5ca0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5ca4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5ca8:	4286      	cmp	r6, r0
    5caa:	d00c      	beq.n	5cc6 <ready_thread+0x7a>
		return b2 - b1;
    5cac:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cae:	2800      	cmp	r0, #0
    5cb0:	dd09      	ble.n	5cc6 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    5cb2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5cb4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5cb8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5cba:	605c      	str	r4, [r3, #4]
}
    5cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5cc0:	2000      	movs	r0, #0
    5cc2:	f7ff bebd 	b.w	5a40 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5cc6:	42ab      	cmp	r3, r5
    5cc8:	d001      	beq.n	5cce <ready_thread+0x82>
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	e7e7      	b.n	5c9e <ready_thread+0x52>
	node->prev = tail;
    5cce:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5cd2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5cd4:	624c      	str	r4, [r1, #36]	; 0x24
}
    5cd6:	e7f1      	b.n	5cbc <ready_thread+0x70>
}
    5cd8:	bd70      	pop	{r4, r5, r6, pc}
    5cda:	bf00      	nop
    5cdc:	200003f8 	.word	0x200003f8
    5ce0:	00009dbc 	.word	0x00009dbc
    5ce4:	00009117 	.word	0x00009117
    5ce8:	00009d9a 	.word	0x00009d9a
    5cec:	20000bec 	.word	0x20000bec

00005cf0 <z_ready_thread>:
{
    5cf0:	b538      	push	{r3, r4, r5, lr}
    5cf2:	4604      	mov	r4, r0
	__asm__ volatile(
    5cf4:	f04f 0320 	mov.w	r3, #32
    5cf8:	f3ef 8511 	mrs	r5, BASEPRI
    5cfc:	f383 8812 	msr	BASEPRI_MAX, r3
    5d00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d04:	4817      	ldr	r0, [pc, #92]	; (5d64 <z_ready_thread+0x74>)
    5d06:	f001 f8e7 	bl	6ed8 <z_spin_lock_valid>
    5d0a:	b968      	cbnz	r0, 5d28 <z_ready_thread+0x38>
    5d0c:	4a16      	ldr	r2, [pc, #88]	; (5d68 <z_ready_thread+0x78>)
    5d0e:	4917      	ldr	r1, [pc, #92]	; (5d6c <z_ready_thread+0x7c>)
    5d10:	4817      	ldr	r0, [pc, #92]	; (5d70 <z_ready_thread+0x80>)
    5d12:	2381      	movs	r3, #129	; 0x81
    5d14:	f002 fa6b 	bl	81ee <printk>
    5d18:	4912      	ldr	r1, [pc, #72]	; (5d64 <z_ready_thread+0x74>)
    5d1a:	4816      	ldr	r0, [pc, #88]	; (5d74 <z_ready_thread+0x84>)
    5d1c:	f002 fa67 	bl	81ee <printk>
    5d20:	4811      	ldr	r0, [pc, #68]	; (5d68 <z_ready_thread+0x78>)
    5d22:	2181      	movs	r1, #129	; 0x81
    5d24:	f002 f98c 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d28:	480e      	ldr	r0, [pc, #56]	; (5d64 <z_ready_thread+0x74>)
    5d2a:	f001 f8f3 	bl	6f14 <z_spin_lock_set_owner>
			ready_thread(thread);
    5d2e:	4620      	mov	r0, r4
    5d30:	f7ff ff8c 	bl	5c4c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d34:	480b      	ldr	r0, [pc, #44]	; (5d64 <z_ready_thread+0x74>)
    5d36:	f001 f8dd 	bl	6ef4 <z_spin_unlock_valid>
    5d3a:	b968      	cbnz	r0, 5d58 <z_ready_thread+0x68>
    5d3c:	4a0a      	ldr	r2, [pc, #40]	; (5d68 <z_ready_thread+0x78>)
    5d3e:	490e      	ldr	r1, [pc, #56]	; (5d78 <z_ready_thread+0x88>)
    5d40:	480b      	ldr	r0, [pc, #44]	; (5d70 <z_ready_thread+0x80>)
    5d42:	23ac      	movs	r3, #172	; 0xac
    5d44:	f002 fa53 	bl	81ee <printk>
    5d48:	4906      	ldr	r1, [pc, #24]	; (5d64 <z_ready_thread+0x74>)
    5d4a:	480c      	ldr	r0, [pc, #48]	; (5d7c <z_ready_thread+0x8c>)
    5d4c:	f002 fa4f 	bl	81ee <printk>
    5d50:	4805      	ldr	r0, [pc, #20]	; (5d68 <z_ready_thread+0x78>)
    5d52:	21ac      	movs	r1, #172	; 0xac
    5d54:	f002 f974 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5d58:	f385 8811 	msr	BASEPRI, r5
    5d5c:	f3bf 8f6f 	isb	sy
}
    5d60:	bd38      	pop	{r3, r4, r5, pc}
    5d62:	bf00      	nop
    5d64:	20000c20 	.word	0x20000c20
    5d68:	0000922a 	.word	0x0000922a
    5d6c:	0000927c 	.word	0x0000927c
    5d70:	00009117 	.word	0x00009117
    5d74:	00009291 	.word	0x00009291
    5d78:	00009250 	.word	0x00009250
    5d7c:	00009267 	.word	0x00009267

00005d80 <z_sched_start>:
{
    5d80:	b538      	push	{r3, r4, r5, lr}
    5d82:	4604      	mov	r4, r0
	__asm__ volatile(
    5d84:	f04f 0320 	mov.w	r3, #32
    5d88:	f3ef 8511 	mrs	r5, BASEPRI
    5d8c:	f383 8812 	msr	BASEPRI_MAX, r3
    5d90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d94:	481d      	ldr	r0, [pc, #116]	; (5e0c <z_sched_start+0x8c>)
    5d96:	f001 f89f 	bl	6ed8 <z_spin_lock_valid>
    5d9a:	b968      	cbnz	r0, 5db8 <z_sched_start+0x38>
    5d9c:	4a1c      	ldr	r2, [pc, #112]	; (5e10 <z_sched_start+0x90>)
    5d9e:	491d      	ldr	r1, [pc, #116]	; (5e14 <z_sched_start+0x94>)
    5da0:	481d      	ldr	r0, [pc, #116]	; (5e18 <z_sched_start+0x98>)
    5da2:	2381      	movs	r3, #129	; 0x81
    5da4:	f002 fa23 	bl	81ee <printk>
    5da8:	4918      	ldr	r1, [pc, #96]	; (5e0c <z_sched_start+0x8c>)
    5daa:	481c      	ldr	r0, [pc, #112]	; (5e1c <z_sched_start+0x9c>)
    5dac:	f002 fa1f 	bl	81ee <printk>
    5db0:	4817      	ldr	r0, [pc, #92]	; (5e10 <z_sched_start+0x90>)
    5db2:	2181      	movs	r1, #129	; 0x81
    5db4:	f002 f944 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5db8:	4814      	ldr	r0, [pc, #80]	; (5e0c <z_sched_start+0x8c>)
    5dba:	f001 f8ab 	bl	6f14 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5dbe:	7b63      	ldrb	r3, [r4, #13]
    5dc0:	075a      	lsls	r2, r3, #29
    5dc2:	d416      	bmi.n	5df2 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dc4:	4811      	ldr	r0, [pc, #68]	; (5e0c <z_sched_start+0x8c>)
    5dc6:	f001 f895 	bl	6ef4 <z_spin_unlock_valid>
    5dca:	b968      	cbnz	r0, 5de8 <z_sched_start+0x68>
    5dcc:	4a10      	ldr	r2, [pc, #64]	; (5e10 <z_sched_start+0x90>)
    5dce:	4914      	ldr	r1, [pc, #80]	; (5e20 <z_sched_start+0xa0>)
    5dd0:	4811      	ldr	r0, [pc, #68]	; (5e18 <z_sched_start+0x98>)
    5dd2:	23ac      	movs	r3, #172	; 0xac
    5dd4:	f002 fa0b 	bl	81ee <printk>
    5dd8:	490c      	ldr	r1, [pc, #48]	; (5e0c <z_sched_start+0x8c>)
    5dda:	4812      	ldr	r0, [pc, #72]	; (5e24 <z_sched_start+0xa4>)
    5ddc:	f002 fa07 	bl	81ee <printk>
    5de0:	480b      	ldr	r0, [pc, #44]	; (5e10 <z_sched_start+0x90>)
    5de2:	21ac      	movs	r1, #172	; 0xac
    5de4:	f002 f92c 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5de8:	f385 8811 	msr	BASEPRI, r5
    5dec:	f3bf 8f6f 	isb	sy
}
    5df0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5df2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5df6:	4620      	mov	r0, r4
    5df8:	7363      	strb	r3, [r4, #13]
    5dfa:	f7ff ff27 	bl	5c4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5dfe:	4629      	mov	r1, r5
    5e00:	4802      	ldr	r0, [pc, #8]	; (5e0c <z_sched_start+0x8c>)
}
    5e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5e06:	f7ff bcd3 	b.w	57b0 <z_reschedule>
    5e0a:	bf00      	nop
    5e0c:	20000c20 	.word	0x20000c20
    5e10:	0000922a 	.word	0x0000922a
    5e14:	0000927c 	.word	0x0000927c
    5e18:	00009117 	.word	0x00009117
    5e1c:	00009291 	.word	0x00009291
    5e20:	00009250 	.word	0x00009250
    5e24:	00009267 	.word	0x00009267

00005e28 <z_thread_timeout>:
{
    5e28:	b570      	push	{r4, r5, r6, lr}
    5e2a:	4604      	mov	r4, r0
	__asm__ volatile(
    5e2c:	f04f 0320 	mov.w	r3, #32
    5e30:	f3ef 8611 	mrs	r6, BASEPRI
    5e34:	f383 8812 	msr	BASEPRI_MAX, r3
    5e38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e3c:	4820      	ldr	r0, [pc, #128]	; (5ec0 <z_thread_timeout+0x98>)
    5e3e:	f001 f84b 	bl	6ed8 <z_spin_lock_valid>
    5e42:	b968      	cbnz	r0, 5e60 <z_thread_timeout+0x38>
    5e44:	4a1f      	ldr	r2, [pc, #124]	; (5ec4 <z_thread_timeout+0x9c>)
    5e46:	4920      	ldr	r1, [pc, #128]	; (5ec8 <z_thread_timeout+0xa0>)
    5e48:	4820      	ldr	r0, [pc, #128]	; (5ecc <z_thread_timeout+0xa4>)
    5e4a:	2381      	movs	r3, #129	; 0x81
    5e4c:	f002 f9cf 	bl	81ee <printk>
    5e50:	491b      	ldr	r1, [pc, #108]	; (5ec0 <z_thread_timeout+0x98>)
    5e52:	481f      	ldr	r0, [pc, #124]	; (5ed0 <z_thread_timeout+0xa8>)
    5e54:	f002 f9cb 	bl	81ee <printk>
    5e58:	481a      	ldr	r0, [pc, #104]	; (5ec4 <z_thread_timeout+0x9c>)
    5e5a:	2181      	movs	r1, #129	; 0x81
    5e5c:	f002 f8f0 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e60:	4817      	ldr	r0, [pc, #92]	; (5ec0 <z_thread_timeout+0x98>)
    5e62:	f001 f857 	bl	6f14 <z_spin_lock_set_owner>
		if (!killed) {
    5e66:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5e6a:	f013 0f28 	tst.w	r3, #40	; 0x28
    5e6e:	d110      	bne.n	5e92 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5e70:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5e74:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5e78:	b113      	cbz	r3, 5e80 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5e7a:	4628      	mov	r0, r5
    5e7c:	f7ff fd72 	bl	5964 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5e80:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5e84:	f023 0314 	bic.w	r3, r3, #20
    5e88:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5e8c:	4628      	mov	r0, r5
    5e8e:	f7ff fedd 	bl	5c4c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e92:	480b      	ldr	r0, [pc, #44]	; (5ec0 <z_thread_timeout+0x98>)
    5e94:	f001 f82e 	bl	6ef4 <z_spin_unlock_valid>
    5e98:	b968      	cbnz	r0, 5eb6 <z_thread_timeout+0x8e>
    5e9a:	4a0a      	ldr	r2, [pc, #40]	; (5ec4 <z_thread_timeout+0x9c>)
    5e9c:	490d      	ldr	r1, [pc, #52]	; (5ed4 <z_thread_timeout+0xac>)
    5e9e:	480b      	ldr	r0, [pc, #44]	; (5ecc <z_thread_timeout+0xa4>)
    5ea0:	23ac      	movs	r3, #172	; 0xac
    5ea2:	f002 f9a4 	bl	81ee <printk>
    5ea6:	4906      	ldr	r1, [pc, #24]	; (5ec0 <z_thread_timeout+0x98>)
    5ea8:	480b      	ldr	r0, [pc, #44]	; (5ed8 <z_thread_timeout+0xb0>)
    5eaa:	f002 f9a0 	bl	81ee <printk>
    5eae:	4805      	ldr	r0, [pc, #20]	; (5ec4 <z_thread_timeout+0x9c>)
    5eb0:	21ac      	movs	r1, #172	; 0xac
    5eb2:	f002 f8c5 	bl	8040 <assert_post_action>
	__asm__ volatile(
    5eb6:	f386 8811 	msr	BASEPRI, r6
    5eba:	f3bf 8f6f 	isb	sy
}
    5ebe:	bd70      	pop	{r4, r5, r6, pc}
    5ec0:	20000c20 	.word	0x20000c20
    5ec4:	0000922a 	.word	0x0000922a
    5ec8:	0000927c 	.word	0x0000927c
    5ecc:	00009117 	.word	0x00009117
    5ed0:	00009291 	.word	0x00009291
    5ed4:	00009250 	.word	0x00009250
    5ed8:	00009267 	.word	0x00009267

00005edc <unready_thread>:
{
    5edc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5ede:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5ee2:	7b43      	ldrb	r3, [r0, #13]
    5ee4:	2a00      	cmp	r2, #0
{
    5ee6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5ee8:	da06      	bge.n	5ef8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5eee:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5ef0:	4601      	mov	r1, r0
    5ef2:	4806      	ldr	r0, [pc, #24]	; (5f0c <unready_thread+0x30>)
    5ef4:	f7ff fd14 	bl	5920 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5ef8:	4b05      	ldr	r3, [pc, #20]	; (5f10 <unready_thread+0x34>)
    5efa:	6898      	ldr	r0, [r3, #8]
    5efc:	1b03      	subs	r3, r0, r4
    5efe:	4258      	negs	r0, r3
}
    5f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5f04:	4158      	adcs	r0, r3
    5f06:	f7ff bd9b 	b.w	5a40 <update_cache>
    5f0a:	bf00      	nop
    5f0c:	20000c0c 	.word	0x20000c0c
    5f10:	20000bec 	.word	0x20000bec

00005f14 <add_to_waitq_locked>:
{
    5f14:	b538      	push	{r3, r4, r5, lr}
    5f16:	4604      	mov	r4, r0
    5f18:	460d      	mov	r5, r1
	unready_thread(thread);
    5f1a:	f7ff ffdf 	bl	5edc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5f1e:	7b63      	ldrb	r3, [r4, #13]
    5f20:	f043 0302 	orr.w	r3, r3, #2
    5f24:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5f26:	b31d      	cbz	r5, 5f70 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5f28:	4b17      	ldr	r3, [pc, #92]	; (5f88 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    5f2a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5f2c:	429c      	cmp	r4, r3
    5f2e:	d109      	bne.n	5f44 <add_to_waitq_locked+0x30>
    5f30:	4916      	ldr	r1, [pc, #88]	; (5f8c <add_to_waitq_locked+0x78>)
    5f32:	4817      	ldr	r0, [pc, #92]	; (5f90 <add_to_waitq_locked+0x7c>)
    5f34:	4a17      	ldr	r2, [pc, #92]	; (5f94 <add_to_waitq_locked+0x80>)
    5f36:	23ba      	movs	r3, #186	; 0xba
    5f38:	f002 f959 	bl	81ee <printk>
    5f3c:	4815      	ldr	r0, [pc, #84]	; (5f94 <add_to_waitq_locked+0x80>)
    5f3e:	21ba      	movs	r1, #186	; 0xba
    5f40:	f002 f87e 	bl	8040 <assert_post_action>
	return list->head == list;
    5f44:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f46:	429d      	cmp	r5, r3
    5f48:	bf08      	it	eq
    5f4a:	2300      	moveq	r3, #0
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	bf38      	it	cc
    5f50:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f52:	b19b      	cbz	r3, 5f7c <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    5f54:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5f58:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5f5c:	4291      	cmp	r1, r2
    5f5e:	d008      	beq.n	5f72 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    5f60:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f62:	2a00      	cmp	r2, #0
    5f64:	dd05      	ble.n	5f72 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    5f66:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5f68:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5f6c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5f6e:	605c      	str	r4, [r3, #4]
}
    5f70:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5f72:	686a      	ldr	r2, [r5, #4]
    5f74:	4293      	cmp	r3, r2
    5f76:	d001      	beq.n	5f7c <add_to_waitq_locked+0x68>
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	e7ea      	b.n	5f52 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    5f7c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5f7e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5f82:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5f84:	606c      	str	r4, [r5, #4]
    5f86:	e7f3      	b.n	5f70 <add_to_waitq_locked+0x5c>
    5f88:	200003f8 	.word	0x200003f8
    5f8c:	00009dbc 	.word	0x00009dbc
    5f90:	00009117 	.word	0x00009117
    5f94:	00009d9a 	.word	0x00009d9a

00005f98 <pend>:
{
    5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f9c:	4604      	mov	r4, r0
    5f9e:	460d      	mov	r5, r1
    5fa0:	4616      	mov	r6, r2
    5fa2:	461f      	mov	r7, r3
	__asm__ volatile(
    5fa4:	f04f 0320 	mov.w	r3, #32
    5fa8:	f3ef 8811 	mrs	r8, BASEPRI
    5fac:	f383 8812 	msr	BASEPRI_MAX, r3
    5fb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5fb4:	481f      	ldr	r0, [pc, #124]	; (6034 <pend+0x9c>)
    5fb6:	f000 ff8f 	bl	6ed8 <z_spin_lock_valid>
    5fba:	b968      	cbnz	r0, 5fd8 <pend+0x40>
    5fbc:	4a1e      	ldr	r2, [pc, #120]	; (6038 <pend+0xa0>)
    5fbe:	491f      	ldr	r1, [pc, #124]	; (603c <pend+0xa4>)
    5fc0:	481f      	ldr	r0, [pc, #124]	; (6040 <pend+0xa8>)
    5fc2:	2381      	movs	r3, #129	; 0x81
    5fc4:	f002 f913 	bl	81ee <printk>
    5fc8:	491a      	ldr	r1, [pc, #104]	; (6034 <pend+0x9c>)
    5fca:	481e      	ldr	r0, [pc, #120]	; (6044 <pend+0xac>)
    5fcc:	f002 f90f 	bl	81ee <printk>
    5fd0:	4819      	ldr	r0, [pc, #100]	; (6038 <pend+0xa0>)
    5fd2:	2181      	movs	r1, #129	; 0x81
    5fd4:	f002 f834 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    5fd8:	4816      	ldr	r0, [pc, #88]	; (6034 <pend+0x9c>)
    5fda:	f000 ff9b 	bl	6f14 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5fde:	4620      	mov	r0, r4
    5fe0:	4629      	mov	r1, r5
    5fe2:	f7ff ff97 	bl	5f14 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fe6:	4813      	ldr	r0, [pc, #76]	; (6034 <pend+0x9c>)
    5fe8:	f000 ff84 	bl	6ef4 <z_spin_unlock_valid>
    5fec:	b968      	cbnz	r0, 600a <pend+0x72>
    5fee:	4a12      	ldr	r2, [pc, #72]	; (6038 <pend+0xa0>)
    5ff0:	4915      	ldr	r1, [pc, #84]	; (6048 <pend+0xb0>)
    5ff2:	4813      	ldr	r0, [pc, #76]	; (6040 <pend+0xa8>)
    5ff4:	23ac      	movs	r3, #172	; 0xac
    5ff6:	f002 f8fa 	bl	81ee <printk>
    5ffa:	490e      	ldr	r1, [pc, #56]	; (6034 <pend+0x9c>)
    5ffc:	4813      	ldr	r0, [pc, #76]	; (604c <pend+0xb4>)
    5ffe:	f002 f8f6 	bl	81ee <printk>
    6002:	480d      	ldr	r0, [pc, #52]	; (6038 <pend+0xa0>)
    6004:	21ac      	movs	r1, #172	; 0xac
    6006:	f002 f81b 	bl	8040 <assert_post_action>
	__asm__ volatile(
    600a:	f388 8811 	msr	BASEPRI, r8
    600e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6012:	1c7b      	adds	r3, r7, #1
    6014:	bf08      	it	eq
    6016:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    601a:	d008      	beq.n	602e <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    601c:	4632      	mov	r2, r6
    601e:	463b      	mov	r3, r7
    6020:	f104 0018 	add.w	r0, r4, #24
    6024:	490a      	ldr	r1, [pc, #40]	; (6050 <pend+0xb8>)
}
    6026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    602a:	f000 bfcb 	b.w	6fc4 <z_add_timeout>
    602e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6032:	bf00      	nop
    6034:	20000c20 	.word	0x20000c20
    6038:	0000922a 	.word	0x0000922a
    603c:	0000927c 	.word	0x0000927c
    6040:	00009117 	.word	0x00009117
    6044:	00009291 	.word	0x00009291
    6048:	00009250 	.word	0x00009250
    604c:	00009267 	.word	0x00009267
    6050:	00005e29 	.word	0x00005e29

00006054 <z_pend_curr>:
{
    6054:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6056:	4b11      	ldr	r3, [pc, #68]	; (609c <z_pend_curr+0x48>)
{
    6058:	4604      	mov	r4, r0
	pending_current = _current;
    605a:	6898      	ldr	r0, [r3, #8]
    605c:	4b10      	ldr	r3, [pc, #64]	; (60a0 <z_pend_curr+0x4c>)
{
    605e:	460d      	mov	r5, r1
	pending_current = _current;
    6060:	6018      	str	r0, [r3, #0]
{
    6062:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6068:	f7ff ff96 	bl	5f98 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    606c:	4620      	mov	r0, r4
    606e:	f000 ff41 	bl	6ef4 <z_spin_unlock_valid>
    6072:	b968      	cbnz	r0, 6090 <z_pend_curr+0x3c>
    6074:	4a0b      	ldr	r2, [pc, #44]	; (60a4 <z_pend_curr+0x50>)
    6076:	490c      	ldr	r1, [pc, #48]	; (60a8 <z_pend_curr+0x54>)
    6078:	480c      	ldr	r0, [pc, #48]	; (60ac <z_pend_curr+0x58>)
    607a:	23c3      	movs	r3, #195	; 0xc3
    607c:	f002 f8b7 	bl	81ee <printk>
    6080:	480b      	ldr	r0, [pc, #44]	; (60b0 <z_pend_curr+0x5c>)
    6082:	4621      	mov	r1, r4
    6084:	f002 f8b3 	bl	81ee <printk>
    6088:	4806      	ldr	r0, [pc, #24]	; (60a4 <z_pend_curr+0x50>)
    608a:	21c3      	movs	r1, #195	; 0xc3
    608c:	f001 ffd8 	bl	8040 <assert_post_action>
    6090:	4628      	mov	r0, r5
}
    6092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6096:	f7fb bd7f 	b.w	1b98 <arch_swap>
    609a:	bf00      	nop
    609c:	20000bec 	.word	0x20000bec
    60a0:	20000c1c 	.word	0x20000c1c
    60a4:	0000922a 	.word	0x0000922a
    60a8:	00009250 	.word	0x00009250
    60ac:	00009117 	.word	0x00009117
    60b0:	00009267 	.word	0x00009267

000060b4 <z_set_prio>:
{
    60b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60b6:	4604      	mov	r4, r0
    60b8:	460e      	mov	r6, r1
	__asm__ volatile(
    60ba:	f04f 0320 	mov.w	r3, #32
    60be:	f3ef 8711 	mrs	r7, BASEPRI
    60c2:	f383 8812 	msr	BASEPRI_MAX, r3
    60c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60ca:	483c      	ldr	r0, [pc, #240]	; (61bc <z_set_prio+0x108>)
    60cc:	f000 ff04 	bl	6ed8 <z_spin_lock_valid>
    60d0:	b968      	cbnz	r0, 60ee <z_set_prio+0x3a>
    60d2:	4a3b      	ldr	r2, [pc, #236]	; (61c0 <z_set_prio+0x10c>)
    60d4:	493b      	ldr	r1, [pc, #236]	; (61c4 <z_set_prio+0x110>)
    60d6:	483c      	ldr	r0, [pc, #240]	; (61c8 <z_set_prio+0x114>)
    60d8:	2381      	movs	r3, #129	; 0x81
    60da:	f002 f888 	bl	81ee <printk>
    60de:	4937      	ldr	r1, [pc, #220]	; (61bc <z_set_prio+0x108>)
    60e0:	483a      	ldr	r0, [pc, #232]	; (61cc <z_set_prio+0x118>)
    60e2:	f002 f884 	bl	81ee <printk>
    60e6:	4836      	ldr	r0, [pc, #216]	; (61c0 <z_set_prio+0x10c>)
    60e8:	2181      	movs	r1, #129	; 0x81
    60ea:	f001 ffa9 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    60ee:	4833      	ldr	r0, [pc, #204]	; (61bc <z_set_prio+0x108>)
    60f0:	f000 ff10 	bl	6f14 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    60f4:	7b63      	ldrb	r3, [r4, #13]
    60f6:	06da      	lsls	r2, r3, #27
    60f8:	b276      	sxtb	r6, r6
    60fa:	d15c      	bne.n	61b6 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    60fc:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    60fe:	2d00      	cmp	r5, #0
    6100:	d159      	bne.n	61b6 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6106:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6108:	4831      	ldr	r0, [pc, #196]	; (61d0 <z_set_prio+0x11c>)
    610a:	4621      	mov	r1, r4
    610c:	f7ff fc08 	bl	5920 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6110:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6112:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6114:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6118:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    611a:	4b2e      	ldr	r3, [pc, #184]	; (61d4 <z_set_prio+0x120>)
    611c:	429c      	cmp	r4, r3
    611e:	d109      	bne.n	6134 <z_set_prio+0x80>
    6120:	492d      	ldr	r1, [pc, #180]	; (61d8 <z_set_prio+0x124>)
    6122:	4829      	ldr	r0, [pc, #164]	; (61c8 <z_set_prio+0x114>)
    6124:	4a2d      	ldr	r2, [pc, #180]	; (61dc <z_set_prio+0x128>)
    6126:	23ba      	movs	r3, #186	; 0xba
    6128:	f002 f861 	bl	81ee <printk>
    612c:	482b      	ldr	r0, [pc, #172]	; (61dc <z_set_prio+0x128>)
    612e:	21ba      	movs	r1, #186	; 0xba
    6130:	f001 ff86 	bl	8040 <assert_post_action>
	return list->head == list;
    6134:	492a      	ldr	r1, [pc, #168]	; (61e0 <z_set_prio+0x12c>)
    6136:	460b      	mov	r3, r1
    6138:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    613c:	4298      	cmp	r0, r3
    613e:	bf18      	it	ne
    6140:	4605      	movne	r5, r0
    6142:	2d00      	cmp	r5, #0
    6144:	461a      	mov	r2, r3
    6146:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6148:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    614a:	bf38      	it	cc
    614c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    614e:	b36b      	cbz	r3, 61ac <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    6150:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6154:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6158:	4286      	cmp	r6, r0
    615a:	d023      	beq.n	61a4 <z_set_prio+0xf0>
		return b2 - b1;
    615c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    615e:	2800      	cmp	r0, #0
    6160:	dd20      	ble.n	61a4 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    6162:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6164:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6168:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    616a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    616c:	2001      	movs	r0, #1
    616e:	f7ff fc67 	bl	5a40 <update_cache>
    6172:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6174:	4811      	ldr	r0, [pc, #68]	; (61bc <z_set_prio+0x108>)
    6176:	f000 febd 	bl	6ef4 <z_spin_unlock_valid>
    617a:	b968      	cbnz	r0, 6198 <z_set_prio+0xe4>
    617c:	4a10      	ldr	r2, [pc, #64]	; (61c0 <z_set_prio+0x10c>)
    617e:	4919      	ldr	r1, [pc, #100]	; (61e4 <z_set_prio+0x130>)
    6180:	4811      	ldr	r0, [pc, #68]	; (61c8 <z_set_prio+0x114>)
    6182:	23ac      	movs	r3, #172	; 0xac
    6184:	f002 f833 	bl	81ee <printk>
    6188:	490c      	ldr	r1, [pc, #48]	; (61bc <z_set_prio+0x108>)
    618a:	4817      	ldr	r0, [pc, #92]	; (61e8 <z_set_prio+0x134>)
    618c:	f002 f82f 	bl	81ee <printk>
    6190:	480b      	ldr	r0, [pc, #44]	; (61c0 <z_set_prio+0x10c>)
    6192:	21ac      	movs	r1, #172	; 0xac
    6194:	f001 ff54 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6198:	f387 8811 	msr	BASEPRI, r7
    619c:	f3bf 8f6f 	isb	sy
}
    61a0:	4620      	mov	r0, r4
    61a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    61a4:	42ab      	cmp	r3, r5
    61a6:	d001      	beq.n	61ac <z_set_prio+0xf8>
    61a8:	681b      	ldr	r3, [r3, #0]
    61aa:	e7d0      	b.n	614e <z_set_prio+0x9a>
	node->prev = tail;
    61ac:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    61b0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    61b2:	624c      	str	r4, [r1, #36]	; 0x24
}
    61b4:	e7da      	b.n	616c <z_set_prio+0xb8>
			thread->base.prio = prio;
    61b6:	73a6      	strb	r6, [r4, #14]
    61b8:	2400      	movs	r4, #0
    61ba:	e7db      	b.n	6174 <z_set_prio+0xc0>
    61bc:	20000c20 	.word	0x20000c20
    61c0:	0000922a 	.word	0x0000922a
    61c4:	0000927c 	.word	0x0000927c
    61c8:	00009117 	.word	0x00009117
    61cc:	00009291 	.word	0x00009291
    61d0:	20000c0c 	.word	0x20000c0c
    61d4:	200003f8 	.word	0x200003f8
    61d8:	00009dbc 	.word	0x00009dbc
    61dc:	00009d9a 	.word	0x00009d9a
    61e0:	20000bec 	.word	0x20000bec
    61e4:	00009250 	.word	0x00009250
    61e8:	00009267 	.word	0x00009267

000061ec <z_impl_k_thread_suspend>:
{
    61ec:	b570      	push	{r4, r5, r6, lr}
    61ee:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    61f0:	3018      	adds	r0, #24
    61f2:	f000 ffbb 	bl	716c <z_abort_timeout>
	__asm__ volatile(
    61f6:	f04f 0320 	mov.w	r3, #32
    61fa:	f3ef 8611 	mrs	r6, BASEPRI
    61fe:	f383 8812 	msr	BASEPRI_MAX, r3
    6202:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6206:	4825      	ldr	r0, [pc, #148]	; (629c <z_impl_k_thread_suspend+0xb0>)
    6208:	f000 fe66 	bl	6ed8 <z_spin_lock_valid>
    620c:	b968      	cbnz	r0, 622a <z_impl_k_thread_suspend+0x3e>
    620e:	4a24      	ldr	r2, [pc, #144]	; (62a0 <z_impl_k_thread_suspend+0xb4>)
    6210:	4924      	ldr	r1, [pc, #144]	; (62a4 <z_impl_k_thread_suspend+0xb8>)
    6212:	4825      	ldr	r0, [pc, #148]	; (62a8 <z_impl_k_thread_suspend+0xbc>)
    6214:	2381      	movs	r3, #129	; 0x81
    6216:	f001 ffea 	bl	81ee <printk>
    621a:	4920      	ldr	r1, [pc, #128]	; (629c <z_impl_k_thread_suspend+0xb0>)
    621c:	4823      	ldr	r0, [pc, #140]	; (62ac <z_impl_k_thread_suspend+0xc0>)
    621e:	f001 ffe6 	bl	81ee <printk>
    6222:	481f      	ldr	r0, [pc, #124]	; (62a0 <z_impl_k_thread_suspend+0xb4>)
    6224:	2181      	movs	r1, #129	; 0x81
    6226:	f001 ff0b 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    622a:	481c      	ldr	r0, [pc, #112]	; (629c <z_impl_k_thread_suspend+0xb0>)
    622c:	f000 fe72 	bl	6f14 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6230:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6234:	7b63      	ldrb	r3, [r4, #13]
    6236:	2a00      	cmp	r2, #0
    6238:	da06      	bge.n	6248 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    623e:	481c      	ldr	r0, [pc, #112]	; (62b0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6240:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6242:	4621      	mov	r1, r4
    6244:	f7ff fb6c 	bl	5920 <z_priq_dumb_remove>
		update_cache(thread == _current);
    6248:	4d1a      	ldr	r5, [pc, #104]	; (62b4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    624a:	7b63      	ldrb	r3, [r4, #13]
    624c:	68a8      	ldr	r0, [r5, #8]
    624e:	f043 0310 	orr.w	r3, r3, #16
    6252:	7363      	strb	r3, [r4, #13]
    6254:	1b03      	subs	r3, r0, r4
    6256:	4258      	negs	r0, r3
    6258:	4158      	adcs	r0, r3
    625a:	f7ff fbf1 	bl	5a40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    625e:	480f      	ldr	r0, [pc, #60]	; (629c <z_impl_k_thread_suspend+0xb0>)
    6260:	f000 fe48 	bl	6ef4 <z_spin_unlock_valid>
    6264:	b968      	cbnz	r0, 6282 <z_impl_k_thread_suspend+0x96>
    6266:	4a0e      	ldr	r2, [pc, #56]	; (62a0 <z_impl_k_thread_suspend+0xb4>)
    6268:	4913      	ldr	r1, [pc, #76]	; (62b8 <z_impl_k_thread_suspend+0xcc>)
    626a:	480f      	ldr	r0, [pc, #60]	; (62a8 <z_impl_k_thread_suspend+0xbc>)
    626c:	23ac      	movs	r3, #172	; 0xac
    626e:	f001 ffbe 	bl	81ee <printk>
    6272:	490a      	ldr	r1, [pc, #40]	; (629c <z_impl_k_thread_suspend+0xb0>)
    6274:	4811      	ldr	r0, [pc, #68]	; (62bc <z_impl_k_thread_suspend+0xd0>)
    6276:	f001 ffba 	bl	81ee <printk>
    627a:	4809      	ldr	r0, [pc, #36]	; (62a0 <z_impl_k_thread_suspend+0xb4>)
    627c:	21ac      	movs	r1, #172	; 0xac
    627e:	f001 fedf 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6282:	f386 8811 	msr	BASEPRI, r6
    6286:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    628a:	68ab      	ldr	r3, [r5, #8]
    628c:	42a3      	cmp	r3, r4
    628e:	d103      	bne.n	6298 <z_impl_k_thread_suspend+0xac>
}
    6290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6294:	f002 bb12 	b.w	88bc <z_reschedule_unlocked>
}
    6298:	bd70      	pop	{r4, r5, r6, pc}
    629a:	bf00      	nop
    629c:	20000c20 	.word	0x20000c20
    62a0:	0000922a 	.word	0x0000922a
    62a4:	0000927c 	.word	0x0000927c
    62a8:	00009117 	.word	0x00009117
    62ac:	00009291 	.word	0x00009291
    62b0:	20000c0c 	.word	0x20000c0c
    62b4:	20000bec 	.word	0x20000bec
    62b8:	00009250 	.word	0x00009250
    62bc:	00009267 	.word	0x00009267

000062c0 <k_sched_unlock>:
{
    62c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    62c2:	f04f 0320 	mov.w	r3, #32
    62c6:	f3ef 8511 	mrs	r5, BASEPRI
    62ca:	f383 8812 	msr	BASEPRI_MAX, r3
    62ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62d2:	482d      	ldr	r0, [pc, #180]	; (6388 <k_sched_unlock+0xc8>)
    62d4:	f000 fe00 	bl	6ed8 <z_spin_lock_valid>
    62d8:	b968      	cbnz	r0, 62f6 <k_sched_unlock+0x36>
    62da:	4a2c      	ldr	r2, [pc, #176]	; (638c <k_sched_unlock+0xcc>)
    62dc:	492c      	ldr	r1, [pc, #176]	; (6390 <k_sched_unlock+0xd0>)
    62de:	482d      	ldr	r0, [pc, #180]	; (6394 <k_sched_unlock+0xd4>)
    62e0:	2381      	movs	r3, #129	; 0x81
    62e2:	f001 ff84 	bl	81ee <printk>
    62e6:	4928      	ldr	r1, [pc, #160]	; (6388 <k_sched_unlock+0xc8>)
    62e8:	482b      	ldr	r0, [pc, #172]	; (6398 <k_sched_unlock+0xd8>)
    62ea:	f001 ff80 	bl	81ee <printk>
    62ee:	4827      	ldr	r0, [pc, #156]	; (638c <k_sched_unlock+0xcc>)
    62f0:	2181      	movs	r1, #129	; 0x81
    62f2:	f001 fea5 	bl	8040 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    62f6:	4c29      	ldr	r4, [pc, #164]	; (639c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    62f8:	4823      	ldr	r0, [pc, #140]	; (6388 <k_sched_unlock+0xc8>)
    62fa:	f000 fe0b 	bl	6f14 <z_spin_lock_set_owner>
    62fe:	68a2      	ldr	r2, [r4, #8]
    6300:	7bd2      	ldrb	r2, [r2, #15]
    6302:	b972      	cbnz	r2, 6322 <k_sched_unlock+0x62>
    6304:	4926      	ldr	r1, [pc, #152]	; (63a0 <k_sched_unlock+0xe0>)
    6306:	4a27      	ldr	r2, [pc, #156]	; (63a4 <k_sched_unlock+0xe4>)
    6308:	4822      	ldr	r0, [pc, #136]	; (6394 <k_sched_unlock+0xd4>)
    630a:	f240 3385 	movw	r3, #901	; 0x385
    630e:	f001 ff6e 	bl	81ee <printk>
    6312:	4825      	ldr	r0, [pc, #148]	; (63a8 <k_sched_unlock+0xe8>)
    6314:	f001 ff6b 	bl	81ee <printk>
    6318:	4822      	ldr	r0, [pc, #136]	; (63a4 <k_sched_unlock+0xe4>)
    631a:	f240 3185 	movw	r1, #901	; 0x385
    631e:	f001 fe8f 	bl	8040 <assert_post_action>
    6322:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6326:	b173      	cbz	r3, 6346 <k_sched_unlock+0x86>
    6328:	4920      	ldr	r1, [pc, #128]	; (63ac <k_sched_unlock+0xec>)
    632a:	4a1e      	ldr	r2, [pc, #120]	; (63a4 <k_sched_unlock+0xe4>)
    632c:	4819      	ldr	r0, [pc, #100]	; (6394 <k_sched_unlock+0xd4>)
    632e:	f240 3386 	movw	r3, #902	; 0x386
    6332:	f001 ff5c 	bl	81ee <printk>
    6336:	481c      	ldr	r0, [pc, #112]	; (63a8 <k_sched_unlock+0xe8>)
    6338:	f001 ff59 	bl	81ee <printk>
    633c:	4819      	ldr	r0, [pc, #100]	; (63a4 <k_sched_unlock+0xe4>)
    633e:	f240 3186 	movw	r1, #902	; 0x386
    6342:	f001 fe7d 	bl	8040 <assert_post_action>
		++_current->base.sched_locked;
    6346:	68a2      	ldr	r2, [r4, #8]
    6348:	7bd3      	ldrb	r3, [r2, #15]
    634a:	3301      	adds	r3, #1
		update_cache(0);
    634c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    634e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6350:	f7ff fb76 	bl	5a40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6354:	480c      	ldr	r0, [pc, #48]	; (6388 <k_sched_unlock+0xc8>)
    6356:	f000 fdcd 	bl	6ef4 <z_spin_unlock_valid>
    635a:	b968      	cbnz	r0, 6378 <k_sched_unlock+0xb8>
    635c:	4a0b      	ldr	r2, [pc, #44]	; (638c <k_sched_unlock+0xcc>)
    635e:	4914      	ldr	r1, [pc, #80]	; (63b0 <k_sched_unlock+0xf0>)
    6360:	480c      	ldr	r0, [pc, #48]	; (6394 <k_sched_unlock+0xd4>)
    6362:	23ac      	movs	r3, #172	; 0xac
    6364:	f001 ff43 	bl	81ee <printk>
    6368:	4907      	ldr	r1, [pc, #28]	; (6388 <k_sched_unlock+0xc8>)
    636a:	4812      	ldr	r0, [pc, #72]	; (63b4 <k_sched_unlock+0xf4>)
    636c:	f001 ff3f 	bl	81ee <printk>
    6370:	4806      	ldr	r0, [pc, #24]	; (638c <k_sched_unlock+0xcc>)
    6372:	21ac      	movs	r1, #172	; 0xac
    6374:	f001 fe64 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6378:	f385 8811 	msr	BASEPRI, r5
    637c:	f3bf 8f6f 	isb	sy
}
    6380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    6384:	f002 ba9a 	b.w	88bc <z_reschedule_unlocked>
    6388:	20000c20 	.word	0x20000c20
    638c:	0000922a 	.word	0x0000922a
    6390:	0000927c 	.word	0x0000927c
    6394:	00009117 	.word	0x00009117
    6398:	00009291 	.word	0x00009291
    639c:	20000bec 	.word	0x20000bec
    63a0:	00009e1b 	.word	0x00009e1b
    63a4:	00009d9a 	.word	0x00009d9a
    63a8:	00009c36 	.word	0x00009c36
    63ac:	00009bbd 	.word	0x00009bbd
    63b0:	00009250 	.word	0x00009250
    63b4:	00009267 	.word	0x00009267

000063b8 <z_unpend1_no_timeout>:
{
    63b8:	b538      	push	{r3, r4, r5, lr}
    63ba:	4604      	mov	r4, r0
	__asm__ volatile(
    63bc:	f04f 0320 	mov.w	r3, #32
    63c0:	f3ef 8511 	mrs	r5, BASEPRI
    63c4:	f383 8812 	msr	BASEPRI_MAX, r3
    63c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63cc:	4819      	ldr	r0, [pc, #100]	; (6434 <z_unpend1_no_timeout+0x7c>)
    63ce:	f000 fd83 	bl	6ed8 <z_spin_lock_valid>
    63d2:	b968      	cbnz	r0, 63f0 <z_unpend1_no_timeout+0x38>
    63d4:	4a18      	ldr	r2, [pc, #96]	; (6438 <z_unpend1_no_timeout+0x80>)
    63d6:	4919      	ldr	r1, [pc, #100]	; (643c <z_unpend1_no_timeout+0x84>)
    63d8:	4819      	ldr	r0, [pc, #100]	; (6440 <z_unpend1_no_timeout+0x88>)
    63da:	2381      	movs	r3, #129	; 0x81
    63dc:	f001 ff07 	bl	81ee <printk>
    63e0:	4914      	ldr	r1, [pc, #80]	; (6434 <z_unpend1_no_timeout+0x7c>)
    63e2:	4818      	ldr	r0, [pc, #96]	; (6444 <z_unpend1_no_timeout+0x8c>)
    63e4:	f001 ff03 	bl	81ee <printk>
    63e8:	4813      	ldr	r0, [pc, #76]	; (6438 <z_unpend1_no_timeout+0x80>)
    63ea:	2181      	movs	r1, #129	; 0x81
    63ec:	f001 fe28 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    63f0:	4810      	ldr	r0, [pc, #64]	; (6434 <z_unpend1_no_timeout+0x7c>)
    63f2:	f000 fd8f 	bl	6f14 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    63f6:	4620      	mov	r0, r4
    63f8:	f002 fa6a 	bl	88d0 <z_priq_dumb_best>
		if (thread != NULL) {
    63fc:	4604      	mov	r4, r0
    63fe:	b108      	cbz	r0, 6404 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    6400:	f7ff fab0 	bl	5964 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6404:	480b      	ldr	r0, [pc, #44]	; (6434 <z_unpend1_no_timeout+0x7c>)
    6406:	f000 fd75 	bl	6ef4 <z_spin_unlock_valid>
    640a:	b968      	cbnz	r0, 6428 <z_unpend1_no_timeout+0x70>
    640c:	4a0a      	ldr	r2, [pc, #40]	; (6438 <z_unpend1_no_timeout+0x80>)
    640e:	490e      	ldr	r1, [pc, #56]	; (6448 <z_unpend1_no_timeout+0x90>)
    6410:	480b      	ldr	r0, [pc, #44]	; (6440 <z_unpend1_no_timeout+0x88>)
    6412:	23ac      	movs	r3, #172	; 0xac
    6414:	f001 feeb 	bl	81ee <printk>
    6418:	4906      	ldr	r1, [pc, #24]	; (6434 <z_unpend1_no_timeout+0x7c>)
    641a:	480c      	ldr	r0, [pc, #48]	; (644c <z_unpend1_no_timeout+0x94>)
    641c:	f001 fee7 	bl	81ee <printk>
    6420:	4805      	ldr	r0, [pc, #20]	; (6438 <z_unpend1_no_timeout+0x80>)
    6422:	21ac      	movs	r1, #172	; 0xac
    6424:	f001 fe0c 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6428:	f385 8811 	msr	BASEPRI, r5
    642c:	f3bf 8f6f 	isb	sy
}
    6430:	4620      	mov	r0, r4
    6432:	bd38      	pop	{r3, r4, r5, pc}
    6434:	20000c20 	.word	0x20000c20
    6438:	0000922a 	.word	0x0000922a
    643c:	0000927c 	.word	0x0000927c
    6440:	00009117 	.word	0x00009117
    6444:	00009291 	.word	0x00009291
    6448:	00009250 	.word	0x00009250
    644c:	00009267 	.word	0x00009267

00006450 <z_unpend_first_thread>:
{
    6450:	b538      	push	{r3, r4, r5, lr}
    6452:	4604      	mov	r4, r0
	__asm__ volatile(
    6454:	f04f 0320 	mov.w	r3, #32
    6458:	f3ef 8511 	mrs	r5, BASEPRI
    645c:	f383 8812 	msr	BASEPRI_MAX, r3
    6460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6464:	481b      	ldr	r0, [pc, #108]	; (64d4 <z_unpend_first_thread+0x84>)
    6466:	f000 fd37 	bl	6ed8 <z_spin_lock_valid>
    646a:	b968      	cbnz	r0, 6488 <z_unpend_first_thread+0x38>
    646c:	4a1a      	ldr	r2, [pc, #104]	; (64d8 <z_unpend_first_thread+0x88>)
    646e:	491b      	ldr	r1, [pc, #108]	; (64dc <z_unpend_first_thread+0x8c>)
    6470:	481b      	ldr	r0, [pc, #108]	; (64e0 <z_unpend_first_thread+0x90>)
    6472:	2381      	movs	r3, #129	; 0x81
    6474:	f001 febb 	bl	81ee <printk>
    6478:	4916      	ldr	r1, [pc, #88]	; (64d4 <z_unpend_first_thread+0x84>)
    647a:	481a      	ldr	r0, [pc, #104]	; (64e4 <z_unpend_first_thread+0x94>)
    647c:	f001 feb7 	bl	81ee <printk>
    6480:	4815      	ldr	r0, [pc, #84]	; (64d8 <z_unpend_first_thread+0x88>)
    6482:	2181      	movs	r1, #129	; 0x81
    6484:	f001 fddc 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    6488:	4812      	ldr	r0, [pc, #72]	; (64d4 <z_unpend_first_thread+0x84>)
    648a:	f000 fd43 	bl	6f14 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    648e:	4620      	mov	r0, r4
    6490:	f002 fa1e 	bl	88d0 <z_priq_dumb_best>
		if (thread != NULL) {
    6494:	4604      	mov	r4, r0
    6496:	b128      	cbz	r0, 64a4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    6498:	f7ff fa64 	bl	5964 <unpend_thread_no_timeout>
    649c:	f104 0018 	add.w	r0, r4, #24
    64a0:	f000 fe64 	bl	716c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64a4:	480b      	ldr	r0, [pc, #44]	; (64d4 <z_unpend_first_thread+0x84>)
    64a6:	f000 fd25 	bl	6ef4 <z_spin_unlock_valid>
    64aa:	b968      	cbnz	r0, 64c8 <z_unpend_first_thread+0x78>
    64ac:	4a0a      	ldr	r2, [pc, #40]	; (64d8 <z_unpend_first_thread+0x88>)
    64ae:	490e      	ldr	r1, [pc, #56]	; (64e8 <z_unpend_first_thread+0x98>)
    64b0:	480b      	ldr	r0, [pc, #44]	; (64e0 <z_unpend_first_thread+0x90>)
    64b2:	23ac      	movs	r3, #172	; 0xac
    64b4:	f001 fe9b 	bl	81ee <printk>
    64b8:	4906      	ldr	r1, [pc, #24]	; (64d4 <z_unpend_first_thread+0x84>)
    64ba:	480c      	ldr	r0, [pc, #48]	; (64ec <z_unpend_first_thread+0x9c>)
    64bc:	f001 fe97 	bl	81ee <printk>
    64c0:	4805      	ldr	r0, [pc, #20]	; (64d8 <z_unpend_first_thread+0x88>)
    64c2:	21ac      	movs	r1, #172	; 0xac
    64c4:	f001 fdbc 	bl	8040 <assert_post_action>
	__asm__ volatile(
    64c8:	f385 8811 	msr	BASEPRI, r5
    64cc:	f3bf 8f6f 	isb	sy
}
    64d0:	4620      	mov	r0, r4
    64d2:	bd38      	pop	{r3, r4, r5, pc}
    64d4:	20000c20 	.word	0x20000c20
    64d8:	0000922a 	.word	0x0000922a
    64dc:	0000927c 	.word	0x0000927c
    64e0:	00009117 	.word	0x00009117
    64e4:	00009291 	.word	0x00009291
    64e8:	00009250 	.word	0x00009250
    64ec:	00009267 	.word	0x00009267

000064f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    64f0:	4b04      	ldr	r3, [pc, #16]	; (6504 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    64f2:	2100      	movs	r1, #0
    64f4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    64f8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    64fc:	4608      	mov	r0, r1
    64fe:	f7ff b8a9 	b.w	5654 <k_sched_time_slice_set>
    6502:	bf00      	nop
    6504:	20000bec 	.word	0x20000bec

00006508 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    650a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    650e:	b173      	cbz	r3, 652e <z_impl_k_yield+0x26>
    6510:	4941      	ldr	r1, [pc, #260]	; (6618 <z_impl_k_yield+0x110>)
    6512:	4a42      	ldr	r2, [pc, #264]	; (661c <z_impl_k_yield+0x114>)
    6514:	4842      	ldr	r0, [pc, #264]	; (6620 <z_impl_k_yield+0x118>)
    6516:	f240 43dc 	movw	r3, #1244	; 0x4dc
    651a:	f001 fe68 	bl	81ee <printk>
    651e:	4841      	ldr	r0, [pc, #260]	; (6624 <z_impl_k_yield+0x11c>)
    6520:	f001 fe65 	bl	81ee <printk>
    6524:	483d      	ldr	r0, [pc, #244]	; (661c <z_impl_k_yield+0x114>)
    6526:	f240 41dc 	movw	r1, #1244	; 0x4dc
    652a:	f001 fd89 	bl	8040 <assert_post_action>
	__asm__ volatile(
    652e:	f04f 0320 	mov.w	r3, #32
    6532:	f3ef 8611 	mrs	r6, BASEPRI
    6536:	f383 8812 	msr	BASEPRI_MAX, r3
    653a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    653e:	483a      	ldr	r0, [pc, #232]	; (6628 <z_impl_k_yield+0x120>)
    6540:	f000 fcca 	bl	6ed8 <z_spin_lock_valid>
    6544:	b968      	cbnz	r0, 6562 <z_impl_k_yield+0x5a>
    6546:	4a39      	ldr	r2, [pc, #228]	; (662c <z_impl_k_yield+0x124>)
    6548:	4939      	ldr	r1, [pc, #228]	; (6630 <z_impl_k_yield+0x128>)
    654a:	4835      	ldr	r0, [pc, #212]	; (6620 <z_impl_k_yield+0x118>)
    654c:	2381      	movs	r3, #129	; 0x81
    654e:	f001 fe4e 	bl	81ee <printk>
    6552:	4935      	ldr	r1, [pc, #212]	; (6628 <z_impl_k_yield+0x120>)
    6554:	4837      	ldr	r0, [pc, #220]	; (6634 <z_impl_k_yield+0x12c>)
    6556:	f001 fe4a 	bl	81ee <printk>
    655a:	4834      	ldr	r0, [pc, #208]	; (662c <z_impl_k_yield+0x124>)
    655c:	2181      	movs	r1, #129	; 0x81
    655e:	f001 fd6f 	bl	8040 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6562:	4d35      	ldr	r5, [pc, #212]	; (6638 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6564:	4830      	ldr	r0, [pc, #192]	; (6628 <z_impl_k_yield+0x120>)
    6566:	f000 fcd5 	bl	6f14 <z_spin_lock_set_owner>
    656a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    656c:	7b4b      	ldrb	r3, [r1, #13]
    656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6572:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6574:	f105 0020 	add.w	r0, r5, #32
    6578:	f7ff f9d2 	bl	5920 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    657c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    657e:	7b63      	ldrb	r3, [r4, #13]
    6580:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6584:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6586:	4b2d      	ldr	r3, [pc, #180]	; (663c <z_impl_k_yield+0x134>)
    6588:	429c      	cmp	r4, r3
    658a:	d109      	bne.n	65a0 <z_impl_k_yield+0x98>
    658c:	492c      	ldr	r1, [pc, #176]	; (6640 <z_impl_k_yield+0x138>)
    658e:	4824      	ldr	r0, [pc, #144]	; (6620 <z_impl_k_yield+0x118>)
    6590:	4a22      	ldr	r2, [pc, #136]	; (661c <z_impl_k_yield+0x114>)
    6592:	23ba      	movs	r3, #186	; 0xba
    6594:	f001 fe2b 	bl	81ee <printk>
    6598:	4820      	ldr	r0, [pc, #128]	; (661c <z_impl_k_yield+0x114>)
    659a:	21ba      	movs	r1, #186	; 0xba
    659c:	f001 fd50 	bl	8040 <assert_post_action>
	return list->head == list;
    65a0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65a2:	4828      	ldr	r0, [pc, #160]	; (6644 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    65a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65a6:	4283      	cmp	r3, r0
    65a8:	bf08      	it	eq
    65aa:	2300      	moveq	r3, #0
    65ac:	2b00      	cmp	r3, #0
    65ae:	bf38      	it	cc
    65b0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    65b2:	b35b      	cbz	r3, 660c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    65b4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    65b8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    65bc:	4297      	cmp	r7, r2
    65be:	d021      	beq.n	6604 <z_impl_k_yield+0xfc>
		return b2 - b1;
    65c0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    65c2:	2a00      	cmp	r2, #0
    65c4:	dd1e      	ble.n	6604 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    65c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    65c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    65cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    65ce:	605c      	str	r4, [r3, #4]
	update_cache(1);
    65d0:	2001      	movs	r0, #1
    65d2:	f7ff fa35 	bl	5a40 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65d6:	4814      	ldr	r0, [pc, #80]	; (6628 <z_impl_k_yield+0x120>)
    65d8:	f000 fc8c 	bl	6ef4 <z_spin_unlock_valid>
    65dc:	b968      	cbnz	r0, 65fa <z_impl_k_yield+0xf2>
    65de:	4a13      	ldr	r2, [pc, #76]	; (662c <z_impl_k_yield+0x124>)
    65e0:	4919      	ldr	r1, [pc, #100]	; (6648 <z_impl_k_yield+0x140>)
    65e2:	480f      	ldr	r0, [pc, #60]	; (6620 <z_impl_k_yield+0x118>)
    65e4:	23c3      	movs	r3, #195	; 0xc3
    65e6:	f001 fe02 	bl	81ee <printk>
    65ea:	490f      	ldr	r1, [pc, #60]	; (6628 <z_impl_k_yield+0x120>)
    65ec:	4817      	ldr	r0, [pc, #92]	; (664c <z_impl_k_yield+0x144>)
    65ee:	f001 fdfe 	bl	81ee <printk>
    65f2:	480e      	ldr	r0, [pc, #56]	; (662c <z_impl_k_yield+0x124>)
    65f4:	21c3      	movs	r1, #195	; 0xc3
    65f6:	f001 fd23 	bl	8040 <assert_post_action>
    65fa:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    65fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6600:	f7fb baca 	b.w	1b98 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6604:	428b      	cmp	r3, r1
    6606:	d001      	beq.n	660c <z_impl_k_yield+0x104>
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	e7d2      	b.n	65b2 <z_impl_k_yield+0xaa>
	node->prev = tail;
    660c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6610:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6612:	626c      	str	r4, [r5, #36]	; 0x24
}
    6614:	e7dc      	b.n	65d0 <z_impl_k_yield+0xc8>
    6616:	bf00      	nop
    6618:	00009bbd 	.word	0x00009bbd
    661c:	00009d9a 	.word	0x00009d9a
    6620:	00009117 	.word	0x00009117
    6624:	00009c36 	.word	0x00009c36
    6628:	20000c20 	.word	0x20000c20
    662c:	0000922a 	.word	0x0000922a
    6630:	0000927c 	.word	0x0000927c
    6634:	00009291 	.word	0x00009291
    6638:	20000bec 	.word	0x20000bec
    663c:	200003f8 	.word	0x200003f8
    6640:	00009dbc 	.word	0x00009dbc
    6644:	20000c0c 	.word	0x20000c0c
    6648:	00009250 	.word	0x00009250
    664c:	00009267 	.word	0x00009267

00006650 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6654:	4604      	mov	r4, r0
    6656:	460d      	mov	r5, r1
    6658:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    665c:	b173      	cbz	r3, 667c <z_tick_sleep+0x2c>
    665e:	4945      	ldr	r1, [pc, #276]	; (6774 <z_tick_sleep+0x124>)
    6660:	4a45      	ldr	r2, [pc, #276]	; (6778 <z_tick_sleep+0x128>)
    6662:	4846      	ldr	r0, [pc, #280]	; (677c <z_tick_sleep+0x12c>)
    6664:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    6668:	f001 fdc1 	bl	81ee <printk>
    666c:	4844      	ldr	r0, [pc, #272]	; (6780 <z_tick_sleep+0x130>)
    666e:	f001 fdbe 	bl	81ee <printk>
    6672:	4841      	ldr	r0, [pc, #260]	; (6778 <z_tick_sleep+0x128>)
    6674:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    6678:	f001 fce2 	bl	8040 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    667c:	ea54 0305 	orrs.w	r3, r4, r5
    6680:	d104      	bne.n	668c <z_tick_sleep+0x3c>
	z_impl_k_yield();
    6682:	f7ff ff41 	bl	6508 <z_impl_k_yield>
		k_yield();
		return 0;
    6686:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    6688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    668c:	f06f 0301 	mvn.w	r3, #1
    6690:	1b1e      	subs	r6, r3, r4
    6692:	f04f 33ff 	mov.w	r3, #4294967295
    6696:	eb63 0705 	sbc.w	r7, r3, r5
    669a:	2e01      	cmp	r6, #1
    669c:	f177 0300 	sbcs.w	r3, r7, #0
    66a0:	da64      	bge.n	676c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    66a2:	f002 f93a 	bl	891a <sys_clock_tick_get_32>
    66a6:	1906      	adds	r6, r0, r4
    66a8:	f04f 0320 	mov.w	r3, #32
    66ac:	f3ef 8811 	mrs	r8, BASEPRI
    66b0:	f383 8812 	msr	BASEPRI_MAX, r3
    66b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66b8:	4832      	ldr	r0, [pc, #200]	; (6784 <z_tick_sleep+0x134>)
    66ba:	f000 fc0d 	bl	6ed8 <z_spin_lock_valid>
    66be:	b968      	cbnz	r0, 66dc <z_tick_sleep+0x8c>
    66c0:	4a31      	ldr	r2, [pc, #196]	; (6788 <z_tick_sleep+0x138>)
    66c2:	4932      	ldr	r1, [pc, #200]	; (678c <z_tick_sleep+0x13c>)
    66c4:	482d      	ldr	r0, [pc, #180]	; (677c <z_tick_sleep+0x12c>)
    66c6:	2381      	movs	r3, #129	; 0x81
    66c8:	f001 fd91 	bl	81ee <printk>
    66cc:	492d      	ldr	r1, [pc, #180]	; (6784 <z_tick_sleep+0x134>)
    66ce:	4830      	ldr	r0, [pc, #192]	; (6790 <z_tick_sleep+0x140>)
    66d0:	f001 fd8d 	bl	81ee <printk>
    66d4:	482c      	ldr	r0, [pc, #176]	; (6788 <z_tick_sleep+0x138>)
    66d6:	2181      	movs	r1, #129	; 0x81
    66d8:	f001 fcb2 	bl	8040 <assert_post_action>
	pending_current = _current;
    66dc:	4f2d      	ldr	r7, [pc, #180]	; (6794 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    66de:	4829      	ldr	r0, [pc, #164]	; (6784 <z_tick_sleep+0x134>)
    66e0:	f000 fc18 	bl	6f14 <z_spin_lock_set_owner>
    66e4:	4b2c      	ldr	r3, [pc, #176]	; (6798 <z_tick_sleep+0x148>)
    66e6:	68b8      	ldr	r0, [r7, #8]
    66e8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    66ea:	f7ff fbf7 	bl	5edc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    66ee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    66f0:	492a      	ldr	r1, [pc, #168]	; (679c <z_tick_sleep+0x14c>)
    66f2:	4622      	mov	r2, r4
    66f4:	462b      	mov	r3, r5
    66f6:	3018      	adds	r0, #24
    66f8:	f000 fc64 	bl	6fc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    66fc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66fe:	4821      	ldr	r0, [pc, #132]	; (6784 <z_tick_sleep+0x134>)
    6700:	7b53      	ldrb	r3, [r2, #13]
    6702:	f043 0310 	orr.w	r3, r3, #16
    6706:	7353      	strb	r3, [r2, #13]
    6708:	f000 fbf4 	bl	6ef4 <z_spin_unlock_valid>
    670c:	b968      	cbnz	r0, 672a <z_tick_sleep+0xda>
    670e:	4a1e      	ldr	r2, [pc, #120]	; (6788 <z_tick_sleep+0x138>)
    6710:	4923      	ldr	r1, [pc, #140]	; (67a0 <z_tick_sleep+0x150>)
    6712:	481a      	ldr	r0, [pc, #104]	; (677c <z_tick_sleep+0x12c>)
    6714:	23c3      	movs	r3, #195	; 0xc3
    6716:	f001 fd6a 	bl	81ee <printk>
    671a:	491a      	ldr	r1, [pc, #104]	; (6784 <z_tick_sleep+0x134>)
    671c:	4821      	ldr	r0, [pc, #132]	; (67a4 <z_tick_sleep+0x154>)
    671e:	f001 fd66 	bl	81ee <printk>
    6722:	4819      	ldr	r0, [pc, #100]	; (6788 <z_tick_sleep+0x138>)
    6724:	21c3      	movs	r1, #195	; 0xc3
    6726:	f001 fc8b 	bl	8040 <assert_post_action>
    672a:	4640      	mov	r0, r8
    672c:	f7fb fa34 	bl	1b98 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6730:	68bb      	ldr	r3, [r7, #8]
    6732:	7b5b      	ldrb	r3, [r3, #13]
    6734:	06db      	lsls	r3, r3, #27
    6736:	d50e      	bpl.n	6756 <z_tick_sleep+0x106>
    6738:	491b      	ldr	r1, [pc, #108]	; (67a8 <z_tick_sleep+0x158>)
    673a:	4a0f      	ldr	r2, [pc, #60]	; (6778 <z_tick_sleep+0x128>)
    673c:	480f      	ldr	r0, [pc, #60]	; (677c <z_tick_sleep+0x12c>)
    673e:	f240 5319 	movw	r3, #1305	; 0x519
    6742:	f001 fd54 	bl	81ee <printk>
    6746:	480e      	ldr	r0, [pc, #56]	; (6780 <z_tick_sleep+0x130>)
    6748:	f001 fd51 	bl	81ee <printk>
    674c:	480a      	ldr	r0, [pc, #40]	; (6778 <z_tick_sleep+0x128>)
    674e:	f240 5119 	movw	r1, #1305	; 0x519
    6752:	f001 fc75 	bl	8040 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6756:	f002 f8e0 	bl	891a <sys_clock_tick_get_32>
    675a:	1a30      	subs	r0, r6, r0
    675c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    6760:	2801      	cmp	r0, #1
    6762:	f171 0300 	sbcs.w	r3, r1, #0
    6766:	bfb8      	it	lt
    6768:	2000      	movlt	r0, #0
    676a:	e78d      	b.n	6688 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    676c:	f06f 0601 	mvn.w	r6, #1
    6770:	1b36      	subs	r6, r6, r4
    6772:	e799      	b.n	66a8 <z_tick_sleep+0x58>
    6774:	00009bbd 	.word	0x00009bbd
    6778:	00009d9a 	.word	0x00009d9a
    677c:	00009117 	.word	0x00009117
    6780:	00009c36 	.word	0x00009c36
    6784:	20000c20 	.word	0x20000c20
    6788:	0000922a 	.word	0x0000922a
    678c:	0000927c 	.word	0x0000927c
    6790:	00009291 	.word	0x00009291
    6794:	20000bec 	.word	0x20000bec
    6798:	20000c1c 	.word	0x20000c1c
    679c:	00005e29 	.word	0x00005e29
    67a0:	00009250 	.word	0x00009250
    67a4:	00009267 	.word	0x00009267
    67a8:	00009e4c 	.word	0x00009e4c

000067ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    67ac:	b538      	push	{r3, r4, r5, lr}
    67ae:	4604      	mov	r4, r0
    67b0:	460d      	mov	r5, r1
    67b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    67b6:	b173      	cbz	r3, 67d6 <z_impl_k_sleep+0x2a>
    67b8:	4913      	ldr	r1, [pc, #76]	; (6808 <z_impl_k_sleep+0x5c>)
    67ba:	4a14      	ldr	r2, [pc, #80]	; (680c <z_impl_k_sleep+0x60>)
    67bc:	4814      	ldr	r0, [pc, #80]	; (6810 <z_impl_k_sleep+0x64>)
    67be:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    67c2:	f001 fd14 	bl	81ee <printk>
    67c6:	4813      	ldr	r0, [pc, #76]	; (6814 <z_impl_k_sleep+0x68>)
    67c8:	f001 fd11 	bl	81ee <printk>
    67cc:	480f      	ldr	r0, [pc, #60]	; (680c <z_impl_k_sleep+0x60>)
    67ce:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    67d2:	f001 fc35 	bl	8040 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    67d6:	1c6b      	adds	r3, r5, #1
    67d8:	bf08      	it	eq
    67da:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    67de:	d106      	bne.n	67ee <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    67e0:	4b0d      	ldr	r3, [pc, #52]	; (6818 <z_impl_k_sleep+0x6c>)
    67e2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    67e4:	f7ff fd02 	bl	61ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    67e8:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    67ec:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    67ee:	4620      	mov	r0, r4
    67f0:	4629      	mov	r1, r5
    67f2:	f7ff ff2d 	bl	6650 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    67f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    67fa:	fb80 3403 	smull	r3, r4, r0, r3
    67fe:	0bd8      	lsrs	r0, r3, #15
    6800:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    6804:	e7f2      	b.n	67ec <z_impl_k_sleep+0x40>
    6806:	bf00      	nop
    6808:	00009bbd 	.word	0x00009bbd
    680c:	00009d9a 	.word	0x00009d9a
    6810:	00009117 	.word	0x00009117
    6814:	00009c36 	.word	0x00009c36
    6818:	20000bec 	.word	0x20000bec

0000681c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    681c:	4b01      	ldr	r3, [pc, #4]	; (6824 <z_impl_z_current_get+0x8>)
    681e:	6898      	ldr	r0, [r3, #8]
    6820:	4770      	bx	lr
    6822:	bf00      	nop
    6824:	20000bec 	.word	0x20000bec

00006828 <z_impl_k_is_preempt_thread>:
    6828:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    682c:	b93b      	cbnz	r3, 683e <z_impl_k_is_preempt_thread+0x16>
    682e:	4b05      	ldr	r3, [pc, #20]	; (6844 <z_impl_k_is_preempt_thread+0x1c>)
    6830:	689b      	ldr	r3, [r3, #8]
    6832:	89d8      	ldrh	r0, [r3, #14]
    6834:	287f      	cmp	r0, #127	; 0x7f
    6836:	bf8c      	ite	hi
    6838:	2000      	movhi	r0, #0
    683a:	2001      	movls	r0, #1
    683c:	4770      	bx	lr
    683e:	2000      	movs	r0, #0
}
    6840:	4770      	bx	lr
    6842:	bf00      	nop
    6844:	20000bec 	.word	0x20000bec

00006848 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    684c:	4604      	mov	r4, r0
    684e:	f04f 0320 	mov.w	r3, #32
    6852:	f3ef 8611 	mrs	r6, BASEPRI
    6856:	f383 8812 	msr	BASEPRI_MAX, r3
    685a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    685e:	4848      	ldr	r0, [pc, #288]	; (6980 <z_thread_abort+0x138>)
    6860:	f000 fb3a 	bl	6ed8 <z_spin_lock_valid>
    6864:	b968      	cbnz	r0, 6882 <z_thread_abort+0x3a>
    6866:	4a47      	ldr	r2, [pc, #284]	; (6984 <z_thread_abort+0x13c>)
    6868:	4947      	ldr	r1, [pc, #284]	; (6988 <z_thread_abort+0x140>)
    686a:	4848      	ldr	r0, [pc, #288]	; (698c <z_thread_abort+0x144>)
    686c:	2381      	movs	r3, #129	; 0x81
    686e:	f001 fcbe 	bl	81ee <printk>
    6872:	4943      	ldr	r1, [pc, #268]	; (6980 <z_thread_abort+0x138>)
    6874:	4846      	ldr	r0, [pc, #280]	; (6990 <z_thread_abort+0x148>)
    6876:	f001 fcba 	bl	81ee <printk>
    687a:	4842      	ldr	r0, [pc, #264]	; (6984 <z_thread_abort+0x13c>)
    687c:	2181      	movs	r1, #129	; 0x81
    687e:	f001 fbdf 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    6882:	483f      	ldr	r0, [pc, #252]	; (6980 <z_thread_abort+0x138>)
    6884:	f000 fb46 	bl	6f14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6888:	7b63      	ldrb	r3, [r4, #13]
    688a:	071a      	lsls	r2, r3, #28
    688c:	d517      	bpl.n	68be <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    688e:	483c      	ldr	r0, [pc, #240]	; (6980 <z_thread_abort+0x138>)
    6890:	f000 fb30 	bl	6ef4 <z_spin_unlock_valid>
    6894:	b968      	cbnz	r0, 68b2 <z_thread_abort+0x6a>
    6896:	4a3b      	ldr	r2, [pc, #236]	; (6984 <z_thread_abort+0x13c>)
    6898:	493e      	ldr	r1, [pc, #248]	; (6994 <z_thread_abort+0x14c>)
    689a:	483c      	ldr	r0, [pc, #240]	; (698c <z_thread_abort+0x144>)
    689c:	23ac      	movs	r3, #172	; 0xac
    689e:	f001 fca6 	bl	81ee <printk>
    68a2:	4937      	ldr	r1, [pc, #220]	; (6980 <z_thread_abort+0x138>)
    68a4:	483c      	ldr	r0, [pc, #240]	; (6998 <z_thread_abort+0x150>)
    68a6:	f001 fca2 	bl	81ee <printk>
    68aa:	4836      	ldr	r0, [pc, #216]	; (6984 <z_thread_abort+0x13c>)
    68ac:	21ac      	movs	r1, #172	; 0xac
    68ae:	f001 fbc7 	bl	8040 <assert_post_action>
	__asm__ volatile(
    68b2:	f386 8811 	msr	BASEPRI, r6
    68b6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    68ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    68be:	f023 0220 	bic.w	r2, r3, #32
    68c2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    68c6:	09d2      	lsrs	r2, r2, #7
    68c8:	d142      	bne.n	6950 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    68ca:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    68cc:	68a3      	ldr	r3, [r4, #8]
    68ce:	b113      	cbz	r3, 68d6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    68d0:	4620      	mov	r0, r4
    68d2:	f7ff f847 	bl	5964 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    68d6:	f104 0018 	add.w	r0, r4, #24
    68da:	f000 fc47 	bl	716c <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    68de:	f104 0758 	add.w	r7, r4, #88	; 0x58
    68e2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    68e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68e8:	42bd      	cmp	r5, r7
    68ea:	d001      	beq.n	68f0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    68ec:	2d00      	cmp	r5, #0
    68ee:	d139      	bne.n	6964 <z_thread_abort+0x11c>
		update_cache(1);
    68f0:	2001      	movs	r0, #1
    68f2:	f7ff f8a5 	bl	5a40 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    68f6:	4b29      	ldr	r3, [pc, #164]	; (699c <z_thread_abort+0x154>)
    68f8:	689b      	ldr	r3, [r3, #8]
    68fa:	42a3      	cmp	r3, r4
    68fc:	d1c7      	bne.n	688e <z_thread_abort+0x46>
    68fe:	f3ef 8305 	mrs	r3, IPSR
    6902:	2b00      	cmp	r3, #0
    6904:	d1c3      	bne.n	688e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6906:	481e      	ldr	r0, [pc, #120]	; (6980 <z_thread_abort+0x138>)
    6908:	f000 faf4 	bl	6ef4 <z_spin_unlock_valid>
    690c:	b968      	cbnz	r0, 692a <z_thread_abort+0xe2>
    690e:	4a1d      	ldr	r2, [pc, #116]	; (6984 <z_thread_abort+0x13c>)
    6910:	4920      	ldr	r1, [pc, #128]	; (6994 <z_thread_abort+0x14c>)
    6912:	481e      	ldr	r0, [pc, #120]	; (698c <z_thread_abort+0x144>)
    6914:	23c3      	movs	r3, #195	; 0xc3
    6916:	f001 fc6a 	bl	81ee <printk>
    691a:	4919      	ldr	r1, [pc, #100]	; (6980 <z_thread_abort+0x138>)
    691c:	481e      	ldr	r0, [pc, #120]	; (6998 <z_thread_abort+0x150>)
    691e:	f001 fc66 	bl	81ee <printk>
    6922:	4818      	ldr	r0, [pc, #96]	; (6984 <z_thread_abort+0x13c>)
    6924:	21c3      	movs	r1, #195	; 0xc3
    6926:	f001 fb8b 	bl	8040 <assert_post_action>
    692a:	4630      	mov	r0, r6
    692c:	f7fb f934 	bl	1b98 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6930:	4a1b      	ldr	r2, [pc, #108]	; (69a0 <z_thread_abort+0x158>)
    6932:	491c      	ldr	r1, [pc, #112]	; (69a4 <z_thread_abort+0x15c>)
    6934:	4815      	ldr	r0, [pc, #84]	; (698c <z_thread_abort+0x144>)
    6936:	f240 634b 	movw	r3, #1611	; 0x64b
    693a:	f001 fc58 	bl	81ee <printk>
    693e:	481a      	ldr	r0, [pc, #104]	; (69a8 <z_thread_abort+0x160>)
    6940:	f001 fc55 	bl	81ee <printk>
    6944:	4816      	ldr	r0, [pc, #88]	; (69a0 <z_thread_abort+0x158>)
    6946:	f240 614b 	movw	r1, #1611	; 0x64b
    694a:	f001 fb79 	bl	8040 <assert_post_action>
    694e:	e79e      	b.n	688e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6950:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6954:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6958:	4814      	ldr	r0, [pc, #80]	; (69ac <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    695a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    695c:	4621      	mov	r1, r4
    695e:	f7fe ffdf 	bl	5920 <z_priq_dumb_remove>
}
    6962:	e7b3      	b.n	68cc <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6964:	4628      	mov	r0, r5
    6966:	f7fe fffd 	bl	5964 <unpend_thread_no_timeout>
    696a:	f105 0018 	add.w	r0, r5, #24
    696e:	f000 fbfd 	bl	716c <z_abort_timeout>
    6972:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    6976:	4628      	mov	r0, r5
    6978:	f7ff f968 	bl	5c4c <ready_thread>
    697c:	e7b3      	b.n	68e6 <z_thread_abort+0x9e>
    697e:	bf00      	nop
    6980:	20000c20 	.word	0x20000c20
    6984:	0000922a 	.word	0x0000922a
    6988:	0000927c 	.word	0x0000927c
    698c:	00009117 	.word	0x00009117
    6990:	00009291 	.word	0x00009291
    6994:	00009250 	.word	0x00009250
    6998:	00009267 	.word	0x00009267
    699c:	20000bec 	.word	0x20000bec
    69a0:	00009d9a 	.word	0x00009d9a
    69a4:	000098f6 	.word	0x000098f6
    69a8:	00009e8c 	.word	0x00009e8c
    69ac:	20000c0c 	.word	0x20000c0c

000069b0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    69b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69b2:	4604      	mov	r4, r0
    69b4:	460e      	mov	r6, r1
    69b6:	4615      	mov	r5, r2
	__asm__ volatile(
    69b8:	f04f 0320 	mov.w	r3, #32
    69bc:	f3ef 8711 	mrs	r7, BASEPRI
    69c0:	f383 8812 	msr	BASEPRI_MAX, r3
    69c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69c8:	481e      	ldr	r0, [pc, #120]	; (6a44 <z_sched_wake+0x94>)
    69ca:	f000 fa85 	bl	6ed8 <z_spin_lock_valid>
    69ce:	b968      	cbnz	r0, 69ec <z_sched_wake+0x3c>
    69d0:	4a1d      	ldr	r2, [pc, #116]	; (6a48 <z_sched_wake+0x98>)
    69d2:	491e      	ldr	r1, [pc, #120]	; (6a4c <z_sched_wake+0x9c>)
    69d4:	481e      	ldr	r0, [pc, #120]	; (6a50 <z_sched_wake+0xa0>)
    69d6:	2381      	movs	r3, #129	; 0x81
    69d8:	f001 fc09 	bl	81ee <printk>
    69dc:	4919      	ldr	r1, [pc, #100]	; (6a44 <z_sched_wake+0x94>)
    69de:	481d      	ldr	r0, [pc, #116]	; (6a54 <z_sched_wake+0xa4>)
    69e0:	f001 fc05 	bl	81ee <printk>
    69e4:	4818      	ldr	r0, [pc, #96]	; (6a48 <z_sched_wake+0x98>)
    69e6:	2181      	movs	r1, #129	; 0x81
    69e8:	f001 fb2a 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    69ec:	4815      	ldr	r0, [pc, #84]	; (6a44 <z_sched_wake+0x94>)
    69ee:	f000 fa91 	bl	6f14 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    69f2:	4620      	mov	r0, r4
    69f4:	f001 ff6c 	bl	88d0 <z_priq_dumb_best>

		if (thread != NULL) {
    69f8:	4604      	mov	r4, r0
    69fa:	b158      	cbz	r0, 6a14 <z_sched_wake+0x64>
    69fc:	67c6      	str	r6, [r0, #124]	; 0x7c
    69fe:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    6a00:	f7fe ffb0 	bl	5964 <unpend_thread_no_timeout>
    6a04:	f104 0018 	add.w	r0, r4, #24
    6a08:	f000 fbb0 	bl	716c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    6a0c:	4620      	mov	r0, r4
    6a0e:	f7ff f91d 	bl	5c4c <ready_thread>
			ret = true;
    6a12:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a14:	480b      	ldr	r0, [pc, #44]	; (6a44 <z_sched_wake+0x94>)
    6a16:	f000 fa6d 	bl	6ef4 <z_spin_unlock_valid>
    6a1a:	b968      	cbnz	r0, 6a38 <z_sched_wake+0x88>
    6a1c:	4a0a      	ldr	r2, [pc, #40]	; (6a48 <z_sched_wake+0x98>)
    6a1e:	490e      	ldr	r1, [pc, #56]	; (6a58 <z_sched_wake+0xa8>)
    6a20:	480b      	ldr	r0, [pc, #44]	; (6a50 <z_sched_wake+0xa0>)
    6a22:	23ac      	movs	r3, #172	; 0xac
    6a24:	f001 fbe3 	bl	81ee <printk>
    6a28:	4906      	ldr	r1, [pc, #24]	; (6a44 <z_sched_wake+0x94>)
    6a2a:	480c      	ldr	r0, [pc, #48]	; (6a5c <z_sched_wake+0xac>)
    6a2c:	f001 fbdf 	bl	81ee <printk>
    6a30:	4805      	ldr	r0, [pc, #20]	; (6a48 <z_sched_wake+0x98>)
    6a32:	21ac      	movs	r1, #172	; 0xac
    6a34:	f001 fb04 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6a38:	f387 8811 	msr	BASEPRI, r7
    6a3c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6a40:	4620      	mov	r0, r4
    6a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a44:	20000c20 	.word	0x20000c20
    6a48:	0000922a 	.word	0x0000922a
    6a4c:	0000927c 	.word	0x0000927c
    6a50:	00009117 	.word	0x00009117
    6a54:	00009291 	.word	0x00009291
    6a58:	00009250 	.word	0x00009250
    6a5c:	00009267 	.word	0x00009267

00006a60 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6a60:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6a62:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6a66:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6a68:	e9cd 6700 	strd	r6, r7, [sp]
    6a6c:	f7ff faf2 	bl	6054 <z_pend_curr>

	if (data != NULL) {
    6a70:	b11c      	cbz	r4, 6a7a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6a72:	4b03      	ldr	r3, [pc, #12]	; (6a80 <z_sched_wait+0x20>)
    6a74:	689b      	ldr	r3, [r3, #8]
    6a76:	695b      	ldr	r3, [r3, #20]
    6a78:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6a7a:	b002      	add	sp, #8
    6a7c:	bdd0      	pop	{r4, r6, r7, pc}
    6a7e:	bf00      	nop
    6a80:	20000bec 	.word	0x20000bec

00006a84 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6a84:	b538      	push	{r3, r4, r5, lr}
    6a86:	4604      	mov	r4, r0
	__asm__ volatile(
    6a88:	f04f 0320 	mov.w	r3, #32
    6a8c:	f3ef 8511 	mrs	r5, BASEPRI
    6a90:	f383 8812 	msr	BASEPRI_MAX, r3
    6a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a98:	4817      	ldr	r0, [pc, #92]	; (6af8 <z_impl_k_sem_give+0x74>)
    6a9a:	f000 fa1d 	bl	6ed8 <z_spin_lock_valid>
    6a9e:	b968      	cbnz	r0, 6abc <z_impl_k_sem_give+0x38>
    6aa0:	4a16      	ldr	r2, [pc, #88]	; (6afc <z_impl_k_sem_give+0x78>)
    6aa2:	4917      	ldr	r1, [pc, #92]	; (6b00 <z_impl_k_sem_give+0x7c>)
    6aa4:	4817      	ldr	r0, [pc, #92]	; (6b04 <z_impl_k_sem_give+0x80>)
    6aa6:	2381      	movs	r3, #129	; 0x81
    6aa8:	f001 fba1 	bl	81ee <printk>
    6aac:	4912      	ldr	r1, [pc, #72]	; (6af8 <z_impl_k_sem_give+0x74>)
    6aae:	4816      	ldr	r0, [pc, #88]	; (6b08 <z_impl_k_sem_give+0x84>)
    6ab0:	f001 fb9d 	bl	81ee <printk>
    6ab4:	4811      	ldr	r0, [pc, #68]	; (6afc <z_impl_k_sem_give+0x78>)
    6ab6:	2181      	movs	r1, #129	; 0x81
    6ab8:	f001 fac2 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    6abc:	480e      	ldr	r0, [pc, #56]	; (6af8 <z_impl_k_sem_give+0x74>)
    6abe:	f000 fa29 	bl	6f14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6ac2:	4620      	mov	r0, r4
    6ac4:	f7ff fcc4 	bl	6450 <z_unpend_first_thread>

	if (thread != NULL) {
    6ac8:	b148      	cbz	r0, 6ade <z_impl_k_sem_give+0x5a>
    6aca:	2200      	movs	r2, #0
    6acc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6ace:	f7ff f90f 	bl	5cf0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6ad2:	4629      	mov	r1, r5
    6ad4:	4808      	ldr	r0, [pc, #32]	; (6af8 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6ada:	f7fe be69 	b.w	57b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6ade:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6ae2:	429a      	cmp	r2, r3
    6ae4:	bf18      	it	ne
    6ae6:	3301      	addne	r3, #1
    6ae8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6aea:	2102      	movs	r1, #2
    6aec:	f104 0010 	add.w	r0, r4, #16
    6af0:	f001 feca 	bl	8888 <z_handle_obj_poll_events>
}
    6af4:	e7ed      	b.n	6ad2 <z_impl_k_sem_give+0x4e>
    6af6:	bf00      	nop
    6af8:	20000c2c 	.word	0x20000c2c
    6afc:	0000922a 	.word	0x0000922a
    6b00:	0000927c 	.word	0x0000927c
    6b04:	00009117 	.word	0x00009117
    6b08:	00009291 	.word	0x00009291

00006b0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b0e:	4604      	mov	r4, r0
    6b10:	4616      	mov	r6, r2
    6b12:	461f      	mov	r7, r3
    6b14:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6b18:	b17b      	cbz	r3, 6b3a <z_impl_k_sem_take+0x2e>
    6b1a:	ea56 0307 	orrs.w	r3, r6, r7
    6b1e:	d00c      	beq.n	6b3a <z_impl_k_sem_take+0x2e>
    6b20:	4935      	ldr	r1, [pc, #212]	; (6bf8 <z_impl_k_sem_take+0xec>)
    6b22:	4a36      	ldr	r2, [pc, #216]	; (6bfc <z_impl_k_sem_take+0xf0>)
    6b24:	4836      	ldr	r0, [pc, #216]	; (6c00 <z_impl_k_sem_take+0xf4>)
    6b26:	2379      	movs	r3, #121	; 0x79
    6b28:	f001 fb61 	bl	81ee <printk>
    6b2c:	4835      	ldr	r0, [pc, #212]	; (6c04 <z_impl_k_sem_take+0xf8>)
    6b2e:	f001 fb5e 	bl	81ee <printk>
    6b32:	4832      	ldr	r0, [pc, #200]	; (6bfc <z_impl_k_sem_take+0xf0>)
    6b34:	2179      	movs	r1, #121	; 0x79
    6b36:	f001 fa83 	bl	8040 <assert_post_action>
    6b3a:	f04f 0320 	mov.w	r3, #32
    6b3e:	f3ef 8511 	mrs	r5, BASEPRI
    6b42:	f383 8812 	msr	BASEPRI_MAX, r3
    6b46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b4a:	482f      	ldr	r0, [pc, #188]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6b4c:	f000 f9c4 	bl	6ed8 <z_spin_lock_valid>
    6b50:	b968      	cbnz	r0, 6b6e <z_impl_k_sem_take+0x62>
    6b52:	4a2e      	ldr	r2, [pc, #184]	; (6c0c <z_impl_k_sem_take+0x100>)
    6b54:	492e      	ldr	r1, [pc, #184]	; (6c10 <z_impl_k_sem_take+0x104>)
    6b56:	482a      	ldr	r0, [pc, #168]	; (6c00 <z_impl_k_sem_take+0xf4>)
    6b58:	2381      	movs	r3, #129	; 0x81
    6b5a:	f001 fb48 	bl	81ee <printk>
    6b5e:	492a      	ldr	r1, [pc, #168]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6b60:	482c      	ldr	r0, [pc, #176]	; (6c14 <z_impl_k_sem_take+0x108>)
    6b62:	f001 fb44 	bl	81ee <printk>
    6b66:	4829      	ldr	r0, [pc, #164]	; (6c0c <z_impl_k_sem_take+0x100>)
    6b68:	2181      	movs	r1, #129	; 0x81
    6b6a:	f001 fa69 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b6e:	4826      	ldr	r0, [pc, #152]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6b70:	f000 f9d0 	bl	6f14 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6b74:	68a3      	ldr	r3, [r4, #8]
    6b76:	b1d3      	cbz	r3, 6bae <z_impl_k_sem_take+0xa2>
		sem->count--;
    6b78:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b7a:	4823      	ldr	r0, [pc, #140]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6b7c:	60a3      	str	r3, [r4, #8]
    6b7e:	f000 f9b9 	bl	6ef4 <z_spin_unlock_valid>
    6b82:	b968      	cbnz	r0, 6ba0 <z_impl_k_sem_take+0x94>
    6b84:	4a21      	ldr	r2, [pc, #132]	; (6c0c <z_impl_k_sem_take+0x100>)
    6b86:	4924      	ldr	r1, [pc, #144]	; (6c18 <z_impl_k_sem_take+0x10c>)
    6b88:	481d      	ldr	r0, [pc, #116]	; (6c00 <z_impl_k_sem_take+0xf4>)
    6b8a:	23ac      	movs	r3, #172	; 0xac
    6b8c:	f001 fb2f 	bl	81ee <printk>
    6b90:	491d      	ldr	r1, [pc, #116]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6b92:	4822      	ldr	r0, [pc, #136]	; (6c1c <z_impl_k_sem_take+0x110>)
    6b94:	f001 fb2b 	bl	81ee <printk>
    6b98:	481c      	ldr	r0, [pc, #112]	; (6c0c <z_impl_k_sem_take+0x100>)
    6b9a:	21ac      	movs	r1, #172	; 0xac
    6b9c:	f001 fa50 	bl	8040 <assert_post_action>
	__asm__ volatile(
    6ba0:	f385 8811 	msr	BASEPRI, r5
    6ba4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6ba8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6baa:	b003      	add	sp, #12
    6bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6bae:	ea56 0307 	orrs.w	r3, r6, r7
    6bb2:	d118      	bne.n	6be6 <z_impl_k_sem_take+0xda>
    6bb4:	4814      	ldr	r0, [pc, #80]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6bb6:	f000 f99d 	bl	6ef4 <z_spin_unlock_valid>
    6bba:	b968      	cbnz	r0, 6bd8 <z_impl_k_sem_take+0xcc>
    6bbc:	4a13      	ldr	r2, [pc, #76]	; (6c0c <z_impl_k_sem_take+0x100>)
    6bbe:	4916      	ldr	r1, [pc, #88]	; (6c18 <z_impl_k_sem_take+0x10c>)
    6bc0:	480f      	ldr	r0, [pc, #60]	; (6c00 <z_impl_k_sem_take+0xf4>)
    6bc2:	23ac      	movs	r3, #172	; 0xac
    6bc4:	f001 fb13 	bl	81ee <printk>
    6bc8:	490f      	ldr	r1, [pc, #60]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6bca:	4814      	ldr	r0, [pc, #80]	; (6c1c <z_impl_k_sem_take+0x110>)
    6bcc:	f001 fb0f 	bl	81ee <printk>
    6bd0:	480e      	ldr	r0, [pc, #56]	; (6c0c <z_impl_k_sem_take+0x100>)
    6bd2:	21ac      	movs	r1, #172	; 0xac
    6bd4:	f001 fa34 	bl	8040 <assert_post_action>
    6bd8:	f385 8811 	msr	BASEPRI, r5
    6bdc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6be0:	f06f 000f 	mvn.w	r0, #15
    6be4:	e7e1      	b.n	6baa <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6be6:	e9cd 6700 	strd	r6, r7, [sp]
    6bea:	4622      	mov	r2, r4
    6bec:	4629      	mov	r1, r5
    6bee:	4806      	ldr	r0, [pc, #24]	; (6c08 <z_impl_k_sem_take+0xfc>)
    6bf0:	f7ff fa30 	bl	6054 <z_pend_curr>
	return ret;
    6bf4:	e7d9      	b.n	6baa <z_impl_k_sem_take+0x9e>
    6bf6:	bf00      	nop
    6bf8:	00009ece 	.word	0x00009ece
    6bfc:	00009eae 	.word	0x00009eae
    6c00:	00009117 	.word	0x00009117
    6c04:	00009c36 	.word	0x00009c36
    6c08:	20000c2c 	.word	0x20000c2c
    6c0c:	0000922a 	.word	0x0000922a
    6c10:	0000927c 	.word	0x0000927c
    6c14:	00009291 	.word	0x00009291
    6c18:	00009250 	.word	0x00009250
    6c1c:	00009267 	.word	0x00009267

00006c20 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    6c22:	4b09      	ldr	r3, [pc, #36]	; (6c48 <k_sys_work_q_init+0x28>)
    6c24:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    6c26:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6c28:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    6c2a:	9300      	str	r3, [sp, #0]
    6c2c:	4907      	ldr	r1, [pc, #28]	; (6c4c <k_sys_work_q_init+0x2c>)
    6c2e:	4808      	ldr	r0, [pc, #32]	; (6c50 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6c30:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    6c34:	f04f 33ff 	mov.w	r3, #4294967295
    6c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6c3c:	f000 ff88 	bl	7b50 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6c40:	4620      	mov	r0, r4
    6c42:	b004      	add	sp, #16
    6c44:	bd10      	pop	{r4, pc}
    6c46:	bf00      	nop
    6c48:	00009f1b 	.word	0x00009f1b
    6c4c:	20002820 	.word	0x20002820
    6c50:	200004f8 	.word	0x200004f8

00006c54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c58:	b085      	sub	sp, #20
    6c5a:	4604      	mov	r4, r0
    6c5c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6c60:	f1b8 0f0f 	cmp.w	r8, #15
{
    6c64:	460f      	mov	r7, r1
    6c66:	4615      	mov	r5, r2
    6c68:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6c6a:	d132      	bne.n	6cd2 <z_setup_new_thread+0x7e>
    6c6c:	4b25      	ldr	r3, [pc, #148]	; (6d04 <z_setup_new_thread+0xb0>)
    6c6e:	4599      	cmp	r9, r3
    6c70:	d133      	bne.n	6cda <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    6c72:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6c76:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6c7c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6c7e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6c80:	2304      	movs	r3, #4
    6c82:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6c84:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6c88:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6c8c:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6c92:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6c96:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6c98:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c9e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6ca0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ca4:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6ca6:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ca8:	464b      	mov	r3, r9
	node->prev = NULL;
    6caa:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6cae:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6cb0:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6cb2:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6cb4:	4642      	mov	r2, r8
    6cb6:	4639      	mov	r1, r7
    6cb8:	4620      	mov	r0, r4
    6cba:	f7fa ff87 	bl	1bcc <arch_new_thread>
	if (!_current) {
    6cbe:	4b12      	ldr	r3, [pc, #72]	; (6d08 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6cc0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6cc2:	689b      	ldr	r3, [r3, #8]
    6cc4:	b103      	cbz	r3, 6cc8 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    6cc8:	6763      	str	r3, [r4, #116]	; 0x74
}
    6cca:	4640      	mov	r0, r8
    6ccc:	b005      	add	sp, #20
    6cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6cd2:	f108 0310 	add.w	r3, r8, #16
    6cd6:	2b1e      	cmp	r3, #30
    6cd8:	d9cb      	bls.n	6c72 <z_setup_new_thread+0x1e>
    6cda:	4a0c      	ldr	r2, [pc, #48]	; (6d0c <z_setup_new_thread+0xb8>)
    6cdc:	490c      	ldr	r1, [pc, #48]	; (6d10 <z_setup_new_thread+0xbc>)
    6cde:	480d      	ldr	r0, [pc, #52]	; (6d14 <z_setup_new_thread+0xc0>)
    6ce0:	f240 13ff 	movw	r3, #511	; 0x1ff
    6ce4:	f001 fa83 	bl	81ee <printk>
    6ce8:	4641      	mov	r1, r8
    6cea:	480b      	ldr	r0, [pc, #44]	; (6d18 <z_setup_new_thread+0xc4>)
    6cec:	f06f 030f 	mvn.w	r3, #15
    6cf0:	220e      	movs	r2, #14
    6cf2:	f001 fa7c 	bl	81ee <printk>
    6cf6:	4805      	ldr	r0, [pc, #20]	; (6d0c <z_setup_new_thread+0xb8>)
    6cf8:	f240 11ff 	movw	r1, #511	; 0x1ff
    6cfc:	f001 f9a0 	bl	8040 <assert_post_action>
    6d00:	e7b7      	b.n	6c72 <z_setup_new_thread+0x1e>
    6d02:	bf00      	nop
    6d04:	00004d01 	.word	0x00004d01
    6d08:	20000bec 	.word	0x20000bec
    6d0c:	00009f24 	.word	0x00009f24
    6d10:	00009f47 	.word	0x00009f47
    6d14:	00009117 	.word	0x00009117
    6d18:	00009fc7 	.word	0x00009fc7

00006d1c <z_impl_k_thread_create>:
{
    6d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6d20:	b087      	sub	sp, #28
    6d22:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    6d26:	4604      	mov	r4, r0
    6d28:	460d      	mov	r5, r1
    6d2a:	4690      	mov	r8, r2
    6d2c:	4699      	mov	r9, r3
    6d2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6d32:	b173      	cbz	r3, 6d52 <z_impl_k_thread_create+0x36>
    6d34:	491b      	ldr	r1, [pc, #108]	; (6da4 <z_impl_k_thread_create+0x88>)
    6d36:	4a1c      	ldr	r2, [pc, #112]	; (6da8 <z_impl_k_thread_create+0x8c>)
    6d38:	481c      	ldr	r0, [pc, #112]	; (6dac <z_impl_k_thread_create+0x90>)
    6d3a:	f44f 731a 	mov.w	r3, #616	; 0x268
    6d3e:	f001 fa56 	bl	81ee <printk>
    6d42:	481b      	ldr	r0, [pc, #108]	; (6db0 <z_impl_k_thread_create+0x94>)
    6d44:	f001 fa53 	bl	81ee <printk>
    6d48:	4817      	ldr	r0, [pc, #92]	; (6da8 <z_impl_k_thread_create+0x8c>)
    6d4a:	f44f 711a 	mov.w	r1, #616	; 0x268
    6d4e:	f001 f977 	bl	8040 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6d52:	2300      	movs	r3, #0
    6d54:	9305      	str	r3, [sp, #20]
    6d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6d58:	9304      	str	r3, [sp, #16]
    6d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6d5c:	9303      	str	r3, [sp, #12]
    6d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d60:	9302      	str	r3, [sp, #8]
    6d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d64:	9301      	str	r3, [sp, #4]
    6d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6d68:	9300      	str	r3, [sp, #0]
    6d6a:	4642      	mov	r2, r8
    6d6c:	464b      	mov	r3, r9
    6d6e:	4629      	mov	r1, r5
    6d70:	4620      	mov	r0, r4
    6d72:	f7ff ff6f 	bl	6c54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6d76:	1c7b      	adds	r3, r7, #1
    6d78:	bf08      	it	eq
    6d7a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6d7e:	d005      	beq.n	6d8c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6d80:	ea56 0307 	orrs.w	r3, r6, r7
    6d84:	d106      	bne.n	6d94 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    6d86:	4620      	mov	r0, r4
    6d88:	f7fe fffa 	bl	5d80 <z_sched_start>
}
    6d8c:	4620      	mov	r0, r4
    6d8e:	b007      	add	sp, #28
    6d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6d94:	4907      	ldr	r1, [pc, #28]	; (6db4 <z_impl_k_thread_create+0x98>)
    6d96:	4632      	mov	r2, r6
    6d98:	463b      	mov	r3, r7
    6d9a:	f104 0018 	add.w	r0, r4, #24
    6d9e:	f000 f911 	bl	6fc4 <z_add_timeout>
    6da2:	e7f3      	b.n	6d8c <z_impl_k_thread_create+0x70>
    6da4:	00009bbd 	.word	0x00009bbd
    6da8:	00009f24 	.word	0x00009f24
    6dac:	00009117 	.word	0x00009117
    6db0:	00009ff8 	.word	0x00009ff8
    6db4:	00005e29 	.word	0x00005e29

00006db8 <z_init_static_threads>:
{
    6db8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    6dbc:	4f3f      	ldr	r7, [pc, #252]	; (6ebc <z_init_static_threads+0x104>)
    6dbe:	4d40      	ldr	r5, [pc, #256]	; (6ec0 <z_init_static_threads+0x108>)
    6dc0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 6ed0 <z_init_static_threads+0x118>
{
    6dc4:	b086      	sub	sp, #24
    6dc6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6dc8:	42bd      	cmp	r5, r7
    6dca:	d90e      	bls.n	6dea <z_init_static_threads+0x32>
    6dcc:	493d      	ldr	r1, [pc, #244]	; (6ec4 <z_init_static_threads+0x10c>)
    6dce:	483e      	ldr	r0, [pc, #248]	; (6ec8 <z_init_static_threads+0x110>)
    6dd0:	f240 23cf 	movw	r3, #719	; 0x2cf
    6dd4:	4642      	mov	r2, r8
    6dd6:	f001 fa0a 	bl	81ee <printk>
    6dda:	483c      	ldr	r0, [pc, #240]	; (6ecc <z_init_static_threads+0x114>)
    6ddc:	f001 fa07 	bl	81ee <printk>
    6de0:	f240 21cf 	movw	r1, #719	; 0x2cf
    6de4:	4640      	mov	r0, r8
    6de6:	f001 f92b 	bl	8040 <assert_post_action>
    6dea:	42b5      	cmp	r5, r6
    6dec:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6df0:	d31f      	bcc.n	6e32 <z_init_static_threads+0x7a>
	k_sched_lock();
    6df2:	f7fe fd21 	bl	5838 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6df6:	4c32      	ldr	r4, [pc, #200]	; (6ec0 <z_init_static_threads+0x108>)
    6df8:	4d35      	ldr	r5, [pc, #212]	; (6ed0 <z_init_static_threads+0x118>)
    6dfa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6ec4 <z_init_static_threads+0x10c>
    6dfe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6ec8 <z_init_static_threads+0x110>
    6e02:	42b4      	cmp	r4, r6
    6e04:	d90e      	bls.n	6e24 <z_init_static_threads+0x6c>
    6e06:	4641      	mov	r1, r8
    6e08:	f240 23ee 	movw	r3, #750	; 0x2ee
    6e0c:	462a      	mov	r2, r5
    6e0e:	4648      	mov	r0, r9
    6e10:	f001 f9ed 	bl	81ee <printk>
    6e14:	482d      	ldr	r0, [pc, #180]	; (6ecc <z_init_static_threads+0x114>)
    6e16:	f001 f9ea 	bl	81ee <printk>
    6e1a:	f240 21ee 	movw	r1, #750	; 0x2ee
    6e1e:	4628      	mov	r0, r5
    6e20:	f001 f90e 	bl	8040 <assert_post_action>
    6e24:	42b4      	cmp	r4, r6
    6e26:	d321      	bcc.n	6e6c <z_init_static_threads+0xb4>
}
    6e28:	b006      	add	sp, #24
    6e2a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    6e2e:	f7ff ba47 	b.w	62c0 <k_sched_unlock>
		z_setup_new_thread(
    6e32:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6e36:	9305      	str	r3, [sp, #20]
    6e38:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6e3c:	9304      	str	r3, [sp, #16]
    6e3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6e42:	9303      	str	r3, [sp, #12]
    6e44:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6e48:	9302      	str	r3, [sp, #8]
    6e4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6e4e:	9301      	str	r3, [sp, #4]
    6e50:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6e54:	9300      	str	r3, [sp, #0]
    6e56:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6e5a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6e5e:	f7ff fef9 	bl	6c54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6e62:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6e66:	655d      	str	r5, [r3, #84]	; 0x54
    6e68:	4625      	mov	r5, r4
    6e6a:	e7ad      	b.n	6dc8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6e6e:	1c4b      	adds	r3, r1, #1
    6e70:	d014      	beq.n	6e9c <z_init_static_threads+0xe4>
    6e72:	f240 32e7 	movw	r2, #999	; 0x3e7
    6e76:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6e78:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6e7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6e80:	4693      	mov	fp, r2
    6e82:	469c      	mov	ip, r3
    6e84:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6e88:	459c      	cmp	ip, r3
    6e8a:	bf08      	it	eq
    6e8c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    6e8e:	6827      	ldr	r7, [r4, #0]
    6e90:	4658      	mov	r0, fp
    6e92:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6e94:	d104      	bne.n	6ea0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    6e96:	4638      	mov	r0, r7
    6e98:	f7fe ff72 	bl	5d80 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6e9c:	3430      	adds	r4, #48	; 0x30
    6e9e:	e7b0      	b.n	6e02 <z_init_static_threads+0x4a>
    6ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6ea4:	2300      	movs	r3, #0
    6ea6:	f7f9 f92b 	bl	100 <__aeabi_uldivmod>
    6eaa:	4602      	mov	r2, r0
    6eac:	460b      	mov	r3, r1
    6eae:	f107 0018 	add.w	r0, r7, #24
    6eb2:	4908      	ldr	r1, [pc, #32]	; (6ed4 <z_init_static_threads+0x11c>)
    6eb4:	f000 f886 	bl	6fc4 <z_add_timeout>
    6eb8:	e7f0      	b.n	6e9c <z_init_static_threads+0xe4>
    6eba:	bf00      	nop
    6ebc:	20000208 	.word	0x20000208
    6ec0:	20000208 	.word	0x20000208
    6ec4:	0000a01d 	.word	0x0000a01d
    6ec8:	00009117 	.word	0x00009117
    6ecc:	00009b7c 	.word	0x00009b7c
    6ed0:	00009f24 	.word	0x00009f24
    6ed4:	00005e29 	.word	0x00005e29

00006ed8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6ed8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6eda:	b138      	cbz	r0, 6eec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6edc:	4b04      	ldr	r3, [pc, #16]	; (6ef0 <z_spin_lock_valid+0x18>)
    6ede:	7d1b      	ldrb	r3, [r3, #20]
    6ee0:	f000 0003 	and.w	r0, r0, #3
    6ee4:	1ac0      	subs	r0, r0, r3
    6ee6:	bf18      	it	ne
    6ee8:	2001      	movne	r0, #1
    6eea:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6eec:	2001      	movs	r0, #1
}
    6eee:	4770      	bx	lr
    6ef0:	20000bec 	.word	0x20000bec

00006ef4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6ef4:	4906      	ldr	r1, [pc, #24]	; (6f10 <z_spin_unlock_valid+0x1c>)
{
    6ef6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6ef8:	688a      	ldr	r2, [r1, #8]
    6efa:	7d08      	ldrb	r0, [r1, #20]
    6efc:	6819      	ldr	r1, [r3, #0]
    6efe:	4302      	orrs	r2, r0
    6f00:	4291      	cmp	r1, r2
    6f02:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    6f06:	bf04      	itt	eq
    6f08:	6018      	streq	r0, [r3, #0]
	return true;
    6f0a:	2001      	moveq	r0, #1
}
    6f0c:	4770      	bx	lr
    6f0e:	bf00      	nop
    6f10:	20000bec 	.word	0x20000bec

00006f14 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6f14:	4a02      	ldr	r2, [pc, #8]	; (6f20 <z_spin_lock_set_owner+0xc>)
    6f16:	7d11      	ldrb	r1, [r2, #20]
    6f18:	6893      	ldr	r3, [r2, #8]
    6f1a:	430b      	orrs	r3, r1
    6f1c:	6003      	str	r3, [r0, #0]
}
    6f1e:	4770      	bx	lr
    6f20:	20000bec 	.word	0x20000bec

00006f24 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6f24:	4b03      	ldr	r3, [pc, #12]	; (6f34 <elapsed+0x10>)
    6f26:	681b      	ldr	r3, [r3, #0]
    6f28:	b90b      	cbnz	r3, 6f2e <elapsed+0xa>
    6f2a:	f7fc bd6b 	b.w	3a04 <sys_clock_elapsed>
}
    6f2e:	2000      	movs	r0, #0
    6f30:	4770      	bx	lr
    6f32:	bf00      	nop
    6f34:	20000c30 	.word	0x20000c30

00006f38 <next_timeout>:

static int32_t next_timeout(void)
{
    6f38:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6f3a:	4b13      	ldr	r3, [pc, #76]	; (6f88 <next_timeout+0x50>)
    6f3c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f3e:	429c      	cmp	r4, r3
    6f40:	bf08      	it	eq
    6f42:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6f44:	f7ff ffee 	bl	6f24 <elapsed>
    6f48:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    6f4a:	b1bc      	cbz	r4, 6f7c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6f4c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6f50:	1b40      	subs	r0, r0, r5
    6f52:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6f56:	2801      	cmp	r0, #1
    6f58:	f171 0300 	sbcs.w	r3, r1, #0
    6f5c:	db11      	blt.n	6f82 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6f5e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6f62:	2300      	movs	r3, #0
    6f64:	4282      	cmp	r2, r0
    6f66:	eb73 0401 	sbcs.w	r4, r3, r1
    6f6a:	da00      	bge.n	6f6e <next_timeout+0x36>
    6f6c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6f6e:	4b07      	ldr	r3, [pc, #28]	; (6f8c <next_timeout+0x54>)
    6f70:	691b      	ldr	r3, [r3, #16]
    6f72:	b113      	cbz	r3, 6f7a <next_timeout+0x42>
    6f74:	4298      	cmp	r0, r3
    6f76:	bfa8      	it	ge
    6f78:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6f7a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6f7c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6f80:	e7f5      	b.n	6f6e <next_timeout+0x36>
    6f82:	2000      	movs	r0, #0
    6f84:	e7f3      	b.n	6f6e <next_timeout+0x36>
    6f86:	bf00      	nop
    6f88:	20000184 	.word	0x20000184
    6f8c:	20000bec 	.word	0x20000bec

00006f90 <remove_timeout>:
{
    6f90:	b530      	push	{r4, r5, lr}
    6f92:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6f94:	b168      	cbz	r0, 6fb2 <remove_timeout+0x22>
    6f96:	4a0a      	ldr	r2, [pc, #40]	; (6fc0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6f98:	6852      	ldr	r2, [r2, #4]
    6f9a:	4290      	cmp	r0, r2
    6f9c:	d009      	beq.n	6fb2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    6f9e:	b143      	cbz	r3, 6fb2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6fa0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6fa4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6fa8:	1912      	adds	r2, r2, r4
    6faa:	eb45 0101 	adc.w	r1, r5, r1
    6fae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6fb2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6fb4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6fb6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6fb8:	2300      	movs	r3, #0
	node->prev = NULL;
    6fba:	e9c0 3300 	strd	r3, r3, [r0]
}
    6fbe:	bd30      	pop	{r4, r5, pc}
    6fc0:	20000184 	.word	0x20000184

00006fc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6fca:	1c6b      	adds	r3, r5, #1
    6fcc:	bf08      	it	eq
    6fce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6fd2:	4682      	mov	sl, r0
    6fd4:	468b      	mov	fp, r1
    6fd6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6fd8:	f000 80aa 	beq.w	7130 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6fdc:	6803      	ldr	r3, [r0, #0]
    6fde:	b163      	cbz	r3, 6ffa <z_add_timeout+0x36>
    6fe0:	4955      	ldr	r1, [pc, #340]	; (7138 <z_add_timeout+0x174>)
    6fe2:	4a56      	ldr	r2, [pc, #344]	; (713c <z_add_timeout+0x178>)
    6fe4:	4856      	ldr	r0, [pc, #344]	; (7140 <z_add_timeout+0x17c>)
    6fe6:	235d      	movs	r3, #93	; 0x5d
    6fe8:	f001 f901 	bl	81ee <printk>
    6fec:	4855      	ldr	r0, [pc, #340]	; (7144 <z_add_timeout+0x180>)
    6fee:	f001 f8fe 	bl	81ee <printk>
    6ff2:	4852      	ldr	r0, [pc, #328]	; (713c <z_add_timeout+0x178>)
    6ff4:	215d      	movs	r1, #93	; 0x5d
    6ff6:	f001 f823 	bl	8040 <assert_post_action>
	to->fn = fn;
    6ffa:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    6ffe:	f04f 0320 	mov.w	r3, #32
    7002:	f3ef 8b11 	mrs	fp, BASEPRI
    7006:	f383 8812 	msr	BASEPRI_MAX, r3
    700a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    700e:	484e      	ldr	r0, [pc, #312]	; (7148 <z_add_timeout+0x184>)
    7010:	f7ff ff62 	bl	6ed8 <z_spin_lock_valid>
    7014:	b968      	cbnz	r0, 7032 <z_add_timeout+0x6e>
    7016:	4a4d      	ldr	r2, [pc, #308]	; (714c <z_add_timeout+0x188>)
    7018:	494d      	ldr	r1, [pc, #308]	; (7150 <z_add_timeout+0x18c>)
    701a:	4849      	ldr	r0, [pc, #292]	; (7140 <z_add_timeout+0x17c>)
    701c:	2381      	movs	r3, #129	; 0x81
    701e:	f001 f8e6 	bl	81ee <printk>
    7022:	4949      	ldr	r1, [pc, #292]	; (7148 <z_add_timeout+0x184>)
    7024:	484b      	ldr	r0, [pc, #300]	; (7154 <z_add_timeout+0x190>)
    7026:	f001 f8e2 	bl	81ee <printk>
    702a:	4848      	ldr	r0, [pc, #288]	; (714c <z_add_timeout+0x188>)
    702c:	2181      	movs	r1, #129	; 0x81
    702e:	f001 f807 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    7032:	4845      	ldr	r0, [pc, #276]	; (7148 <z_add_timeout+0x184>)
    7034:	f7ff ff6e 	bl	6f14 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7038:	f06f 0301 	mvn.w	r3, #1
    703c:	ebb3 0804 	subs.w	r8, r3, r4
    7040:	f04f 32ff 	mov.w	r2, #4294967295
    7044:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7048:	f1b8 0f00 	cmp.w	r8, #0
    704c:	f179 0100 	sbcs.w	r1, r9, #0
    7050:	db1c      	blt.n	708c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7052:	4841      	ldr	r0, [pc, #260]	; (7158 <z_add_timeout+0x194>)
    7054:	e9d0 1000 	ldrd	r1, r0, [r0]
    7058:	1a5b      	subs	r3, r3, r1
    705a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    705e:	1b1e      	subs	r6, r3, r4
    7060:	eb62 0705 	sbc.w	r7, r2, r5
    7064:	2e01      	cmp	r6, #1
    7066:	f177 0300 	sbcs.w	r3, r7, #0
    706a:	bfbc      	itt	lt
    706c:	2601      	movlt	r6, #1
    706e:	2700      	movlt	r7, #0
    7070:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    7074:	4a39      	ldr	r2, [pc, #228]	; (715c <z_add_timeout+0x198>)
    7076:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    707a:	4293      	cmp	r3, r2
    707c:	d11d      	bne.n	70ba <z_add_timeout+0xf6>
	node->prev = tail;
    707e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    7082:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    7086:	f8c2 a004 	str.w	sl, [r2, #4]
}
    708a:	e02c      	b.n	70e6 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    708c:	f7ff ff4a 	bl	6f24 <elapsed>
    7090:	1c63      	adds	r3, r4, #1
    7092:	9300      	str	r3, [sp, #0]
    7094:	f145 0300 	adc.w	r3, r5, #0
    7098:	9301      	str	r3, [sp, #4]
    709a:	e9dd 2300 	ldrd	r2, r3, [sp]
    709e:	1812      	adds	r2, r2, r0
    70a0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    70a4:	e9ca 2304 	strd	r2, r3, [sl, #16]
    70a8:	e7e4      	b.n	7074 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    70aa:	1be0      	subs	r0, r4, r7
    70ac:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    70b0:	42b3      	cmp	r3, r6
    70b2:	e9ca 0104 	strd	r0, r1, [sl, #16]
    70b6:	d0e2      	beq.n	707e <z_add_timeout+0xba>
    70b8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    70ba:	2b00      	cmp	r3, #0
    70bc:	d0df      	beq.n	707e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    70be:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    70c2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    70c6:	42bc      	cmp	r4, r7
    70c8:	eb75 0108 	sbcs.w	r1, r5, r8
    70cc:	daed      	bge.n	70aa <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    70ce:	1b38      	subs	r0, r7, r4
    70d0:	eb68 0105 	sbc.w	r1, r8, r5
    70d4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    70d8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    70da:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    70de:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    70e2:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    70e6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70e8:	4293      	cmp	r3, r2
    70ea:	d00b      	beq.n	7104 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    70ec:	459a      	cmp	sl, r3
    70ee:	d109      	bne.n	7104 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    70f0:	f7ff ff22 	bl	6f38 <next_timeout>

			if (next_time == 0 ||
    70f4:	b118      	cbz	r0, 70fe <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    70f6:	4b1a      	ldr	r3, [pc, #104]	; (7160 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    70f8:	691b      	ldr	r3, [r3, #16]
    70fa:	4283      	cmp	r3, r0
    70fc:	d002      	beq.n	7104 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    70fe:	2100      	movs	r1, #0
    7100:	f7fc fc50 	bl	39a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7104:	4810      	ldr	r0, [pc, #64]	; (7148 <z_add_timeout+0x184>)
    7106:	f7ff fef5 	bl	6ef4 <z_spin_unlock_valid>
    710a:	b968      	cbnz	r0, 7128 <z_add_timeout+0x164>
    710c:	4a0f      	ldr	r2, [pc, #60]	; (714c <z_add_timeout+0x188>)
    710e:	4915      	ldr	r1, [pc, #84]	; (7164 <z_add_timeout+0x1a0>)
    7110:	480b      	ldr	r0, [pc, #44]	; (7140 <z_add_timeout+0x17c>)
    7112:	23ac      	movs	r3, #172	; 0xac
    7114:	f001 f86b 	bl	81ee <printk>
    7118:	490b      	ldr	r1, [pc, #44]	; (7148 <z_add_timeout+0x184>)
    711a:	4813      	ldr	r0, [pc, #76]	; (7168 <z_add_timeout+0x1a4>)
    711c:	f001 f867 	bl	81ee <printk>
    7120:	480a      	ldr	r0, [pc, #40]	; (714c <z_add_timeout+0x188>)
    7122:	21ac      	movs	r1, #172	; 0xac
    7124:	f000 ff8c 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7128:	f38b 8811 	msr	BASEPRI, fp
    712c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7130:	b003      	add	sp, #12
    7132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7136:	bf00      	nop
    7138:	0000a06e 	.word	0x0000a06e
    713c:	0000a04a 	.word	0x0000a04a
    7140:	00009117 	.word	0x00009117
    7144:	00009c36 	.word	0x00009c36
    7148:	20000c34 	.word	0x20000c34
    714c:	0000922a 	.word	0x0000922a
    7150:	0000927c 	.word	0x0000927c
    7154:	00009291 	.word	0x00009291
    7158:	20000598 	.word	0x20000598
    715c:	20000184 	.word	0x20000184
    7160:	20000bec 	.word	0x20000bec
    7164:	00009250 	.word	0x00009250
    7168:	00009267 	.word	0x00009267

0000716c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    716c:	b538      	push	{r3, r4, r5, lr}
    716e:	4604      	mov	r4, r0
	__asm__ volatile(
    7170:	f04f 0320 	mov.w	r3, #32
    7174:	f3ef 8511 	mrs	r5, BASEPRI
    7178:	f383 8812 	msr	BASEPRI_MAX, r3
    717c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7180:	481a      	ldr	r0, [pc, #104]	; (71ec <z_abort_timeout+0x80>)
    7182:	f7ff fea9 	bl	6ed8 <z_spin_lock_valid>
    7186:	b968      	cbnz	r0, 71a4 <z_abort_timeout+0x38>
    7188:	4a19      	ldr	r2, [pc, #100]	; (71f0 <z_abort_timeout+0x84>)
    718a:	491a      	ldr	r1, [pc, #104]	; (71f4 <z_abort_timeout+0x88>)
    718c:	481a      	ldr	r0, [pc, #104]	; (71f8 <z_abort_timeout+0x8c>)
    718e:	2381      	movs	r3, #129	; 0x81
    7190:	f001 f82d 	bl	81ee <printk>
    7194:	4915      	ldr	r1, [pc, #84]	; (71ec <z_abort_timeout+0x80>)
    7196:	4819      	ldr	r0, [pc, #100]	; (71fc <z_abort_timeout+0x90>)
    7198:	f001 f829 	bl	81ee <printk>
    719c:	4814      	ldr	r0, [pc, #80]	; (71f0 <z_abort_timeout+0x84>)
    719e:	2181      	movs	r1, #129	; 0x81
    71a0:	f000 ff4e 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    71a4:	4811      	ldr	r0, [pc, #68]	; (71ec <z_abort_timeout+0x80>)
    71a6:	f7ff feb5 	bl	6f14 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    71aa:	6823      	ldr	r3, [r4, #0]
    71ac:	b1db      	cbz	r3, 71e6 <z_abort_timeout+0x7a>
			remove_timeout(to);
    71ae:	4620      	mov	r0, r4
    71b0:	f7ff feee 	bl	6f90 <remove_timeout>
			ret = 0;
    71b4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71b6:	480d      	ldr	r0, [pc, #52]	; (71ec <z_abort_timeout+0x80>)
    71b8:	f7ff fe9c 	bl	6ef4 <z_spin_unlock_valid>
    71bc:	b968      	cbnz	r0, 71da <z_abort_timeout+0x6e>
    71be:	4a0c      	ldr	r2, [pc, #48]	; (71f0 <z_abort_timeout+0x84>)
    71c0:	490f      	ldr	r1, [pc, #60]	; (7200 <z_abort_timeout+0x94>)
    71c2:	480d      	ldr	r0, [pc, #52]	; (71f8 <z_abort_timeout+0x8c>)
    71c4:	23ac      	movs	r3, #172	; 0xac
    71c6:	f001 f812 	bl	81ee <printk>
    71ca:	4908      	ldr	r1, [pc, #32]	; (71ec <z_abort_timeout+0x80>)
    71cc:	480d      	ldr	r0, [pc, #52]	; (7204 <z_abort_timeout+0x98>)
    71ce:	f001 f80e 	bl	81ee <printk>
    71d2:	4807      	ldr	r0, [pc, #28]	; (71f0 <z_abort_timeout+0x84>)
    71d4:	21ac      	movs	r1, #172	; 0xac
    71d6:	f000 ff33 	bl	8040 <assert_post_action>
	__asm__ volatile(
    71da:	f385 8811 	msr	BASEPRI, r5
    71de:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    71e2:	4620      	mov	r0, r4
    71e4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    71e6:	f06f 0415 	mvn.w	r4, #21
    71ea:	e7e4      	b.n	71b6 <z_abort_timeout+0x4a>
    71ec:	20000c34 	.word	0x20000c34
    71f0:	0000922a 	.word	0x0000922a
    71f4:	0000927c 	.word	0x0000927c
    71f8:	00009117 	.word	0x00009117
    71fc:	00009291 	.word	0x00009291
    7200:	00009250 	.word	0x00009250
    7204:	00009267 	.word	0x00009267

00007208 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7208:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    720a:	f04f 0320 	mov.w	r3, #32
    720e:	f3ef 8511 	mrs	r5, BASEPRI
    7212:	f383 8812 	msr	BASEPRI_MAX, r3
    7216:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    721a:	4818      	ldr	r0, [pc, #96]	; (727c <z_get_next_timeout_expiry+0x74>)
    721c:	f7ff fe5c 	bl	6ed8 <z_spin_lock_valid>
    7220:	b968      	cbnz	r0, 723e <z_get_next_timeout_expiry+0x36>
    7222:	4a17      	ldr	r2, [pc, #92]	; (7280 <z_get_next_timeout_expiry+0x78>)
    7224:	4917      	ldr	r1, [pc, #92]	; (7284 <z_get_next_timeout_expiry+0x7c>)
    7226:	4818      	ldr	r0, [pc, #96]	; (7288 <z_get_next_timeout_expiry+0x80>)
    7228:	2381      	movs	r3, #129	; 0x81
    722a:	f000 ffe0 	bl	81ee <printk>
    722e:	4913      	ldr	r1, [pc, #76]	; (727c <z_get_next_timeout_expiry+0x74>)
    7230:	4816      	ldr	r0, [pc, #88]	; (728c <z_get_next_timeout_expiry+0x84>)
    7232:	f000 ffdc 	bl	81ee <printk>
    7236:	4812      	ldr	r0, [pc, #72]	; (7280 <z_get_next_timeout_expiry+0x78>)
    7238:	2181      	movs	r1, #129	; 0x81
    723a:	f000 ff01 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    723e:	480f      	ldr	r0, [pc, #60]	; (727c <z_get_next_timeout_expiry+0x74>)
    7240:	f7ff fe68 	bl	6f14 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7244:	f7ff fe78 	bl	6f38 <next_timeout>
    7248:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    724a:	480c      	ldr	r0, [pc, #48]	; (727c <z_get_next_timeout_expiry+0x74>)
    724c:	f7ff fe52 	bl	6ef4 <z_spin_unlock_valid>
    7250:	b968      	cbnz	r0, 726e <z_get_next_timeout_expiry+0x66>
    7252:	4a0b      	ldr	r2, [pc, #44]	; (7280 <z_get_next_timeout_expiry+0x78>)
    7254:	490e      	ldr	r1, [pc, #56]	; (7290 <z_get_next_timeout_expiry+0x88>)
    7256:	480c      	ldr	r0, [pc, #48]	; (7288 <z_get_next_timeout_expiry+0x80>)
    7258:	23ac      	movs	r3, #172	; 0xac
    725a:	f000 ffc8 	bl	81ee <printk>
    725e:	4907      	ldr	r1, [pc, #28]	; (727c <z_get_next_timeout_expiry+0x74>)
    7260:	480c      	ldr	r0, [pc, #48]	; (7294 <z_get_next_timeout_expiry+0x8c>)
    7262:	f000 ffc4 	bl	81ee <printk>
    7266:	4806      	ldr	r0, [pc, #24]	; (7280 <z_get_next_timeout_expiry+0x78>)
    7268:	21ac      	movs	r1, #172	; 0xac
    726a:	f000 fee9 	bl	8040 <assert_post_action>
	__asm__ volatile(
    726e:	f385 8811 	msr	BASEPRI, r5
    7272:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7276:	4620      	mov	r0, r4
    7278:	bd38      	pop	{r3, r4, r5, pc}
    727a:	bf00      	nop
    727c:	20000c34 	.word	0x20000c34
    7280:	0000922a 	.word	0x0000922a
    7284:	0000927c 	.word	0x0000927c
    7288:	00009117 	.word	0x00009117
    728c:	00009291 	.word	0x00009291
    7290:	00009250 	.word	0x00009250
    7294:	00009267 	.word	0x00009267

00007298 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7298:	b570      	push	{r4, r5, r6, lr}
    729a:	4604      	mov	r4, r0
    729c:	460d      	mov	r5, r1
	__asm__ volatile(
    729e:	f04f 0320 	mov.w	r3, #32
    72a2:	f3ef 8611 	mrs	r6, BASEPRI
    72a6:	f383 8812 	msr	BASEPRI_MAX, r3
    72aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72ae:	481b      	ldr	r0, [pc, #108]	; (731c <z_set_timeout_expiry+0x84>)
    72b0:	f7ff fe12 	bl	6ed8 <z_spin_lock_valid>
    72b4:	b968      	cbnz	r0, 72d2 <z_set_timeout_expiry+0x3a>
    72b6:	4a1a      	ldr	r2, [pc, #104]	; (7320 <z_set_timeout_expiry+0x88>)
    72b8:	491a      	ldr	r1, [pc, #104]	; (7324 <z_set_timeout_expiry+0x8c>)
    72ba:	481b      	ldr	r0, [pc, #108]	; (7328 <z_set_timeout_expiry+0x90>)
    72bc:	2381      	movs	r3, #129	; 0x81
    72be:	f000 ff96 	bl	81ee <printk>
    72c2:	4916      	ldr	r1, [pc, #88]	; (731c <z_set_timeout_expiry+0x84>)
    72c4:	4819      	ldr	r0, [pc, #100]	; (732c <z_set_timeout_expiry+0x94>)
    72c6:	f000 ff92 	bl	81ee <printk>
    72ca:	4815      	ldr	r0, [pc, #84]	; (7320 <z_set_timeout_expiry+0x88>)
    72cc:	2181      	movs	r1, #129	; 0x81
    72ce:	f000 feb7 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    72d2:	4812      	ldr	r0, [pc, #72]	; (731c <z_set_timeout_expiry+0x84>)
    72d4:	f7ff fe1e 	bl	6f14 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    72d8:	f7ff fe2e 	bl	6f38 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    72dc:	2801      	cmp	r0, #1
    72de:	dd05      	ble.n	72ec <z_set_timeout_expiry+0x54>
    72e0:	42a0      	cmp	r0, r4
    72e2:	db03      	blt.n	72ec <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    72e4:	4629      	mov	r1, r5
    72e6:	4620      	mov	r0, r4
    72e8:	f7fc fb5c 	bl	39a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72ec:	480b      	ldr	r0, [pc, #44]	; (731c <z_set_timeout_expiry+0x84>)
    72ee:	f7ff fe01 	bl	6ef4 <z_spin_unlock_valid>
    72f2:	b968      	cbnz	r0, 7310 <z_set_timeout_expiry+0x78>
    72f4:	4a0a      	ldr	r2, [pc, #40]	; (7320 <z_set_timeout_expiry+0x88>)
    72f6:	490e      	ldr	r1, [pc, #56]	; (7330 <z_set_timeout_expiry+0x98>)
    72f8:	480b      	ldr	r0, [pc, #44]	; (7328 <z_set_timeout_expiry+0x90>)
    72fa:	23ac      	movs	r3, #172	; 0xac
    72fc:	f000 ff77 	bl	81ee <printk>
    7300:	4906      	ldr	r1, [pc, #24]	; (731c <z_set_timeout_expiry+0x84>)
    7302:	480c      	ldr	r0, [pc, #48]	; (7334 <z_set_timeout_expiry+0x9c>)
    7304:	f000 ff73 	bl	81ee <printk>
    7308:	4805      	ldr	r0, [pc, #20]	; (7320 <z_set_timeout_expiry+0x88>)
    730a:	21ac      	movs	r1, #172	; 0xac
    730c:	f000 fe98 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7310:	f386 8811 	msr	BASEPRI, r6
    7314:	f3bf 8f6f 	isb	sy
		}
	}
}
    7318:	bd70      	pop	{r4, r5, r6, pc}
    731a:	bf00      	nop
    731c:	20000c34 	.word	0x20000c34
    7320:	0000922a 	.word	0x0000922a
    7324:	0000927c 	.word	0x0000927c
    7328:	00009117 	.word	0x00009117
    732c:	00009291 	.word	0x00009291
    7330:	00009250 	.word	0x00009250
    7334:	00009267 	.word	0x00009267

00007338 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    733c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    733e:	f7fe fc0d 	bl	5b5c <z_time_slice>
	__asm__ volatile(
    7342:	f04f 0320 	mov.w	r3, #32
    7346:	f3ef 8711 	mrs	r7, BASEPRI
    734a:	f383 8812 	msr	BASEPRI_MAX, r3
    734e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7352:	4855      	ldr	r0, [pc, #340]	; (74a8 <sys_clock_announce+0x170>)
    7354:	f7ff fdc0 	bl	6ed8 <z_spin_lock_valid>
    7358:	b968      	cbnz	r0, 7376 <sys_clock_announce+0x3e>
    735a:	4a54      	ldr	r2, [pc, #336]	; (74ac <sys_clock_announce+0x174>)
    735c:	4954      	ldr	r1, [pc, #336]	; (74b0 <sys_clock_announce+0x178>)
    735e:	4855      	ldr	r0, [pc, #340]	; (74b4 <sys_clock_announce+0x17c>)
    7360:	2381      	movs	r3, #129	; 0x81
    7362:	f000 ff44 	bl	81ee <printk>
    7366:	4950      	ldr	r1, [pc, #320]	; (74a8 <sys_clock_announce+0x170>)
    7368:	4853      	ldr	r0, [pc, #332]	; (74b8 <sys_clock_announce+0x180>)
    736a:	f000 ff40 	bl	81ee <printk>
    736e:	484f      	ldr	r0, [pc, #316]	; (74ac <sys_clock_announce+0x174>)
    7370:	2181      	movs	r1, #129	; 0x81
    7372:	f000 fe65 	bl	8040 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7376:	4d51      	ldr	r5, [pc, #324]	; (74bc <sys_clock_announce+0x184>)
    7378:	4e51      	ldr	r6, [pc, #324]	; (74c0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    737a:	484b      	ldr	r0, [pc, #300]	; (74a8 <sys_clock_announce+0x170>)
	return list->head == list;
    737c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 74cc <sys_clock_announce+0x194>
    7380:	f7ff fdc8 	bl	6f14 <z_spin_lock_set_owner>
    7384:	46b3      	mov	fp, r6
    7386:	602c      	str	r4, [r5, #0]
    7388:	e9d6 2300 	ldrd	r2, r3, [r6]
    738c:	f8d5 c000 	ldr.w	ip, [r5]
    7390:	f8da 4000 	ldr.w	r4, [sl]
    7394:	e9cd 2300 	strd	r2, r3, [sp]
    7398:	4662      	mov	r2, ip
    739a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    739c:	4554      	cmp	r4, sl
    739e:	46e0      	mov	r8, ip
    73a0:	4699      	mov	r9, r3
    73a2:	d00c      	beq.n	73be <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    73a4:	b15c      	cbz	r4, 73be <sys_clock_announce+0x86>
    73a6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    73aa:	458c      	cmp	ip, r1
    73ac:	eb79 0302 	sbcs.w	r3, r9, r2
    73b0:	da2e      	bge.n	7410 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    73b2:	ebb1 000c 	subs.w	r0, r1, ip
    73b6:	eb62 0109 	sbc.w	r1, r2, r9
    73ba:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    73be:	9a00      	ldr	r2, [sp, #0]
    73c0:	9901      	ldr	r1, [sp, #4]
    73c2:	eb18 0202 	adds.w	r2, r8, r2
    73c6:	464b      	mov	r3, r9
    73c8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    73cc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    73ce:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    73d2:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    73d4:	f7ff fdb0 	bl	6f38 <next_timeout>
    73d8:	4621      	mov	r1, r4
    73da:	f7fc fae3 	bl	39a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73de:	4832      	ldr	r0, [pc, #200]	; (74a8 <sys_clock_announce+0x170>)
    73e0:	f7ff fd88 	bl	6ef4 <z_spin_unlock_valid>
    73e4:	b968      	cbnz	r0, 7402 <sys_clock_announce+0xca>
    73e6:	4a31      	ldr	r2, [pc, #196]	; (74ac <sys_clock_announce+0x174>)
    73e8:	4936      	ldr	r1, [pc, #216]	; (74c4 <sys_clock_announce+0x18c>)
    73ea:	4832      	ldr	r0, [pc, #200]	; (74b4 <sys_clock_announce+0x17c>)
    73ec:	23ac      	movs	r3, #172	; 0xac
    73ee:	f000 fefe 	bl	81ee <printk>
    73f2:	492d      	ldr	r1, [pc, #180]	; (74a8 <sys_clock_announce+0x170>)
    73f4:	4834      	ldr	r0, [pc, #208]	; (74c8 <sys_clock_announce+0x190>)
    73f6:	f000 fefa 	bl	81ee <printk>
    73fa:	482c      	ldr	r0, [pc, #176]	; (74ac <sys_clock_announce+0x174>)
    73fc:	21ac      	movs	r1, #172	; 0xac
    73fe:	f000 fe1f 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7402:	f387 8811 	msr	BASEPRI, r7
    7406:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    740a:	b003      	add	sp, #12
    740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    7410:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    7414:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    7418:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    741c:	f04f 0200 	mov.w	r2, #0
    7420:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7424:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7428:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    742a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    742e:	4620      	mov	r0, r4
		curr_tick += dt;
    7430:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7434:	f7ff fdac 	bl	6f90 <remove_timeout>
    7438:	481b      	ldr	r0, [pc, #108]	; (74a8 <sys_clock_announce+0x170>)
    743a:	f7ff fd5b 	bl	6ef4 <z_spin_unlock_valid>
    743e:	b968      	cbnz	r0, 745c <sys_clock_announce+0x124>
    7440:	4a1a      	ldr	r2, [pc, #104]	; (74ac <sys_clock_announce+0x174>)
    7442:	4920      	ldr	r1, [pc, #128]	; (74c4 <sys_clock_announce+0x18c>)
    7444:	481b      	ldr	r0, [pc, #108]	; (74b4 <sys_clock_announce+0x17c>)
    7446:	23ac      	movs	r3, #172	; 0xac
    7448:	f000 fed1 	bl	81ee <printk>
    744c:	4916      	ldr	r1, [pc, #88]	; (74a8 <sys_clock_announce+0x170>)
    744e:	481e      	ldr	r0, [pc, #120]	; (74c8 <sys_clock_announce+0x190>)
    7450:	f000 fecd 	bl	81ee <printk>
    7454:	4815      	ldr	r0, [pc, #84]	; (74ac <sys_clock_announce+0x174>)
    7456:	21ac      	movs	r1, #172	; 0xac
    7458:	f000 fdf2 	bl	8040 <assert_post_action>
    745c:	f387 8811 	msr	BASEPRI, r7
    7460:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7464:	68a3      	ldr	r3, [r4, #8]
    7466:	4620      	mov	r0, r4
    7468:	4798      	blx	r3
	__asm__ volatile(
    746a:	f04f 0320 	mov.w	r3, #32
    746e:	f3ef 8711 	mrs	r7, BASEPRI
    7472:	f383 8812 	msr	BASEPRI_MAX, r3
    7476:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    747a:	480b      	ldr	r0, [pc, #44]	; (74a8 <sys_clock_announce+0x170>)
    747c:	f7ff fd2c 	bl	6ed8 <z_spin_lock_valid>
    7480:	b968      	cbnz	r0, 749e <sys_clock_announce+0x166>
    7482:	4a0a      	ldr	r2, [pc, #40]	; (74ac <sys_clock_announce+0x174>)
    7484:	490a      	ldr	r1, [pc, #40]	; (74b0 <sys_clock_announce+0x178>)
    7486:	480b      	ldr	r0, [pc, #44]	; (74b4 <sys_clock_announce+0x17c>)
    7488:	2381      	movs	r3, #129	; 0x81
    748a:	f000 feb0 	bl	81ee <printk>
    748e:	4906      	ldr	r1, [pc, #24]	; (74a8 <sys_clock_announce+0x170>)
    7490:	4809      	ldr	r0, [pc, #36]	; (74b8 <sys_clock_announce+0x180>)
    7492:	f000 feac 	bl	81ee <printk>
    7496:	4805      	ldr	r0, [pc, #20]	; (74ac <sys_clock_announce+0x174>)
    7498:	2181      	movs	r1, #129	; 0x81
    749a:	f000 fdd1 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    749e:	4802      	ldr	r0, [pc, #8]	; (74a8 <sys_clock_announce+0x170>)
    74a0:	f7ff fd38 	bl	6f14 <z_spin_lock_set_owner>
	return k;
    74a4:	e770      	b.n	7388 <sys_clock_announce+0x50>
    74a6:	bf00      	nop
    74a8:	20000c34 	.word	0x20000c34
    74ac:	0000922a 	.word	0x0000922a
    74b0:	0000927c 	.word	0x0000927c
    74b4:	00009117 	.word	0x00009117
    74b8:	00009291 	.word	0x00009291
    74bc:	20000c30 	.word	0x20000c30
    74c0:	20000598 	.word	0x20000598
    74c4:	00009250 	.word	0x00009250
    74c8:	00009267 	.word	0x00009267
    74cc:	20000184 	.word	0x20000184

000074d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	f04f 0320 	mov.w	r3, #32
    74d6:	f3ef 8611 	mrs	r6, BASEPRI
    74da:	f383 8812 	msr	BASEPRI_MAX, r3
    74de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74e2:	481b      	ldr	r0, [pc, #108]	; (7550 <sys_clock_tick_get+0x80>)
    74e4:	f7ff fcf8 	bl	6ed8 <z_spin_lock_valid>
    74e8:	b968      	cbnz	r0, 7506 <sys_clock_tick_get+0x36>
    74ea:	4a1a      	ldr	r2, [pc, #104]	; (7554 <sys_clock_tick_get+0x84>)
    74ec:	491a      	ldr	r1, [pc, #104]	; (7558 <sys_clock_tick_get+0x88>)
    74ee:	481b      	ldr	r0, [pc, #108]	; (755c <sys_clock_tick_get+0x8c>)
    74f0:	2381      	movs	r3, #129	; 0x81
    74f2:	f000 fe7c 	bl	81ee <printk>
    74f6:	4916      	ldr	r1, [pc, #88]	; (7550 <sys_clock_tick_get+0x80>)
    74f8:	4819      	ldr	r0, [pc, #100]	; (7560 <sys_clock_tick_get+0x90>)
    74fa:	f000 fe78 	bl	81ee <printk>
    74fe:	4815      	ldr	r0, [pc, #84]	; (7554 <sys_clock_tick_get+0x84>)
    7500:	2181      	movs	r1, #129	; 0x81
    7502:	f000 fd9d 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    7506:	4812      	ldr	r0, [pc, #72]	; (7550 <sys_clock_tick_get+0x80>)
    7508:	f7ff fd04 	bl	6f14 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    750c:	f7fc fa7a 	bl	3a04 <sys_clock_elapsed>
    7510:	4b14      	ldr	r3, [pc, #80]	; (7564 <sys_clock_tick_get+0x94>)
    7512:	e9d3 4500 	ldrd	r4, r5, [r3]
    7516:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7518:	480d      	ldr	r0, [pc, #52]	; (7550 <sys_clock_tick_get+0x80>)
    751a:	f145 0500 	adc.w	r5, r5, #0
    751e:	f7ff fce9 	bl	6ef4 <z_spin_unlock_valid>
    7522:	b968      	cbnz	r0, 7540 <sys_clock_tick_get+0x70>
    7524:	4a0b      	ldr	r2, [pc, #44]	; (7554 <sys_clock_tick_get+0x84>)
    7526:	4910      	ldr	r1, [pc, #64]	; (7568 <sys_clock_tick_get+0x98>)
    7528:	480c      	ldr	r0, [pc, #48]	; (755c <sys_clock_tick_get+0x8c>)
    752a:	23ac      	movs	r3, #172	; 0xac
    752c:	f000 fe5f 	bl	81ee <printk>
    7530:	4907      	ldr	r1, [pc, #28]	; (7550 <sys_clock_tick_get+0x80>)
    7532:	480e      	ldr	r0, [pc, #56]	; (756c <sys_clock_tick_get+0x9c>)
    7534:	f000 fe5b 	bl	81ee <printk>
    7538:	4806      	ldr	r0, [pc, #24]	; (7554 <sys_clock_tick_get+0x84>)
    753a:	21ac      	movs	r1, #172	; 0xac
    753c:	f000 fd80 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7540:	f386 8811 	msr	BASEPRI, r6
    7544:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7548:	4620      	mov	r0, r4
    754a:	4629      	mov	r1, r5
    754c:	bd70      	pop	{r4, r5, r6, pc}
    754e:	bf00      	nop
    7550:	20000c34 	.word	0x20000c34
    7554:	0000922a 	.word	0x0000922a
    7558:	0000927c 	.word	0x0000927c
    755c:	00009117 	.word	0x00009117
    7560:	00009291 	.word	0x00009291
    7564:	20000598 	.word	0x20000598
    7568:	00009250 	.word	0x00009250
    756c:	00009267 	.word	0x00009267

00007570 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7572:	4604      	mov	r4, r0
	__asm__ volatile(
    7574:	f04f 0320 	mov.w	r3, #32
    7578:	f3ef 8511 	mrs	r5, BASEPRI
    757c:	f383 8812 	msr	BASEPRI_MAX, r3
    7580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7584:	484c      	ldr	r0, [pc, #304]	; (76b8 <z_timer_expiration_handler+0x148>)
    7586:	f7ff fca7 	bl	6ed8 <z_spin_lock_valid>
    758a:	b968      	cbnz	r0, 75a8 <z_timer_expiration_handler+0x38>
    758c:	4a4b      	ldr	r2, [pc, #300]	; (76bc <z_timer_expiration_handler+0x14c>)
    758e:	494c      	ldr	r1, [pc, #304]	; (76c0 <z_timer_expiration_handler+0x150>)
    7590:	484c      	ldr	r0, [pc, #304]	; (76c4 <z_timer_expiration_handler+0x154>)
    7592:	2381      	movs	r3, #129	; 0x81
    7594:	f000 fe2b 	bl	81ee <printk>
    7598:	4947      	ldr	r1, [pc, #284]	; (76b8 <z_timer_expiration_handler+0x148>)
    759a:	484b      	ldr	r0, [pc, #300]	; (76c8 <z_timer_expiration_handler+0x158>)
    759c:	f000 fe27 	bl	81ee <printk>
    75a0:	4846      	ldr	r0, [pc, #280]	; (76bc <z_timer_expiration_handler+0x14c>)
    75a2:	2181      	movs	r1, #129	; 0x81
    75a4:	f000 fd4c 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    75a8:	4843      	ldr	r0, [pc, #268]	; (76b8 <z_timer_expiration_handler+0x148>)
    75aa:	f7ff fcb3 	bl	6f14 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    75ae:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    75b2:	1c56      	adds	r6, r2, #1
    75b4:	f143 0700 	adc.w	r7, r3, #0
    75b8:	2f00      	cmp	r7, #0
    75ba:	bf08      	it	eq
    75bc:	2e02      	cmpeq	r6, #2
    75be:	d303      	bcc.n	75c8 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    75c0:	4942      	ldr	r1, [pc, #264]	; (76cc <z_timer_expiration_handler+0x15c>)
    75c2:	4620      	mov	r0, r4
    75c4:	f7ff fcfe 	bl	6fc4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    75c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    75ca:	3301      	adds	r3, #1
    75cc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    75ce:	6a23      	ldr	r3, [r4, #32]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d035      	beq.n	7640 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75d4:	4838      	ldr	r0, [pc, #224]	; (76b8 <z_timer_expiration_handler+0x148>)
    75d6:	f7ff fc8d 	bl	6ef4 <z_spin_unlock_valid>
    75da:	b968      	cbnz	r0, 75f8 <z_timer_expiration_handler+0x88>
    75dc:	4a37      	ldr	r2, [pc, #220]	; (76bc <z_timer_expiration_handler+0x14c>)
    75de:	493c      	ldr	r1, [pc, #240]	; (76d0 <z_timer_expiration_handler+0x160>)
    75e0:	4838      	ldr	r0, [pc, #224]	; (76c4 <z_timer_expiration_handler+0x154>)
    75e2:	23ac      	movs	r3, #172	; 0xac
    75e4:	f000 fe03 	bl	81ee <printk>
    75e8:	4933      	ldr	r1, [pc, #204]	; (76b8 <z_timer_expiration_handler+0x148>)
    75ea:	483a      	ldr	r0, [pc, #232]	; (76d4 <z_timer_expiration_handler+0x164>)
    75ec:	f000 fdff 	bl	81ee <printk>
    75f0:	4832      	ldr	r0, [pc, #200]	; (76bc <z_timer_expiration_handler+0x14c>)
    75f2:	21ac      	movs	r1, #172	; 0xac
    75f4:	f000 fd24 	bl	8040 <assert_post_action>
	__asm__ volatile(
    75f8:	f385 8811 	msr	BASEPRI, r5
    75fc:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7600:	6a23      	ldr	r3, [r4, #32]
    7602:	4620      	mov	r0, r4
    7604:	4798      	blx	r3
	__asm__ volatile(
    7606:	f04f 0320 	mov.w	r3, #32
    760a:	f3ef 8511 	mrs	r5, BASEPRI
    760e:	f383 8812 	msr	BASEPRI_MAX, r3
    7612:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7616:	4828      	ldr	r0, [pc, #160]	; (76b8 <z_timer_expiration_handler+0x148>)
    7618:	f7ff fc5e 	bl	6ed8 <z_spin_lock_valid>
    761c:	b968      	cbnz	r0, 763a <z_timer_expiration_handler+0xca>
    761e:	4a27      	ldr	r2, [pc, #156]	; (76bc <z_timer_expiration_handler+0x14c>)
    7620:	4927      	ldr	r1, [pc, #156]	; (76c0 <z_timer_expiration_handler+0x150>)
    7622:	4828      	ldr	r0, [pc, #160]	; (76c4 <z_timer_expiration_handler+0x154>)
    7624:	2381      	movs	r3, #129	; 0x81
    7626:	f000 fde2 	bl	81ee <printk>
    762a:	4923      	ldr	r1, [pc, #140]	; (76b8 <z_timer_expiration_handler+0x148>)
    762c:	4826      	ldr	r0, [pc, #152]	; (76c8 <z_timer_expiration_handler+0x158>)
    762e:	f000 fdde 	bl	81ee <printk>
    7632:	4822      	ldr	r0, [pc, #136]	; (76bc <z_timer_expiration_handler+0x14c>)
    7634:	2181      	movs	r1, #129	; 0x81
    7636:	f000 fd03 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    763a:	481f      	ldr	r0, [pc, #124]	; (76b8 <z_timer_expiration_handler+0x148>)
    763c:	f7ff fc6a 	bl	6f14 <z_spin_lock_set_owner>
	return list->head == list;
    7640:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7644:	42a6      	cmp	r6, r4
    7646:	d000      	beq.n	764a <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7648:	b9b6      	cbnz	r6, 7678 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    764a:	481b      	ldr	r0, [pc, #108]	; (76b8 <z_timer_expiration_handler+0x148>)
    764c:	f7ff fc52 	bl	6ef4 <z_spin_unlock_valid>
    7650:	b968      	cbnz	r0, 766e <z_timer_expiration_handler+0xfe>
    7652:	4a1a      	ldr	r2, [pc, #104]	; (76bc <z_timer_expiration_handler+0x14c>)
    7654:	491e      	ldr	r1, [pc, #120]	; (76d0 <z_timer_expiration_handler+0x160>)
    7656:	481b      	ldr	r0, [pc, #108]	; (76c4 <z_timer_expiration_handler+0x154>)
    7658:	23ac      	movs	r3, #172	; 0xac
    765a:	f000 fdc8 	bl	81ee <printk>
    765e:	4916      	ldr	r1, [pc, #88]	; (76b8 <z_timer_expiration_handler+0x148>)
    7660:	481c      	ldr	r0, [pc, #112]	; (76d4 <z_timer_expiration_handler+0x164>)
    7662:	f000 fdc4 	bl	81ee <printk>
    7666:	4815      	ldr	r0, [pc, #84]	; (76bc <z_timer_expiration_handler+0x14c>)
    7668:	21ac      	movs	r1, #172	; 0xac
    766a:	f000 fce9 	bl	8040 <assert_post_action>
	__asm__ volatile(
    766e:	f385 8811 	msr	BASEPRI, r5
    7672:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    7676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    7678:	4630      	mov	r0, r6
    767a:	f7fe f851 	bl	5720 <z_unpend_thread_no_timeout>
    767e:	2300      	movs	r3, #0
    7680:	480d      	ldr	r0, [pc, #52]	; (76b8 <z_timer_expiration_handler+0x148>)
    7682:	67f3      	str	r3, [r6, #124]	; 0x7c
    7684:	f7ff fc36 	bl	6ef4 <z_spin_unlock_valid>
    7688:	b968      	cbnz	r0, 76a6 <z_timer_expiration_handler+0x136>
    768a:	4a0c      	ldr	r2, [pc, #48]	; (76bc <z_timer_expiration_handler+0x14c>)
    768c:	4910      	ldr	r1, [pc, #64]	; (76d0 <z_timer_expiration_handler+0x160>)
    768e:	480d      	ldr	r0, [pc, #52]	; (76c4 <z_timer_expiration_handler+0x154>)
    7690:	23ac      	movs	r3, #172	; 0xac
    7692:	f000 fdac 	bl	81ee <printk>
    7696:	4908      	ldr	r1, [pc, #32]	; (76b8 <z_timer_expiration_handler+0x148>)
    7698:	480e      	ldr	r0, [pc, #56]	; (76d4 <z_timer_expiration_handler+0x164>)
    769a:	f000 fda8 	bl	81ee <printk>
    769e:	4807      	ldr	r0, [pc, #28]	; (76bc <z_timer_expiration_handler+0x14c>)
    76a0:	21ac      	movs	r1, #172	; 0xac
    76a2:	f000 fccd 	bl	8040 <assert_post_action>
    76a6:	f385 8811 	msr	BASEPRI, r5
    76aa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    76ae:	4630      	mov	r0, r6
}
    76b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    76b4:	f7fe bb1c 	b.w	5cf0 <z_ready_thread>
    76b8:	20000c38 	.word	0x20000c38
    76bc:	0000922a 	.word	0x0000922a
    76c0:	0000927c 	.word	0x0000927c
    76c4:	00009117 	.word	0x00009117
    76c8:	00009291 	.word	0x00009291
    76cc:	00007571 	.word	0x00007571
    76d0:	00009250 	.word	0x00009250
    76d4:	00009267 	.word	0x00009267

000076d8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    76d8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    76dc:	4619      	mov	r1, r3
    76de:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    76e0:	1c4c      	adds	r4, r1, #1
{
    76e2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    76e4:	bf08      	it	eq
    76e6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    76ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    76ee:	4680      	mov	r8, r0
    76f0:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    76f2:	d04c      	beq.n	778e <z_impl_k_timer_start+0xb6>
    76f4:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    76f6:	1c6b      	adds	r3, r5, #1
    76f8:	bf08      	it	eq
    76fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    76fe:	4614      	mov	r4, r2
    7700:	d019      	beq.n	7736 <z_impl_k_timer_start+0x5e>
    7702:	ea54 0305 	orrs.w	r3, r4, r5
    7706:	d016      	beq.n	7736 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7708:	f06f 0301 	mvn.w	r3, #1
    770c:	ebb3 0a02 	subs.w	sl, r3, r2
    7710:	f04f 33ff 	mov.w	r3, #4294967295
    7714:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7718:	f1ba 0f00 	cmp.w	sl, #0
    771c:	f17b 0300 	sbcs.w	r3, fp, #0
    7720:	da09      	bge.n	7736 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7722:	f112 34ff 	adds.w	r4, r2, #4294967295
    7726:	f145 35ff 	adc.w	r5, r5, #4294967295
    772a:	2c01      	cmp	r4, #1
    772c:	f175 0300 	sbcs.w	r3, r5, #0
    7730:	bfbc      	itt	lt
    7732:	2401      	movlt	r4, #1
    7734:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7736:	f06f 0301 	mvn.w	r3, #1
    773a:	1a1b      	subs	r3, r3, r0
    773c:	9300      	str	r3, [sp, #0]
    773e:	f04f 33ff 	mov.w	r3, #4294967295
    7742:	eb63 0301 	sbc.w	r3, r3, r1
    7746:	9301      	str	r3, [sp, #4]
    7748:	e9dd 2300 	ldrd	r2, r3, [sp]
    774c:	2a00      	cmp	r2, #0
    774e:	f173 0300 	sbcs.w	r3, r3, #0
    7752:	da0c      	bge.n	776e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7754:	f110 38ff 	adds.w	r8, r0, #4294967295
    7758:	f141 39ff 	adc.w	r9, r1, #4294967295
    775c:	f1b8 0f00 	cmp.w	r8, #0
    7760:	f179 0300 	sbcs.w	r3, r9, #0
    7764:	bfbc      	itt	lt
    7766:	f04f 0800 	movlt.w	r8, #0
    776a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    776e:	4630      	mov	r0, r6
    7770:	f7ff fcfc 	bl	716c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7774:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7776:	4907      	ldr	r1, [pc, #28]	; (7794 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    7778:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    777a:	4642      	mov	r2, r8
    777c:	464b      	mov	r3, r9
    777e:	4630      	mov	r0, r6
	timer->period = period;
    7780:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7784:	b002      	add	sp, #8
    7786:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    778a:	f7ff bc1b 	b.w	6fc4 <z_add_timeout>
}
    778e:	b002      	add	sp, #8
    7790:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7794:	00007571 	.word	0x00007571

00007798 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    7798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    779c:	4e7e      	ldr	r6, [pc, #504]	; (7998 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    779e:	4f7f      	ldr	r7, [pc, #508]	; (799c <work_queue_main+0x204>)
{
    77a0:	b085      	sub	sp, #20
    77a2:	4604      	mov	r4, r0
	__asm__ volatile(
    77a4:	f04f 0320 	mov.w	r3, #32
    77a8:	f3ef 8811 	mrs	r8, BASEPRI
    77ac:	f383 8812 	msr	BASEPRI_MAX, r3
    77b0:	f3bf 8f6f 	isb	sy
    77b4:	4630      	mov	r0, r6
    77b6:	f7ff fb8f 	bl	6ed8 <z_spin_lock_valid>
    77ba:	b968      	cbnz	r0, 77d8 <work_queue_main+0x40>
    77bc:	4a78      	ldr	r2, [pc, #480]	; (79a0 <work_queue_main+0x208>)
    77be:	4979      	ldr	r1, [pc, #484]	; (79a4 <work_queue_main+0x20c>)
    77c0:	4879      	ldr	r0, [pc, #484]	; (79a8 <work_queue_main+0x210>)
    77c2:	2381      	movs	r3, #129	; 0x81
    77c4:	f000 fd13 	bl	81ee <printk>
    77c8:	4878      	ldr	r0, [pc, #480]	; (79ac <work_queue_main+0x214>)
    77ca:	4631      	mov	r1, r6
    77cc:	f000 fd0f 	bl	81ee <printk>
    77d0:	4873      	ldr	r0, [pc, #460]	; (79a0 <work_queue_main+0x208>)
    77d2:	2181      	movs	r1, #129	; 0x81
    77d4:	f000 fc34 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    77d8:	4630      	mov	r0, r6
    77da:	f7ff fb9b 	bl	6f14 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    77de:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    77e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    77e6:	b9ad      	cbnz	r5, 7814 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    77e8:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    77ec:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    77ee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    77f2:	f100 8092 	bmi.w	791a <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    77f6:	2300      	movs	r3, #0
    77f8:	9302      	str	r3, [sp, #8]
    77fa:	f04f 32ff 	mov.w	r2, #4294967295
    77fe:	f04f 33ff 	mov.w	r3, #4294967295
    7802:	e9cd 2300 	strd	r2, r3, [sp]
    7806:	4641      	mov	r1, r8
    7808:	f104 0288 	add.w	r2, r4, #136	; 0x88
    780c:	4630      	mov	r0, r6
    780e:	f7ff f927 	bl	6a60 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    7812:	e7c7      	b.n	77a4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7814:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    7818:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    781a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    781e:	428d      	cmp	r5, r1
    7820:	d101      	bne.n	7826 <work_queue_main+0x8e>
	list->tail = node;
    7822:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    7826:	f043 0302 	orr.w	r3, r3, #2
    782a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    782e:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    7830:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    7834:	f023 0304 	bic.w	r3, r3, #4
    7838:	f043 0301 	orr.w	r3, r3, #1
    783c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    783e:	4630      	mov	r0, r6
    7840:	f7ff fb58 	bl	6ef4 <z_spin_unlock_valid>
    7844:	b968      	cbnz	r0, 7862 <work_queue_main+0xca>
    7846:	4a56      	ldr	r2, [pc, #344]	; (79a0 <work_queue_main+0x208>)
    7848:	4959      	ldr	r1, [pc, #356]	; (79b0 <work_queue_main+0x218>)
    784a:	4857      	ldr	r0, [pc, #348]	; (79a8 <work_queue_main+0x210>)
    784c:	23ac      	movs	r3, #172	; 0xac
    784e:	f000 fcce 	bl	81ee <printk>
    7852:	4858      	ldr	r0, [pc, #352]	; (79b4 <work_queue_main+0x21c>)
    7854:	4631      	mov	r1, r6
    7856:	f000 fcca 	bl	81ee <printk>
    785a:	4851      	ldr	r0, [pc, #324]	; (79a0 <work_queue_main+0x208>)
    785c:	21ac      	movs	r1, #172	; 0xac
    785e:	f000 fbef 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7862:	f388 8811 	msr	BASEPRI, r8
    7866:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    786a:	f1b9 0f00 	cmp.w	r9, #0
    786e:	d10b      	bne.n	7888 <work_queue_main+0xf0>
    7870:	4951      	ldr	r1, [pc, #324]	; (79b8 <work_queue_main+0x220>)
    7872:	484d      	ldr	r0, [pc, #308]	; (79a8 <work_queue_main+0x210>)
    7874:	4a51      	ldr	r2, [pc, #324]	; (79bc <work_queue_main+0x224>)
    7876:	f44f 7322 	mov.w	r3, #648	; 0x288
    787a:	f000 fcb8 	bl	81ee <printk>
    787e:	484f      	ldr	r0, [pc, #316]	; (79bc <work_queue_main+0x224>)
    7880:	f44f 7122 	mov.w	r1, #648	; 0x288
    7884:	f000 fbdc 	bl	8040 <assert_post_action>
		handler(work);
    7888:	4628      	mov	r0, r5
    788a:	47c8      	blx	r9
	__asm__ volatile(
    788c:	f04f 0320 	mov.w	r3, #32
    7890:	f3ef 8a11 	mrs	sl, BASEPRI
    7894:	f383 8812 	msr	BASEPRI_MAX, r3
    7898:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    789c:	4630      	mov	r0, r6
    789e:	f7ff fb1b 	bl	6ed8 <z_spin_lock_valid>
    78a2:	b968      	cbnz	r0, 78c0 <work_queue_main+0x128>
    78a4:	4a3e      	ldr	r2, [pc, #248]	; (79a0 <work_queue_main+0x208>)
    78a6:	493f      	ldr	r1, [pc, #252]	; (79a4 <work_queue_main+0x20c>)
    78a8:	483f      	ldr	r0, [pc, #252]	; (79a8 <work_queue_main+0x210>)
    78aa:	2381      	movs	r3, #129	; 0x81
    78ac:	f000 fc9f 	bl	81ee <printk>
    78b0:	483e      	ldr	r0, [pc, #248]	; (79ac <work_queue_main+0x214>)
    78b2:	4631      	mov	r1, r6
    78b4:	f000 fc9b 	bl	81ee <printk>
    78b8:	4839      	ldr	r0, [pc, #228]	; (79a0 <work_queue_main+0x208>)
    78ba:	2181      	movs	r1, #129	; 0x81
    78bc:	f000 fbc0 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    78c0:	4630      	mov	r0, r6
    78c2:	f7ff fb27 	bl	6f14 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    78c6:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    78c8:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    78ca:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    78ce:	d42e      	bmi.n	792e <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    78d0:	60ea      	str	r2, [r5, #12]
    78d2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    78d6:	f023 0302 	bic.w	r3, r3, #2
    78da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78de:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    78e0:	f3c3 2500 	ubfx	r5, r3, #8, #1
    78e4:	f7ff fb06 	bl	6ef4 <z_spin_unlock_valid>
    78e8:	b968      	cbnz	r0, 7906 <work_queue_main+0x16e>
    78ea:	4a2d      	ldr	r2, [pc, #180]	; (79a0 <work_queue_main+0x208>)
    78ec:	4930      	ldr	r1, [pc, #192]	; (79b0 <work_queue_main+0x218>)
    78ee:	482e      	ldr	r0, [pc, #184]	; (79a8 <work_queue_main+0x210>)
    78f0:	23ac      	movs	r3, #172	; 0xac
    78f2:	f000 fc7c 	bl	81ee <printk>
    78f6:	482f      	ldr	r0, [pc, #188]	; (79b4 <work_queue_main+0x21c>)
    78f8:	4631      	mov	r1, r6
    78fa:	f000 fc78 	bl	81ee <printk>
    78fe:	4828      	ldr	r0, [pc, #160]	; (79a0 <work_queue_main+0x208>)
    7900:	21ac      	movs	r1, #172	; 0xac
    7902:	f000 fb9d 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7906:	f38a 8811 	msr	BASEPRI, sl
    790a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    790e:	2d00      	cmp	r5, #0
    7910:	f47f af48 	bne.w	77a4 <work_queue_main+0xc>
	z_impl_k_yield();
    7914:	f7fe fdf8 	bl	6508 <z_impl_k_yield>
}
    7918:	e744      	b.n	77a4 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    791a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    791e:	2200      	movs	r2, #0
    7920:	2101      	movs	r1, #1
    7922:	4628      	mov	r0, r5
    7924:	f7ff f844 	bl	69b0 <z_sched_wake>
    7928:	2800      	cmp	r0, #0
    792a:	d1f8      	bne.n	791e <work_queue_main+0x186>
    792c:	e763      	b.n	77f6 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    792e:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    7930:	f023 0303 	bic.w	r3, r3, #3
    7934:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    7936:	2800      	cmp	r0, #0
    7938:	d0cb      	beq.n	78d2 <work_queue_main+0x13a>
	return node->next;
    793a:	6803      	ldr	r3, [r0, #0]
    793c:	2b00      	cmp	r3, #0
    793e:	bf38      	it	cc
    7940:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7942:	f04f 0900 	mov.w	r9, #0
    7946:	4698      	mov	r8, r3
	parent->next = child;
    7948:	46cb      	mov	fp, r9
		if (wc->work == work) {
    794a:	6843      	ldr	r3, [r0, #4]
    794c:	429d      	cmp	r5, r3
    794e:	4602      	mov	r2, r0
    7950:	d10d      	bne.n	796e <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    7952:	6802      	ldr	r2, [r0, #0]
    7954:	f1b9 0f00 	cmp.w	r9, #0
    7958:	d115      	bne.n	7986 <work_queue_main+0x1ee>
    795a:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    795c:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    795e:	4283      	cmp	r3, r0
    7960:	d100      	bne.n	7964 <work_queue_main+0x1cc>
	list->tail = node;
    7962:	607a      	str	r2, [r7, #4]
	parent->next = child;
    7964:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    7968:	f7ff f88c 	bl	6a84 <z_impl_k_sem_give>
}
    796c:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    796e:	f1b8 0f00 	cmp.w	r8, #0
    7972:	d0ae      	beq.n	78d2 <work_queue_main+0x13a>
	return node->next;
    7974:	f8d8 3000 	ldr.w	r3, [r8]
    7978:	2b00      	cmp	r3, #0
    797a:	bf38      	it	cc
    797c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    797e:	4640      	mov	r0, r8
    7980:	4691      	mov	r9, r2
    7982:	4698      	mov	r8, r3
    7984:	e7e1      	b.n	794a <work_queue_main+0x1b2>
	parent->next = child;
    7986:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	4283      	cmp	r3, r0
	list->tail = node;
    798e:	bf08      	it	eq
    7990:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    7994:	e7e6      	b.n	7964 <work_queue_main+0x1cc>
    7996:	bf00      	nop
    7998:	20000c3c 	.word	0x20000c3c
    799c:	20000c40 	.word	0x20000c40
    79a0:	0000922a 	.word	0x0000922a
    79a4:	0000927c 	.word	0x0000927c
    79a8:	00009117 	.word	0x00009117
    79ac:	00009291 	.word	0x00009291
    79b0:	00009250 	.word	0x00009250
    79b4:	00009267 	.word	0x00009267
    79b8:	0000a0af 	.word	0x0000a0af
    79bc:	0000a08e 	.word	0x0000a08e

000079c0 <submit_to_queue_locked>:
{
    79c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    79c2:	68c3      	ldr	r3, [r0, #12]
    79c4:	079a      	lsls	r2, r3, #30
{
    79c6:	4604      	mov	r4, r0
    79c8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    79ca:	f3c3 0540 	ubfx	r5, r3, #1, #1
    79ce:	d42b      	bmi.n	7a28 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    79d0:	075f      	lsls	r7, r3, #29
    79d2:	d42b      	bmi.n	7a2c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    79d4:	680a      	ldr	r2, [r1, #0]
    79d6:	b90a      	cbnz	r2, 79dc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    79d8:	6882      	ldr	r2, [r0, #8]
    79da:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    79dc:	07d8      	lsls	r0, r3, #31
    79de:	d528      	bpl.n	7a32 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    79e0:	68a3      	ldr	r3, [r4, #8]
    79e2:	b95b      	cbnz	r3, 79fc <submit_to_queue_locked+0x3c>
    79e4:	4924      	ldr	r1, [pc, #144]	; (7a78 <submit_to_queue_locked+0xb8>)
    79e6:	4825      	ldr	r0, [pc, #148]	; (7a7c <submit_to_queue_locked+0xbc>)
    79e8:	4a25      	ldr	r2, [pc, #148]	; (7a80 <submit_to_queue_locked+0xc0>)
    79ea:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    79ee:	f000 fbfe 	bl	81ee <printk>
    79f2:	4823      	ldr	r0, [pc, #140]	; (7a80 <submit_to_queue_locked+0xc0>)
    79f4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    79f8:	f000 fb22 	bl	8040 <assert_post_action>
			*queuep = work->queue;
    79fc:	68a3      	ldr	r3, [r4, #8]
    79fe:	6033      	str	r3, [r6, #0]
			ret = 2;
    7a00:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    7a02:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    7a04:	b38f      	cbz	r7, 7a6a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7a06:	4b1f      	ldr	r3, [pc, #124]	; (7a84 <submit_to_queue_locked+0xc4>)
    7a08:	689b      	ldr	r3, [r3, #8]
    7a0a:	42bb      	cmp	r3, r7
    7a0c:	d113      	bne.n	7a36 <submit_to_queue_locked+0x76>
    7a0e:	f000 ff79 	bl	8904 <k_is_in_isr>
    7a12:	f080 0001 	eor.w	r0, r0, #1
    7a16:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    7a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7a1c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    7a1e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    7a22:	d525      	bpl.n	7a70 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    7a24:	b14a      	cbz	r2, 7a3a <submit_to_queue_locked+0x7a>
    7a26:	b950      	cbnz	r0, 7a3e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    7a28:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    7a2c:	2300      	movs	r3, #0
    7a2e:	6033      	str	r3, [r6, #0]
	return ret;
    7a30:	e015      	b.n	7a5e <submit_to_queue_locked+0x9e>
		ret = 1;
    7a32:	2501      	movs	r5, #1
    7a34:	e7e5      	b.n	7a02 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    7a36:	2000      	movs	r0, #0
    7a38:	e7ee      	b.n	7a18 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    7a3a:	071b      	lsls	r3, r3, #28
    7a3c:	d4f4      	bmi.n	7a28 <submit_to_queue_locked+0x68>
	parent->next = child;
    7a3e:	2300      	movs	r3, #0
    7a40:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    7a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7a46:	b963      	cbnz	r3, 7a62 <submit_to_queue_locked+0xa2>
	list->head = node;
    7a48:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    7a4c:	4638      	mov	r0, r7
    7a4e:	f000 ff8b 	bl	8968 <notify_queue_locked>
	*flagp |= BIT(bit);
    7a52:	68e3      	ldr	r3, [r4, #12]
    7a54:	f043 0304 	orr.w	r3, r3, #4
    7a58:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    7a5a:	6833      	ldr	r3, [r6, #0]
    7a5c:	60a3      	str	r3, [r4, #8]
}
    7a5e:	4628      	mov	r0, r5
    7a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    7a62:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7a64:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    7a68:	e7f0      	b.n	7a4c <submit_to_queue_locked+0x8c>
		return -EINVAL;
    7a6a:	f06f 0515 	mvn.w	r5, #21
    7a6e:	e7dd      	b.n	7a2c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    7a70:	f06f 0512 	mvn.w	r5, #18
    7a74:	e7da      	b.n	7a2c <submit_to_queue_locked+0x6c>
    7a76:	bf00      	nop
    7a78:	0000a0c6 	.word	0x0000a0c6
    7a7c:	00009117 	.word	0x00009117
    7a80:	0000a08e 	.word	0x0000a08e
    7a84:	20000bec 	.word	0x20000bec

00007a88 <k_work_submit_to_queue>:
{
    7a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    7a8a:	460c      	mov	r4, r1
{
    7a8c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    7a8e:	b959      	cbnz	r1, 7aa8 <k_work_submit_to_queue+0x20>
    7a90:	4926      	ldr	r1, [pc, #152]	; (7b2c <k_work_submit_to_queue+0xa4>)
    7a92:	4827      	ldr	r0, [pc, #156]	; (7b30 <k_work_submit_to_queue+0xa8>)
    7a94:	4a27      	ldr	r2, [pc, #156]	; (7b34 <k_work_submit_to_queue+0xac>)
    7a96:	f240 1369 	movw	r3, #361	; 0x169
    7a9a:	f000 fba8 	bl	81ee <printk>
    7a9e:	4825      	ldr	r0, [pc, #148]	; (7b34 <k_work_submit_to_queue+0xac>)
    7aa0:	f240 1169 	movw	r1, #361	; 0x169
    7aa4:	f000 facc 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7aa8:	f04f 0320 	mov.w	r3, #32
    7aac:	f3ef 8511 	mrs	r5, BASEPRI
    7ab0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ab8:	481f      	ldr	r0, [pc, #124]	; (7b38 <k_work_submit_to_queue+0xb0>)
    7aba:	f7ff fa0d 	bl	6ed8 <z_spin_lock_valid>
    7abe:	b968      	cbnz	r0, 7adc <k_work_submit_to_queue+0x54>
    7ac0:	4a1e      	ldr	r2, [pc, #120]	; (7b3c <k_work_submit_to_queue+0xb4>)
    7ac2:	491f      	ldr	r1, [pc, #124]	; (7b40 <k_work_submit_to_queue+0xb8>)
    7ac4:	481a      	ldr	r0, [pc, #104]	; (7b30 <k_work_submit_to_queue+0xa8>)
    7ac6:	2381      	movs	r3, #129	; 0x81
    7ac8:	f000 fb91 	bl	81ee <printk>
    7acc:	491a      	ldr	r1, [pc, #104]	; (7b38 <k_work_submit_to_queue+0xb0>)
    7ace:	481d      	ldr	r0, [pc, #116]	; (7b44 <k_work_submit_to_queue+0xbc>)
    7ad0:	f000 fb8d 	bl	81ee <printk>
    7ad4:	4819      	ldr	r0, [pc, #100]	; (7b3c <k_work_submit_to_queue+0xb4>)
    7ad6:	2181      	movs	r1, #129	; 0x81
    7ad8:	f000 fab2 	bl	8040 <assert_post_action>
	z_spin_lock_set_owner(l);
    7adc:	4816      	ldr	r0, [pc, #88]	; (7b38 <k_work_submit_to_queue+0xb0>)
    7ade:	f7ff fa19 	bl	6f14 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    7ae2:	4620      	mov	r0, r4
    7ae4:	a901      	add	r1, sp, #4
    7ae6:	f7ff ff6b 	bl	79c0 <submit_to_queue_locked>
    7aea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7aec:	4812      	ldr	r0, [pc, #72]	; (7b38 <k_work_submit_to_queue+0xb0>)
    7aee:	f7ff fa01 	bl	6ef4 <z_spin_unlock_valid>
    7af2:	b968      	cbnz	r0, 7b10 <k_work_submit_to_queue+0x88>
    7af4:	4a11      	ldr	r2, [pc, #68]	; (7b3c <k_work_submit_to_queue+0xb4>)
    7af6:	4914      	ldr	r1, [pc, #80]	; (7b48 <k_work_submit_to_queue+0xc0>)
    7af8:	480d      	ldr	r0, [pc, #52]	; (7b30 <k_work_submit_to_queue+0xa8>)
    7afa:	23ac      	movs	r3, #172	; 0xac
    7afc:	f000 fb77 	bl	81ee <printk>
    7b00:	490d      	ldr	r1, [pc, #52]	; (7b38 <k_work_submit_to_queue+0xb0>)
    7b02:	4812      	ldr	r0, [pc, #72]	; (7b4c <k_work_submit_to_queue+0xc4>)
    7b04:	f000 fb73 	bl	81ee <printk>
    7b08:	480c      	ldr	r0, [pc, #48]	; (7b3c <k_work_submit_to_queue+0xb4>)
    7b0a:	21ac      	movs	r1, #172	; 0xac
    7b0c:	f000 fa98 	bl	8040 <assert_post_action>
	__asm__ volatile(
    7b10:	f385 8811 	msr	BASEPRI, r5
    7b14:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    7b18:	2c00      	cmp	r4, #0
    7b1a:	dd04      	ble.n	7b26 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    7b1c:	f7fe fe84 	bl	6828 <z_impl_k_is_preempt_thread>
    7b20:	b108      	cbz	r0, 7b26 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    7b22:	f7fe fcf1 	bl	6508 <z_impl_k_yield>
}
    7b26:	4620      	mov	r0, r4
    7b28:	b003      	add	sp, #12
    7b2a:	bd30      	pop	{r4, r5, pc}
    7b2c:	0000a0e1 	.word	0x0000a0e1
    7b30:	00009117 	.word	0x00009117
    7b34:	0000a08e 	.word	0x0000a08e
    7b38:	20000c3c 	.word	0x20000c3c
    7b3c:	0000922a 	.word	0x0000922a
    7b40:	0000927c 	.word	0x0000927c
    7b44:	00009291 	.word	0x00009291
    7b48:	00009250 	.word	0x00009250
    7b4c:	00009267 	.word	0x00009267

00007b50 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    7b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b54:	b088      	sub	sp, #32
    7b56:	460e      	mov	r6, r1
    7b58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7b5a:	4617      	mov	r7, r2
    7b5c:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    7b5e:	4604      	mov	r4, r0
    7b60:	b958      	cbnz	r0, 7b7a <k_work_queue_start+0x2a>
    7b62:	492e      	ldr	r1, [pc, #184]	; (7c1c <k_work_queue_start+0xcc>)
    7b64:	482e      	ldr	r0, [pc, #184]	; (7c20 <k_work_queue_start+0xd0>)
    7b66:	4a2f      	ldr	r2, [pc, #188]	; (7c24 <k_work_queue_start+0xd4>)
    7b68:	f240 23b5 	movw	r3, #693	; 0x2b5
    7b6c:	f000 fb3f 	bl	81ee <printk>
    7b70:	482c      	ldr	r0, [pc, #176]	; (7c24 <k_work_queue_start+0xd4>)
    7b72:	f240 21b5 	movw	r1, #693	; 0x2b5
    7b76:	f000 fa63 	bl	8040 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    7b7a:	b95e      	cbnz	r6, 7b94 <k_work_queue_start+0x44>
    7b7c:	492a      	ldr	r1, [pc, #168]	; (7c28 <k_work_queue_start+0xd8>)
    7b7e:	4828      	ldr	r0, [pc, #160]	; (7c20 <k_work_queue_start+0xd0>)
    7b80:	4a28      	ldr	r2, [pc, #160]	; (7c24 <k_work_queue_start+0xd4>)
    7b82:	f240 23b6 	movw	r3, #694	; 0x2b6
    7b86:	f000 fb32 	bl	81ee <printk>
    7b8a:	4826      	ldr	r0, [pc, #152]	; (7c24 <k_work_queue_start+0xd4>)
    7b8c:	f240 21b6 	movw	r1, #694	; 0x2b6
    7b90:	f000 fa56 	bl	8040 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    7b94:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    7b98:	07db      	lsls	r3, r3, #31
    7b9a:	d50b      	bpl.n	7bb4 <k_work_queue_start+0x64>
    7b9c:	4923      	ldr	r1, [pc, #140]	; (7c2c <k_work_queue_start+0xdc>)
    7b9e:	4820      	ldr	r0, [pc, #128]	; (7c20 <k_work_queue_start+0xd0>)
    7ba0:	4a20      	ldr	r2, [pc, #128]	; (7c24 <k_work_queue_start+0xd4>)
    7ba2:	f240 23b7 	movw	r3, #695	; 0x2b7
    7ba6:	f000 fb22 	bl	81ee <printk>
    7baa:	481e      	ldr	r0, [pc, #120]	; (7c24 <k_work_queue_start+0xd4>)
    7bac:	f240 21b7 	movw	r1, #695	; 0x2b7
    7bb0:	f000 fa46 	bl	8040 <assert_post_action>
	list->head = NULL;
    7bb4:	2300      	movs	r3, #0
	list->tail = NULL;
    7bb6:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    7bba:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    7bbe:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    7bc2:	f104 0390 	add.w	r3, r4, #144	; 0x90
    7bc6:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    7bca:	b32d      	cbz	r5, 7c18 <k_work_queue_start+0xc8>
    7bcc:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    7bce:	2b00      	cmp	r3, #0
    7bd0:	f240 1101 	movw	r1, #257	; 0x101
    7bd4:	bf08      	it	eq
    7bd6:	2101      	moveq	r1, #1
	*flagp = flags;
    7bd8:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7bdc:	f04f 32ff 	mov.w	r2, #4294967295
    7be0:	f04f 33ff 	mov.w	r3, #4294967295
    7be4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7be8:	2200      	movs	r2, #0
    7bea:	e9cd 8203 	strd	r8, r2, [sp, #12]
    7bee:	e9cd 2201 	strd	r2, r2, [sp, #4]
    7bf2:	4b0f      	ldr	r3, [pc, #60]	; (7c30 <k_work_queue_start+0xe0>)
    7bf4:	9400      	str	r4, [sp, #0]
    7bf6:	463a      	mov	r2, r7
    7bf8:	4631      	mov	r1, r6
    7bfa:	4620      	mov	r0, r4
    7bfc:	f7ff f88e 	bl	6d1c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    7c00:	b125      	cbz	r5, 7c0c <k_work_queue_start+0xbc>
    7c02:	6829      	ldr	r1, [r5, #0]
    7c04:	b111      	cbz	r1, 7c0c <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    7c06:	4620      	mov	r0, r4
    7c08:	f000 fe82 	bl	8910 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    7c0c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    7c0e:	b008      	add	sp, #32
    7c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c14:	f000 be7f 	b.w	8916 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    7c18:	2101      	movs	r1, #1
    7c1a:	e7dd      	b.n	7bd8 <k_work_queue_start+0x88>
    7c1c:	0000a0f5 	.word	0x0000a0f5
    7c20:	00009117 	.word	0x00009117
    7c24:	0000a08e 	.word	0x0000a08e
    7c28:	0000a0fb 	.word	0x0000a0fb
    7c2c:	0000a101 	.word	0x0000a101
    7c30:	00007799 	.word	0x00007799

00007c34 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7c34:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7c36:	4806      	ldr	r0, [pc, #24]	; (7c50 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7c38:	4a06      	ldr	r2, [pc, #24]	; (7c54 <z_data_copy+0x20>)
    7c3a:	4907      	ldr	r1, [pc, #28]	; (7c58 <z_data_copy+0x24>)
    7c3c:	1a12      	subs	r2, r2, r0
    7c3e:	f000 fb24 	bl	828a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7c46:	4a05      	ldr	r2, [pc, #20]	; (7c5c <z_data_copy+0x28>)
    7c48:	4905      	ldr	r1, [pc, #20]	; (7c60 <z_data_copy+0x2c>)
    7c4a:	4806      	ldr	r0, [pc, #24]	; (7c64 <z_data_copy+0x30>)
    7c4c:	f000 bb1d 	b.w	828a <memcpy>
    7c50:	20000000 	.word	0x20000000
    7c54:	20000258 	.word	0x20000258
    7c58:	0000a16c 	.word	0x0000a16c
    7c5c:	00000000 	.word	0x00000000
    7c60:	0000a16c 	.word	0x0000a16c
    7c64:	20000000 	.word	0x20000000

00007c68 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7c68:	4a02      	ldr	r2, [pc, #8]	; (7c74 <boot_banner+0xc>)
    7c6a:	4903      	ldr	r1, [pc, #12]	; (7c78 <boot_banner+0x10>)
    7c6c:	4803      	ldr	r0, [pc, #12]	; (7c7c <boot_banner+0x14>)
    7c6e:	f000 babe 	b.w	81ee <printk>
    7c72:	bf00      	nop
    7c74:	00009c38 	.word	0x00009c38
    7c78:	0000a135 	.word	0x0000a135
    7c7c:	0000a144 	.word	0x0000a144

00007c80 <nrf_cc3xx_platform_init_no_rng>:
    7c80:	b510      	push	{r4, lr}
    7c82:	4c0a      	ldr	r4, [pc, #40]	; (7cac <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7c84:	6823      	ldr	r3, [r4, #0]
    7c86:	b11b      	cbz	r3, 7c90 <nrf_cc3xx_platform_init_no_rng+0x10>
    7c88:	2301      	movs	r3, #1
    7c8a:	6023      	str	r3, [r4, #0]
    7c8c:	2000      	movs	r0, #0
    7c8e:	bd10      	pop	{r4, pc}
    7c90:	f000 f8d6 	bl	7e40 <CC_LibInitNoRng>
    7c94:	2800      	cmp	r0, #0
    7c96:	d0f7      	beq.n	7c88 <nrf_cc3xx_platform_init_no_rng+0x8>
    7c98:	3801      	subs	r0, #1
    7c9a:	2806      	cmp	r0, #6
    7c9c:	d803      	bhi.n	7ca6 <nrf_cc3xx_platform_init_no_rng+0x26>
    7c9e:	4b04      	ldr	r3, [pc, #16]	; (7cb0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7ca0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7ca4:	bd10      	pop	{r4, pc}
    7ca6:	4803      	ldr	r0, [pc, #12]	; (7cb4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7ca8:	bd10      	pop	{r4, pc}
    7caa:	bf00      	nop
    7cac:	20000c48 	.word	0x20000c48
    7cb0:	00008dd4 	.word	0x00008dd4
    7cb4:	ffff8ffe 	.word	0xffff8ffe

00007cb8 <nrf_cc3xx_platform_abort>:
    7cb8:	f3bf 8f4f 	dsb	sy
    7cbc:	4905      	ldr	r1, [pc, #20]	; (7cd4 <nrf_cc3xx_platform_abort+0x1c>)
    7cbe:	4b06      	ldr	r3, [pc, #24]	; (7cd8 <nrf_cc3xx_platform_abort+0x20>)
    7cc0:	68ca      	ldr	r2, [r1, #12]
    7cc2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7cc6:	4313      	orrs	r3, r2
    7cc8:	60cb      	str	r3, [r1, #12]
    7cca:	f3bf 8f4f 	dsb	sy
    7cce:	bf00      	nop
    7cd0:	e7fd      	b.n	7cce <nrf_cc3xx_platform_abort+0x16>
    7cd2:	bf00      	nop
    7cd4:	e000ed00 	.word	0xe000ed00
    7cd8:	05fa0004 	.word	0x05fa0004

00007cdc <CC_PalAbort>:
    7cdc:	b4f0      	push	{r4, r5, r6, r7}
    7cde:	4f09      	ldr	r7, [pc, #36]	; (7d04 <CC_PalAbort+0x28>)
    7ce0:	4e09      	ldr	r6, [pc, #36]	; (7d08 <CC_PalAbort+0x2c>)
    7ce2:	4c0a      	ldr	r4, [pc, #40]	; (7d0c <CC_PalAbort+0x30>)
    7ce4:	4a0a      	ldr	r2, [pc, #40]	; (7d10 <CC_PalAbort+0x34>)
    7ce6:	4d0b      	ldr	r5, [pc, #44]	; (7d14 <CC_PalAbort+0x38>)
    7ce8:	490b      	ldr	r1, [pc, #44]	; (7d18 <CC_PalAbort+0x3c>)
    7cea:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7cee:	603b      	str	r3, [r7, #0]
    7cf0:	6852      	ldr	r2, [r2, #4]
    7cf2:	6033      	str	r3, [r6, #0]
    7cf4:	6023      	str	r3, [r4, #0]
    7cf6:	2400      	movs	r4, #0
    7cf8:	602b      	str	r3, [r5, #0]
    7cfa:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7cfe:	bcf0      	pop	{r4, r5, r6, r7}
    7d00:	4710      	bx	r2
    7d02:	bf00      	nop
    7d04:	5002b400 	.word	0x5002b400
    7d08:	5002b404 	.word	0x5002b404
    7d0c:	5002b408 	.word	0x5002b408
    7d10:	2000018c 	.word	0x2000018c
    7d14:	5002b40c 	.word	0x5002b40c
    7d18:	5002a000 	.word	0x5002a000

00007d1c <nrf_cc3xx_platform_set_abort>:
    7d1c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7d20:	4b01      	ldr	r3, [pc, #4]	; (7d28 <nrf_cc3xx_platform_set_abort+0xc>)
    7d22:	e9c3 1200 	strd	r1, r2, [r3]
    7d26:	4770      	bx	lr
    7d28:	2000018c 	.word	0x2000018c

00007d2c <mutex_free>:
    7d2c:	b510      	push	{r4, lr}
    7d2e:	4604      	mov	r4, r0
    7d30:	b130      	cbz	r0, 7d40 <mutex_free+0x14>
    7d32:	6863      	ldr	r3, [r4, #4]
    7d34:	06db      	lsls	r3, r3, #27
    7d36:	d502      	bpl.n	7d3e <mutex_free+0x12>
    7d38:	2300      	movs	r3, #0
    7d3a:	6023      	str	r3, [r4, #0]
    7d3c:	6063      	str	r3, [r4, #4]
    7d3e:	bd10      	pop	{r4, pc}
    7d40:	4b02      	ldr	r3, [pc, #8]	; (7d4c <mutex_free+0x20>)
    7d42:	4803      	ldr	r0, [pc, #12]	; (7d50 <mutex_free+0x24>)
    7d44:	685b      	ldr	r3, [r3, #4]
    7d46:	4798      	blx	r3
    7d48:	e7f3      	b.n	7d32 <mutex_free+0x6>
    7d4a:	bf00      	nop
    7d4c:	2000018c 	.word	0x2000018c
    7d50:	00008df0 	.word	0x00008df0

00007d54 <mutex_unlock>:
    7d54:	b168      	cbz	r0, 7d72 <mutex_unlock+0x1e>
    7d56:	6843      	ldr	r3, [r0, #4]
    7d58:	b13b      	cbz	r3, 7d6a <mutex_unlock+0x16>
    7d5a:	06db      	lsls	r3, r3, #27
    7d5c:	d507      	bpl.n	7d6e <mutex_unlock+0x1a>
    7d5e:	f3bf 8f5f 	dmb	sy
    7d62:	2300      	movs	r3, #0
    7d64:	6003      	str	r3, [r0, #0]
    7d66:	4618      	mov	r0, r3
    7d68:	4770      	bx	lr
    7d6a:	4803      	ldr	r0, [pc, #12]	; (7d78 <mutex_unlock+0x24>)
    7d6c:	4770      	bx	lr
    7d6e:	4803      	ldr	r0, [pc, #12]	; (7d7c <mutex_unlock+0x28>)
    7d70:	4770      	bx	lr
    7d72:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7d76:	4770      	bx	lr
    7d78:	ffff8fea 	.word	0xffff8fea
    7d7c:	ffff8fe9 	.word	0xffff8fe9

00007d80 <mutex_init>:
    7d80:	b510      	push	{r4, lr}
    7d82:	4604      	mov	r4, r0
    7d84:	b120      	cbz	r0, 7d90 <mutex_init+0x10>
    7d86:	2200      	movs	r2, #0
    7d88:	2311      	movs	r3, #17
    7d8a:	6022      	str	r2, [r4, #0]
    7d8c:	6063      	str	r3, [r4, #4]
    7d8e:	bd10      	pop	{r4, pc}
    7d90:	4801      	ldr	r0, [pc, #4]	; (7d98 <mutex_init+0x18>)
    7d92:	f7ff ffa3 	bl	7cdc <CC_PalAbort>
    7d96:	e7f6      	b.n	7d86 <mutex_init+0x6>
    7d98:	00008e18 	.word	0x00008e18

00007d9c <mutex_lock>:
    7d9c:	b1c0      	cbz	r0, 7dd0 <mutex_lock+0x34>
    7d9e:	6843      	ldr	r3, [r0, #4]
    7da0:	b1a3      	cbz	r3, 7dcc <mutex_lock+0x30>
    7da2:	06db      	lsls	r3, r3, #27
    7da4:	d510      	bpl.n	7dc8 <mutex_lock+0x2c>
    7da6:	2201      	movs	r2, #1
    7da8:	f3bf 8f5b 	dmb	ish
    7dac:	e850 3f00 	ldrex	r3, [r0]
    7db0:	e840 2100 	strex	r1, r2, [r0]
    7db4:	2900      	cmp	r1, #0
    7db6:	d1f9      	bne.n	7dac <mutex_lock+0x10>
    7db8:	f3bf 8f5b 	dmb	ish
    7dbc:	2b01      	cmp	r3, #1
    7dbe:	d0f3      	beq.n	7da8 <mutex_lock+0xc>
    7dc0:	f3bf 8f5f 	dmb	sy
    7dc4:	2000      	movs	r0, #0
    7dc6:	4770      	bx	lr
    7dc8:	4803      	ldr	r0, [pc, #12]	; (7dd8 <mutex_lock+0x3c>)
    7dca:	4770      	bx	lr
    7dcc:	4803      	ldr	r0, [pc, #12]	; (7ddc <mutex_lock+0x40>)
    7dce:	4770      	bx	lr
    7dd0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7dd4:	4770      	bx	lr
    7dd6:	bf00      	nop
    7dd8:	ffff8fe9 	.word	0xffff8fe9
    7ddc:	ffff8fea 	.word	0xffff8fea

00007de0 <nrf_cc3xx_platform_set_mutexes>:
    7de0:	b570      	push	{r4, r5, r6, lr}
    7de2:	e9d0 2300 	ldrd	r2, r3, [r0]
    7de6:	4c13      	ldr	r4, [pc, #76]	; (7e34 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7de8:	4d13      	ldr	r5, [pc, #76]	; (7e38 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7dea:	e9c4 2300 	strd	r2, r3, [r4]
    7dee:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    7df2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    7df6:	4b11      	ldr	r3, [pc, #68]	; (7e3c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7df8:	6808      	ldr	r0, [r1, #0]
    7dfa:	6018      	str	r0, [r3, #0]
    7dfc:	6848      	ldr	r0, [r1, #4]
    7dfe:	6058      	str	r0, [r3, #4]
    7e00:	6888      	ldr	r0, [r1, #8]
    7e02:	6098      	str	r0, [r3, #8]
    7e04:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7e08:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7e0c:	60de      	str	r6, [r3, #12]
    7e0e:	6118      	str	r0, [r3, #16]
    7e10:	06cb      	lsls	r3, r1, #27
    7e12:	d50d      	bpl.n	7e30 <nrf_cc3xx_platform_set_mutexes+0x50>
    7e14:	2300      	movs	r3, #0
    7e16:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7e1a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7e1e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    7e22:	4790      	blx	r2
    7e24:	6823      	ldr	r3, [r4, #0]
    7e26:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e2e:	4718      	bx	r3
    7e30:	bd70      	pop	{r4, r5, r6, pc}
    7e32:	bf00      	nop
    7e34:	2000019c 	.word	0x2000019c
    7e38:	20000c64 	.word	0x20000c64
    7e3c:	200001ac 	.word	0x200001ac

00007e40 <CC_LibInitNoRng>:
    7e40:	b510      	push	{r4, lr}
    7e42:	f000 f833 	bl	7eac <CC_HalInit>
    7e46:	b120      	cbz	r0, 7e52 <CC_LibInitNoRng+0x12>
    7e48:	2403      	movs	r4, #3
    7e4a:	f000 f867 	bl	7f1c <CC_PalTerminate>
    7e4e:	4620      	mov	r0, r4
    7e50:	bd10      	pop	{r4, pc}
    7e52:	f000 f835 	bl	7ec0 <CC_PalInit>
    7e56:	b990      	cbnz	r0, 7e7e <CC_LibInitNoRng+0x3e>
    7e58:	f000 f8b0 	bl	7fbc <CC_PalPowerSaveModeSelect>
    7e5c:	b990      	cbnz	r0, 7e84 <CC_LibInitNoRng+0x44>
    7e5e:	4b0f      	ldr	r3, [pc, #60]	; (7e9c <CC_LibInitNoRng+0x5c>)
    7e60:	681b      	ldr	r3, [r3, #0]
    7e62:	0e1b      	lsrs	r3, r3, #24
    7e64:	2bf0      	cmp	r3, #240	; 0xf0
    7e66:	d108      	bne.n	7e7a <CC_LibInitNoRng+0x3a>
    7e68:	4a0d      	ldr	r2, [pc, #52]	; (7ea0 <CC_LibInitNoRng+0x60>)
    7e6a:	4b0e      	ldr	r3, [pc, #56]	; (7ea4 <CC_LibInitNoRng+0x64>)
    7e6c:	6812      	ldr	r2, [r2, #0]
    7e6e:	429a      	cmp	r2, r3
    7e70:	d00a      	beq.n	7e88 <CC_LibInitNoRng+0x48>
    7e72:	2407      	movs	r4, #7
    7e74:	f000 f81c 	bl	7eb0 <CC_HalTerminate>
    7e78:	e7e7      	b.n	7e4a <CC_LibInitNoRng+0xa>
    7e7a:	2406      	movs	r4, #6
    7e7c:	e7fa      	b.n	7e74 <CC_LibInitNoRng+0x34>
    7e7e:	2404      	movs	r4, #4
    7e80:	4620      	mov	r0, r4
    7e82:	bd10      	pop	{r4, pc}
    7e84:	2400      	movs	r4, #0
    7e86:	e7f5      	b.n	7e74 <CC_LibInitNoRng+0x34>
    7e88:	2001      	movs	r0, #1
    7e8a:	f000 f897 	bl	7fbc <CC_PalPowerSaveModeSelect>
    7e8e:	4604      	mov	r4, r0
    7e90:	2800      	cmp	r0, #0
    7e92:	d1f7      	bne.n	7e84 <CC_LibInitNoRng+0x44>
    7e94:	4b04      	ldr	r3, [pc, #16]	; (7ea8 <CC_LibInitNoRng+0x68>)
    7e96:	6018      	str	r0, [r3, #0]
    7e98:	e7d9      	b.n	7e4e <CC_LibInitNoRng+0xe>
    7e9a:	bf00      	nop
    7e9c:	5002b928 	.word	0x5002b928
    7ea0:	5002ba24 	.word	0x5002ba24
    7ea4:	20e00000 	.word	0x20e00000
    7ea8:	5002ba0c 	.word	0x5002ba0c

00007eac <CC_HalInit>:
    7eac:	2000      	movs	r0, #0
    7eae:	4770      	bx	lr

00007eb0 <CC_HalTerminate>:
    7eb0:	2000      	movs	r0, #0
    7eb2:	4770      	bx	lr

00007eb4 <CC_HalMaskInterrupt>:
    7eb4:	4b01      	ldr	r3, [pc, #4]	; (7ebc <CC_HalMaskInterrupt+0x8>)
    7eb6:	6018      	str	r0, [r3, #0]
    7eb8:	4770      	bx	lr
    7eba:	bf00      	nop
    7ebc:	5002ba04 	.word	0x5002ba04

00007ec0 <CC_PalInit>:
    7ec0:	b510      	push	{r4, lr}
    7ec2:	4811      	ldr	r0, [pc, #68]	; (7f08 <CC_PalInit+0x48>)
    7ec4:	f000 f848 	bl	7f58 <CC_PalMutexCreate>
    7ec8:	b100      	cbz	r0, 7ecc <CC_PalInit+0xc>
    7eca:	bd10      	pop	{r4, pc}
    7ecc:	480f      	ldr	r0, [pc, #60]	; (7f0c <CC_PalInit+0x4c>)
    7ece:	f000 f843 	bl	7f58 <CC_PalMutexCreate>
    7ed2:	2800      	cmp	r0, #0
    7ed4:	d1f9      	bne.n	7eca <CC_PalInit+0xa>
    7ed6:	4c0e      	ldr	r4, [pc, #56]	; (7f10 <CC_PalInit+0x50>)
    7ed8:	4620      	mov	r0, r4
    7eda:	f000 f83d 	bl	7f58 <CC_PalMutexCreate>
    7ede:	2800      	cmp	r0, #0
    7ee0:	d1f3      	bne.n	7eca <CC_PalInit+0xa>
    7ee2:	4b0c      	ldr	r3, [pc, #48]	; (7f14 <CC_PalInit+0x54>)
    7ee4:	480c      	ldr	r0, [pc, #48]	; (7f18 <CC_PalInit+0x58>)
    7ee6:	601c      	str	r4, [r3, #0]
    7ee8:	f000 f836 	bl	7f58 <CC_PalMutexCreate>
    7eec:	4601      	mov	r1, r0
    7eee:	2800      	cmp	r0, #0
    7ef0:	d1eb      	bne.n	7eca <CC_PalInit+0xa>
    7ef2:	f000 f82d 	bl	7f50 <CC_PalDmaInit>
    7ef6:	4604      	mov	r4, r0
    7ef8:	b108      	cbz	r0, 7efe <CC_PalInit+0x3e>
    7efa:	4620      	mov	r0, r4
    7efc:	bd10      	pop	{r4, pc}
    7efe:	f000 f83f 	bl	7f80 <CC_PalPowerSaveModeInit>
    7f02:	4620      	mov	r0, r4
    7f04:	e7fa      	b.n	7efc <CC_PalInit+0x3c>
    7f06:	bf00      	nop
    7f08:	200001e4 	.word	0x200001e4
    7f0c:	200001d8 	.word	0x200001d8
    7f10:	200001e0 	.word	0x200001e0
    7f14:	200001e8 	.word	0x200001e8
    7f18:	200001dc 	.word	0x200001dc

00007f1c <CC_PalTerminate>:
    7f1c:	b508      	push	{r3, lr}
    7f1e:	4808      	ldr	r0, [pc, #32]	; (7f40 <CC_PalTerminate+0x24>)
    7f20:	f000 f824 	bl	7f6c <CC_PalMutexDestroy>
    7f24:	4807      	ldr	r0, [pc, #28]	; (7f44 <CC_PalTerminate+0x28>)
    7f26:	f000 f821 	bl	7f6c <CC_PalMutexDestroy>
    7f2a:	4807      	ldr	r0, [pc, #28]	; (7f48 <CC_PalTerminate+0x2c>)
    7f2c:	f000 f81e 	bl	7f6c <CC_PalMutexDestroy>
    7f30:	4806      	ldr	r0, [pc, #24]	; (7f4c <CC_PalTerminate+0x30>)
    7f32:	f000 f81b 	bl	7f6c <CC_PalMutexDestroy>
    7f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7f3a:	f000 b80b 	b.w	7f54 <CC_PalDmaTerminate>
    7f3e:	bf00      	nop
    7f40:	200001e4 	.word	0x200001e4
    7f44:	200001d8 	.word	0x200001d8
    7f48:	200001e0 	.word	0x200001e0
    7f4c:	200001dc 	.word	0x200001dc

00007f50 <CC_PalDmaInit>:
    7f50:	2000      	movs	r0, #0
    7f52:	4770      	bx	lr

00007f54 <CC_PalDmaTerminate>:
    7f54:	4770      	bx	lr
    7f56:	bf00      	nop

00007f58 <CC_PalMutexCreate>:
    7f58:	b508      	push	{r3, lr}
    7f5a:	4b03      	ldr	r3, [pc, #12]	; (7f68 <CC_PalMutexCreate+0x10>)
    7f5c:	6802      	ldr	r2, [r0, #0]
    7f5e:	681b      	ldr	r3, [r3, #0]
    7f60:	6810      	ldr	r0, [r2, #0]
    7f62:	4798      	blx	r3
    7f64:	2000      	movs	r0, #0
    7f66:	bd08      	pop	{r3, pc}
    7f68:	2000019c 	.word	0x2000019c

00007f6c <CC_PalMutexDestroy>:
    7f6c:	b508      	push	{r3, lr}
    7f6e:	4b03      	ldr	r3, [pc, #12]	; (7f7c <CC_PalMutexDestroy+0x10>)
    7f70:	6802      	ldr	r2, [r0, #0]
    7f72:	685b      	ldr	r3, [r3, #4]
    7f74:	6810      	ldr	r0, [r2, #0]
    7f76:	4798      	blx	r3
    7f78:	2000      	movs	r0, #0
    7f7a:	bd08      	pop	{r3, pc}
    7f7c:	2000019c 	.word	0x2000019c

00007f80 <CC_PalPowerSaveModeInit>:
    7f80:	b570      	push	{r4, r5, r6, lr}
    7f82:	4c09      	ldr	r4, [pc, #36]	; (7fa8 <CC_PalPowerSaveModeInit+0x28>)
    7f84:	4d09      	ldr	r5, [pc, #36]	; (7fac <CC_PalPowerSaveModeInit+0x2c>)
    7f86:	6920      	ldr	r0, [r4, #16]
    7f88:	68ab      	ldr	r3, [r5, #8]
    7f8a:	4798      	blx	r3
    7f8c:	b118      	cbz	r0, 7f96 <CC_PalPowerSaveModeInit+0x16>
    7f8e:	4b08      	ldr	r3, [pc, #32]	; (7fb0 <CC_PalPowerSaveModeInit+0x30>)
    7f90:	4808      	ldr	r0, [pc, #32]	; (7fb4 <CC_PalPowerSaveModeInit+0x34>)
    7f92:	685b      	ldr	r3, [r3, #4]
    7f94:	4798      	blx	r3
    7f96:	4a08      	ldr	r2, [pc, #32]	; (7fb8 <CC_PalPowerSaveModeInit+0x38>)
    7f98:	68eb      	ldr	r3, [r5, #12]
    7f9a:	6920      	ldr	r0, [r4, #16]
    7f9c:	2100      	movs	r1, #0
    7f9e:	6011      	str	r1, [r2, #0]
    7fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fa4:	4718      	bx	r3
    7fa6:	bf00      	nop
    7fa8:	200001ac 	.word	0x200001ac
    7fac:	2000019c 	.word	0x2000019c
    7fb0:	2000018c 	.word	0x2000018c
    7fb4:	00008e3c 	.word	0x00008e3c
    7fb8:	20000c5c 	.word	0x20000c5c

00007fbc <CC_PalPowerSaveModeSelect>:
    7fbc:	b570      	push	{r4, r5, r6, lr}
    7fbe:	4d1a      	ldr	r5, [pc, #104]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fc0:	4e1a      	ldr	r6, [pc, #104]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7fc2:	4604      	mov	r4, r0
    7fc4:	68b2      	ldr	r2, [r6, #8]
    7fc6:	6928      	ldr	r0, [r5, #16]
    7fc8:	4790      	blx	r2
    7fca:	b9f0      	cbnz	r0, 800a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    7fcc:	b15c      	cbz	r4, 7fe6 <CC_PalPowerSaveModeSelect+0x2a>
    7fce:	4c18      	ldr	r4, [pc, #96]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fd0:	6823      	ldr	r3, [r4, #0]
    7fd2:	b1ab      	cbz	r3, 8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    7fd4:	2b01      	cmp	r3, #1
    7fd6:	d01a      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7fd8:	3b01      	subs	r3, #1
    7fda:	6023      	str	r3, [r4, #0]
    7fdc:	6928      	ldr	r0, [r5, #16]
    7fde:	68f3      	ldr	r3, [r6, #12]
    7fe0:	4798      	blx	r3
    7fe2:	2000      	movs	r0, #0
    7fe4:	bd70      	pop	{r4, r5, r6, pc}
    7fe6:	4c12      	ldr	r4, [pc, #72]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fe8:	6821      	ldr	r1, [r4, #0]
    7fea:	b939      	cbnz	r1, 7ffc <CC_PalPowerSaveModeSelect+0x40>
    7fec:	4b11      	ldr	r3, [pc, #68]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fee:	4a12      	ldr	r2, [pc, #72]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7ff0:	2001      	movs	r0, #1
    7ff2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7ff6:	6813      	ldr	r3, [r2, #0]
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d1fc      	bne.n	7ff6 <CC_PalPowerSaveModeSelect+0x3a>
    7ffc:	3101      	adds	r1, #1
    7ffe:	6021      	str	r1, [r4, #0]
    8000:	68f3      	ldr	r3, [r6, #12]
    8002:	6928      	ldr	r0, [r5, #16]
    8004:	4798      	blx	r3
    8006:	2000      	movs	r0, #0
    8008:	bd70      	pop	{r4, r5, r6, pc}
    800a:	480c      	ldr	r0, [pc, #48]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    800c:	bd70      	pop	{r4, r5, r6, pc}
    800e:	4a0a      	ldr	r2, [pc, #40]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    8010:	6813      	ldr	r3, [r2, #0]
    8012:	2b00      	cmp	r3, #0
    8014:	d1fc      	bne.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    8016:	4a07      	ldr	r2, [pc, #28]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8018:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    801c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8020:	f7ff ff48 	bl	7eb4 <CC_HalMaskInterrupt>
    8024:	6823      	ldr	r3, [r4, #0]
    8026:	e7d7      	b.n	7fd8 <CC_PalPowerSaveModeSelect+0x1c>
    8028:	200001ac 	.word	0x200001ac
    802c:	2000019c 	.word	0x2000019c
    8030:	20000c5c 	.word	0x20000c5c
    8034:	5002a000 	.word	0x5002a000
    8038:	5002b910 	.word	0x5002b910
    803c:	ffff8fe9 	.word	0xffff8fe9

00008040 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8040:	4040      	eors	r0, r0
    8042:	f380 8811 	msr	BASEPRI, r0
    8046:	f04f 0004 	mov.w	r0, #4
    804a:	df02      	svc	2
}
    804c:	4770      	bx	lr

0000804e <encode_uint>:
{
    804e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8052:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8054:	78d3      	ldrb	r3, [r2, #3]
{
    8056:	4614      	mov	r4, r2
	switch (specifier) {
    8058:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    805a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    805e:	4606      	mov	r6, r0
    8060:	460f      	mov	r7, r1
    8062:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8064:	d02d      	beq.n	80c2 <encode_uint+0x74>
    8066:	d828      	bhi.n	80ba <encode_uint+0x6c>
		return 16;
    8068:	2b58      	cmp	r3, #88	; 0x58
    806a:	bf14      	ite	ne
    806c:	250a      	movne	r5, #10
    806e:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8070:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8074:	46aa      	mov	sl, r5
    8076:	f04f 0b00 	mov.w	fp, #0
    807a:	4652      	mov	r2, sl
    807c:	465b      	mov	r3, fp
    807e:	4630      	mov	r0, r6
    8080:	4639      	mov	r1, r7
    8082:	f7f8 f83d 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8086:	2a09      	cmp	r2, #9
    8088:	b2d3      	uxtb	r3, r2
    808a:	d81f      	bhi.n	80cc <encode_uint+0x7e>
    808c:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    808e:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8090:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8092:	bf08      	it	eq
    8094:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8096:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    809a:	d301      	bcc.n	80a0 <encode_uint+0x52>
    809c:	45c8      	cmp	r8, r9
    809e:	d812      	bhi.n	80c6 <encode_uint+0x78>
	if (conv->flag_hash) {
    80a0:	7823      	ldrb	r3, [r4, #0]
    80a2:	069b      	lsls	r3, r3, #26
    80a4:	d505      	bpl.n	80b2 <encode_uint+0x64>
		if (radix == 8) {
    80a6:	2d08      	cmp	r5, #8
    80a8:	d116      	bne.n	80d8 <encode_uint+0x8a>
			conv->altform_0 = true;
    80aa:	78a3      	ldrb	r3, [r4, #2]
    80ac:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    80b0:	70a3      	strb	r3, [r4, #2]
}
    80b2:	4640      	mov	r0, r8
    80b4:	b003      	add	sp, #12
    80b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    80ba:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    80be:	2b70      	cmp	r3, #112	; 0x70
    80c0:	e7d3      	b.n	806a <encode_uint+0x1c>
	switch (specifier) {
    80c2:	2508      	movs	r5, #8
    80c4:	e7d4      	b.n	8070 <encode_uint+0x22>
		value /= radix;
    80c6:	4606      	mov	r6, r0
    80c8:	460f      	mov	r7, r1
    80ca:	e7d6      	b.n	807a <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    80cc:	9a01      	ldr	r2, [sp, #4]
    80ce:	2a19      	cmp	r2, #25
    80d0:	bf94      	ite	ls
    80d2:	3337      	addls	r3, #55	; 0x37
    80d4:	3357      	addhi	r3, #87	; 0x57
    80d6:	e7da      	b.n	808e <encode_uint+0x40>
		} else if (radix == 16) {
    80d8:	2d10      	cmp	r5, #16
    80da:	d1ea      	bne.n	80b2 <encode_uint+0x64>
			conv->altform_0c = true;
    80dc:	78a3      	ldrb	r3, [r4, #2]
    80de:	f043 0310 	orr.w	r3, r3, #16
    80e2:	e7e5      	b.n	80b0 <encode_uint+0x62>

000080e4 <outs>:
{
    80e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e8:	4607      	mov	r7, r0
    80ea:	4688      	mov	r8, r1
    80ec:	4615      	mov	r5, r2
    80ee:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    80f0:	4614      	mov	r4, r2
    80f2:	42b4      	cmp	r4, r6
    80f4:	eba4 0005 	sub.w	r0, r4, r5
    80f8:	d302      	bcc.n	8100 <outs+0x1c>
    80fa:	b93e      	cbnz	r6, 810c <outs+0x28>
    80fc:	7823      	ldrb	r3, [r4, #0]
    80fe:	b12b      	cbz	r3, 810c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8100:	f814 0b01 	ldrb.w	r0, [r4], #1
    8104:	4641      	mov	r1, r8
    8106:	47b8      	blx	r7
		if (rc < 0) {
    8108:	2800      	cmp	r0, #0
    810a:	daf2      	bge.n	80f2 <outs+0xe>
}
    810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008110 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8110:	4770      	bx	lr

00008112 <sys_notify_validate>:
	if (notify == NULL) {
    8112:	4603      	mov	r3, r0
    8114:	b140      	cbz	r0, 8128 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8116:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8118:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    811c:	2a02      	cmp	r2, #2
    811e:	d006      	beq.n	812e <sys_notify_validate+0x1c>
    8120:	2a03      	cmp	r2, #3
    8122:	d004      	beq.n	812e <sys_notify_validate+0x1c>
    8124:	2a01      	cmp	r2, #1
    8126:	d005      	beq.n	8134 <sys_notify_validate+0x22>
		return -EINVAL;
    8128:	f06f 0015 	mvn.w	r0, #21
}
    812c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    812e:	681a      	ldr	r2, [r3, #0]
    8130:	2a00      	cmp	r2, #0
    8132:	d0f9      	beq.n	8128 <sys_notify_validate+0x16>
		notify->result = 0;
    8134:	2000      	movs	r0, #0
    8136:	6098      	str	r0, [r3, #8]
    8138:	4770      	bx	lr

0000813a <abort_function>:
{
    813a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    813c:	2000      	movs	r0, #0
    813e:	f7f9 fc2d 	bl	199c <sys_reboot>

00008142 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8142:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8144:	f013 0307 	ands.w	r3, r3, #7
    8148:	d105      	bne.n	8156 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    814a:	6803      	ldr	r3, [r0, #0]
    814c:	2b00      	cmp	r3, #0
		evt = EVT_START;
    814e:	bf0c      	ite	eq
    8150:	2000      	moveq	r0, #0
    8152:	2003      	movne	r0, #3
    8154:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8156:	2b02      	cmp	r3, #2
    8158:	d105      	bne.n	8166 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    815a:	8bc3      	ldrh	r3, [r0, #30]
    815c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    815e:	bf14      	ite	ne
    8160:	2000      	movne	r0, #0
    8162:	2004      	moveq	r0, #4
    8164:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8166:	2b01      	cmp	r3, #1
    8168:	d105      	bne.n	8176 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    816a:	6803      	ldr	r3, [r0, #0]
    816c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    816e:	bf0c      	ite	eq
    8170:	2000      	moveq	r0, #0
    8172:	2005      	movne	r0, #5
    8174:	4770      	bx	lr
	int evt = EVT_NOP;
    8176:	2000      	movs	r0, #0
}
    8178:	4770      	bx	lr

0000817a <notify_one>:
{
    817a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    817e:	460d      	mov	r5, r1
    8180:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8182:	4619      	mov	r1, r3
    8184:	1d28      	adds	r0, r5, #4
{
    8186:	4690      	mov	r8, r2
    8188:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    818a:	f7f8 fee7 	bl	f5c <sys_notify_finalize>
	if (cb) {
    818e:	4604      	mov	r4, r0
    8190:	b138      	cbz	r0, 81a2 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8192:	4633      	mov	r3, r6
    8194:	4642      	mov	r2, r8
    8196:	4629      	mov	r1, r5
    8198:	4638      	mov	r0, r7
    819a:	46a4      	mov	ip, r4
}
    819c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    81a0:	4760      	bx	ip
}
    81a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000081a6 <validate_args>:
{
    81a6:	b510      	push	{r4, lr}
    81a8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    81aa:	b140      	cbz	r0, 81be <validate_args+0x18>
    81ac:	b139      	cbz	r1, 81be <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    81ae:	1d08      	adds	r0, r1, #4
    81b0:	f7ff ffaf 	bl	8112 <sys_notify_validate>
	if ((rv == 0)
    81b4:	b928      	cbnz	r0, 81c2 <validate_args+0x1c>
	    && ((cli->notify.flags
    81b6:	68a3      	ldr	r3, [r4, #8]
    81b8:	f033 0303 	bics.w	r3, r3, #3
    81bc:	d001      	beq.n	81c2 <validate_args+0x1c>
		rv = -EINVAL;
    81be:	f06f 0015 	mvn.w	r0, #21
}
    81c2:	bd10      	pop	{r4, pc}

000081c4 <onoff_manager_init>:
{
    81c4:	b538      	push	{r3, r4, r5, lr}
    81c6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    81c8:	4605      	mov	r5, r0
    81ca:	b158      	cbz	r0, 81e4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    81cc:	b151      	cbz	r1, 81e4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    81ce:	680b      	ldr	r3, [r1, #0]
    81d0:	b143      	cbz	r3, 81e4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    81d2:	684b      	ldr	r3, [r1, #4]
    81d4:	b133      	cbz	r3, 81e4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    81d6:	2220      	movs	r2, #32
    81d8:	2100      	movs	r1, #0
    81da:	f000 f861 	bl	82a0 <memset>
    81de:	612c      	str	r4, [r5, #16]
	return 0;
    81e0:	2000      	movs	r0, #0
}
    81e2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    81e4:	f06f 0015 	mvn.w	r0, #21
    81e8:	e7fb      	b.n	81e2 <onoff_manager_init+0x1e>

000081ea <arch_printk_char_out>:
}
    81ea:	2000      	movs	r0, #0
    81ec:	4770      	bx	lr

000081ee <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    81ee:	b40f      	push	{r0, r1, r2, r3}
    81f0:	b507      	push	{r0, r1, r2, lr}
    81f2:	a904      	add	r1, sp, #16
    81f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    81f8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    81fa:	f7f9 fbc1 	bl	1980 <vprintk>
	}
	va_end(ap);
}
    81fe:	b003      	add	sp, #12
    8200:	f85d eb04 	ldr.w	lr, [sp], #4
    8204:	b004      	add	sp, #16
    8206:	4770      	bx	lr

00008208 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8208:	2200      	movs	r2, #0
    820a:	e9c0 2200 	strd	r2, r2, [r0]
    820e:	6082      	str	r2, [r0, #8]
}
    8210:	4770      	bx	lr

00008212 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8212:	4604      	mov	r4, r0
    8214:	b508      	push	{r3, lr}
    8216:	4608      	mov	r0, r1
    8218:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    821a:	461a      	mov	r2, r3
    821c:	47a0      	blx	r4
	return z_impl_z_current_get();
    821e:	f7fe fafd 	bl	681c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8222:	f7f9 fef7 	bl	2014 <z_impl_k_thread_abort>

00008226 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8226:	f7fc bd39 	b.w	4c9c <z_fatal_error>

0000822a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    822a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    822c:	6800      	ldr	r0, [r0, #0]
    822e:	f7fc bd35 	b.w	4c9c <z_fatal_error>

00008232 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8232:	2100      	movs	r1, #0
    8234:	2001      	movs	r0, #1
    8236:	f7ff bff6 	b.w	8226 <z_arm_fatal_error>

0000823a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    823a:	b508      	push	{r3, lr}
	handler();
    823c:	f7f9 fc00 	bl	1a40 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8244:	f7f9 bd0e 	b.w	1c64 <z_arm_exc_exit>

00008248 <_stdout_hook_default>:
}
    8248:	f04f 30ff 	mov.w	r0, #4294967295
    824c:	4770      	bx	lr

0000824e <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    824e:	f7fa b831 	b.w	22b4 <z_impl_zephyr_fputc>

00008252 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8252:	4603      	mov	r3, r0
	size_t n = 0;
    8254:	2000      	movs	r0, #0

	while (*s != '\0') {
    8256:	5c1a      	ldrb	r2, [r3, r0]
    8258:	b902      	cbnz	r2, 825c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    825a:	4770      	bx	lr
		n++;
    825c:	3001      	adds	r0, #1
    825e:	e7fa      	b.n	8256 <strlen+0x4>

00008260 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8260:	4603      	mov	r3, r0
	size_t n = 0;
    8262:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8264:	5c1a      	ldrb	r2, [r3, r0]
    8266:	b10a      	cbz	r2, 826c <strnlen+0xc>
    8268:	4288      	cmp	r0, r1
    826a:	d100      	bne.n	826e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    826c:	4770      	bx	lr
		n++;
    826e:	3001      	adds	r0, #1
    8270:	e7f8      	b.n	8264 <strnlen+0x4>

00008272 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8272:	1e43      	subs	r3, r0, #1
    8274:	3901      	subs	r1, #1
    8276:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    827a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    827e:	4282      	cmp	r2, r0
    8280:	d101      	bne.n	8286 <strcmp+0x14>
    8282:	2a00      	cmp	r2, #0
    8284:	d1f7      	bne.n	8276 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8286:	1a10      	subs	r0, r2, r0
    8288:	4770      	bx	lr

0000828a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    828a:	b510      	push	{r4, lr}
    828c:	1e43      	subs	r3, r0, #1
    828e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8290:	4291      	cmp	r1, r2
    8292:	d100      	bne.n	8296 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8294:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8296:	f811 4b01 	ldrb.w	r4, [r1], #1
    829a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    829e:	e7f7      	b.n	8290 <memcpy+0x6>

000082a0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    82a0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    82a2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    82a4:	4603      	mov	r3, r0
	while (n > 0) {
    82a6:	4293      	cmp	r3, r2
    82a8:	d100      	bne.n	82ac <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    82aa:	4770      	bx	lr
		*(d_byte++) = c_byte;
    82ac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    82b0:	e7f9      	b.n	82a6 <memset+0x6>

000082b2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    82b2:	b084      	sub	sp, #16
    82b4:	ab04      	add	r3, sp, #16
    82b6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    82ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82be:	2b06      	cmp	r3, #6
    82c0:	d108      	bne.n	82d4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    82c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    82c6:	2201      	movs	r2, #1
    82c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    82cc:	f3bf 8f4f 	dsb	sy
        __WFE();
    82d0:	bf20      	wfe
    while (true)
    82d2:	e7fd      	b.n	82d0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    82d4:	b004      	add	sp, #16
    82d6:	4770      	bx	lr

000082d8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    82d8:	b084      	sub	sp, #16
    82da:	ab04      	add	r3, sp, #16
    82dc:	e903 0007 	stmdb	r3, {r0, r1, r2}
    82e0:	2300      	movs	r3, #0
    82e2:	f383 8811 	msr	BASEPRI, r3
    82e6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    82ea:	b004      	add	sp, #16
    82ec:	4770      	bx	lr

000082ee <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    82ee:	f1a0 0308 	sub.w	r3, r0, #8
    82f2:	f3bf 8f5b 	dmb	ish
    82f6:	e853 2f00 	ldrex	r2, [r3]
    82fa:	1c51      	adds	r1, r2, #1
    82fc:	e843 1c00 	strex	ip, r1, [r3]
    8300:	f1bc 0f00 	cmp.w	ip, #0
    8304:	d1f7      	bne.n	82f6 <adc_context_on_timer_expired+0x8>
    8306:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    830a:	b91a      	cbnz	r2, 8314 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    830c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8310:	f7fa b82e 	b.w	2370 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    8314:	f06f 030f 	mvn.w	r3, #15
    8318:	6683      	str	r3, [r0, #104]	; 0x68
}
    831a:	4770      	bx	lr

0000831c <set_starting_state>:
{
    831c:	b510      	push	{r4, lr}
	__asm__ volatile(
    831e:	f04f 0320 	mov.w	r3, #32
    8322:	f3ef 8211 	mrs	r2, BASEPRI
    8326:	f383 8812 	msr	BASEPRI_MAX, r3
    832a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    832e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8330:	f003 0407 	and.w	r4, r3, #7
    8334:	2c01      	cmp	r4, #1
    8336:	d106      	bne.n	8346 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8338:	6001      	str	r1, [r0, #0]
	int err = 0;
    833a:	2000      	movs	r0, #0
	__asm__ volatile(
    833c:	f382 8811 	msr	BASEPRI, r2
    8340:	f3bf 8f6f 	isb	sy
}
    8344:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    834a:	428b      	cmp	r3, r1
		err = -EALREADY;
    834c:	bf14      	ite	ne
    834e:	f04f 30ff 	movne.w	r0, #4294967295
    8352:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    8356:	e7f1      	b.n	833c <set_starting_state+0x20>

00008358 <set_on_state>:
	__asm__ volatile(
    8358:	f04f 0320 	mov.w	r3, #32
    835c:	f3ef 8211 	mrs	r2, BASEPRI
    8360:	f383 8812 	msr	BASEPRI_MAX, r3
    8364:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8368:	6803      	ldr	r3, [r0, #0]
    836a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    836e:	f043 0302 	orr.w	r3, r3, #2
    8372:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8374:	f382 8811 	msr	BASEPRI, r2
    8378:	f3bf 8f6f 	isb	sy
}
    837c:	4770      	bx	lr

0000837e <onoff_started_callback>:
	return &data->mgr[type];
    837e:	6900      	ldr	r0, [r0, #16]
    8380:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8382:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8386:	2100      	movs	r1, #0
    8388:	4710      	bx	r2

0000838a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    838a:	2000      	movs	r0, #0
    838c:	f7fb bbbc 	b.w	3b08 <nrfx_clock_start>

00008390 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8390:	2000      	movs	r0, #0
    8392:	f7fb bc0d 	b.w	3bb0 <nrfx_clock_stop>

00008396 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8396:	2280      	movs	r2, #128	; 0x80
    8398:	f7fa ba50 	b.w	283c <stop>

0000839c <blocking_start_callback>:
{
    839c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    839e:	f7fe bb71 	b.w	6a84 <z_impl_k_sem_give>

000083a2 <api_start>:
{
    83a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    83a6:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    83a8:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    83aa:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    83ac:	436f      	muls	r7, r5
{
    83ae:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    83b0:	f107 0048 	add.w	r0, r7, #72	; 0x48
    83b4:	2180      	movs	r1, #128	; 0x80
    83b6:	4420      	add	r0, r4
{
    83b8:	4690      	mov	r8, r2
    83ba:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    83bc:	f7ff ffae 	bl	831c <set_starting_state>
	if (err < 0) {
    83c0:	2800      	cmp	r0, #0
    83c2:	db07      	blt.n	83d4 <api_start+0x32>
	subdata->cb = cb;
    83c4:	443c      	add	r4, r7
	subdata->user_data = user_data;
    83c6:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    83ca:	6873      	ldr	r3, [r6, #4]
    83cc:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    83d0:	4798      	blx	r3
	return 0;
    83d2:	2000      	movs	r0, #0
}
    83d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000083d8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    83d8:	6843      	ldr	r3, [r0, #4]
    83da:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    83dc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    83e0:	600b      	str	r3, [r1, #0]
}
    83e2:	2000      	movs	r0, #0
    83e4:	4770      	bx	lr

000083e6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    83e6:	6843      	ldr	r3, [r0, #4]
    83e8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    83ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    83ee:	4042      	eors	r2, r0
    83f0:	400a      	ands	r2, r1
    83f2:	4042      	eors	r2, r0
    p_reg->OUT = value;
    83f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    83f8:	2000      	movs	r0, #0
    83fa:	4770      	bx	lr

000083fc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    83fc:	6843      	ldr	r3, [r0, #4]
    83fe:	685b      	ldr	r3, [r3, #4]
}
    8400:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8402:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8406:	4770      	bx	lr

00008408 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8408:	6843      	ldr	r3, [r0, #4]
    840a:	685b      	ldr	r3, [r3, #4]
}
    840c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    840e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8412:	4770      	bx	lr

00008414 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8414:	6843      	ldr	r3, [r0, #4]
    8416:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8418:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    841c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    841e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8422:	2000      	movs	r0, #0
    8424:	4770      	bx	lr

00008426 <any_other_channel_is_active>:
{
    8426:	b530      	push	{r4, r5, lr}
    8428:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    842a:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    842c:	b2da      	uxtb	r2, r3
    842e:	4282      	cmp	r2, r0
    8430:	d007      	beq.n	8442 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    8432:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    8436:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    843a:	b112      	cbz	r2, 8442 <any_other_channel_is_active+0x1c>
    843c:	898d      	ldrh	r5, [r1, #12]
    843e:	4295      	cmp	r5, r2
    8440:	d804      	bhi.n	844c <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    8442:	3301      	adds	r3, #1
    8444:	2b04      	cmp	r3, #4
    8446:	d1f1      	bne.n	842c <any_other_channel_is_active+0x6>
	return false;
    8448:	2000      	movs	r0, #0
}
    844a:	bd30      	pop	{r4, r5, pc}
			return true;
    844c:	2001      	movs	r0, #1
    844e:	e7fc      	b.n	844a <any_other_channel_is_active+0x24>

00008450 <pwm_nrfx_pin_set>:
{
    8450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8454:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    8458:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    845a:	6904      	ldr	r4, [r0, #16]
{
    845c:	4688      	mov	r8, r1
    845e:	4616      	mov	r6, r2
    8460:	4699      	mov	r9, r3
	if (flags) {
    8462:	2d00      	cmp	r5, #0
    8464:	d140      	bne.n	84e8 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8466:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    8468:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    846c:	2bff      	cmp	r3, #255	; 0xff
    846e:	d003      	beq.n	8478 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8474:	4598      	cmp	r8, r3
    8476:	d03a      	beq.n	84ee <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8478:	3501      	adds	r5, #1
    847a:	b2ed      	uxtb	r5, r5
    847c:	2d04      	cmp	r5, #4
    847e:	d1f3      	bne.n	8468 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    8480:	f06f 0015 	mvn.w	r0, #21
    8484:	e009      	b.n	849a <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    8486:	2000      	movs	r0, #0
    8488:	e042      	b.n	8510 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    848a:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    848c:	2b08      	cmp	r3, #8
		countertop >>= 1;
    848e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8492:	d158      	bne.n	8546 <pwm_nrfx_pin_set+0xf6>
    8494:	e7f4      	b.n	8480 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    8496:	b9d0      	cbnz	r0, 84ce <pwm_nrfx_pin_set+0x7e>
	return 0;
    8498:	2000      	movs	r0, #0
}
    849a:	b003      	add	sp, #12
    849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    84a0:	454e      	cmp	r6, r9
    84a2:	d87f      	bhi.n	85a4 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    84a4:	a801      	add	r0, sp, #4
    84a6:	f8cd 8004 	str.w	r8, [sp, #4]
    84aa:	f7fa fdff 	bl	30ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    84ae:	9a01      	ldr	r2, [sp, #4]
    84b0:	2301      	movs	r3, #1
    84b2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    84b4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    84b8:	4621      	mov	r1, r4
    84ba:	4628      	mov	r0, r5
    84bc:	f7ff ffb3 	bl	8426 <any_other_channel_is_active>
    84c0:	2800      	cmp	r0, #0
    84c2:	d1e9      	bne.n	8498 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    84c4:	4601      	mov	r1, r0
    84c6:	4638      	mov	r0, r7
    84c8:	f7fc fa5c 	bl	4984 <nrfx_pwm_stop>
    84cc:	e7e4      	b.n	8498 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    84ce:	4638      	mov	r0, r7
    84d0:	f7fc fa2a 	bl	4928 <nrfx_pwm_is_stopped>
    84d4:	2800      	cmp	r0, #0
    84d6:	d0fa      	beq.n	84ce <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    84d8:	2302      	movs	r3, #2
    84da:	2201      	movs	r2, #1
    84dc:	f107 0118 	add.w	r1, r7, #24
    84e0:	4638      	mov	r0, r7
    84e2:	f7fc f9ad 	bl	4840 <nrfx_pwm_simple_playback>
    84e6:	e7d7      	b.n	8498 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    84e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    84ec:	e7d5      	b.n	849a <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    84ee:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    84f2:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    84f6:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    84fa:	b113      	cbz	r3, 8502 <pwm_nrfx_pin_set+0xb2>
    84fc:	89a2      	ldrh	r2, [r4, #12]
    84fe:	429a      	cmp	r2, r3
    8500:	d8c1      	bhi.n	8486 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    8502:	4621      	mov	r1, r4
    8504:	4628      	mov	r0, r5
    8506:	f7ff ff8e 	bl	8426 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    850a:	f080 0001 	eor.w	r0, r0, #1
    850e:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    8510:	7bb9      	ldrb	r1, [r7, #14]
    8512:	2901      	cmp	r1, #1
		period_cycles /= 2;
    8514:	bf04      	itt	eq
    8516:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    8518:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    851c:	b326      	cbz	r6, 8568 <pwm_nrfx_pin_set+0x118>
    851e:	6823      	ldr	r3, [r4, #0]
    8520:	42b3      	cmp	r3, r6
    8522:	d021      	beq.n	8568 <pwm_nrfx_pin_set+0x118>
    8524:	2300      	movs	r3, #0
				data->current[i]
    8526:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    852a:	b2da      	uxtb	r2, r3
    852c:	42aa      	cmp	r2, r5
    852e:	d005      	beq.n	853c <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    8530:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    8534:	f3c2 020e 	ubfx	r2, r2, #0, #15
    8538:	2a00      	cmp	r2, #0
    853a:	d1a1      	bne.n	8480 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    853c:	3301      	adds	r3, #1
    853e:	2b04      	cmp	r3, #4
    8540:	d1f3      	bne.n	852a <pwm_nrfx_pin_set+0xda>
    8542:	4632      	mov	r2, r6
    8544:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    8546:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    854a:	fa5f fc83 	uxtb.w	ip, r3
    854e:	d29c      	bcs.n	848a <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    8550:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    8554:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    8558:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    855a:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    855c:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    8560:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    8564:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    8568:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    856a:	454e      	cmp	r6, r9
    856c:	4633      	mov	r3, r6
    856e:	bf28      	it	cs
    8570:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    8572:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    8576:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    857a:	ea42 020b 	orr.w	r2, r2, fp
    857e:	b292      	uxth	r2, r2
	data->current[channel] = (
    8580:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    8584:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8588:	b112      	cbz	r2, 8590 <pwm_nrfx_pin_set+0x140>
    858a:	89a1      	ldrh	r1, [r4, #12]
    858c:	4291      	cmp	r1, r2
    858e:	d882      	bhi.n	8496 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8590:	197a      	adds	r2, r7, r5
    8592:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    8596:	2b00      	cmp	r3, #0
    8598:	d082      	beq.n	84a0 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    859a:	454e      	cmp	r6, r9
    859c:	d805      	bhi.n	85aa <pwm_nrfx_pin_set+0x15a>
    859e:	2a00      	cmp	r2, #0
    85a0:	db80      	blt.n	84a4 <pwm_nrfx_pin_set+0x54>
    85a2:	e002      	b.n	85aa <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    85a4:	2a00      	cmp	r2, #0
    85a6:	f6bf af7d 	bge.w	84a4 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    85aa:	a801      	add	r0, sp, #4
    85ac:	f8cd 8004 	str.w	r8, [sp, #4]
    85b0:	f7fa fd7c 	bl	30ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    85b4:	9a01      	ldr	r2, [sp, #4]
    85b6:	2301      	movs	r3, #1
    85b8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    85ba:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    85be:	e77b      	b.n	84b8 <pwm_nrfx_pin_set+0x68>

000085c0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    85c0:	6843      	ldr	r3, [r0, #4]
    85c2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    85c4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    85c8:	05d1      	lsls	r1, r2, #23
    85ca:	d518      	bpl.n	85fe <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85cc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    85d0:	b1aa      	cbz	r2, 85fe <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    85d2:	f04f 0120 	mov.w	r1, #32
    85d6:	f3ef 8211 	mrs	r2, BASEPRI
    85da:	f381 8812 	msr	BASEPRI_MAX, r1
    85de:	f3bf 8f6f 	isb	sy
    85e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    85e6:	b131      	cbz	r1, 85f6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85e8:	2100      	movs	r1, #0
    85ea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    85ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85f2:	2101      	movs	r1, #1
    85f4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    85f6:	f382 8811 	msr	BASEPRI, r2
    85fa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    85fe:	6842      	ldr	r2, [r0, #4]
    8600:	6852      	ldr	r2, [r2, #4]
    8602:	06d2      	lsls	r2, r2, #27
    8604:	d515      	bpl.n	8632 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    8606:	f04f 0120 	mov.w	r1, #32
    860a:	f3ef 8211 	mrs	r2, BASEPRI
    860e:	f381 8812 	msr	BASEPRI_MAX, r1
    8612:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8616:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    861a:	b111      	cbz	r1, 8622 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    861c:	2100      	movs	r1, #0
    861e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    8622:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8626:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    862a:	f382 8811 	msr	BASEPRI, r2
    862e:	f3bf 8f6f 	isb	sy
}
    8632:	4770      	bx	lr

00008634 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    8634:	6902      	ldr	r2, [r0, #16]
{
    8636:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    8638:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    863c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8640:	2000      	movs	r0, #0
    8642:	4770      	bx	lr

00008644 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8644:	6843      	ldr	r3, [r0, #4]
    8646:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8648:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    864c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8650:	4770      	bx	lr

00008652 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    8652:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    8654:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8656:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    865a:	b940      	cbnz	r0, 866e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    865c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    865e:	0792      	lsls	r2, r2, #30
    8660:	d406      	bmi.n	8670 <is_tx_ready+0x1e>
    8662:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    8666:	3800      	subs	r0, #0
    8668:	bf18      	it	ne
    866a:	2001      	movne	r0, #1
    866c:	4770      	bx	lr
    866e:	2001      	movs	r0, #1
}
    8670:	4770      	bx	lr

00008672 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8672:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    8674:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8676:	681b      	ldr	r3, [r3, #0]
    8678:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    867c:	b148      	cbz	r0, 8692 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    867e:	7c52      	ldrb	r2, [r2, #17]
    8680:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8682:	2000      	movs	r0, #0
    8684:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8688:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    868c:	2201      	movs	r2, #1
    868e:	601a      	str	r2, [r3, #0]
	return 0;
    8690:	4770      	bx	lr
		return -1;
    8692:	f04f 30ff 	mov.w	r0, #4294967295
}
    8696:	4770      	bx	lr

00008698 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8698:	b510      	push	{r4, lr}
    869a:	2200      	movs	r2, #0
    869c:	4604      	mov	r4, r0
    869e:	2101      	movs	r1, #1
    86a0:	2002      	movs	r0, #2
    86a2:	f7f9 fa29 	bl	1af8 <z_arm_irq_priority_set>
    86a6:	2002      	movs	r0, #2
    86a8:	f7f9 fa08 	bl	1abc <arch_irq_enable>
    86ac:	4620      	mov	r0, r4
    86ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86b2:	f7fa be93 	b.w	33dc <uarte_instance_init.isra.0>

000086b6 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    86b6:	b510      	push	{r4, lr}
    86b8:	2200      	movs	r2, #0
    86ba:	4604      	mov	r4, r0
    86bc:	2101      	movs	r1, #1
    86be:	2028      	movs	r0, #40	; 0x28
    86c0:	f7f9 fa1a 	bl	1af8 <z_arm_irq_priority_set>
    86c4:	2028      	movs	r0, #40	; 0x28
    86c6:	f7f9 f9f9 	bl	1abc <arch_irq_enable>
    86ca:	4620      	mov	r0, r4
    86cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    86d0:	f7fa be84 	b.w	33dc <uarte_instance_init.isra.0>

000086d4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    86d4:	4770      	bx	lr

000086d6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    86d6:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    86d8:	2000      	movs	r0, #0
    86da:	f7f9 fe29 	bl	2330 <sys_arch_reboot>

000086de <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    86de:	f7ff bacf 	b.w	7c80 <nrf_cc3xx_platform_init_no_rng>

000086e2 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    86e2:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    86e4:	f7f8 fc6a 	bl	fbc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    86e8:	f7f8 fd1c 	bl	1124 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    86ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    86f0:	f7ff bac6 	b.w	7c80 <nrf_cc3xx_platform_init_no_rng>

000086f4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    86f4:	4700      	bx	r0

000086f6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    86f6:	f000 b916 	b.w	8926 <z_impl_k_busy_wait>

000086fa <nrf_gpio_pin_present_check>:
    switch (port)
    86fa:	0943      	lsrs	r3, r0, #5
    86fc:	d00b      	beq.n	8716 <nrf_gpio_pin_present_check+0x1c>
    86fe:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    8700:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8704:	bf18      	it	ne
    8706:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    8708:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    870c:	fa23 f000 	lsr.w	r0, r3, r0
}
    8710:	f000 0001 	and.w	r0, r0, #1
    8714:	4770      	bx	lr
    switch (port)
    8716:	f04f 33ff 	mov.w	r3, #4294967295
    871a:	e7f5      	b.n	8708 <nrf_gpio_pin_present_check+0xe>

0000871c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    871c:	0080      	lsls	r0, r0, #2
}
    871e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    8722:	4770      	bx	lr

00008724 <nrf_gpio_reconfigure>:
{
    8724:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8728:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    872a:	a801      	add	r0, sp, #4
{
    872c:	460e      	mov	r6, r1
    872e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    8732:	4690      	mov	r8, r2
    8734:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8736:	f7fb fba9 	bl	3e8c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    873a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    873c:	f1b8 0f00 	cmp.w	r8, #0
    8740:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8744:	bf14      	ite	ne
    8746:	2302      	movne	r3, #2
    8748:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    874a:	2e00      	cmp	r6, #0
    874c:	bf18      	it	ne
    874e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8752:	2d00      	cmp	r5, #0
    8754:	bf14      	ite	ne
    8756:	210c      	movne	r1, #12
    8758:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    875a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    875c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8760:	bf14      	ite	ne
    8762:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8766:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8768:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    876a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    876e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8772:	bf14      	ite	ne
    8774:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    8778:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    877a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    877c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8780:	b106      	cbz	r6, 8784 <nrf_gpio_reconfigure+0x60>
    8782:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8784:	f1b8 0f00 	cmp.w	r8, #0
    8788:	d003      	beq.n	8792 <nrf_gpio_reconfigure+0x6e>
    878a:	f898 8000 	ldrb.w	r8, [r8]
    878e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8792:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8794:	b10d      	cbz	r5, 879a <nrf_gpio_reconfigure+0x76>
    8796:	782d      	ldrb	r5, [r5, #0]
    8798:	00ad      	lsls	r5, r5, #2
    879a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    879e:	b10c      	cbz	r4, 87a4 <nrf_gpio_reconfigure+0x80>
    87a0:	7822      	ldrb	r2, [r4, #0]
    87a2:	0214      	lsls	r4, r2, #8
    87a4:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    87a6:	b10f      	cbz	r7, 87ac <nrf_gpio_reconfigure+0x88>
    87a8:	783f      	ldrb	r7, [r7, #0]
    87aa:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    87ac:	432c      	orrs	r4, r5
    87ae:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    87b0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    87b4:	b002      	add	sp, #8
    87b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000087ba <nrf_gpio_cfg_sense_set>:
{
    87ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    87bc:	f10d 030f 	add.w	r3, sp, #15
    87c0:	9301      	str	r3, [sp, #4]
    87c2:	2300      	movs	r3, #0
{
    87c4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    87c8:	9300      	str	r3, [sp, #0]
    87ca:	461a      	mov	r2, r3
    87cc:	4619      	mov	r1, r3
    87ce:	f7ff ffa9 	bl	8724 <nrf_gpio_reconfigure>
}
    87d2:	b005      	add	sp, #20
    87d4:	f85d fb04 	ldr.w	pc, [sp], #4

000087d8 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    87d8:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    87da:	2402      	movs	r4, #2
    87dc:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    87de:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    87e0:	6809      	ldr	r1, [r1, #0]
    87e2:	b171      	cbz	r1, 8802 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    87e4:	f012 0f04 	tst.w	r2, #4
    87e8:	bf0c      	ite	eq
    87ea:	2182      	moveq	r1, #130	; 0x82
    87ec:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    87ee:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    87f0:	bf48      	it	mi
    87f2:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    87f6:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    87f8:	bf48      	it	mi
    87fa:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    87fe:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    8802:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8804:	f04f 0100 	mov.w	r1, #0
    8808:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    880c:	bf58      	it	pl
    880e:	2201      	movpl	r2, #1
    8810:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    8814:	bf56      	itet	pl
    8816:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    8818:	18c0      	addmi	r0, r0, r3
    return 0;
    881a:	4608      	movpl	r0, r1
}
    881c:	bd10      	pop	{r4, pc}

0000881e <z_device_state_init>:
}
    881e:	4770      	bx	lr

00008820 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8820:	b138      	cbz	r0, 8832 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8822:	68c3      	ldr	r3, [r0, #12]
    8824:	8818      	ldrh	r0, [r3, #0]
    8826:	f3c0 0008 	ubfx	r0, r0, #0, #9
    882a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    882e:	4258      	negs	r0, r3
    8830:	4158      	adcs	r0, r3
}
    8832:	4770      	bx	lr

00008834 <z_pm_save_idle_exit>:
{
    8834:	b508      	push	{r3, lr}
	pm_system_resume();
    8836:	f7f8 ffd1 	bl	17dc <pm_system_resume>
}
    883a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    883e:	f7ff bf49 	b.w	86d4 <sys_clock_idle_exit>

00008842 <k_mem_slab_init>:
{
    8842:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8844:	2400      	movs	r4, #0
    8846:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8848:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    884a:	ea41 0402 	orr.w	r4, r1, r2
    884e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8852:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8856:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8858:	d10c      	bne.n	8874 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    885a:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    885c:	42a3      	cmp	r3, r4
    885e:	d103      	bne.n	8868 <k_mem_slab_init+0x26>
    8860:	e9c0 0000 	strd	r0, r0, [r0]
}
    8864:	2000      	movs	r0, #0
}
    8866:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8868:	6985      	ldr	r5, [r0, #24]
    886a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    886c:	3401      	adds	r4, #1
		slab->free_list = p;
    886e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8870:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8872:	e7f3      	b.n	885c <k_mem_slab_init+0x1a>
		return -EINVAL;
    8874:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8878:	e7f5      	b.n	8866 <k_mem_slab_init+0x24>

0000887a <z_impl_k_mutex_init>:
{
    887a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    887c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    887e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8882:	e9c3 3300 	strd	r3, r3, [r3]
}
    8886:	4770      	bx	lr

00008888 <z_handle_obj_poll_events>:
{
    8888:	4603      	mov	r3, r0
	return list->head == list;
    888a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    888c:	4283      	cmp	r3, r0
    888e:	d008      	beq.n	88a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    8890:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8894:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8896:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8898:	2300      	movs	r3, #0
	node->prev = NULL;
    889a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    889e:	f7fc bdf1 	b.w	5484 <signal_poll_event>
}
    88a2:	4770      	bx	lr

000088a4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    88a4:	4603      	mov	r3, r0
    88a6:	b920      	cbnz	r0, 88b2 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    88a8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    88ac:	b90a      	cbnz	r2, 88b2 <z_reschedule_irqlock+0xe>
    88ae:	f7f9 b973 	b.w	1b98 <arch_swap>
    88b2:	f383 8811 	msr	BASEPRI, r3
    88b6:	f3bf 8f6f 	isb	sy
}
    88ba:	4770      	bx	lr

000088bc <z_reschedule_unlocked>:
	__asm__ volatile(
    88bc:	f04f 0320 	mov.w	r3, #32
    88c0:	f3ef 8011 	mrs	r0, BASEPRI
    88c4:	f383 8812 	msr	BASEPRI_MAX, r3
    88c8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    88cc:	f7ff bfea 	b.w	88a4 <z_reschedule_irqlock>

000088d0 <z_priq_dumb_best>:
{
    88d0:	4603      	mov	r3, r0
	return list->head == list;
    88d2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88d4:	4283      	cmp	r3, r0
    88d6:	d003      	beq.n	88e0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    88d8:	2800      	cmp	r0, #0
    88da:	bf38      	it	cc
    88dc:	2000      	movcc	r0, #0
    88de:	4770      	bx	lr
	struct k_thread *thread = NULL;
    88e0:	2000      	movs	r0, #0
}
    88e2:	4770      	bx	lr

000088e4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    88e4:	b15a      	cbz	r2, 88fe <z_impl_k_sem_init+0x1a>
    88e6:	428a      	cmp	r2, r1
    88e8:	d309      	bcc.n	88fe <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    88ea:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    88ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    88f2:	e9c0 0000 	strd	r0, r0, [r0]
    88f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    88fa:	2000      	movs	r0, #0
    88fc:	4770      	bx	lr
		return -EINVAL;
    88fe:	f06f 0015 	mvn.w	r0, #21
}
    8902:	4770      	bx	lr

00008904 <k_is_in_isr>:
    8904:	f3ef 8005 	mrs	r0, IPSR
}
    8908:	3800      	subs	r0, #0
    890a:	bf18      	it	ne
    890c:	2001      	movne	r0, #1
    890e:	4770      	bx	lr

00008910 <z_impl_k_thread_name_set>:
}
    8910:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8914:	4770      	bx	lr

00008916 <z_impl_k_thread_start>:
	z_sched_start(thread);
    8916:	f7fd ba33 	b.w	5d80 <z_sched_start>

0000891a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    891a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    891c:	f7fe fdd8 	bl	74d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8920:	bd08      	pop	{r3, pc}

00008922 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8922:	f7fe bdd5 	b.w	74d0 <sys_clock_tick_get>

00008926 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8926:	b108      	cbz	r0, 892c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8928:	f7f9 bd18 	b.w	235c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    892c:	4770      	bx	lr

0000892e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    892e:	b510      	push	{r4, lr}
    8930:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    8932:	f7fe fc1b 	bl	716c <z_abort_timeout>

	if (inactive) {
    8936:	b9b0      	cbnz	r0, 8966 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8938:	6a63      	ldr	r3, [r4, #36]	; 0x24
    893a:	b10b      	cbz	r3, 8940 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    893c:	4620      	mov	r0, r4
    893e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8940:	f104 0018 	add.w	r0, r4, #24
    8944:	f7fd fd38 	bl	63b8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8948:	b168      	cbz	r0, 8966 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    894a:	f7fd f9d1 	bl	5cf0 <z_ready_thread>
    894e:	f04f 0320 	mov.w	r3, #32
    8952:	f3ef 8011 	mrs	r0, BASEPRI
    8956:	f383 8812 	msr	BASEPRI_MAX, r3
    895a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8962:	f7ff bf9f 	b.w	88a4 <z_reschedule_irqlock>
    8966:	bd10      	pop	{r4, pc}

00008968 <notify_queue_locked>:
	if (queue != NULL) {
    8968:	b120      	cbz	r0, 8974 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    896a:	2200      	movs	r2, #0
    896c:	4611      	mov	r1, r2
    896e:	3088      	adds	r0, #136	; 0x88
    8970:	f7fe b81e 	b.w	69b0 <z_sched_wake>
}
    8974:	4770      	bx	lr

00008976 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8976:	4770      	bx	lr

00008978 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8978:	f7fc b85c 	b.w	4a34 <SystemInit>
